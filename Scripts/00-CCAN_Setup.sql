/* C.C.A.N. [Commesse - Contratti - Assistenza - Noleggi] Evolution (ver. 4.50 del 27/05/2022) */
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
	
/* Gestione di una tabella personalizzata Version */
IF dbo.afn_du_IsTable('xGACVersion') = 0
		EXEC asp_du_AddTable 'xGACVersion', 0, 'Tabella versioni C.C.A. Evolution'

EXEC asp_du_AddAlterColumn	'xGACVersion', 'DbVersion'			, 'int NOT NULL'				, ''	, 'Version'
EXEC asp_du_AddAlterColumn	'xGACVersion', 'DbSubVersion'		, 'int NOT NULL'				, ''	, 'Sub Version'
EXEC asp_du_DropColumn			'xGACVersion', 'DbFullVersion'
EXEC asp_du_AddAlterColumn	'xGACVersion', 'DbFullVersion'	, 'AS ((str([DbVersion],(5))+''.'')+CONVERT([char](4),[DbSubVersion],(0)))'				, ''	, 'Full Version'
EXEC asp_du_AddAlterColumn	'xGACVersion', 'UpdDate'				, 'smalldatetime NULL'	, ''	, 'Data aggiornamento versione'
EXEC asp_du_AddAlterColumn	'xGACVersion', 'NoteVersion'		, 'varchar(50) NULL'	  , ''	, 'Note interne sviluppo'
GO
Grant Select On xGACVersion To Public
GO

-- inserimento versione 0.0
Declare @cV varchar(10)
Declare @CreateTabVersion As bit
Set @CreateTabVersion = 0
Set @CreateTabVersion = dbo.afn_du_IsTable('xGACVersion')
If @CreateTabVersion = 1 
	Begin
	 Select Top 1 @cV = LTrim(DBFullVersion) From xGACVersion Order By DBVersion, DBSubVersion
	 If IsNull(@cV, '') = '' Insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (0, 0, GETDATE(), 'Ver. 0.0 : test inserimento records nella tabella')
	End
GO

-- lettura versione corrente
Declare @cV varchar(10)
Select Top 1 @cV = LTrim(DBFullVersion) From xGACVersion Order By DBVersion, DBSubVersion

If IsNull(@cV, '') = '' Begin 
	Print 'error'
	Return
End
GO

-- Versione 1.0
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	select 'Database v' + rtrim(isnull(@currentVersion, '(0)'))

	if isnull(@currentVersion, '') = '0.0' begin
		select 'Applico aggiornamenti iniziali al database: ->1.0'
		-- qui operazioni per l'aggiornamento iniziale DB (1.0)

		/* Preferenze (menu Servizio \ Impostazioni) */
		EXEC asp_du_AddAlterColumn 'Preferenza', 'xDOCommessaForza'			, 'bit Not Null', '0'	, '0 - commessa non obbligatoria, 1 - commessa obbligatoria'
		EXEC asp_du_AddAlterColumn 'Preferenza', 'xCd_ARMisuraAttivita'	, 'char(2) NULL', ''	, 'Unità di misura per le attività'
		EXEC asp_du_DropConstraint 'Preferenza', 'xFK_Preferenza_ARMisuraAttivita'
		ALTER TABLE [dbo].[Preferenza] WITH NOCHECK ADD CONSTRAINT [xFK_Preferenza_ARMisuraAttivita] FOREIGN KEY([xCd_ARMisuraAttivita])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[Preferenza] CHECK CONSTRAINT [xFK_Preferenza_ARMisuraAttivita]
		EXEC asp_du_AddAlterColumn 'Preferenza', 'xCd_ARMisuraContratto', 'char(2) NULL', ''	, 'Unità di misura per i contratti'
		EXEC asp_du_DropConstraint 'Preferenza', 'xFK_Preferenza_ARMisuraContratto'
		ALTER TABLE [dbo].[Preferenza] WITH NOCHECK ADD CONSTRAINT [xFK_Preferenza_ARMisuraContratto] FOREIGN KEY([xCd_ARMisuraContratto])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[Preferenza] CHECK CONSTRAINT [xFK_Preferenza_ARMisuraContratto]

		/* Anagrafica operatori */
		IF dbo.afn_du_IsTable('xOperatore') = 0
			EXEC asp_du_AddTable 'xOperatore', 20, 'Anagrafica operatori'
			
		EXEC asp_du_AddAlterColumn	'xOperatore', 'Descrizione'					, 'varchar(80) NOT NULL'		, '''<Descrizione Mancante>''', 'Nome completo operatore'
		EXEC asp_du_AddAlterColumn	'xOperatore', 'NoteOperatore'				, 'text NULL'								, ''													,	'Note anagrafica operatore'
		EXEC asp_du_AddAlterColumn	'xOperatore', 'RiferimentoInterno'	, 'bit NOT NULL'						, '0'													,	'0 - operatore non può essere il riferimento interno di una commessa; 1 - operatore può essere il riferimento interno di una commessa'
		EXEC asp_du_AddAlterColumn	'xOperatore', 'TecnicoInstallatore'	, 'bit NOT NULL'						, '0'													,	'0 - operatore non è un tecnico installatore; 1 - operatore è un tecnico installatore'
		EXEC asp_du_AddAlterColumn	'xOperatore', 'CostoOrario'					, 'numeric(18, 2) NOT NULL'	, '0'													,	'Costo orario ordinario operatore'
		EXEC asp_du_AddAlterColumn	'xOperatore', 'CostoStraordinario'	, 'numeric(18, 2) NOT NULL'	, '0'													,	'Costo orario straordinario operatore'
		EXEC asp_du_AddAlterColumn	'xOperatore', 'CostoFestivo'				, 'numeric(18, 2) NOT NULL'	, '0'													,	'Costo orario festivo operatore'
		EXEC asp_du_DropConstraint	'xOperatore', 'CK_xOperatore_CostoOrario'
		ALTER TABLE xOperatore WITH NOCHECK ADD CONSTRAINT [CK_xOperatore_CostoOrario] CHECK  (([CostoOrario] >= 0))
		ALTER TABLE xOperatore CHECK CONSTRAINT [CK_xOperatore_CostoOrario]
		EXEC asp_du_DropConstraint	'xOperatore', 'CK_xOperatore_CostoStraordinario'
		ALTER TABLE xOperatore WITH NOCHECK ADD CONSTRAINT [CK_xOperatore_CostoStraordinario] CHECK  (([CostoStraordinario] >= 0))
		ALTER TABLE xOperatore CHECK CONSTRAINT [CK_xOperatore_CostoStraordinario]
		EXEC asp_du_DropConstraint	'xOperatore', 'CK_xOperatore_CostoFestivo'
		ALTER TABLE xOperatore WITH NOCHECK ADD CONSTRAINT [CK_xOperatore_CostoFestivo] CHECK  (([CostoFestivo] >= 0))
		ALTER TABLE xOperatore CHECK CONSTRAINT [CK_xOperatore_CostoFestivo]

		/* Anagrafiche associate alle sottocommesse o ai preventivi */
		IF dbo.afn_du_IsTable('xDOSottoCommessaTipo') = 0
			EXEC asp_du_AddTable 'xDOSottoCommessaTipo', 3, 'Tabella tipo sottocommessa'

		EXEC asp_du_AddAlterColumn	'xDOSottoCommessaTipo', 'Descrizione'							, 'varchar(80) NOT NULL', '', 'Descrizione tipo'
		EXEC asp_du_AddAlterColumn	'xDOSottoCommessaTipo', 'NoteDOSottoCommessaTipo'	, 'text NULL'						, '', 'Note tipo sottocommessa'

		/* Gestione Economica */
		IF dbo.afn_du_IsTable('xFormula') = 0
			EXEC asp_du_AddTable 'xFormula', 3, 'Tabella delle formule economiche'

		EXEC asp_du_AddAlterColumn	'xFormula', 'Descrizione'	, 'varchar(70) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione formula'
		EXEC asp_du_AddAlterColumn	'xFormula', 'Formula'		, 'varchar(10) NOT NULL', '('''')', 'Formula'
		EXEC asp_du_AddAlterColumn	'xFormula', 'TipoFormula'	, 'tinyint NOT NULL'		, '3', '1 - applicabile solo ai materiali; 2 - applicabile solo alle attività; 3 - applicabile sulla sommatoria dei materiali + le attività'
		EXEC asp_du_DropConstraint	'xFormula', 'CK_xFormula_TipoFormula'
		ALTER TABLE [dbo].[xFormula] WITH NOCHECK ADD CONSTRAINT [CK_xFormula_TipoFormula] CHECK NOT FOR REPLICATION (([TipoFormula]=(3) OR ([TipoFormula]=(2) OR [TipoFormula]=(1))))
		ALTER TABLE [dbo].[xFormula] CHECK CONSTRAINT [CK_xFormula_TipoFormula]

		/* Parametrizzazione documenti */
		EXEC asp_du_AddAlterColumn 'DO', 'xAECAttiva'								, 'bit NOT NULL'			,	'0'	, 'Flag per attivazione analisi consuntiva'
		EXEC asp_du_AddAlterColumn 'DO', 'xAECSegno'								, 'tinyint NOT NULL'	, '0'	, 'Segno per analisi consuntiva'
		EXEC asp_du_AddAlterColumn 'DO', 'xTipoValorizzazioneCosto'	, 'tinyint NOT NULL'	,	'1'	, 'Tipologia di costo da gestire nella riga documento (se la riga non proviene da un preventivo)'
		EXEC asp_du_AddAlterColumn 'DO', 'xCd_LS_Costo'							, 'char(7) NULL'			, ''	, 'Listino di costo da gestire se tipologia = 8'
		EXEC asp_du_DropConstraint 'DO', 'xFK_DO_Cd_LS_Costo'
		ALTER TABLE DO WITH NOCHECK ADD CONSTRAINT [xFK_DO_Cd_LS_Costo] FOREIGN KEY([xCd_LS_Costo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE DO CHECK CONSTRAINT [xFK_DO_Cd_LS_Costo]
		EXEC asp_du_AddAlterColumn 'DO', 'xDispAttiva'							, 'bit NOT NULL'			,	'0'	, 'Flag per attivazione analisi avanzata disponibilità di magazzino'
		EXEC asp_du_AddAlterColumn 'DO', 'xEmitDocAttiva'						, 'bit NOT NULL'			,	'0'	, 'Flag per attivazione emissione ordini direttamente dalla gestione del documento'
		EXEC asp_du_AddAlterColumn 'DO', 'xDispTipoMG'							, 'tinyint NOT NULL'	,	'1'	, 'Tipo di magazzino da utilizzare per analisi avanzata disponibilità'
		EXEC asp_du_AddAlterColumn 'DO', 'xDispCd_MG'								, 'char(5) NULL'			,	''	, 'Codice magazzino fisso per analisi disponibilità se tipo magazzino = 3'
		EXEC asp_du_DropConstraint 'DO', 'xFK_DO_DispCd_MG'
		ALTER TABLE DO WITH NOCHECK ADD CONSTRAINT [xFK_DO_DispCd_MG] FOREIGN KEY([xDispCd_MG])
		REFERENCES [dbo].[MG] ([Cd_MG])	NOT FOR REPLICATION 
		ALTER TABLE DO CHECK CONSTRAINT [xFK_DO_DispCd_MG]

		/* Lista magazzini per analisi disponibilità */	
		IF dbo.afn_du_IsTable('xDOMGDisp') = 0
			EXEC asp_du_AddTable 'xDOMGDisp', 0, 'Tabella dei magazzini per analisi disponibilità da lista'

		EXEC asp_du_AddAlterColumn 'xDOMGDisp', 'Cd_DO', 'char(3) NOT NULL',	'', 'Codice documento intestatario della lista di magazzini'
		EXEC asp_du_DropConstraint 'xDOMGDisp', 'FK_xDOMGDisp_DO'
		ALTER TABLE [dbo].[xDOMGDisp] WITH NOCHECK ADD CONSTRAINT [FK_xDOMGDisp_DO] FOREIGN KEY([Cd_DO])
		REFERENCES [dbo].[DO] ([Cd_Do]) ON DELETE CASCADE NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xDOMGDisp] CHECK CONSTRAINT [FK_xDOMGDisp_DO]
		EXEC asp_du_AddAlterColumn 'xDOMGDisp', 'Cd_MG', 'char(5) NOT NULL',	'', 'Magazzino in lista per ogni documento'
		EXEC asp_du_DropConstraint 'xDOMGDisp', 'FK_xDOMGDisp_MG'
		ALTER TABLE [dbo].[xDOMGDisp] WITH NOCHECK ADD CONSTRAINT [FK_xDOMGDisp_MG] FOREIGN KEY([Cd_MG])
		REFERENCES [dbo].[MG] ([Cd_MG]) ON DELETE CASCADE NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xDOMGDisp] CHECK CONSTRAINT [FK_xDOMGDisp_MG]
		EXEC asp_du_DropIndex			 'xDOMGDisp', 'UK_xDOMGDisp'
		EXEC asp_du_AddAlterIndex	 'xDOMGDisp', 'UK_xDOMGDisp',	'Cd_DO ASC, Cd_MG ASC',	0, 0, 0, 1

		/* Preventivazione */
		-- Preventivo (per raggruppamento di più sottopreventivi)
		IF dbo.afn_du_IsTable('xPreventivoFamiglia') = 0
			EXEC asp_du_AddTable 'xPreventivoFamiglia', 0, 'Anagrafica preventivi (raggruppamento di più sottopreventivi)'

		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'Cd_PreventivoFamiglia', 'varchar(10) NOT NULL',	'', 'Codice preventivo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_Cd_PreventivoFamiglia' -- Obbligatoriamente qui
		EXEC asp_du_DropIndex			 'xPreventivoFamiglia', 'UK_xPreventivoFamiglia'
		EXEC asp_du_AddAlterIndex	 'xPreventivoFamiglia', 'UK_xPreventivoFamiglia', 'Cd_PreventivoFamiglia ASC',	0, 0, 0, 1
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'Descrizione'	, 'varchar(230) NOT NULL'	,	'''<Descrizione Mancante>''', 'Descrizione preventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'Cd_CF'				, 'char(7) NOT NULL'			,	''													, 'Cliente\fornitore'
		EXEC asp_du_DropConstraint 'xPreventivoFamiglia', 'FK_xPreventivoFamiglia_CF'
		ALTER TABLE [dbo].[xPreventivoFamiglia] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoFamiglia_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoFamiglia] CHECK CONSTRAINT [FK_xPreventivoFamiglia_CF]
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'InizioValidita', 'smalldatetime NOT NULL',	'''19000101''', 'Inizio validità del preventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'ImportoTotale'	, 'numeric(18, 6) NULL'		,	'0'						, 'Importo totale del preventivo'
		EXEC asp_du_DropConstraint 'xPreventivoFamiglia', 'CK_xPreventivoFamiglia_ImportoTotale'
		ALTER TABLE [dbo].[xPreventivoFamiglia] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFamiglia_ImportoTotale] CHECK (([ImportoTotale] >= 0))
		ALTER TABLE [dbo].[xPreventivoFamiglia] CHECK CONSTRAINT [CK_xPreventivoFamiglia_ImportoTotale]
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'NotePreventivoFamiglia', 'text NULL',	'', 'Note del preventivo'

		-- Sottopreventivo - testa
		IF dbo.afn_du_IsTable('xPreventivo') = 0
			BEGIN
				CREATE TABLE [dbo].[xPreventivo](
					[Id_Preventivo] [int] IDENTITY(1,1) NOT NULL,
					[Cd_Preventivo] [varchar](10) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivo_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivo_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivo_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivo_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
				CONSTRAINT [PK_xPreventivo] PRIMARY KEY NONCLUSTERED 
					(
						[Id_Preventivo] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY],
					 CONSTRAINT [UK_xPreventivo] UNIQUE NONCLUSTERED 
					(
						[Cd_Preventivo] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
					) ON [PRIMARY]
			END

		EXEC asp_du_AddAlterTableComment 'xPreventivo', 'Anagrafica sottopreventivi - testa'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_PreventivoFamiglia', 'varchar(10) NULL',	'', 'Codice preventivo'
		ALTER TABLE xPreventivo WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_Cd_PreventivoFamiglia] FOREIGN KEY([Cd_PreventivoFamiglia])
		REFERENCES [dbo].[xPreventivoFamiglia] ([Cd_PreventivoFamiglia]) NOT FOR REPLICATION 
		ALTER TABLE xPreventivo CHECK CONSTRAINT [FK_xPreventivo_Cd_PreventivoFamiglia]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'TipoPreventivo', 'tinyint NOT NULL',	'1', 'Tipo preventivo: 1 - commerciale; 2 - tecnico; 3 - esecutivo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_TipoPreventivo'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_TipoPreventivo] CHECK NOT FOR REPLICATION (([TipoPreventivo]>=(1) AND [TipoPreventivo]<=(3)))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_TipoPreventivo]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Id_Preventivo_Rif', 'int NULL', '', 'Id del preventivo di un livello inferiore dal quale è stato generato il preventivo corrente'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_Id_Preventivo_Rif'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_Id_Preventivo_Rif] FOREIGN KEY([Id_Preventivo_Rif])
		REFERENCES [dbo].[xPreventivo] ([Id_Preventivo]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_Id_Preventivo_Rif]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Descrizione'	, 'varchar(230) NOT NULL'	,	'''<Descrizione Mancante>''', 'Descrizione sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_CF'				, 'char(7) NOT NULL'			, ''													, 'Cliente\fornitore'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_CF'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_CF]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'InizioValidita', 'smalldatetime NOT NULL',	'''19000101''', 'Inizio validità del sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_LS_Ricavo'	, 'char(7) NULL'					, ''						, 'Listino per valorizzazione materiali "Al Ricavo"'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_LS_Ricavo'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_LS_Ricavo] FOREIGN KEY([Cd_LS_Ricavo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_LS_Ricavo]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'TipoValorizzazioneCosto'	, 'tinyint NOT NULL', '1', 'Tipo di valorizzazione materiali "Al Costo"'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_TipoValorizzazioneCosto'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_TipoValorizzazioneCosto] CHECK NOT FOR REPLICATION (([TipoValorizzazioneCosto]>=(1) AND [TipoValorizzazioneCosto]<=(8)))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_TipoValorizzazioneCosto]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_LS_Costo', 'char(7) NULL', '', 'Listino per valorizzazione materiali "Al Costo"'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_LS_Costo'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_LS_Costo] FOREIGN KEY([Cd_LS_Costo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_LS_Costo]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_VL', '[char](3) NULL', ''						, 'Valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_VL'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_VL] FOREIGN KEY([Cd_VL])
		REFERENCES [dbo].[VL] ([Cd_VL]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_VL]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cambio'					, 'numeric(18, 6) NOT NULL'	,	'1', 'Cambio'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Decimali'				, 'tinyint NOT NULL'				,	'2', 'Decimali per il prezzo totale'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'DecimaliPrzUn'		, 'tinyint NOT NULL'				,	'3', 'Decimali per il prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ImportoTotaleV'	, 'numeric(18, 0) NULL'			,	'0', 'Prezzo finale concordato con il cliente in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ImportoTotaleV'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_ImportoTotaleV] CHECK (([ImportoTotaleV] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ImportoTotaleV]
		EXEC asp_du_DropColumn		'xPreventivo', 'ImportoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ImportoTotaleE'	, 'AS (CONVERT([numeric](18,0), round(([ImportoTotaleV] / [Cambio]),0),(0)))', '', 'Prezzo finale concordato con il cliente in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Template'				, 'bit NOT NULL'						,	'0', '0 - il sottopreventivo non è un modello; 1 - il sottopreventivo è un modello'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_Template'			, 'varchar(10) NULL'				,	'' , 'Codice dell eventuale modello di sottopreventivo utilizzato per generare il sottopreventivo corrente'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_Template'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_Template] FOREIGN KEY([Cd_Template])
		REFERENCES [dbo].[xPreventivo] ([Cd_Preventivo])
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_Template]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Ricarica'				, 'varchar(15) NOT NULL'		,	'('''')', 'Formula del ricarico da applicare nella gestione "Al Costo" per i materiali'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ScontoRiga'			, 'varchar(1000) NOT NULL'	,	'('''')', 'Formula dello sconto di riga da applicare nella gestione "Al Ricavo" per i materiali'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FaseRicarica'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula del ricarico da applicare nella gestione "Al Costo" per le attività'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FaseCd_LS_Ricavo', 'char(7) NULL'						, ''			, 'Listino per valorizzazione attività "Al Ricavo"'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FaseLS_Ricavo'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_FaseLS_Ricavo] FOREIGN KEY([FaseCd_LS_Ricavo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_FaseLS_Ricavo]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FaseScontoRiga'	, 'varchar(1000) NOT NULL'	,	'('''')', 'Formula dello sconto di riga da applicare nella gestione "Al Ricavo" per le attività'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'NotePreventivo'	, 'text NULL'								,	''			, 'Note del sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'MaterialeCostoV'	, 'numeric(18, 0) NOT NULL' ,	'0'			, 'Costo totale dei materiali in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_MaterialeCostoV'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_MaterialeCostoV] CHECK (([MaterialeCostoV] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_MaterialeCostoV]
		EXEC asp_du_DropColumn		 'xPreventivo', 'MaterialeCostoE'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'MaterialeCostoE'	, 'AS (CONVERT([numeric](18,0), round(([MaterialeCostoV] / [Cambio]),0),(0)))', '', 'Costo totale dei materiali in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'MaterialeRicavoV', 'numeric(18, 0) NOT NULL' ,	'0'			, 'Ricavo totale sui materiali in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_MaterialeRicavoV'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_MaterialeRicavoV] CHECK (([MaterialeRicavoV] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_MaterialeRicavoV]
		EXEC asp_du_DropColumn		 'xPreventivo', 'MaterialeRicavoE'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'MaterialeRicavoE', 'AS (CONVERT([numeric](18,0), round(([MaterialeRicavoV] / [Cambio]),0),(0)))', '', 'Ricavo totale sui materiali in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FaseCostoV'			, 'numeric(18, 0) NOT NULL' ,	'0'			, 'Costo totale delle attività in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_FaseCostoV'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_FaseCostoV] CHECK (([FaseCostoV] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_FaseCostoV]
		EXEC asp_du_DropColumn		 'xPreventivo', 'FaseCostoE'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FaseCostoE'			, 'AS (CONVERT([numeric](18,0), round(([FaseCostoV] / [Cambio]),0),(0)))', '', 'Costo totale delle attività in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FaseRicavoV'			, 'numeric(18, 0) NOT NULL' ,	'0'			, 'Ricavo totale sulle attività in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_FaseRicavoV'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_FaseRicavoV] CHECK (([FaseRicavoV] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_FaseRicavoV]
		EXEC asp_du_DropColumn		 'xPreventivo', 'FaseRicavoE'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FaseRicavoE'			, 'AS (CONVERT([numeric](18,0), round(([FaseRicavoV] / [Cambio]),0),(0)))', '', 'Ricavo totale sulle attività in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'RiepilogoCostoV'	, 'numeric(18, 0) NOT NULL' ,	'0'			, 'Costo totale riepilogativo in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_RiepilogoCostoV'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_RiepilogoCostoV] CHECK (([RiepilogoCostoV] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_RiepilogoCostoV]
		EXEC asp_du_DropColumn		 'xPreventivo', 'RiepilogoCostoE'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'RiepilogoCostoE'	, 'AS (CONVERT([numeric](18,0), round(([RiepilogoCostoV] / [Cambio]),0),(0)))', '', 'Costo totale riepilogativo in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'RiepilogoRicavoV', 'numeric(18, 0) NOT NULL' ,	'0'			, 'Ricavo totale riepilogativo in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_RiepilogoRicavoV'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_RiepilogoRicavoV] CHECK (([RiepilogoRicavoV] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_RiepilogoRicavoV]
		EXEC asp_du_DropColumn		 'xPreventivo', 'RiepilogoRicavoE'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'RiepilogoRicavoE', 'AS (CONVERT([numeric](18,0), round(([RiepilogoRicavoV] / [Cambio]),0),(0)))', '', 'Ricavo totale riepilogativo in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaMC1'	, 'char(3) NULL'					,	''			, 'Cd Formula 1 Materiale-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaMC2'	, 'char(3) NULL'					,	''			, 'Cd Formula 2 Materiale-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaMC3'	, 'char(3) NULL'					,	''			, 'Cd Formula 3 Materiale-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaMC4'	, 'char(3) NULL'					,	''			, 'Cd Formula 4 Materiale-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaMC5'	, 'char(3) NULL'					,	''			, 'Cd Formula 5 Materiale-Costo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaMC1'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaMC2'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaMC3'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaMC4'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaMC5'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaMC1] FOREIGN KEY([Cd_FormulaMC1])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaMC2] FOREIGN KEY([Cd_FormulaMC2])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaMC3] FOREIGN KEY([Cd_FormulaMC3])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaMC4] FOREIGN KEY([Cd_FormulaMC4])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaMC5] FOREIGN KEY([Cd_FormulaMC5])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaMR1'	, 'char(3) NULL'					,	''			, 'Cd Formula 1 Materiale-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaMR2'	, 'char(3) NULL'					,	''			, 'Cd Formula 2 Materiale-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaMR3'	, 'char(3) NULL'					,	''			, 'Cd Formula 3 Materiale-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaMR4'	, 'char(3) NULL'					,	''			, 'Cd Formula 4 Materiale-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaMR5'	, 'char(3) NULL'					,	''			, 'Cd Formula 5 Materiale-Ricavo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaMR1'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaMR2'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaMR3'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaMR4'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaMR5'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaMR1] FOREIGN KEY([Cd_FormulaMR1])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaMR2] FOREIGN KEY([Cd_FormulaMR2])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaMR3] FOREIGN KEY([Cd_FormulaMR3])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaMR4] FOREIGN KEY([Cd_FormulaMR4])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaMR5] FOREIGN KEY([Cd_FormulaMR5])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaFC1'	, 'char(3) NULL'					,	''			, 'Cd Formula 1 Attività-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaFC2'	, 'char(3) NULL'					,	''			, 'Cd Formula 2 Attività-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaFC3'	, 'char(3) NULL'					,	''			, 'Cd Formula 3 Attività-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaFC4'	, 'char(3) NULL'					,	''			, 'Cd Formula 4 Attività-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaFC5'	, 'char(3) NULL'					,	''			, 'Cd Formula 5 Attività-Costo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaFC1'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaFC2'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaFC3'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaFC4'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaFC5'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaFC1] FOREIGN KEY([Cd_FormulaFC1])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaFC2] FOREIGN KEY([Cd_FormulaFC2])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaFC3] FOREIGN KEY([Cd_FormulaFC3])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaFC4] FOREIGN KEY([Cd_FormulaFC4])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaFC5] FOREIGN KEY([Cd_FormulaFC5])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaFR1'	, 'char(3) NULL'					,	''			, 'Cd Formula 1 Attività-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaFR2'	, 'char(3) NULL'					,	''			, 'Cd Formula 2 Attività-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaFR3'	, 'char(3) NULL'					,	''			, 'Cd Formula 3 Attività-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaFR4'	, 'char(3) NULL'					,	''			, 'Cd Formula 4 Attività-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaFR5'	, 'char(3) NULL'					,	''			, 'Cd Formula 5 Attività-Ricavo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaFR1'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaFR2'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaFR3'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaFR4'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaFR5'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaFR1] FOREIGN KEY([Cd_FormulaFR1])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaFR2] FOREIGN KEY([Cd_FormulaFR2])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaFR3] FOREIGN KEY([Cd_FormulaFR3])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaFR4] FOREIGN KEY([Cd_FormulaFR4])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaFR5] FOREIGN KEY([Cd_FormulaFR5])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaRC1'	, 'char(3) NULL'					,	''			, 'Cd Formula 1 Riepilogo-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaRC2'	, 'char(3) NULL'					,	''			, 'Cd Formula 2 Riepilogo-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaRC3'	, 'char(3) NULL'					,	''			, 'Cd Formula 3 Riepilogo-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaRC4'	, 'char(3) NULL'					,	''			, 'Cd Formula 4 Riepilogo-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaRC5'	, 'char(3) NULL'					,	''			, 'Cd Formula 5 Riepilogo-Costo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaRC1'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaRC2'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaRC3'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaRC4'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaRC5'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaRC1] FOREIGN KEY([Cd_FormulaRC1])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaRC2] FOREIGN KEY([Cd_FormulaRC2])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaRC3] FOREIGN KEY([Cd_FormulaRC3])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaRC4] FOREIGN KEY([Cd_FormulaRC4])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaRC5] FOREIGN KEY([Cd_FormulaRC5])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaRR1'	, 'char(3) NULL'					,	''			, 'Cd Formula 1 Riepilogo-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaRR2'	, 'char(3) NULL'					,	''			, 'Cd Formula 2 Riepilogo-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaRR3'	, 'char(3) NULL'					,	''			, 'Cd Formula 3 Riepilogo-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaRR4'	, 'char(3) NULL'					,	''			, 'Cd Formula 4 Riepilogo-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaRR5'	, 'char(3) NULL'					,	''			, 'Cd Formula 5 Riepilogo-Ricavo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaRR1'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaRR2'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaRR3'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaRR4'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaRR5'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaRR1] FOREIGN KEY([Cd_FormulaRR1])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaRR2] FOREIGN KEY([Cd_FormulaRR2])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaRR3] FOREIGN KEY([Cd_FormulaRR3])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaRR4] FOREIGN KEY([Cd_FormulaRR4])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaRR5] FOREIGN KEY([Cd_FormulaRR5])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula]) NOT FOR REPLICATION 
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaMC1'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 1 Materiale-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaMC2'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 2 Materiale-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaMC3'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 3 Materiale-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaMC4'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 4 Materiale-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaMC5'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 5 Materiale-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaMR1'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 1 Materiale-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaMR2'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 2 Materiale-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaMR3'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 3 Materiale-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaMR4'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 4 Materiale-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaMR5'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 5 Materiale-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaFC1'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 1 Attività-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaFC2'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 2 Attività-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaFC3'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 3 Attività-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaFC4'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 4 Attività-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaFC5'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 5 Attività-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaFR1'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 1 Attività-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaFR2'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 2 Attività-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaFR3'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 3 Attività-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaFR4'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 4 Attività-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaFR5'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 5 Attività-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaRC1'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 1 Riepilogo-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaRC2'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 2 Riepilogo-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaRC3'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 3 Riepilogo-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaRC4'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 4 Riepilogo-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaRC5'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 5 Riepilogo-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaRR1'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 1 Riepilogo-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaRR2'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 2 Riepilogo-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaRR3'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 3 Riepilogo-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaRR4'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 4 Riepilogo-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaRR5'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 5 Riepilogo-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC1V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 1 Materiale-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC2V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 2 Materiale-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC3V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 3 Materiale-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC4V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 4 Materiale-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC5V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 5 Materiale-Costo in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreMC1V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreMC2V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreMC3V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreMC4V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreMC5V'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreMC1V] CHECK  (([ValoreMC1V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreMC1V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreMC2V] CHECK  (([ValoreMC2V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreMC2V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreMC3V] CHECK  (([ValoreMC3V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreMC3V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreMC4V] CHECK  (([ValoreMC4V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreMC4V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreMC5V] CHECK  (([ValoreMC5V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreMC5V]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR1V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 1 Materiale-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR2V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 2 Materiale-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR3V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 3 Materiale-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR4V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 4 Materiale-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR5V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 5 Materiale-Ricavo in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreMR1V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreMR2V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreMR3V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreMR4V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreMR5V'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreMR1V] CHECK  (([ValoreMR1V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreMR1V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreMR2V] CHECK  (([ValoreMR2V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreMR2V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreMR3V] CHECK  (([ValoreMR3V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreMR3V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreMR4V] CHECK  (([ValoreMR4V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreMR4V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreMR5V] CHECK  (([ValoreMR5V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreMR5V]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC1V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 1 Attività-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC2V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 2 Attività-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC3V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 3 Attività-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC4V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 4 Attività-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC5V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 5 Attività-Costo in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreFC1V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreFC2V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreFC3V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreFC4V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreFC5V'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreFC1V] CHECK  (([ValoreFC1V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreFC1V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreFC2V] CHECK  (([ValoreFC2V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreFC2V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreFC3V] CHECK  (([ValoreFC3V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreFC3V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreFC4V] CHECK  (([ValoreFC4V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreFC4V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreFC5V] CHECK  (([ValoreFC5V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreFC5V]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR1V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 1 Attività-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR2V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 2 Attività-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR3V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 3 Attività-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR4V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 4 Attività-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR5V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 5 Attività-Ricavo in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreFR1V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreFR2V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreFR3V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreFR4V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreFR5V'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreFR1V] CHECK  (([ValoreFR1V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreFR1V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreFR2V] CHECK  (([ValoreFR2V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreFR2V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreFR3V] CHECK  (([ValoreFR3V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreFR3V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreFR4V] CHECK  (([ValoreFR4V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreFR4V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreFR5V] CHECK  (([ValoreFR5V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreFR5V]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC1V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 1 Riepilogo-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC2V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 2 Riepilogo-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC3V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 3 Riepilogo-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC4V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 4 Riepilogo-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC5V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 5 Riepilogo-Costo in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreRC1V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreRC2V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreRC3V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreRC4V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreRC5V'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreRC1V] CHECK  (([ValoreRC1V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreRC1V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreRC2V] CHECK  (([ValoreRC2V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreRC2V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreRC3V] CHECK  (([ValoreRC3V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreRC3V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreRC4V] CHECK  (([ValoreRC4V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreRC4V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreRC5V] CHECK  (([ValoreRC5V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreRC5V]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR1V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 1 Riepilogo-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR2V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 2 Riepilogo-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR3V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 3 Riepilogo-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR4V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 4 Riepilogo-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR5V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 5 Riepilogo-Ricavo in valuta'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreRR1V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreRR2V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreRR3V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreRR4V'
		EXEC asp_du_DropConstraint 'xPreventivo', 'CK_xPreventivo_ValoreRR5V'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreRR1V] CHECK  (([ValoreRR1V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreRR1V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreRR2V] CHECK  (([ValoreRR2V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreRR2V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreRR3V] CHECK  (([ValoreRR3V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreRR3V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreRR4V] CHECK  (([ValoreRR4V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreRR4V]
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreRR5V] CHECK  (([ValoreRR5V] >= 0))
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreRR5V]
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreMC1E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC1E', 'AS (CONVERT([numeric](18,0), round(([ValoreMC1V] / [Cambio]),0),(0)))', '', 'Valore 1 Materiale-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreMC2E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC2E', 'AS (CONVERT([numeric](18,0), round(([ValoreMC2V] / [Cambio]),0),(0)))', '', 'Valore 2 Materiale-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreMC3E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC3E', 'AS (CONVERT([numeric](18,0), round(([ValoreMC3V] / [Cambio]),0),(0)))', '', 'Valore 3 Materiale-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreMC4E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC4E', 'AS (CONVERT([numeric](18,0), round(([ValoreMC4V] / [Cambio]),0),(0)))', '', 'Valore 4 Materiale-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreMC5E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC5E', 'AS (CONVERT([numeric](18,0), round(([ValoreMC5V] / [Cambio]),0),(0)))', '', 'Valore 5 Materiale-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreMR1E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR1E', 'AS (CONVERT([numeric](18,0), round(([ValoreMR1V] / [Cambio]),0),(0)))', '', 'Valore 1 Materiale-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreMR2E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR2E', 'AS (CONVERT([numeric](18,0), round(([ValoreMR2V] / [Cambio]),0),(0)))', '', 'Valore 2 Materiale-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreMR3E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR3E', 'AS (CONVERT([numeric](18,0), round(([ValoreMR3V] / [Cambio]),0),(0)))', '', 'Valore 3 Materiale-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreMR4E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR4E', 'AS (CONVERT([numeric](18,0), round(([ValoreMR4V] / [Cambio]),0),(0)))', '', 'Valore 4 Materiale-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreMR5E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR5E', 'AS (CONVERT([numeric](18,0), round(([ValoreMR5V] / [Cambio]),0),(0)))', '', 'Valore 5 Materiale-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreFC1E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC1E', 'AS (CONVERT([numeric](18,0), round(([ValoreFC1V] / [Cambio]),0),(0)))', '', 'Valore 1 Attività-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreFC2E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC2E', 'AS (CONVERT([numeric](18,0), round(([ValoreFC2V] / [Cambio]),0),(0)))', '', 'Valore 2 Attività-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreFC3E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC3E', 'AS (CONVERT([numeric](18,0), round(([ValoreFC3V] / [Cambio]),0),(0)))', '', 'Valore 3 Attività-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreFC4E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC4E', 'AS (CONVERT([numeric](18,0), round(([ValoreFC4V] / [Cambio]),0),(0)))', '', 'Valore 4 Attività-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreFC5E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC5E', 'AS (CONVERT([numeric](18,0), round(([ValoreFC5V] / [Cambio]),0),(0)))', '', 'Valore 5 Attività-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreFR1E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR1E', 'AS (CONVERT([numeric](18,0), round(([ValoreFR1V] / [Cambio]),0),(0)))', '', 'Valore 1 Attività-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreFR2E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR2E', 'AS (CONVERT([numeric](18,0), round(([ValoreFR2V] / [Cambio]),0),(0)))', '', 'Valore 2 Attività-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreFR3E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR3E', 'AS (CONVERT([numeric](18,0), round(([ValoreFR3V] / [Cambio]),0),(0)))', '', 'Valore 3 Attività-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreFR4E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR4E', 'AS (CONVERT([numeric](18,0), round(([ValoreFR4V] / [Cambio]),0),(0)))', '', 'Valore 4 Attività-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreFR5E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR5E', 'AS (CONVERT([numeric](18,0), round(([ValoreFR5V] / [Cambio]),0),(0)))', '', 'Valore 5 Attività-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreRC1E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC1E', 'AS (CONVERT([numeric](18,0), round(([ValoreRC1V] / [Cambio]),0),(0)))', '', 'Valore 1 Riepilogo-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreRC2E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC2E', 'AS (CONVERT([numeric](18,0), round(([ValoreRC2V] / [Cambio]),0),(0)))', '', 'Valore 2 Riepilogo-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreRC3E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC3E', 'AS (CONVERT([numeric](18,0), round(([ValoreRC3V] / [Cambio]),0),(0)))', '', 'Valore 3 Riepilogo-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreRC4E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC4E', 'AS (CONVERT([numeric](18,0), round(([ValoreRC4V] / [Cambio]),0),(0)))', '', 'Valore 4 Riepilogo-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreRC5E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC5E', 'AS (CONVERT([numeric](18,0), round(([ValoreRC5V] / [Cambio]),0),(0)))', '', 'Valore 5 Riepilogo-Costo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreRR1E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR1E', 'AS (CONVERT([numeric](18,0), round(([ValoreRR1V] / [Cambio]),0),(0)))', '', 'Valore 1 Riepilogo-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreRR2E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR2E', 'AS (CONVERT([numeric](18,0), round(([ValoreRR2V] / [Cambio]),0),(0)))', '', 'Valore 2 Riepilogo-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreRR3E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR3E', 'AS (CONVERT([numeric](18,0), round(([ValoreRR3V] / [Cambio]),0),(0)))', '', 'Valore 3 Riepilogo-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreRR4E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR4E', 'AS (CONVERT([numeric](18,0), round(([ValoreRR4V] / [Cambio]),0),(0)))', '', 'Valore 4 Riepilogo-Ricavo in euro'
		EXEC asp_du_DropColumn		 'xPreventivo', 'ValoreRR5E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR5E', 'AS (CONVERT([numeric](18,0), round(([ValoreRR5V] / [Cambio]),0),(0)))', '', 'Valore 5 Riepilogo-Ricavo in euro'

		-- Sottopreventivo - Attività
		IF dbo.afn_du_IsTable('xPreventivoFase') = 0
			BEGIN
				CREATE TABLE [dbo].[xPreventivoFase](
					[Id_PreventivoFase] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoFase_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoFase_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoFase_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoFase_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
				CONSTRAINT [PK_xPreventivoFase] PRIMARY KEY NONCLUSTERED 
					(
						[Id_PreventivoFase] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
					) ON [PRIMARY]
			END

		EXEC asp_du_AddAlterTableComment 'xPreventivoFase', 'Sottopreventivi - attività'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Id_Preventivo'	, '[int] NOT NULL'							, ''			, 'Identificativo testa sottopreventivo'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'FK_xPreventivoFase_Preventivo'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoFase_Preventivo] FOREIGN KEY([Id_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Id_Preventivo]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [FK_xPreventivoFase_Preventivo]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Cd_PrAttivita'	, '[varchar](20) NOT NULL'			, ''			, 'Codice attività'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'FK_xPreventivoFase_PRAttivita'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoFase_PRAttivita] FOREIGN KEY([Cd_PrAttivita])
		REFERENCES [dbo].[PrAttivita] ([Cd_PrAttivita])
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [FK_xPreventivoFase_PRAttivita]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Descrizione'		, '[varchar](80) NOT NULL'			, '('''')', 'Descrizione attività all interno del preventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Cd_VL'					, '[char](3) NULL'							, ''			, 'Valuta'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'FK_xPreventivoFase_VL'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoFase_VL] FOREIGN KEY([Cd_VL])
		REFERENCES [dbo].[VL] ([Cd_VL]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [FK_xPreventivoFase_VL]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Cambio'					, '[numeric](18, 6) NOT NULL'	, '1'			, 'Cambio'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Decimali'				, '[tinyint] NOT NULL'				, '2'			, 'Decimali per il prezzo totale'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'DecimaliPrzUn'		, '[tinyint] NOT NULL'				, '3'			, 'Decimali per il prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Tempo'						, '[numeric](18, 8) NOT NULL'	, '0'			, 'Durata prevista per l attività. Può essere espressa in gg, hh, mm, ss'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'CK_xPreventivoFase_Tempo'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_Tempo] CHECK  (([Tempo] >= 0))
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_Tempo]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'FattoreMksI'			, '[numeric](25, 12) NOT NULL', '3600'	, 'Fattore di conversione della durata in secondi'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'CK_xPreventivoFase_FattoreMksI'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_FattoreMksI] CHECK (([FattoreMksI] = 86400 or [FattoreMksI] = 3600 or [FattoreMksI] = 60 or [FattoreMksI] = 1))
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_FattoreMksI]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Ore'							, '[numeric](18, 8) NOT NULL'	, '0'			, 'Durata prevista per l attività espressa in ore'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'CK_xPreventivoFase_Ore'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_Ore] CHECK (([Ore] >= 0))
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_Ore]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'RicavoUnitarioV'	, '[numeric](18, 6) NOT NULL'	, '0'			, 'Ricavo unitario in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'CK_xPreventivoFase_RicavoUnitarioV'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_RicavoUnitarioV] CHECK (([RicavoUnitarioV] >= 0))
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_RicavoUnitarioV]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Sconto'					, '[varchar](20) NOT NULL'		, '('''')', 'Sconto da applicare sul valore "Al Ricavo"'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'CK_xPreventivoFase_Sconto'
		ALTER TABLE [dbo].[xPreventivoFase] WITH CHECK ADD CONSTRAINT [CK_xPreventivoFase_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_Sconto]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'RicavoTotaleV'		, '[numeric](18, 6) NOT NULL'	, '0'			, 'Ricavo totale in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'CK_xPreventivoFase_RicavoTotaleV'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_RicavoTotaleV] CHECK (([RicavoTotaleV] >= 0))
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_RicavoTotaleV]
		EXEC asp_du_DropColumn		 'xPreventivoFase', 'RicavoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'RicavoTotaleE'		, 'AS (CONVERT([numeric](18,2), round(([RicavoTotaleV] / [Cambio]),2),(0)))', '', 'Ricavo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'CostoUnitarioV'	, '[numeric](18, 6) NOT NULL'	, '0'			, 'Costo unitario in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'CK_xPreventivoFase_CostoUnitarioV'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_CostoUnitarioV] CHECK (([CostoUnitarioV] >= 0))
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_CostoUnitarioV]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Ricarica'				, '[varchar](15) NOT NULL'		, '('''')', 'Ricarico da applicare sul valore "Al Costo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'CostoUnitarioRicaricatoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario ricaricato in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'CK_xPreventivoFase_CostoUnitarioRicaricatoV'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_CostoUnitarioRicaricatoV] CHECK (([CostoUnitarioRicaricatoV] >= 0))
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_CostoUnitarioRicaricatoV]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'CostoTotaleV'		, '[numeric](18, 6) NOT NULL'	, '0', 'Costo totale in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'CK_xPreventivoFase_CostoTotaleV'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_CostoTotaleV] CHECK (([CostoTotaleV] >= 0))
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_CostoTotaleV]
		EXEC asp_du_DropColumn		 'xPreventivoFase', 'CostoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'CostoTotaleE'		, 'AS (CONVERT([numeric](18,2), round(([CostoTotaleV] / [Cambio]),2),(0)))', '', 'Costo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Sequenza'				, '[int] NOT NULL'						, '0', 'Sequenza'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'CK_xPreventivoFase_Sequenza'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_Sequenza] CHECK (([Sequenza] >= 0))
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_Sequenza]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'NotePreventivoFase', 'text NULL'								, '', 'Note attività'

		-- Sottopreventivo - Materiale
		IF dbo.afn_du_IsTable('xPreventivoMateriale') = 0
			BEGIN
				CREATE TABLE [dbo].xPreventivoMateriale(
					[Id_PreventivoMateriale] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoMateriale_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoMateriale_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoMateriale_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoMateriale_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
				 CONSTRAINT [PK_xPreventivoMateriale] PRIMARY KEY NONCLUSTERED 
				(
					[Id_PreventivoMateriale] ASC
				)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
				) ON [PRIMARY]
			END

		EXEC asp_du_AddAlterTableComment 'xPreventivoMateriale', 'Sottopreventivi - materiale'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Id_Preventivo', '[int] NOT NULL', '', 'Identificativo testa sottopreventivo'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'FK_xPreventivoMateriale_Preventivo'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoMateriale_Preventivo] FOREIGN KEY([Id_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Id_Preventivo])--ON DELETE CASCADE
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [FK_xPreventivoMateriale_Preventivo]
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Cd_ARGruppo1'	, '[char](3) NULL', '', 'Famiglia articolo'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Cd_ARGruppo2'	, '[char](3) NULL', '', 'Gruppo articolo'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Cd_ARGruppo3'	, '[char](3) NULL', '', 'Sottogruppo articolo'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'FK_xPreventivoMateriale_ARGruppo1'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'FK_xPreventivoMateriale_ARGruppo2'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'FK_xPreventivoMateriale_ARGruppo3'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'CK_xPreventivoMateriale_Cd_ARGruppo123'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoMateriale_ARGruppo1] FOREIGN KEY([Cd_ARGruppo1])
		REFERENCES [dbo].[ARGruppo1] ([Cd_ARGruppo1]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoMateriale] NOCHECK CONSTRAINT [FK_xPreventivoMateriale_ARGruppo1]
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoMateriale_ARGruppo2] FOREIGN KEY([Cd_ARGruppo1], [Cd_ARGruppo2])
		REFERENCES [dbo].[ARGruppo2] ([Cd_ARGruppo1], [Cd_ARGruppo2]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoMateriale] NOCHECK CONSTRAINT [FK_xPreventivoMateriale_ARGruppo2]
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoMateriale_ARGruppo3] FOREIGN KEY([Cd_ARGruppo1], [Cd_ARGruppo2], [Cd_ARGruppo3])
		REFERENCES [dbo].[ARGruppo3] ([Cd_ARGruppo1], [Cd_ARGruppo2], [Cd_ARGruppo3]) NOT FOR REPLICATION
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [FK_xPreventivoMateriale_ARGruppo3]
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_Cd_ARGruppo123] CHECK (([Cd_ARGruppo1] IS NULL AND [Cd_ARGruppo2] IS NULL AND [Cd_ARGruppo3] IS NULL OR [Cd_ARGruppo1] IS NOT NULL AND [Cd_ARGruppo2] IS NOT NULL AND [Cd_ARGruppo3] IS NOT NULL))
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_Cd_ARGruppo123] 
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Cd_AR', '[varchar](20) NULL', '', 'Codice articolo (è un materiale o un articolo fittizio)'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'FK_xPreventivoMateriale_AR'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoMateriale_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [FK_xPreventivoMateriale_AR]
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'FK_xPreventivoMateriale_ARMisura'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoMateriale_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [FK_xPreventivoMateriale_ARMisura]
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Cd_VL', '[char](3) NULL', '', 'Valuta'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'FK_xPreventivoMateriale_VL'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoMateriale_VL] FOREIGN KEY([Cd_VL])
		REFERENCES [dbo].[VL] ([Cd_VL]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [FK_xPreventivoMateriale_VL]
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Cambio'					, '[numeric](18, 6) NOT NULL'	, '1'			, 'Cambio'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Decimali'				, '[tinyint] NOT NULL'				, '2'			, 'Decimali per il prezzo totale'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'DecimaliPrzUn'	, '[tinyint] NOT NULL'				, '3'			, 'Decimali per il prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Quantita'				, '[numeric](18, 8) NOT NULL'	, '0'			, 'Quantità'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'CK_xPreventivoMateriale_Quantita'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_Quantita] CHECK (([Quantita] >= 0))
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_Quantita]
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'FattoreToUM1'		, '[numeric](18, 8) NOT NULL'	, '1'			, 'Fattore di conversione all unità di misura principale'
		EXEC asp_du_DropColumn		 'xPreventivoMateriale', 'QuantitaUM1'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'QuantitaUM1'		, 'AS ([Quantita] * [FattoreToUM1])', '', 'Quantità convertita all unità di misura principale'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'RicavoUnitarioV', '[numeric](18, 6) NOT NULL'	, '0'			, 'Ricavo unitario in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'CK_xPreventivoMateriale_RicavoUnitarioV'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_RicavoUnitarioV] CHECK (([RicavoUnitarioV] >= 0))
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_RicavoUnitarioV]
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Sconto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare sul valore "Al Ricavo"'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'CK_xPreventivoMateriale_Sconto'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH CHECK ADD CONSTRAINT [CK_xPreventivoMateriale_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_Sconto]
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'RicavoTotaleV', '[numeric](18, 6) NOT NULL', '0', 'Ricavo totale in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'CK_xPreventivoMateriale_RicavoTotaleV'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_RicavoTotaleV] CHECK (([RicavoTotaleV] >= 0))
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_RicavoTotaleV]
		EXEC asp_du_DropColumn		 'xPreventivoMateriale', 'RicavoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'RicavoTotaleE', 'AS (CONVERT([numeric](18,2), round(([RicavoTotaleV] / [Cambio]),2),(0)))', '', 'Ricavo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'CostoUnitarioV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'CK_xPreventivoMateriale_CostoUnitarioV'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_CostoUnitarioV] CHECK (([CostoUnitarioV] >= 0))
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_CostoUnitarioV]
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Ricarica', '[varchar](15) NOT NULL', '('''')', 'Ricarico da applicare sul valore "Al Costo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'CostoUnitarioRicaricatoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario ricaricato in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'CK_xPreventivoMateriale_CostoUnitarioRicaricatoV'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_CostoUnitarioRicaricatoV] CHECK (([CostoUnitarioRicaricatoV] >= 0))
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_CostoUnitarioRicaricatoV]
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'CostoTotaleV', '[numeric](18, 6) NOT NULL', '0', 'Costo totale in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'CK_xPreventivoMateriale_CostoTotaleV'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_CostoTotaleV] CHECK (([CostoTotaleV] >= 0))
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_CostoTotaleV]
		EXEC asp_du_DropColumn		 'xPreventivoMateriale', 'CostoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'CostoTotaleE', 'AS (CONVERT([numeric](18,2), round(([CostoTotaleV] / [Cambio]),2),(0)))', '', 'Costo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Opzionale', '[bit] NOT NULL', '0', '0 - materiale non opzionale; 1 - materiale opzionale'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'NotePreventivoMateriale', 'text NULL', '', 'Note materiale'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Sequenza', '[int] NOT NULL', '0', 'Sequenza'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'CK_xPreventivoMateriale_Sequenza'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_Sequenza] CHECK (([Sequenza] >= 0))
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_Sequenza]

		-- Sottopreventivo - Legame Attività \ Materiale
		IF dbo.afn_du_IsTable('xPreventivoFaseMateriale') = 0
			BEGIN
				CREATE TABLE [dbo].xPreventivoFaseMateriale(
					[Id_PreventivoFaseMateriale] [int] IDENTITY(1,1) NOT NULL,
					[Id_PreventivoFase] [int] NOT NULL,
					[Id_PreventivoMateriale] [int] NOT NULL,
					[Sequenza] [int] NOT NULL CONSTRAINT [DF_xPreventivoFaseMateriale_Sequenza]  DEFAULT (0),
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoFaseMateriale_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoFaseMateriale_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoFaseMateriale_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoFaseMateriale_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
				 CONSTRAINT [PK_xPreventivoFaseMateriale] PRIMARY KEY NONCLUSTERED 
				(
					[Id_PreventivoFaseMateriale] ASC
				)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY],
				 CONSTRAINT [UK_xPreventivoFaseMateriale] UNIQUE NONCLUSTERED 
				(
					[Id_PreventivoFase] ASC,
					[Id_PreventivoFaseMateriale] ASC
				)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
				) ON [PRIMARY]
			END

		EXEC asp_du_AddAlterTableComment 'xPreventivoFaseMateriale', 'Sottopreventivi - legame attività \ materiale'
		EXEC asp_du_DropConstraint 'xPreventivoFaseMateriale', 'FK_xPreventivoFaseMateriale_PreventivoFase'
		EXEC asp_du_DropConstraint 'xPreventivoFaseMateriale', 'FK_xPreventivoFaseMateriale_PreventivoMateriale'
		EXEC asp_du_DropConstraint 'xPreventivoFaseMateriale', 'CK_xPreventivoFaseMateriale_Sequenza'
		ALTER TABLE [dbo].[xPreventivoFaseMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoFaseMateriale_PreventivoFase] FOREIGN KEY([Id_PreventivoFase])
		REFERENCES [dbo].[xPreventivoFase] ([Id_PreventivoFase]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xPreventivoFaseMateriale] CHECK CONSTRAINT [FK_xPreventivoFaseMateriale_PreventivoFase]
		ALTER TABLE [dbo].[xPreventivoFaseMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoFaseMateriale_PreventivoMateriale] FOREIGN KEY([Id_PreventivoMateriale])
		REFERENCES [dbo].[xPreventivoMateriale] ([Id_PreventivoMateriale]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xPreventivoFaseMateriale] CHECK CONSTRAINT [FK_xPreventivoFaseMateriale_PreventivoMateriale]
		ALTER TABLE [dbo].[xPreventivoFaseMateriale] WITH CHECK ADD CONSTRAINT [CK_xPreventivoFaseMateriale_Sequenza] CHECK  (([Sequenza] >= 0))
		ALTER TABLE [dbo].[xPreventivoFaseMateriale] CHECK CONSTRAINT [CK_xPreventivoFaseMateriale_Sequenza]

		-- Sottopreventivo - Gruppi di materiale
		IF dbo.afn_du_IsTable('xPreventivoGruppo') = 0
			BEGIN
				CREATE TABLE [dbo].xPreventivoGruppo(
					[Id_PreventivoGruppo] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoGruppo_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoGruppo_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoGruppo_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoGruppo_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
				 CONSTRAINT [PK_xPreventivoGruppo] PRIMARY KEY NONCLUSTERED 
				(
					[Id_PreventivoGruppo] ASC
				)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
				) ON [PRIMARY]
			END

		EXEC asp_du_AddAlterTableComment 'xPreventivoGruppo', 'Sottopreventivi - gruppi di materiale'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Id_Preventivo', '[int] NOT NULL', '', 'Identificativo testa sottopreventivo'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'FK_xPreventivoGruppo_Preventivo'
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoGruppo_Preventivo] FOREIGN KEY([Id_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Id_Preventivo]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [FK_xPreventivoGruppo_Preventivo]
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Cd_ARGruppo1'	, '[char](3) NULL', '', 'Famiglia articolo'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Cd_ARGruppo2'	, '[char](3) NULL', '', 'Gruppo articolo'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Cd_ARGruppo3'	, '[char](3) NULL', '', 'Sottogruppo articolo'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'FK_xPreventivoGruppo_ARGruppo1'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'FK_xPreventivoGruppo_ARGruppo2'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'FK_xPreventivoGruppo_ARGruppo3'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'CK_xPreventivoGruppo_Cd_ARGruppo123'
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoGruppo_ARGruppo1] FOREIGN KEY([Cd_ARGruppo1])
		REFERENCES [dbo].[ARGruppo1] ([Cd_ARGruppo1]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoGruppo] NOCHECK CONSTRAINT [FK_xPreventivoGruppo_ARGruppo1]
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoGruppo_ARGruppo2] FOREIGN KEY([Cd_ARGruppo1], [Cd_ARGruppo2])
		REFERENCES [dbo].[ARGruppo2] ([Cd_ARGruppo1], [Cd_ARGruppo2]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoGruppo] NOCHECK CONSTRAINT [FK_xPreventivoGruppo_ARGruppo2]
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoGruppo_ARGruppo3] FOREIGN KEY([Cd_ARGruppo1], [Cd_ARGruppo2], [Cd_ARGruppo3])
		REFERENCES [dbo].[ARGruppo3] ([Cd_ARGruppo1], [Cd_ARGruppo2], [Cd_ARGruppo3]) NOT FOR REPLICATION
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [FK_xPreventivoGruppo_ARGruppo3]
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_Cd_ARGruppo123] CHECK (([Cd_ARGruppo1] IS NULL AND [Cd_ARGruppo2] IS NULL AND [Cd_ARGruppo3] IS NULL OR [Cd_ARGruppo1] IS NOT NULL AND [Cd_ARGruppo2] IS NOT NULL AND [Cd_ARGruppo3] IS NOT NULL))
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_Cd_ARGruppo123] 
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Cd_VL', '[char](3) NULL', '', 'Valuta'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'FK_xPreventivoGruppo_VL'
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoGruppo_VL] FOREIGN KEY([Cd_VL])
		REFERENCES [dbo].[VL] ([Cd_VL]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [FK_xPreventivoGruppo_VL]
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Cambio'				, '[numeric](18, 6) NOT NULL'	, '1'			, 'Cambio'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Decimali'			, '[tinyint] NOT NULL'				, '2'			, 'Decimali per il prezzo totale'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'DecimaliPrzUn'	, '[tinyint] NOT NULL'				, '3'			, 'Decimali per il prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Quantita'			, '[numeric](18, 8) NOT NULL'	, '0'			, 'Quantità'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'CK_xPreventivoGruppo_Quantita'
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_Quantita] CHECK (([Quantita] >= 0))
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_Quantita]
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'RicavoUnitarioV', '[numeric](18, 6) NOT NULL', '0'			, 'Ricavo unitario in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'CK_xPreventivoGruppo_RicavoUnitarioV'
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_RicavoUnitarioV] CHECK (([RicavoUnitarioV] >= 0))
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_RicavoUnitarioV]
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Sconto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare sul valore "Al Ricavo"'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'CK_xPreventivoGruppo_Sconto'
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH CHECK ADD CONSTRAINT [CK_xPreventivoGruppo_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_Sconto]
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'RicavoTotaleV', '[numeric](18, 6) NOT NULL', '0', 'Ricavo totale in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'CK_xPreventivoGruppo_RicavoTotaleV'
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_RicavoTotaleV] CHECK (([RicavoTotaleV] >= 0))
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_RicavoTotaleV]
		EXEC asp_du_DropColumn		 'xPreventivoGruppo', 'RicavoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'RicavoTotaleE', 'AS (CONVERT([numeric](18,2), round(([RicavoTotaleV] / [Cambio]),2),(0)))', '', 'Ricavo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'CostoUnitarioV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'CK_xPreventivoGruppo_CostoUnitarioV'
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_CostoUnitarioV] CHECK (([CostoUnitarioV] >= 0))
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_CostoUnitarioV]
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Ricarica', '[varchar](15) NOT NULL', '('''')', 'Ricarico da applicare sul valore "Al Costo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'CostoUnitarioRicaricatoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario ricaricato in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'CK_xPreventivoGruppo_CostoUnitarioRicaricatoV'
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_CostoUnitarioRicaricatoV] CHECK (([CostoUnitarioRicaricatoV] >= 0))
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_CostoUnitarioRicaricatoV]
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'CostoTotaleV', '[numeric](18, 6) NOT NULL', '0', 'Costo totale in valuta'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'CK_xPreventivoGruppo_CostoTotaleV'
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_CostoTotaleV] CHECK (([CostoTotaleV] >= 0))
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_CostoTotaleV]
		EXEC asp_du_DropColumn		 'xPreventivoGruppo', 'CostoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'CostoTotaleE', 'AS (CONVERT([numeric](18,2), round(([CostoTotaleV] / [Cambio]),2),(0)))', '', 'Costo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Opzionale', '[bit] NOT NULL', '0', '0 - gruppo di materiale non opzionale; 1 - gruppo di materiale opzionale'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'NotePreventivoGruppo', '[text] NULL', '', 'Note gruppi di materiale'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Sequenza', '[int] NOT NULL', '0', 'Sequenza'
		EXEC asp_du_DropConstraint 'xPreventivoGruppo', 'CK_xPreventivoGruppo_Sequenza'
		ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_Sequenza] CHECK (([Sequenza] >= 0))
		ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_Sequenza]

		/* Anagrafica sottocommesse */
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xCd_CFDest'		, 'char(3) NULL'		, ''	, 'Destinazione diversa per la sottocommessa'
		EXEC asp_du_DropConstraint 'DOSottoCommessa', 'xFK_DOSottoCommessa_Cd_CFDest'
		ALTER TABLE DOSottoCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOSottoCommessa_Cd_CFDest] FOREIGN KEY([Cd_CF], [xCd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE DOSottoCommessa CHECK CONSTRAINT [xFK_DOSottoCommessa_Cd_CFDest]
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xCd_Operatore'	, 'varchar(20) NULL', ''	, 'Riferimento interno per la sottocommessa (responsabile sottocommessa)'
		EXEC asp_du_DropConstraint 'DOSottoCommessa', 'xFK_DOSottoCommessa_Cd_Operatore'
		ALTER TABLE DOSottoCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOSottoCommessa_Cd_Operatore] FOREIGN KEY([xCd_Operatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore]) NOT FOR REPLICATION 
		ALTER TABLE DOSottoCommessa CHECK CONSTRAINT [xFK_DOSottoCommessa_Cd_Operatore]
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xCd_Agente'		, 'char(3) NULL'		, ''	, 'Agente di riferimento per la sottocommessa'
		EXEC asp_du_DropConstraint 'DOSottoCommessa', 'xFK_DOSottoCommessa_Cd_Agente'
		ALTER TABLE DOSottoCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOSottoCommessa_Cd_Agente] FOREIGN KEY([xCd_Agente])
		REFERENCES [dbo].[Agente] ([Cd_Agente]) NOT FOR REPLICATION 
		ALTER TABLE DOSottoCommessa CHECK CONSTRAINT [xFK_DOSottoCommessa_Cd_Agente]
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xProvvigione'	, 'varchar(10) NULL', ''	, 'Provvigione in % da liquidare all agente'
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xCd_Preventivo', 'varchar(10) NULL', ''	, 'Codice del sottopreventivo esecutivo per l analisi preventivo-consuntivo'
		EXEC asp_du_DropConstraint 'DOSottoCommessa', 'xFK_DOSottoCommessa_Cd_Preventivo'
		ALTER TABLE DOSottoCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOSottoCommessa_Cd_Preventivo] FOREIGN KEY([xCd_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Cd_Preventivo]) NOT FOR REPLICATION 
		ALTER TABLE DOSottoCommessa CHECK CONSTRAINT [xFK_DOSottoCommessa_Cd_Preventivo]
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xCd_DOSottoCommessaTipo', 'char(3) NULL', '('''')', 'Tipo sottocommessa'
		EXEC asp_du_DropConstraint 'DOSottoCommessa', 'xFK_DOSottoCommessa_Cd_DOSottoCommessaTipo'
		ALTER TABLE DOSottoCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOSottoCommessa_Cd_DOSottoCommessaTipo] FOREIGN KEY([xCd_DOSottoCommessaTipo])
		REFERENCES [dbo].[xDOSottoCommessaTipo] ([Cd_xDOSottoCommessaTipo]) NOT FOR REPLICATION 
		ALTER TABLE DOSottoCommessa CHECK CONSTRAINT [xFK_DOSottoCommessa_Cd_DOSottoCommessaTipo]
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xCd_CFZona', 'char(3) NULL', '', 'Codice zona'
		EXEC asp_du_DropConstraint 'DOSottoCommessa', 'xFK_DOSottoCommessa_Cd_CFZona'
		ALTER TABLE DOSottoCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOSottoCommessa_Cd_CFZona] FOREIGN KEY([xCd_CFZona])
		REFERENCES [dbo].[CFZona] ([Cd_CFZona]) NOT FOR REPLICATION 
		ALTER TABLE DOSottoCommessa CHECK CONSTRAINT [xFK_DOSottoCommessa_Cd_CFZona]
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xReparto'					, 'char(50) NULL'	, ''	, 'Reparto'
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xRifCliente'				, 'char(50) NULL'	, ''	, 'Riferimento del cliente'
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xGestisciTicket'		, 'bit NULL'			, '1'	, '0 - si può gestire solo un ticket fittizio creato in automatico; 1 - si possono gestire diversi ticket creati dall utente'
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xId_DOTes_Chiusura', '[int] NULL'		, ''	, 'Id testa della fattura che ha chiuso la sottocommessa'

		/* Gestione documenti */
		-- Dati di testa\piede
		EXEC asp_du_AddAlterColumn 'DOTes', 'xId_Preventivo_Rif', '[int] NULL', '', 'Identificativo del preventivo dal quale è stato generato l ordine'
		EXEC asp_du_DropConstraint 'DOTes', 'xFK_DOTes_Id_Preventivo_Rif'
		ALTER TABLE DOTes WITH NOCHECK ADD CONSTRAINT [xFK_DOTes_Id_Preventivo_Rif] FOREIGN KEY([xId_Preventivo_Rif])
		REFERENCES [dbo].[xPreventivo] ([Id_Preventivo]) NOT FOR REPLICATION 
		ALTER TABLE DOTes CHECK CONSTRAINT [xFK_DOTes_Id_Preventivo_Rif]								
		EXEC asp_du_AddAlterColumn 'DOTes', 'xTipoValorizzazioneCosto', '[tinyint] NULL', '', 'Tipologia di costo da gestire nella riga documento per i soli materiali (se non proviene da un preventivo è replicata quella della parametrizzazione del documento)'
		EXEC asp_du_AddAlterColumn 'DOTes', 'xCd_LS_Costo'						, '[char](7) NULL', '', 'Listino di costo da gestire per i materiali se tipologia = 8'
		EXEC asp_du_DropConstraint 'DOTes', 'xFK_DOTes_Cd_LS_Costo'
		ALTER TABLE DOTes WITH NOCHECK ADD CONSTRAINT [xFK_DOTes_Cd_LS_Costo] FOREIGN KEY([xCd_LS_Costo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE DOTes CHECK CONSTRAINT [xFK_DOTes_Cd_LS_Costo]
		EXEC asp_du_AddAlterColumn 'DOTes', 'xImportoTotaleV'					, 'numeric(18, 0) NULL'	, '0', 'Prezzo di vendita concordato con il cliente'
		EXEC asp_du_AddAlterColumn 'DOTes', 'xCommessaChiudi'					, 'bit NULL'						, '0', '0 - qualsiasi documento; 1 - fattura finale per una o più sottocommesse'
		
		-- Dati di riga
		EXEC asp_du_AddAlterColumn 'DORig', 'xCostoUnitarioV'	, '[numeric](18, 6) NOT NULL'	, '0', 'Costo unitario in valuta'
		EXEC asp_du_AddAlterColumn 'DORig', 'xCostoTotaleV'		, '[numeric](18, 6) NOT NULL'	, '0', 'Costo totale in valuta'
		EXEC asp_du_AddAlterColumn 'DORig', 'xDispSemaforo'		, '[tinyint] NOT NULL '				, '0', 'Semaforo per analisi disponibilità di magazzino'

		/* Gestione Impianti */
		-- Anagrafica impianti
		IF dbo.afn_du_IsTable('xImpianto') = 0
			EXEC asp_du_AddTable 'xImpianto', 10, 'Anagrafica impianti'

		EXEC asp_du_AddAlterColumn 'xImpianto', 'Descrizione'	, 'varchar(230) NOT NULL'		, '''<Descrizione Mancante>''', 'Descrizione impianto'
		EXEC asp_du_AddAlterColumn 'xImpianto', 'DataCollaudo', '[smalldatetime] NOT NULL', '''19000101'''							, 'Data di collaudo dell impianto'
		EXEC asp_du_AddAlterColumn 'xImpianto', 'Cd_CF'				, '[char](7) NOT NULL'			, ''													, 'Codice cliente proprietario dell impianto'
		EXEC asp_du_DropConstraint 'xImpianto', 'FK_xImpianto_CF'
		ALTER TABLE [dbo].[xImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xImpianto_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xImpianto] CHECK CONSTRAINT [FK_xImpianto_CF]
		EXEC asp_du_AddAlterColumn 'xImpianto', 'Cd_CFDest'		, '[char](3) NULL'					, ''													, 'Destinazione diversa presso la quale è installato l impianto'
		EXEC asp_du_DropConstraint 'xImpianto', 'FK_xImpianto_CFDest'
		ALTER TABLE [dbo].[xImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xImpianto_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xImpianto] CHECK CONSTRAINT [FK_xImpianto_CFDest]
		EXEC asp_du_AddAlterColumn 'xImpianto', 'NoteImpianto', '[text] NULL'							, ''													, 'Note impianto'
		
		-- Matricole impianto
		IF dbo.afn_du_IsTable('xImpiantoMatricola') = 0
			EXEC asp_du_AddTable 'xImpiantoMatricola', 0, 'Matricole impianto'

		EXEC asp_du_AddAlterColumn 'xImpiantoMatricola', 'Id_xImpianto', '[int] NOT NULL', '', 'Identificativo impianto di appartenenza della matricola'
		EXEC asp_du_DropConstraint 'xImpiantoMatricola', 'FK_xImpiantoMatricola_Impianto'
		ALTER TABLE [dbo].[xImpiantoMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xImpiantoMatricola_Impianto] FOREIGN KEY([Id_xImpianto])
		REFERENCES [dbo].[xImpianto] ([Id_xImpianto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xImpiantoMatricola] CHECK CONSTRAINT [FK_xImpiantoMatricola_Impianto]
		EXEC asp_du_AddAlterColumn 'xImpiantoMatricola', 'Cd_AR', '[varchar](20) NOT NULL', '', 'Codice articolo di magazzino'
		EXEC asp_du_DropConstraint 'xImpiantoMatricola', 'FK_xImpiantoMatricola_AR'
		ALTER TABLE [dbo].[xImpiantoMatricola] WITH CHECK ADD CONSTRAINT [FK_xImpiantoMatricola_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xImpiantoMatricola] CHECK CONSTRAINT [FK_xImpiantoMatricola_AR]
		EXEC asp_du_AddAlterColumn 'xImpiantoMatricola', 'NumeroMatricola', '[varchar] (40) COLLATE Latin1_General_CI_AS NOT NULL', '', 'Matricola'
		EXEC asp_du_DropIndex			 'xImpiantoMatricola', 'UK_xImpiantoMatricola'
		EXEC asp_du_AddAlterIndex	 'xImpiantoMatricola', 'UK_xImpiantoMatricola',	'[Id_xImpianto] ASC, [Cd_AR] ASC, [NumeroMatricola] ASC',	0, 0, 0, 1
		EXEC asp_du_AddAlterColumn 'xImpiantoMatricola', 'Riga'				, '[smallint] NOT NULL'																, '0'	, 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xImpiantoMatricola', 'Riferimento', '[varchar] (100) COLLATE Latin1_General_CI_AS NULL'	, ''	, 'Riferimento documento di acquisizione della matricola'
		EXEC asp_du_AddAlterColumn 'xImpiantoMatricola', 'Id_DOTes'		, '[int] NULL'																				, ''	, 'Identificativo testa documento di aquisizione della matricola'
		EXEC asp_du_DropConstraint 'xImpiantoMatricola', 'FK_xImpiantoMatricola_DOTes'
		ALTER TABLE [dbo].[xImpiantoMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xImpiantoMatricola_DOTes] FOREIGN KEY([Id_DOTes])
		REFERENCES [dbo].[DOTes] ([Id_DoTes]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xImpiantoMatricola] CHECK CONSTRAINT [FK_xImpiantoMatricola_DOTes]

		/* Gestione SLA */
		-- Anagrafica SLA
		IF dbo.afn_du_IsTable('xSLA') = 0
			EXEC asp_du_AddTable 'xSLA', 2, 'Anagrafica SLA'
		
		EXEC asp_du_AddAlterColumn 'xSLA', 'Descrizione', 'varchar(50) NOT NULL', '('''')', 'Descrizione SLA'
		EXEC asp_du_AddAlterColumn 'xSLA', 'Lun'				, 'bit NOT NULL'				, '0'			, '0 - lunedì nessuna assistenza; 1 - lunedì coperto da assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'Mar'				, 'bit NOT NULL'				, '0'			, '0 - martedì nessuna assistenza; 1 - martedì coperto da assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'Mer'				, 'bit NOT NULL'				, '0'			, '0 - mercoledì nessuna assistenza; 1 - mercoledì coperto da assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'Gio'				, 'bit NOT NULL'				, '0'			, '0 - giovedì nessuna assistenza; 1 - giovedì coperto da assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'Ven'				, 'bit NOT NULL'				, '0'			, '0 - venerdì nessuna assistenza; 1 - venerdì coperto da assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'Sab'				, 'bit NOT NULL'				, '0'			, '0 - sabato nessuna assistenza; 1 - sabato coperto da assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'Dom'				, 'bit NOT NULL'				, '0'			, '0 - domenica nessuna assistenza; 1 - domenica coperto da assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'LunInizio'	, 'int NULL'						, ''			, 'Lunedì - ora inizio copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'MarInizio'	, 'int NULL'						, ''			, 'Martedì - ora inizio copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'MerInizio'	, 'int NULL'						, ''			, 'Mercoledì - ora inizio copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'GioInizio'	, 'int NULL'						, ''			, 'Giovedì - ora inizio copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'VenInizio'	, 'int NULL'						, ''			, 'Venerdì - ora inizio copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'SabInizio'	, 'int NULL'						, ''			, 'Sabato - ora inizio copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'DomInizio'	, 'int NULL'						, ''			, 'Domenica - ora inizio copertura assistenza'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_LunInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_MarInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_MerInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_GioInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_VenInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_SabInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_DomInizio'
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_LunInizio] CHECK NOT FOR REPLICATION (([LunInizio] is null or [LunInizio] >= 0))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_LunInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_MarInizio] CHECK NOT FOR REPLICATION (([MarInizio] is null or [MarInizio] > 0))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_MarInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_MerInizio] CHECK NOT FOR REPLICATION (([MerInizio] is null or [MerInizio] > 0))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_MerInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_GioInizio] CHECK NOT FOR REPLICATION (([GioInizio] is null or [GioInizio] > 0))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_GioInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_VenInizio] CHECK NOT FOR REPLICATION (([VenInizio] is null or [VenInizio] > 0))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_VenInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_SabInizio] CHECK NOT FOR REPLICATION (([SabInizio] is null or [SabInizio] >= 0))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_SabInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_DomInizio] CHECK NOT FOR REPLICATION (([DomInizio] is null or [DomInizio] >= 0))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_DomInizio]
		EXEC asp_du_AddAlterColumn 'xSLA', 'LunFine'	, 'int NULL'						, ''			, 'Lunedì - ora fine copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'MarFine'	, 'int NULL'						, ''			, 'Martedì - ora fine copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'MerFine'	, 'int NULL'						, ''			, 'Mercoledì - ora fine copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'GioFine'	, 'int NULL'						, ''			, 'Giovedì - ora fine copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'VenFine'	, 'int NULL'						, ''			, 'Venerdì - ora fine copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'SabFine'	, 'int NULL'						, ''			, 'Sabato - ora fine copertura assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'DomFine'	, 'int NULL'						, ''			, 'Domenica - ora fine copertura assistenza'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_LunFine'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_MarFine'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_MerFine'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_GioFine'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_VenFine'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_SabFine'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_DomFine'
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_LunFine] CHECK NOT FOR REPLICATION (([LunFine] is null or [LunFine] > 0 and [LunFine] <= 86400))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_LunFine]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_MarFine] CHECK NOT FOR REPLICATION (([MarFine] is null or [MarFine] > 0 and [MarFine] <= 86400))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_MarFine]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_MerFine] CHECK NOT FOR REPLICATION (([MerFine] is null or [MerFine] > 0 and [MerFine] <= 86400))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_MerFine]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_GioFine] CHECK NOT FOR REPLICATION (([GioFine] is null or [GioFine] > 0 and [GioFine] <= 86400))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_GioFine]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_VenFine] CHECK NOT FOR REPLICATION (([VenFine] is null or [VenFine] > 0 and [VenFine] <= 86400))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_VenFine]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_SabFine] CHECK NOT FOR REPLICATION (([SabFine] is null or [SabFine] > 0 and [SabFine] <= 86400))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_SabFine]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_DomFine] CHECK NOT FOR REPLICATION (([DomFine] is null or [DomFine] > 0 and [DomFine] <= 86400))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_DomFine]
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_LunFine_LunInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_MarFine_MarInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_MerFine_MerInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_GioFine_GioInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_VenFine_VenInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_SabFine_SabInizio'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_DomFine_DomInizio'
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_LunFine_LunInizio] CHECK NOT FOR REPLICATION (([LunFine] is null and [LunInizio] is null or [LunFine] is not null and [LunInizio] is not null and [LunFine] > [LunInizio]))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_LunFine_LunInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_MarFine_MarInizio] CHECK NOT FOR REPLICATION (([MarFine] is null and [MarInizio] is null or [MarFine] is not null and [MarInizio] is not null and [MarFine] > [MarInizio]))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_MarFine_MarInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_MerFine_MerInizio] CHECK NOT FOR REPLICATION (([MerFine] is null and [MerInizio] is null or [MerFine] is not null and [MerInizio] is not null and [MerFine] > [MerInizio]))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_MerFine_MerInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_GioFine_GioInizio] CHECK NOT FOR REPLICATION (([GioFine] is null and [GioInizio] is null or [GioFine] is not null and [GioInizio] is not null and [GioFine] > [GioInizio]))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_GioFine_GioInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_VenFine_VenInizio] CHECK NOT FOR REPLICATION (([VenFine] is null and [VenInizio] is null or [VenFine] is not null and [VenInizio] is not null and [VenFine] > [VenInizio]))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_VenFine_VenInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_SabFine_SabInizio] CHECK NOT FOR REPLICATION (([SabFine] is null and [SabInizio] is null or [SabFine] is not null and [SabInizio] is not null and [SabFine] > [SabInizio]))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_SabFine_SabInizio]
		ALTER TABLE [dbo].[xSLA]  WITH NOCHECK ADD  CONSTRAINT [CK_xSLA_DomFine_DomInizio] CHECK NOT FOR REPLICATION (([DomFine] is null and [DomInizio] is null or [DomFine] is not null and [DomInizio] is not null and [DomFine] > [DomInizio]))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_DomFine_DomInizio]
		EXEC asp_du_DropColumn		 'xSLA', 'LunSecondi'
		EXEC asp_du_AddAlterColumn 'xSLA', 'LunSecondi', 'AS (isnull([LunFine],0) - isnull([LunInizio],0))', '', 'Lunedì - tempo di assistenza espresso in secondi'
		EXEC asp_du_DropColumn		 'xSLA', 'MarSecondi'
		EXEC asp_du_AddAlterColumn 'xSLA', 'MarSecondi', 'AS (isnull([MarFine],0) - isnull([MarInizio],0))', '', 'Martedì - tempo di assistenza espresso in secondi'
		EXEC asp_du_DropColumn		 'xSLA', 'MerSecondi'
		EXEC asp_du_AddAlterColumn 'xSLA', 'MerSecondi', 'AS (isnull([MerFine],0) - isnull([MerInizio],0))', '', 'Mercoledì - tempo di assistenza espresso in secondi'
		EXEC asp_du_DropColumn		 'xSLA', 'GioSecondi'
		EXEC asp_du_AddAlterColumn 'xSLA', 'GioSecondi', 'AS (isnull([GioFine],0) - isnull([GioInizio],0))', '', 'Giovedì - tempo di assistenza espresso in secondi'
		EXEC asp_du_DropColumn		 'xSLA', 'VenSecondi'
		EXEC asp_du_AddAlterColumn 'xSLA', 'VenSecondi', 'AS (isnull([VenFine],0) - isnull([VenInizio],0))', '', 'Venerdì - tempo di assistenza espresso in secondi'
		EXEC asp_du_DropColumn		 'xSLA', 'SabSecondi'
		EXEC asp_du_AddAlterColumn 'xSLA', 'SabSecondi', 'AS (isnull([SabFine],0) - isnull([SabInizio],0))', '', 'Sabato - tempo di assistenza espresso in secondi'
		EXEC asp_du_DropColumn		 'xSLA', 'DomSecondi'
		EXEC asp_du_AddAlterColumn 'xSLA', 'DomSecondi', 'AS (isnull([DomFine],0) - isnull([DomInizio],0))', '', 'Domenica - tempo di assistenza espresso in secondi'
		EXEC asp_du_AddAlterColumn 'xSLA', 'CoperturaFestivi', 'bit NOT NULL', '0', '0 - giorni festivi non coperti da assistenza; 1 - giorni festivi coperti da assistenza'
		EXEC asp_du_AddAlterColumn 'xSLA', 'TempoIntervento', '[numeric](18, 8) NOT NULL', '0', 'Tempo entro il quale deve essere effettuato l intervento (può essere espresso in ore o in giorni)'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_TempoIntervento'
		ALTER TABLE [dbo].[xSLA] WITH NOCHECK ADD CONSTRAINT [CK_xSLA_TempoIntervento] CHECK (([TempoIntervento] >= 0))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_TempoIntervento]
		EXEC asp_du_AddAlterColumn 'xSLA', 'FattoreMksIntervento', '[numeric](25, 12) NOT NULL', '3600', 'Fattore di conversione del tempo di intervento in ore'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_FattoreMksIntervento'
		ALTER TABLE [dbo].[xSLA] WITH NOCHECK ADD CONSTRAINT [CK_xSLA_FattoreMksIntervento] CHECK (([FattoreMksIntervento] = 86400 or [FattoreMksIntervento] = 3600))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_FattoreMksIntervento]
		EXEC asp_du_DropColumn		 'xSLA', 'OreIntervento'
		EXEC asp_du_AddAlterColumn 'xSLA', 'OreIntervento', 'AS (isnull([TempoIntervento],0) * ([FattoreMksIntervento] / 3600))', '', 'Tempo di intervento espresso in ore'
		EXEC asp_du_AddAlterColumn 'xSLA', 'TempoRipristino', '[numeric](18, 8) NOT NULL', '0', 'Tempo entro il quale deve essere ripristinata la funzionalità (può essere espresso in ore o in giorni)'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_TempoRipristino'
		ALTER TABLE [dbo].[xSLA] WITH NOCHECK ADD CONSTRAINT [CK_xSLA_TempoRipristino] CHECK (([TempoRipristino] >= 0))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_TempoRipristino]
		EXEC asp_du_AddAlterColumn 'xSLA', 'FattoreMksRipristino', '[numeric](25, 12) NOT NULL', '3600', 'Fattore di conversione del tempo di ripristino in ore'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_FattoreMksRipristino'
		ALTER TABLE [dbo].[xSLA] WITH NOCHECK ADD CONSTRAINT [CK_xSLA_FattoreMksRipristino] CHECK (([FattoreMksRipristino] = 86400 or [FattoreMksRipristino] = 3600))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_FattoreMksRipristino]
		EXEC asp_du_DropColumn		 'xSLA', 'OreRipristino'
		EXEC asp_du_AddAlterColumn 'xSLA', 'OreRipristino', 'AS (isnull([TempoRipristino],0) * ([FattoreMksRipristino] / 3600))', '', 'Tempo di ripristino espresso in ore'
		EXEC asp_du_AddAlterColumn 'xSLA', 'TempoRisposta', '[numeric](18, 8) NOT NULL', '0', 'Tempo entro il quale rispondere all esigenza del cliente (può essere espresso in ore o in giorni)'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_TempoRisposta'
		ALTER TABLE [dbo].[xSLA] WITH NOCHECK ADD CONSTRAINT [CK_xSLA_TempoRisposta] CHECK (([TempoRisposta] >= 0))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_TempoRisposta]
		EXEC asp_du_AddAlterColumn 'xSLA', 'FattoreMksRisposta', '[numeric](25, 12) NOT NULL', '3600', 'Fattore di conversione del tempo di risposta in ore'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_FattoreMksRisposta'
		ALTER TABLE [dbo].[xSLA] WITH NOCHECK ADD CONSTRAINT [CK_xSLA_FattoreMksRisposta] CHECK (([FattoreMksRisposta] = 86400 or [FattoreMksRisposta] = 3600))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_FattoreMksRisposta]
		EXEC asp_du_DropColumn		 'xSLA', 'OreRisposta'
		EXEC asp_du_AddAlterColumn 'xSLA', 'OreRisposta', 'AS (isnull([TempoRisposta],0) * ([FattoreMksRisposta] / 3600))', '', 'Tempo di risposta espresso in ore'
		EXEC asp_du_AddAlterColumn 'xSLA', 'Priorita', '[int] NOT NULL', '0', 'Priorità di intervento'
		EXEC asp_du_DropConstraint 'xSLA', 'CK_xSLA_Priorita'
		ALTER TABLE [dbo].[xSLA] WITH NOCHECK ADD CONSTRAINT [CK_xSLA_Priorita] CHECK (([Priorita] >= 0))
		ALTER TABLE [dbo].[xSLA] CHECK CONSTRAINT [CK_xSLA_Priorita]
		EXEC asp_du_AddAlterColumn 'xSLA', 'NoteSLA', 'text NULL', '', 'Note SLA'

		/* Gestione Contratti */
		-- Tipo contratto 
		IF dbo.afn_du_IsTable('xContrattoTipo') = 0
			EXEC asp_du_AddTable 'xContrattoTipo', 3, 'Tabella tipo contratto'
			
		EXEC asp_du_AddAlterColumn	'xContrattoTipo', 'Descrizione', 'varchar(80) NOT NULL', '', 'Descrizione tipo'

		-- Tipo rinnovo 
		IF dbo.afn_du_IsTable('xRinnovoTipo') = 0
			EXEC asp_du_AddTable 'xRinnovoTipo', 3, 'Tabella tipo rinnovo'
			
		EXEC asp_du_AddAlterColumn	'xRinnovoTipo', 'Descrizione', 'varchar(80) NOT NULL', '', 'Descrizione tipo'

		-- Anagrafica Contratti
		IF dbo.afn_du_IsTable('xContratto') = 0
			EXEC asp_du_AddTable 'xContratto', 10, 'Anagrafica contratti'
		
		EXEC asp_du_AddAlterColumn 'xContratto', 'Descrizione'			, 'varchar(230) NOT NULL'	, '''<Descrizione Mancante>''', 'Descrizione contratto'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_ContrattoTipo'	, '[char](3) NULL'				, ''													, 'Tipo di contratto'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_ContrattoTipo'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_ContrattoTipo] FOREIGN KEY([Cd_ContrattoTipo])
		REFERENCES [dbo].[xContrattoTipo] ([Cd_xContrattoTipo]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_ContrattoTipo]
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_RinnovoTipo'		, '[char](3) NULL'				, ''													, 'Tipo di rinnovo'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_RinnovoTipo'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_RinnovoTipo] FOREIGN KEY([Cd_RinnovoTipo])
		REFERENCES [dbo].[xRinnovoTipo] ([Cd_xRinnovoTipo]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_RinnovoTipo]
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_LS_Contratto'	, '[char](7) NULL'				, ''													, 'Listino associato al contratto'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_LS_Contratto'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_LS_Contratto] FOREIGN KEY([Cd_LS_Contratto])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_LS_Contratto]
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_LS_Rinnovo'		, '[char](7) NULL'				, ''													, 'Listino associato al contratto'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_LS_Rinnovo'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_LS_Rinnovo] FOREIGN KEY([Cd_LS_Rinnovo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_LS_Rinnovo]
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_DoSottoCommessa', '[varchar](20) NOT NULL', ''													, 'Sottocommessa associata al contratto'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_DOSottoCommessa'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_DOSottoCommessa] FOREIGN KEY([Cd_DoSottoCommessa])
		REFERENCES [dbo].[DOSottoCommessa] ([Cd_DOSottoCommessa]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_DOSottoCommessa]
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_CF', '[char](7) NOT NULL', '', 'Codice cliente\fornitore'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_CF'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_CF]
		EXEC asp_du_AddAlterColumn 'xContratto', 'PersDaContattare', '[varchar](30) NULL', '', 'Persona da contattare'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_SLA', '[char](2) NOT NULL', '', 'SLA associato al contratto'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_SLA'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_SLA] FOREIGN KEY([Cd_SLA])
		REFERENCES [dbo].[xSLA] ([Cd_xSLA]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_SLA]
		EXEC asp_du_AddAlterColumn 'xContratto', 'DataInizio'				, '[smalldatetime] NOT NULL'	, '''19000101''', 'Inizio validità contratto'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Periodo'					, '[int] NOT NULL'						, '1'						, 'Lunghezza temporale del contratto (in anni, mesi o giorni)'
		EXEC asp_du_AddAlterColumn 'xContratto', 'FattoreMksPeriodo', '[numeric](25, 12) NOT NULL', '12'					, 'Fattore temporale del periodo (anni, mesi o giorni)'
		EXEC asp_du_DropConstraint 'xContratto', 'CK_xContratto_FattoreMksPeriodo'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_FattoreMksPeriodo] CHECK (([FattoreMksPeriodo] = 12 or [FattoreMksPeriodo] = 1 or [FattoreMksPeriodo] = 0))
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_FattoreMksPeriodo]
		EXEC asp_du_AddAlterColumn 'xContratto', 'DataFine'					, '[smalldatetime] NOT NULL'	, '''19000101''', 'Fine validità contratto'
		EXEC asp_du_AddAlterColumn 'xContratto', 'DataInizioFattura', '[smalldatetime] NOT NULL'	, '''19000101''', 'Inizio fatturazione contratto'
		EXEC asp_du_AddAlterColumn 'xContratto', 'PeriodoFattura'		, '[int] NOT NULL'						, '1'						, 'Lunghezza temporale della fatturazione (in anni, mesi o giorni)'
		EXEC asp_du_AddAlterColumn 'xContratto', 'FattoreMksPeriodoFattura', '[numeric](25, 12) NOT NULL', '12'		, 'Fattore temporale della fatturazione (anni, mesi o giorni)'
		EXEC asp_du_DropConstraint 'xContratto', 'CK_xContratto_FattoreMksPeriodoFattura'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_FattoreMksPeriodoFattura] CHECK (([FattoreMksPeriodoFattura] = 12 or [FattoreMksPeriodoFattura] = 1 or [FattoreMksPeriodoFattura] = 0))
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_FattoreMksPeriodoFattura]
		EXEC asp_du_AddAlterColumn 'xContratto', 'DataFineFattura'	, '[smalldatetime] NOT NULL'	, '''19000101''', 'Fine fatturazione contratto'
		EXEC asp_du_AddAlterColumn 'xContratto', 'FattoreMksCicloFattura', '[numeric](25, 12) NOT NULL', '1'			, 'Ciclo di fatturazione (mensile, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_DropConstraint 'xContratto', 'CK_xContratto_FattoreMksCicloFattura'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_FattoreMksCicloFattura] CHECK (([FattoreMksCicloFattura] = 12 or [FattoreMksCicloFattura] = 6 or [FattoreMksCicloFattura] = 4 or [FattoreMksCicloFattura] = 3 or [FattoreMksCicloFattura] = 1))
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_FattoreMksCicloFattura]
		EXEC asp_du_AddAlterColumn 'xContratto', 'StatoFattura'			, '[char](1) NOT NULL'				, '''N'''				, 'Stato fatturazione (N - nuova; B - dopo prima fattura; C - modifiche effettuate; T - temporanea; X - saldata)'
		EXEC asp_du_AddAlterColumn 'xContratto', 'GiornoFattura'		, '[int] NOT NULL'						, '30'					, 'Giorno del mese nel quale avviene la fatturazione del contratto'
		EXEC asp_du_DropConstraint 'xContratto', 'CK_xContratto_GiornoFattura'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_GiornoFattura] CHECK NOT FOR REPLICATION (([GiornoFattura]>=(1) AND [GiornoFattura]<=(31)))
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_GiornoFattura]
		EXEC asp_du_AddAlterColumn 'xContratto', 'FatturaFineMese'	, '[bit] NOT NULL'						, '0'						, '0 - la fatturazione avviene il giorno stabilito in "GiornoFattura"; 1 - la fatturazione avviene l ultimo giorno del mese'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Anticipo'					, '[bit] NOT NULL'						, '0'						, '0 - la fatturazione avviene nel periodo di competenza; 1 - la fatturazione viene anticipata rispetto al periodo di competenza'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Chiuso'						, '[bit] NOT NULL'						, '0'						, '0 - contratto aperto; 1 - contratto chiuso'
		EXEC asp_du_AddAlterColumn 'xContratto', 'DataFatturaNext'	, '[smalldatetime] NULL'			, '''19000101''', 'Data prossima fattura'
		EXEC asp_du_AddAlterColumn 'xContratto', 'ImportoFatturaNext', '[numeric](18, 6) NULL'		, '0'						, 'Importo prossima fattura'
		EXEC asp_du_DropConstraint 'xContratto', 'CK_xContratto_ImportoFatturaNext'
		EXEC asp_du_AddAlterColumn 'xContratto', 'ImportoTotaleFattura', '[numeric](18, 6) NULL'	, '0'						, 'Importo totale da fatturare'
		EXEC asp_du_DropConstraint 'xContratto', 'CK_xContratto_ImportoTotaleFattura'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_ImportoTotaleFattura] CHECK (([ImportoTotaleFattura] >= 0))
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_ImportoTotaleFattura]
		EXEC asp_du_AddAlterColumn 'xContratto', 'ImportoTotaleContratto', '[numeric](18, 6) NULL', '0'						, 'Importo totale del contratto'
		EXEC asp_du_DropConstraint 'xContratto', 'CK_xContratto_ImportoTotaleContratto'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_ImportoTotaleContratto] CHECK (([ImportoTotaleContratto] >= 0))
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_ImportoTotaleContratto]
		EXEC asp_du_AddAlterColumn 'xContratto', 'DataFatturaLast'	, '[smalldatetime] NULL'			, '''19000101''', 'Data ultima fattura'
		EXEC asp_du_AddAlterColumn 'xContratto', 'ImportoFatturaLast', '[numeric](18, 6) NULL'		, '0'						, 'Importo ultima fattura'
		EXEC asp_du_DropConstraint 'xContratto', 'CK_xContratto_ImportoFatturaLast'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Rinnovabile'			, '[bit] NOT NULL'						, '0'						, '0 - il contratto non si può rinnovare; 1 - il contratto è rinnovabile'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_CF_Fatt'				, '[char](7) NULL'						, ''						, 'Codice cliente\fornitore al quale va intestata la fattura'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_CF_Fatt'
		ALTER TABLE [dbo].[xContratto] WITH CHECK ADD CONSTRAINT [FK_xContratto_CF_Fatt] FOREIGN KEY([Cd_CF_Fatt])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_CF_Fatt]
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_PG'						, '[char](4) NULL'						, ''						, 'Codice pagamento'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_PG'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_PG] FOREIGN KEY([Cd_PG])
		REFERENCES [dbo].[PG] ([Cd_PG]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_PG]
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_Agente'				, '[char](3) NULL'						, ''						, 'Codice agente'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_Agente'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_Agente] FOREIGN KEY([Cd_Agente])
		REFERENCES [dbo].[Agente] ([Cd_Agente]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_Agente]
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_VL'						, '[char](3) NULL'						, ''						, 'Valuta'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_VL'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_VL] FOREIGN KEY([Cd_VL])
		REFERENCES [dbo].[VL] ([Cd_VL]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_VL]
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cambio'						, '[numeric](18, 6) NOT NULL' , '1'						, 'Cambio'
		EXEC asp_du_AddAlterColumn 'xContratto', 'NoteContratto'		, '[text] NULL'								, ''						, 'Note del contratto'

		-- Matricole
		IF dbo.afn_du_IsTable('xContrattoMatricola') = 0
			EXEC asp_du_AddTable 'xContrattoMatricola', 0, 'Matricole contratto'
		
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Id_xContratto', '[int] NOT NULL', '', 'Identificativo contratto di appartenenza della matricola'
		EXEC asp_du_DropConstraint 'xContrattoMatricola', 'FK_xContrattoMatricola_Contratto'
		ALTER TABLE [dbo].[xContrattoMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoMatricola_Contratto] FOREIGN KEY([Id_xContratto])
		REFERENCES [dbo].[xContratto] ([Id_xContratto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoMatricola] CHECK CONSTRAINT [FK_xContrattoMatricola_Contratto]
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Cd_AR', '[varchar](20) NOT NULL', '', 'Codice articolo di magazzino'
		EXEC asp_du_DropConstraint 'xContrattoMatricola', 'FK_xContrattoMatricola_AR'
		ALTER TABLE [dbo].[xContrattoMatricola] WITH CHECK ADD CONSTRAINT [FK_xContrattoMatricola_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContrattoMatricola] CHECK CONSTRAINT [FK_xContrattoMatricola_AR]
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'NumeroMatricola', '[varchar] (40) COLLATE Latin1_General_CI_AS NOT NULL', '', 'Matricola'
		EXEC asp_du_DropIndex			 'xContrattoMatricola', 'UK_xContrattoMatricola'
		EXEC asp_du_AddAlterIndex	 'xContrattoMatricola', 'UK_xContrattoMatricola',	'[Id_xContratto] ASC, [Cd_AR] ASC, [NumeroMatricola] ASC',	0, 0, 0, 1
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Cd_SLA', '[char](2) NOT NULL', '', 'SLA associato alla riga'
		EXEC asp_du_DropConstraint 'xContrattoMatricola', 'FK_xContrattoMatricola_SLA'
		ALTER TABLE [dbo].[xContrattoMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoMatricola_SLA] FOREIGN KEY([Cd_SLA])
		REFERENCES [dbo].[xSLA] ([Cd_xSLA]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoMatricola] CHECK CONSTRAINT [FK_xContrattoMatricola_SLA]
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Riga'						, '[smallint] NOT NULL'			, '0'	, 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'DataInizio'			, 'smalldatetime NULL'			, ''	, 'Data inizio validità riga'
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'DataFine'				, 'smalldatetime NULL'			, ''	, 'Data fine validità riga'
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Cd_CF'						, 'char(7) NULL'						, ''	, 'Cliente riga' -- Nesessario per la FK DD. Sempre = xContratto.Cd_CF. Non presente nell'interfaccia.
		EXEC asp_du_DropConstraint 'xContrattoMatricola', 'FK_xContrattoMatricola_CF'
		ALTER TABLE [dbo].[xContrattoMatricola] WITH CHECK ADD CONSTRAINT [FK_xContrattoMatricola_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xContrattoMatricola] CHECK CONSTRAINT [FK_xContrattoMatricola_CF]
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Cd_CFDest'				, 'char(3) NULL'						, ''	, 'Destinazione diversa riga'
		EXEC asp_du_DropConstraint 'xContrattoMatricola', 'FK_xContrattoMatricola_CFDest'
		ALTER TABLE [dbo].[xContrattoMatricola]  WITH NOCHECK ADD  CONSTRAINT [FK_xContrattoMatricola_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoMatricola] CHECK CONSTRAINT [FK_xContrattoMatricola_CFDest]
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'PrezzoUnitarioV'	, 'numeric(18, 6) NULL'			, '0'	, 'Prezzo unitario riga'

		/* Import COMET */
		-- Tabella di unione tra le unità di misura del gestionale e le unità di misura del file di import.
		IF dbo.afn_du_IsTable('xCometARMisura') = 0
			EXEC asp_du_AddTable 'xCometARMisura', 2, 'Associazione unità di misura gestionale --> unità di misura file di import'
		
		EXEC asp_du_AddAlterColumn 'xCometARMisura', 'Descrizione'	, 'varchar(50) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione unità di misura file di import'
		EXEC asp_du_AddAlterColumn 'xCometARMisura', 'Cd_ARMisura'	, '[char](2) NOT NULL'	, '('''')'										, 'Unità di misura gestionale'
		EXEC asp_du_DropConstraint 'xCometARMisura', 'FK_xCometARMisura_ARMisura'
		ALTER TABLE [dbo].[xCometARMisura] WITH NOCHECK ADD CONSTRAINT [FK_xCometARMisura_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xCometARMisura] CHECK CONSTRAINT [FK_xCometARMisura_ARMisura]

		-- Tabella di unione tra i gruppi degli articoli del gestionale e la marca\famiglia metel del file di import.
		IF dbo.afn_du_IsTable('xCometARGruppo') = 0
			EXEC asp_du_AddTable 'xCometARGruppo', 0, 'Associazione gruppi articoli gestionale --> marca\famiglia Metel file di import'

		EXEC asp_du_AddAlterColumn 'xCometARGruppo', 'Cd_xCometARGruppo'			, '[varchar](4)	NOT NULL'	, '', 'Marca'
		EXEC asp_du_AddAlterColumn 'xCometARGruppo', 'Cd_xCometFamigliaMetel'	, '[varchar](18) NOT NULL', '', 'Famiglia Metel'
		EXEC asp_du_DropIndex			 'xCometARGruppo', 'UK_xCometARGruppo'
		EXEC asp_du_AddAlterIndex	 'xCometARGruppo', 'UK_xCometARGruppo',	'[Cd_xCometARGruppo] ASC, [Cd_xCometFamigliaMetel] ASC',	0, 0, 0, 1
		EXEC asp_du_AddAlterColumn 'xCometARGruppo', 'Descrizione'	, 'varchar(200) NOT NULL'	, '''<Descrizione Mancante>''', 'Descrizione marca\famiglia Metel'
		EXEC asp_du_AddAlterColumn 'xCometARGruppo', 'Cd_ARGruppo1'	, '[char](3) NOT NULL'		, '('''')'										, 'Famiglia di magazzino'
		EXEC asp_du_AddAlterColumn 'xCometARGruppo', 'Cd_ARGruppo2'	, '[char](3) NOT NULL'		, '('''')'										, 'Gruppo di magazzino'
		EXEC asp_du_AddAlterColumn 'xCometARGruppo', 'Cd_ARGruppo3'	, '[char](3) NOT NULL'		, '('''')'										, 'Sottogruppo di magazzino'
		EXEC asp_du_DropConstraint 'xCometARGruppo', 'FK_xCometARGruppo_ARGruppo1'
		EXEC asp_du_DropConstraint 'xCometARGruppo', 'FK_xCometARGruppo_ARGruppo2'
		EXEC asp_du_DropConstraint 'xCometARGruppo', 'FK_xCometARGruppo_ARGruppo3'
		EXEC asp_du_DropConstraint 'xCometARGruppo', 'CK_xCometARGruppo_ARGruppo123'
		ALTER TABLE [dbo].[xCometARGruppo] WITH NOCHECK ADD CONSTRAINT [FK_xCometARGruppo_ARGruppo1] FOREIGN KEY([Cd_ARGruppo1])
		REFERENCES [dbo].[ARGruppo1] ([Cd_ARGruppo1]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xCometARGruppo] NOCHECK CONSTRAINT [FK_xCometARGruppo_ARGruppo1]
		ALTER TABLE [dbo].[xCometARGruppo] WITH NOCHECK ADD CONSTRAINT [FK_xCometARGruppo_ARGruppo2] FOREIGN KEY([Cd_ARGruppo1], [Cd_ARGruppo2])
		REFERENCES [dbo].[ARGruppo2] ([Cd_ARGruppo1], [Cd_ARGruppo2]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xCometARGruppo] NOCHECK CONSTRAINT [FK_xCometARGruppo_ARGruppo2]
		ALTER TABLE [dbo].[xCometARGruppo] WITH NOCHECK ADD CONSTRAINT [FK_xCometARGruppo_ARGruppo3] FOREIGN KEY([Cd_ARGruppo1], [Cd_ARGruppo2], [Cd_ARGruppo3])
		REFERENCES [dbo].[ARGruppo3] ([Cd_ARGruppo1], [Cd_ARGruppo2], [Cd_ARGruppo3]) NOT FOR REPLICATION
		ALTER TABLE [dbo].[xCometARGruppo] CHECK CONSTRAINT [FK_xCometARGruppo_ARGruppo3]
		ALTER TABLE [dbo].[xCometARGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xCometARGruppo_ARGruppo123] CHECK (([Cd_ARGruppo1] IS NULL AND [Cd_ARGruppo2] IS NULL AND [Cd_ARGruppo3] IS NULL OR [Cd_ARGruppo1] IS NOT NULL AND [Cd_ARGruppo2] IS NOT NULL AND [Cd_ARGruppo3] IS NOT NULL))
		ALTER TABLE [dbo].[xCometARGruppo] CHECK CONSTRAINT [CK_xCometARGruppo_ARGruppo123] 

		/* Gestione Ticket */
		-- Tabella Esiti
		IF dbo.afn_du_IsTable('xRDEsito') = 0
			EXEC asp_du_AddTable 'xRDEsito', 5, 'Tabella esiti attività'
		
		EXEC asp_du_AddAlterColumn 'xRDEsito', 'Descrizione', 'varchar(50) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione esito'

		-- Tabella Stati
		IF dbo.afn_du_IsTable('xRDStato') = 0
			EXEC asp_du_AddTable 'xRDStato', 5, 'Tabella stati attività'
		
		EXEC asp_du_AddAlterColumn 'xRDStato', 'Descrizione', 'varchar(50) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione stato'
		EXEC asp_du_AddAlterColumn 'xRDStato', 'Chiusura'		, '[bit] NOT NULL'			, '0'						, '0 - altro; 1 - stato di chiusura attività'
		EXEC asp_du_AddAlterColumn 'xRDStato', 'Sospeso'		, '[bit] NOT NULL'			, '0'						, '0 - altro; 1 - stato di sospensione attività'
		
		-- Tabella Stati SLA
		IF dbo.afn_du_IsTable('xRDStato_SLA') = 0
			EXEC asp_du_AddTable 'xRDStato_SLA', 5, 'Tabella stati SLA'
		
		EXEC asp_du_AddAlterColumn 'xRDStato_SLA', 'Descrizione', 'varchar(50) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione stato'
		
		-- Tabella Tipi
		IF dbo.afn_du_IsTable('xRDTipo') = 0
			EXEC asp_du_AddTable 'xRDTipo', 5, 'Tabella tipi attività'
		
		EXEC asp_du_AddAlterColumn 'xRDTipo', 'Descrizione', 'varchar(50) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione tipo'
		
		-- Tabella Tipi Valorizzazione
		IF dbo.afn_du_IsTable('xRDTipoValorizzazione') = 0
			EXEC asp_du_AddTable 'xRDTipoValorizzazione', 5, 'Tabella tipi attività'
		
		EXEC asp_du_AddAlterColumn 'xRDTipoValorizzazione', 'Descrizione', 'varchar(50) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione tipo valorizzazione'
		
		-- Tabella Valorizzazioni per Operatore
		IF dbo.afn_du_IsTable('xOperatoreVal') = 0
			EXEC asp_du_AddTable 'xOperatoreVal', 0, 'Tabella valorizzazioni per operatore'
		
		EXEC asp_du_AddAlterColumn 'xOperatoreVal', 'Id_xOperatore', '[int] NOT NULL', '', 'Identificativo operatore'
		EXEC asp_du_DropConstraint 'xOperatoreVal', 'FK_xOperatoreVal_xOperatore'
		ALTER TABLE [dbo].[xOperatoreVal] WITH CHECK ADD CONSTRAINT [FK_xOperatoreVal_xOperatore] FOREIGN KEY([Id_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Id_xOperatore]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xOperatoreVal] CHECK CONSTRAINT [FK_xOperatoreVal_xOperatore]
		EXEC asp_du_AddAlterColumn 'xOperatoreVal', 'Cd_xRDTipoValorizzazione', '[char](5) NOT NULL', '', 'Codice tipo valorizzazione'
		EXEC asp_du_DropConstraint 'xOperatoreVal', 'FK_xOperatoreVal_xRDTipoValorizzazione'
		ALTER TABLE [dbo].[xOperatoreVal] WITH CHECK ADD CONSTRAINT [FK_xOperatoreVal_xRDTipoValorizzazione] FOREIGN KEY([Cd_xRDTipoValorizzazione])
		REFERENCES [dbo].[xRDTipoValorizzazione] ([Cd_xRDTipoValorizzazione])
		ALTER TABLE [dbo].[xOperatoreVal] CHECK CONSTRAINT [FK_xOperatoreVal_xRDTipoValorizzazione]
		EXEC asp_du_AddAlterColumn 'xOperatoreVal', 'Costo', '[numeric](18, 2) NOT NULL', '0', 'Costo orario'
		EXEC asp_du_DropConstraint 'xOperatoreVal', 'CK_xOperatoreVal_Costo'
		ALTER TABLE xOperatoreVal WITH NOCHECK ADD CONSTRAINT [CK_xOperatoreVal_Costo] CHECK (([Costo] >= 0))
		ALTER TABLE xOperatoreVal CHECK CONSTRAINT [CK_xOperatoreVal_Costo]
		EXEC asp_du_AddAlterColumn 'xOperatoreVal', 'Riga', '[smallint] NOT NULL', '0', 'Riga'

		-- Tabella Valorizzazioni per Attività
		IF dbo.afn_du_IsTable('xPRAttivitaVal') = 0
			EXEC asp_du_AddTable 'xPRAttivitaVal', 0, 'Tabella valorizzazioni per attività'
		
		EXEC asp_du_AddAlterColumn 'xPRAttivitaVal', 'Id_PRAttivita', '[int] NOT NULL', '', 'Identificativo attività'
		EXEC asp_du_DropConstraint 'xPRAttivitaVal', 'FK_xPRAttivitaVal_PRAttivita'
		ALTER TABLE [dbo].[xPRAttivitaVal] WITH CHECK ADD CONSTRAINT [FK_xPRAttivitaVal_PRAttivita] FOREIGN KEY([Id_PRAttivita])
		REFERENCES [dbo].[PrAttivita] ([Id_PrAttivita]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xPRAttivitaVal] CHECK CONSTRAINT [FK_xPRAttivitaVal_PRAttivita]
		EXEC asp_du_AddAlterColumn 'xPRAttivitaVal', 'Cd_xRDTipoValorizzazione', '[char](5) NOT NULL', '', 'Codice tipo valorizzazione'
		EXEC asp_du_DropConstraint 'xPRAttivitaVal', 'FK_xPRAttivitaVal_xRDTipoValorizzazione'
		ALTER TABLE [dbo].[xPRAttivitaVal] WITH CHECK ADD CONSTRAINT [FK_xPRAttivitaVal_xRDTipoValorizzazione] FOREIGN KEY([Cd_xRDTipoValorizzazione])
		REFERENCES [dbo].[xRDTipoValorizzazione] ([Cd_xRDTipoValorizzazione])
		ALTER TABLE [dbo].[xPRAttivitaVal] CHECK CONSTRAINT [FK_xPRAttivitaVal_xRDTipoValorizzazione]
		EXEC asp_du_AddAlterColumn 'xPRAttivitaVal', 'Cd_AR', '[varchar](20) NOT NULL', '', 'Codice articolo'
		EXEC asp_du_DropConstraint 'xPRAttivitaVal', 'FK_xPRAttivitaVal_AR'
		ALTER TABLE [dbo].[xPRAttivitaVal] WITH CHECK ADD CONSTRAINT [FK_xPRAttivitaVal_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xPRAttivitaVal] CHECK CONSTRAINT [FK_xPRAttivitaVal_AR]
		EXEC asp_du_AddAlterColumn 'xPRAttivitaVal', 'Riga'						, '[smallint] NOT NULL'	, '0', 'Riga'
		EXEC asp_du_AddAlterColumn 'xPRAttivitaVal', 'DefaultTipoVal'	, '[bit] NOT NULL'			, '0', '0 - non è la valorizzazione di default; 1 - è la valorizzazione di default'
		EXEC asp_du_DropIndex			 'xPRAttivitaVal', 'UK_xPRAttivitaVal_AR'
		EXEC asp_du_AddAlterIndex	 'xPRAttivitaVal', 'UK_xPRAttivitaVal_AR',	'[Cd_AR] ASC',	0, 0, 0, 1
		EXEC asp_du_DropIndex			 'xPRAttivitaVal', 'UK_xPRAttivitaVal_xRDTipoValorizzazione'
		EXEC asp_du_AddAlterIndex	 'xPRAttivitaVal', 'UK_xPRAttivitaVal_xRDTipoValorizzazione',	'[Id_PRAttivita] ASC, [Cd_xRDTipoValorizzazione] ASC',	0, 0, 0, 1

		-- Tabella Ticket
		IF dbo.afn_du_IsTable('xRDTicket') = 0
			EXEC asp_du_AddTable 'xRDTicket', 0, 'Ticket'
		
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'DataRichiesta'	, '[smalldatetime] NOT NULL', '''19000101''', 'Data richiesta'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_CF'					, '[char](7) NOT NULL'			, ''						, 'Codice cliente\fornitore'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_CF'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_CF]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Descrizione'		, '[varchar](230) NULL'			,  '''<Descrizione Mancante>'''	, 'Descrizione ticket'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'NoteRDTicket'	, '[text] NULL'							,  ''														, 'Note del ticket'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_xContratto'	, '[char](10) NULL'					,  ''														, 'Codice contratto'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xContratto'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_xContratto] FOREIGN KEY([Cd_xContratto])
		REFERENCES [dbo].[xContratto] ([Cd_xContratto])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xContratto]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_DOSottoCommessa', '[varchar](20) NULL'	,  ''														, 'Codice sottocommessa'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_DOSottoCommessa'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_DOSottoCommessa] FOREIGN KEY([Cd_DOSottoCommessa])
		REFERENCES [dbo].[DOSottoCommessa] ([Cd_DOSottoCommessa])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_DOSottoCommessa]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_xSLA'						, '[char](2) NULL'			,  ''														, 'Codice SLA'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xSLA'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_xSLA] FOREIGN KEY([Cd_xSLA])
		REFERENCES [dbo].[xSLA] ([Cd_xSLA])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xSLA]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_xRDStato_SLA'		, '[char](5) NULL'			,  ''														, 'Stato SLA'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xRDStato_SLA'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_xRDStato_SLA] FOREIGN KEY([Cd_xRDStato_SLA])
		REFERENCES [dbo].[xRDStato_SLA] ([CD_xRDStato_SLA])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xRDStato_SLA]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_xRDStato'				, '[char](5) NULL'	,  ''													, 'Stato ticket'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xRDStato'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_xRDStato] FOREIGN KEY([Cd_xRDStato])
		REFERENCES [dbo].[xRDStato] ([Cd_xRDStato])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xRDStato]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_xRDEsito'				, '[char](5) NULL'			,  ''														, 'Esito ticket'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xRDEsito'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_xRDEsito] FOREIGN KEY([Cd_xRDEsito])
		REFERENCES [dbo].[xRDEsito] ([Cd_xRDEsito])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xRDEsito]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Chiuso'			, '[bit] NOT NULL', '0', '0 - ticket aperto; 1 - ticket chiuso'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Sospeso'			, '[bit] NOT NULL', '0', '0 - ticket attivo; 1 - ticket sospeso'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Provenienza'	, '[bit] NOT NULL', '0', '0 - ticket creato nel gestionale; 1 - ticket proveniente da programma di help desk'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Id_TicketHD'	, '[int] NULL'		, '' , 'Identificativo del ticket nel programma help desk'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Contatto'		, '[varchar](50) NULL', '' , 'Contatto del cliente\fornitore'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Telefono'		, '[varchar](20) NULL', '' , 'Telefono'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Email'				, '[varchar](50) NULL', '' , 'Indirizzo e-mail'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_Preventivo', '[varchar](10) NULL',  '', 'Codice preventivo esecutivo'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xPreventivo'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_xPreventivo] FOREIGN KEY([Cd_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Cd_Preventivo])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xPreventivo]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'GestisciTicket', '[bit] NOT NULL', '1', '0 - non gestisce i ticket; 1 - gestisce i ticket'

		-- Tabella Ticket Attività
		IF dbo.afn_du_IsTable('xRDTicketAttivita') = 0
			EXEC asp_du_AddTable 'xRDTicketAttivita', 0, 'Ticket - Attività'
	
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Id_xRDTicket', '[int] NOT NULL',  '', 'Identificativo del ticket'
		EXEC asp_du_DropConstraint 'xRDTicketAttivita', 'FK_xRDTicketAttivita_xRDTicket'
		ALTER TABLE [dbo].[xRDTicketAttivita] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivita_xRDTicket] FOREIGN KEY([Id_xRDTicket])
		REFERENCES [dbo].[xRDTicket] ([Id_xRDTicket]) 
		On Update No Action 
		On Delete Cascade 
		ALTER TABLE [dbo].[xRDTicketAttivita] CHECK CONSTRAINT [FK_xRDTicketAttivita_xRDTicket]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Cd_PrAttivita', '[varchar](20) NOT NULL'	, '', 'Codice attività'
		EXEC asp_du_DropConstraint 'xRDTicketAttivita', 'FK_xRDTicketAttivita_PrAttivita'
		ALTER TABLE [dbo].[xRDTicketAttivita] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivita_PrAttivita] FOREIGN KEY([Cd_PrAttivita])
		REFERENCES [dbo].[PrAttivita] ([Cd_PrAttivita])
		ALTER TABLE [dbo].[xRDTicketAttivita] CHECK CONSTRAINT [FK_xRDTicketAttivita_PrAttivita]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Descrizione'		, '[varchar](230) NULL'		, '''<Descrizione Mancante>'''	, 'Descrizione attività nel ticket'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Cd_xOperatore'	, '[varchar](20) NOT NULL', '', 'Codice operatore'
		EXEC asp_du_DropConstraint 'xRDTicketAttivita', 'FK_xRDTicketAttivita_xOperatore'
		ALTER TABLE [dbo].[xRDTicketAttivita] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivita_xOperatore] FOREIGN KEY([Cd_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[xRDTicketAttivita] CHECK CONSTRAINT [FK_xRDTicketAttivita_xOperatore]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'NoteAttivita'			, '[text] NULL'						, '', 'Note dell attività nel ticket'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Cd_CFDest'					, '[nchar](3) NULL'				, '', 'Destinazione diversa'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'DataPianificazione', '[smalldatetime] NULL'	, '', 'Data pianificazione'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'DataAperturaPrev'	, '[smalldatetime] NULL'	, '', 'Data apertura prevista'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'NumOrePrev'				, '[numeric](18, 6) NULL'	, '', 'Numero ore previste'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'NumOreEff'					, '[numeric](18, 6) NULL'	, '', 'Numero ore effettive'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'DataApertura'			, '[smalldatetime] NULL'	, '', 'Data apertura'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'DataChiusura'			, '[smalldatetime] NULL'	, '', 'Data chiusura'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'TipoDataSLA'				, '[smallint] NULL'				, '', 'Tipo data SLA'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Cd_xRDStato'				, '[char](5) NULL'				, '', 'Stato attività'
		EXEC asp_du_DropConstraint 'xRDTicketAttivita', 'FK_xRDTicketAttivita_xRDStato'
		ALTER TABLE [dbo].[xRDTicketAttivita] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivita_xRDStato] FOREIGN KEY([Cd_xRDStato])
		REFERENCES [dbo].[xRDStato] ([Cd_xRDStato])
		On Update No Action
		On Delete No Action
		ALTER TABLE [dbo].[xRDTicketAttivita] CHECK CONSTRAINT [FK_xRDTicketAttivita_xRDStato]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Cd_xRDEsito'				, '[char](5) NULL'				, '', 'Esito attività'
		EXEC asp_du_DropConstraint 'xRDTicketAttivita', 'FK_xRDTicketAttivita_xRDEsito'
		ALTER TABLE [dbo].[xRDTicketAttivita] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivita_xRDEsito] FOREIGN KEY([Cd_xRDEsito])
		REFERENCES [dbo].[xRDEsito] ([Cd_xRDEsito])
		ALTER TABLE [dbo].[xRDTicketAttivita] CHECK CONSTRAINT [FK_xRDTicketAttivita_xRDEsito]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Cd_xRDTipo'				, '[char](5) NULL'				, '', 'Tipo attività'
		EXEC asp_du_DropConstraint 'xRDTicketAttivita', 'FK_xRDTicketAttivita_xRDTipo'
		ALTER TABLE [dbo].[xRDTicketAttivita] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivita_xRDTipo] FOREIGN KEY([Cd_xRDTipo])
		REFERENCES [dbo].[xRDTipo] ([Cd_xRDTipo])
		ALTER TABLE [dbo].[xRDTicketAttivita] CHECK CONSTRAINT [FK_xRDTicketAttivita_xRDTipo]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Provenienza'					, '[bit] NULL'					, '0', '0 - attività creata nel gestionale; 1 - attività proveniente da programma di help desk'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Id_TicketAttivitaHD'	, '[int] NULL'					, '' , 'Identificativo dell attività nel programma help desk'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Chiuso'							, '[bit] NULL'					, '0', '0 - attività aperta; 1 - attività chiusa'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Sospeso'							, '[bit] NULL'					, '0', '0 - attività attiva; 1 - attività sospesa'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Riga'								, '[smallint] NOT NULL'	, '0', 'Riga'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Id_PreventivoFase'		, '[int] NULL'					, '' , 'Identificativo della riga attività all interno del preventivo (> 0 se attività proviene dal wizard di emissione ticket da preventivo)'
		EXEC asp_du_DropConstraint 'xRDTicketAttivita', 'FK_xRDTicketAttivita_PreventivoFase'
		ALTER TABLE [dbo].[xRDTicketAttivita] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketAttivita_PreventivoFase] FOREIGN KEY([Id_PreventivoFase])
		REFERENCES [dbo].[xPreventivoFase] ([Id_PreventivoFase])
				
		-- Tabella Ticket Attività Matricola
		IF dbo.afn_du_IsTable('xRDTicketAttivitaMatricola') = 0
			EXEC asp_du_AddTable 'xRDTicketAttivitaMatricola', 0, 'Ticket - Matricole legate alle attività'
		
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'Id_xRDTicketAttivita', '[int] NOT NULL',  '', 'Identificativo dell attività'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMatricola', 'FK_xRDTicketAttivitaMatricola_xRDTicketAttivita'
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMatricola_xRDTicketAttivita] FOREIGN KEY([Id_xRDTicketAttivita])
		REFERENCES [dbo].[xRDTicketAttivita] ([Id_xRDTicketAttivita]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMatricola_xRDTicketAttivita]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'Cd_AR', '[varchar](20) NULL',  '', 'Codice articolo'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMatricola', 'FK_xRDTicketAttivitaMatricola_Cd_AR'
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMatricola_Cd_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMatricola_Cd_AR]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'NumeroMatricola', '[varchar] (40) COLLATE Latin1_General_CI_AS NULL', '', 'Matricola'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'Qta'						, '[numeric](18, 6) NULL'														, '', 'Quantità'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'Note'						, '[text] NULL'																			, '', 'Note della matricola'

		-- Tabella Ticket Attività Movimenti
		IF dbo.afn_du_IsTable('xRDTicketAttivitaMov') = 0
			EXEC asp_du_AddTable 'xRDTicketAttivitaMov', 0, 'Ticket - Movimenti effettuati per ogni attività'
		
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Id_xRDTicketAttivita', '[int] NOT NULL',  '', 'Identificativo dell attività'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov', 'FK_xRDTicketAttivitaMov_xRDTicketAttivita'
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_xRDTicketAttivita] FOREIGN KEY([Id_xRDTicketAttivita])
		REFERENCES [dbo].[xRDTicketAttivita] ([Id_xRDTicketAttivita])
		On Update No Action
		On Delete Cascade 
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_xRDTicketAttivita]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Cd_xOperatore', '[varchar](20) NOT NULL',  '', 'Codice operatore'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov', 'FK_xRDTicketAttivitaMov_xOperatore'
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_xOperatore] FOREIGN KEY([Cd_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_xOperatore]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Cd_PrRisorsa', '[varchar](20) NOT NULL',  '', 'Codice risorsa'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov', 'FK_xRDTicketAttivitaMov_PrRisorsa'
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_PrRisorsa] FOREIGN KEY([Cd_PrRisorsa])
		REFERENCES [dbo].[PrRisorsa] ([Cd_PrRisorsa])
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_PrRisorsa]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'DataInizio'								, '[smalldatetime] NOT NULL'	, ''	, 'Data inizio'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'DataFine'									, '[smalldatetime] NULL'			, ''	, 'Data fine'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'NoteAttivitaMov'					, '[text] NULL'								, ''	, 'Note del movimento'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Durata'										, '[numeric](18, 6) NOT NULL' , '0'	, 'Durata lavoro'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Cd_xRDTipoValorizzazione'	, '[char](5) NOT NULL'				, ''	, 'Tipo di valorizzazione'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov', 'FK_xRDTicketAttivitaMov_xRDTipoValorizzazione'
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_xRDTipoValorizzazione] FOREIGN KEY([Cd_xRDTipoValorizzazione])
		REFERENCES [dbo].[xRDTipoValorizzazione] ([Cd_xRDTipoValorizzazione])
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_xRDTipoValorizzazione]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'CostoUn', '[numeric](18, 6) NULL', '', 'Costo unitario'
		EXEC asp_du_DropColumn		'xRDTicketAttivitaMov' , 'CostoTot'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'CostoTot', 'AS (CONVERT([numeric](18,6),[Durata]*[CostoUn],(0)))', '', 'Costo totale'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Valorizzato', '[smallint] NOT NULL' , '0'	, 'Tipo valorizzazione: 1 - solo attività; 2 - solo operatore; 3 - attività + operatore'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'DataUltimaValorizzazione', '[smalldatetime] NULL' , ''	, 'Data ultima valorizzazione del movimento'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'MotivoInvalidazione', '[smallint] NULL', ''	, 'Motivo invalidazione lavoro'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'EsclusoDaVal', '[bit] NOT NULL', '0', '0 - si può valorizzare il movimento ; 1 - non si può valorizzare il movimento'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Cd_xRDEsito', '[char](5) NULL', '', 'Esito del movimento'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov', 'FK_xRDTicketAttivitaMov_xRDEsito'
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_xRDEsito] FOREIGN KEY([Cd_xRDEsito])
		REFERENCES [dbo].[xRDEsito] ([Cd_xRDEsito])
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_xRDEsito]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Riga'					, '[smallint] NOT NULL'	, '0'	, 'Riga'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'RigaPadre'		, '[smallint] NULL'			, ''	, 'Riga del movimento padre'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'NumRapportino', '[char](20) NULL'			, ''	, 'Numero del rapportino'

		-- Tabella Ticket Attività Operatori
		IF dbo.afn_du_IsTable('xRDTicketAttivitaOperatore') = 0
			EXEC asp_du_AddTable 'xRDTicketAttivitaOperatore', 0, 'Ticket - Operatori assegnati ad ogni attività'
		
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Id_xRDTicketAttivita', '[int] NOT NULL',  '', 'Identificativo dell attività'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaOperatore', 'FK_xRDTicketAttivitaOperatore_xRDTicketAttivita'
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaOperatore_xRDTicketAttivita] FOREIGN KEY([Id_xRDTicketAttivita])
		REFERENCES [dbo].[xRDTicketAttivita] ([Id_xRDTicketAttivita]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] CHECK CONSTRAINT [FK_xRDTicketAttivitaOperatore_xRDTicketAttivita]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Cd_xOperatore', '[varchar](20) NOT NULL',  '', 'Codice operatore'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaOperatore', 'FK_xRDTicketAttivitaOperatore_xOperatore'
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaOperatore_xOperatore] FOREIGN KEY([Cd_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] CHECK CONSTRAINT [FK_xRDTicketAttivitaOperatore_xOperatore]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Descrizione', '[varchar](230) NULL', '', 'Descrizione lavoro assegnato all operatore'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Responsabile', '[bit] NOT NULL', '0', '0 - operatore normale ; 1 - responsabile attività'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Cd_xRDStato', '[char](5) NULL',  '', 'Stato attività/operatore'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaOperatore', 'FK_xRDTicketAttivitaOperatore_xRDStato'
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaOperatore_xRDStato] FOREIGN KEY([Cd_xRDStato])
		REFERENCES [dbo].[xRDStato] ([Cd_xRDStato])
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] CHECK CONSTRAINT [FK_xRDTicketAttivitaOperatore_xRDStato]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Cd_xRDEsito', '[char](5) NULL',  '', 'Esito attività/operatore'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaOperatore', 'FK_xRDTicketAttivitaOperatore_xRDEsito'
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaOperatore_xRDEsito] FOREIGN KEY([Cd_xRDEsito])
		REFERENCES [dbo].[xRDEsito] ([Cd_xRDEsito])
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] CHECK CONSTRAINT [FK_xRDTicketAttivitaOperatore_xRDEsito]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Riga'		, '[smallint] NULL'	, ''	, 'Riga'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'RigaPadre'	, '[smallint] NULL'	, ''	, 'Riga dell associazione padre'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Chiuso'		, '[bit] NOT NULL'	, '0'	, '0 - assegnazione operatore aperta ; 1 - assegnazione operatore chiusa'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Sospeso'	, '[bit] NOT NULL'	, '0'	, '0 - assegnazione operatore attiva ; 1 - assegnazione operatore sospesa'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'DataInizio', '[smalldatetime] NULL' , ''	, 'Data inizio associazione'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'DataFine'	, '[smalldatetime] NULL' , ''	, 'Data fine associazione'

		/* Anagrafica Risorse */
		EXEC asp_du_AddAlterColumn 'PRRisorsa', 'xCd_CF', '[char](7) NULL',  '', 'Fornitore standard per risorse interne'
		EXEC asp_du_DropConstraint 'PRRisorsa', 'xFK_PRRisorsa_CF'
		ALTER TABLE [PRRisorsa] WITH NOCHECK ADD CONSTRAINT [xFK_PRRisorsa_CF] FOREIGN KEY([xCd_CF]) 
		REFERENCES [dbo].[CF]([Cd_CF])
		ALTER TABLE [PRRisorsa] CHECK CONSTRAINT [xFK_PRRisorsa_CF]

		/* Gestione Documenti */
		EXEC asp_du_AddAlterColumn 'DORig', 'xId_RDTicketAttivitaMov'	, 'INT NULL'				, '', 'Identificativo del movimento del ticket nelle righe documento'
		EXEC asp_du_DropConstraint 'DORig', 'xFK_DORig_xId_RDTicketAttivitaMov'
		ALTER TABLE [DORig] WITH NOCHECK ADD CONSTRAINT [xFK_DORig_xId_RDTicketAttivitaMov] FOREIGN KEY([xId_RDTicketAttivitaMov]) 
		REFERENCES [xRDTicketAttivitaMov] ([Id_xRDTicketAttivitaMov])
		ALTER TABLE [DORig] CHECK CONSTRAINT [xFK_DORig_xId_RDTicketAttivitaMov]
		EXEC asp_du_AddAlterColumn 'DORig', 'xCd_xContratto'					, '[char](10) NULL'	, '', 'Codice contratto'
		EXEC asp_du_DropConstraint 'DORig', 'xFK_DORig_xContratto'
		ALTER TABLE [dbo].[DORig] WITH CHECK ADD CONSTRAINT [xFK_DORig_xContratto] FOREIGN KEY([xCd_xContratto])
		REFERENCES [dbo].[xContratto] ([Cd_xContratto])
		ALTER TABLE [dbo].[DORig] CHECK CONSTRAINT [xFK_DORig_xContratto]
		EXEC asp_du_AddAlterColumn 'DORig', 'xId_DORig_CP'	, '[int] NULL', '', 'Id della riga ordine\bolla a fornitore la cui qtà è stata parzialmente o totalmente assegnata a questa riga.'
		EXEC asp_du_DropConstraint 'DORig', 'xFK_Id_DORig_CP'
		ALTER TABLE [dbo].[DORig] WITH NOCHECK ADD CONSTRAINT [xFK_Id_DORig_CP] FOREIGN KEY([xId_DORig_CP])
		REFERENCES [dbo].[DORig] ([Id_DORig])
		ALTER TABLE [dbo].[DORig] CHECK CONSTRAINT [xFK_Id_DORig_CP]

		/* Stato Avanzamento Lavori */	
		IF dbo.afn_du_IsTable('xStatoLavoro') = 0
			EXEC asp_du_AddTable 'xStatoLavoro', 0, 'Tabella dello stato avanzamento lavori per sottocommessa (dati consolidati)'

		EXEC asp_du_AddAlterColumn 'xStatoLavoro', 'Cd_DOSottoCommessa', '[varchar](20) NOT NULL',  '', 'Codice sottocommessa'
		EXEC asp_du_DropConstraint 'xStatoLavoro', 'FK_xStatoLavoro_DOSottoCommessa'
		ALTER TABLE [dbo].[xStatoLavoro] WITH CHECK ADD CONSTRAINT [FK_xStatoLavoro_DOSottoCommessa] FOREIGN KEY([Cd_DOSottoCommessa])
		REFERENCES [dbo].[DOSottoCommessa] ([Cd_DOSottoCommessa])
		ALTER TABLE [dbo].[xStatoLavoro] CHECK CONSTRAINT [FK_xStatoLavoro_DOSottoCommessa]
		EXEC asp_du_AddAlterColumn 'xStatoLavoro', 'DataPeriodo'							, '[smalldatetime] NOT NULL'	,  'GETDATE()', 'Data periodo di riferimento'
		EXEC asp_du_AddAlterColumn 'xStatoLavoro', 'StatoMateriale'						, '[numeric](18, 6) NOT NULL'	,  '0'				, 'Stato materiale'
		EXEC asp_du_AddAlterColumn 'xStatoLavoro', 'StatoAttivitaInterna'			, '[numeric](18, 6) NOT NULL'	,  '0'				, 'Stato attività interna'
		EXEC asp_du_AddAlterColumn 'xStatoLavoro', 'StatoAttivitaEsterna'			, '[numeric](18, 6) NOT NULL'	,  '0'				, 'Stato attività esterna'
		EXEC asp_du_AddAlterColumn 'xStatoLavoro', 'FatturatoMateriale'				, '[numeric](18, 6) NOT NULL'	,  '0'				, 'Fatturato materiale'
		EXEC asp_du_AddAlterColumn 'xStatoLavoro', 'FatturatoAttivitaInterna'	, '[numeric](18, 6) NOT NULL'	,  '0'				, 'Fatturato attività interna'
		EXEC asp_du_AddAlterColumn 'xStatoLavoro', 'FatturatoAttivitaEsterna'	, '[numeric](18, 6) NOT NULL'	,  '0'				, 'Fatturato attività esterna'
		EXEC asp_du_AddAlterColumn 'xStatoLavoro', 'ConsegnatoMateriale'			, '[numeric](18, 6) NOT NULL'	,  '0'				, 'Consegnato materiale'
		EXEC asp_du_AddAlterColumn 'xStatoLavoro', 'ConsegnatoAttivitaInterna', '[numeric](18, 6) NOT NULL'	,  '0'				, 'Consegnato attività interna'
		EXEC asp_du_AddAlterColumn 'xStatoLavoro', 'ConsegnatoAttivitaEsterna', '[numeric](18, 6) NOT NULL'	,  '0'				, 'Consegnato attivita esterna'

		/* Tabelle correlate all'anagrafica sottocommesse */
		-- Tabella dei feedback	
		IF dbo.afn_du_IsTable('xDOSottoCommessaFeedback') = 0
			EXEC asp_du_AddTable 'xDOSottoCommessaFeedback', 3, 'Tabella dei feedback'

		EXEC asp_du_AddAlterColumn 'xDOSottoCommessaFeedback', 'Descrizione', 'varchar(80) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione feedback'
		EXEC asp_du_DropConstraint 'xDOSottoCommessaFeedback', 'CK_xDOSottoCommessaFeedback_Cd_xDOSottoCommessaFeedback'
		ALTER TABLE [dbo].[xDOSottoCommessaFeedback] WITH NOCHECK ADD CONSTRAINT [CK_xDOSottoCommessaFeedback_Cd_xDOSottoCommessaFeedback] CHECK (([Cd_xDOSottoCommessaFeedback]<>''))
		ALTER TABLE [dbo].[xDOSottoCommessaFeedback] CHECK CONSTRAINT [CK_xDOSottoCommessaFeedback_Cd_xDOSottoCommessaFeedback]

		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xCD_DoSottoCommessaFeedback', 'char(3) NULL',  '('''')', 'Codice feedback'
		EXEC asp_du_DropConstraint 'DOSottoCommessa', 'xFK_DOSottoCommessa_Cd_DOSottoCommessaFeedback'
		ALTER TABLE DOSottoCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOSottoCommessa_Cd_DOSottoCommessaFeedback] FOREIGN KEY([xCd_DOSottoCommessaFeedback])
		REFERENCES [dbo].[xDOSottoCommessaFeedback] ([Cd_xDOSottoCommessaFeedback]) NOT FOR REPLICATION
		ALTER TABLE DOSottoCommessa CHECK CONSTRAINT [xFK_DOSottoCommessa_Cd_DOSottoCommessaFeedback]

		-- Tabella delle origini
		IF dbo.afn_du_IsTable('xDOSottoCommessaOrigine') = 0
			EXEC asp_du_AddTable 'xDOSottoCommessaOrigine', 3, 'Tabella delle origini'

		EXEC asp_du_AddAlterColumn 'xDOSottoCommessaOrigine', 'Descrizione', 'varchar(80) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione origine'
		EXEC asp_du_DropConstraint 'xDOSottoCommessaOrigine', 'CK_xDOSottoCommessaOrigine_Cd_xDOSottoCommessaOrigine'
		ALTER TABLE [dbo].[xDOSottoCommessaOrigine] WITH NOCHECK ADD CONSTRAINT [CK_xDOSottoCommessaOrigine_Cd_xDOSottoCommessaOrigine] CHECK (([Cd_xDOSottoCommessaOrigine]<>''))
		ALTER TABLE [dbo].[xDOSottoCommessaOrigine] CHECK CONSTRAINT [CK_xDOSottoCommessaOrigine_Cd_xDOSottoCommessaOrigine]

		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xCD_DoSottoCommessaOrigine', 'char(3) NULL',  '('''')', 'Codice origine'
		EXEC asp_du_DropConstraint 'DOSottoCommessa', 'xFK_DOSottoCommessa_Cd_DOSottoCommessaOrigine'
		ALTER TABLE DOSottoCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOSottoCommessa_Cd_DOSottoCommessaOrigine] FOREIGN KEY([xCd_DOSottoCommessaOrigine])
		REFERENCES [dbo].[xDOSottoCommessaOrigine] ([Cd_xDOSottoCommessaOrigine]) NOT FOR REPLICATION 
		ALTER TABLE DOSottoCommessa CHECK CONSTRAINT [xFK_DOSottoCommessa_Cd_DOSottoCommessaOrigine]

		-- Tabella delle certificazioni
		IF dbo.afn_du_IsTable('xDoSottoCommessaCert') = 0
			EXEC asp_du_AddTable 'xDoSottoCommessaCert', 0, 'Tabella delle certificazioni'
		
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaCert', 'Id_DoSottoCommessa', '[int] NOT NULL', '', 'Identificativo della sottocommessa'
		EXEC asp_du_DropConstraint 'xDoSottoCommessaCert', 'FK_xDoSottoCommessaCert_xDoSottoCommessa'
		ALTER TABLE [dbo].[xDoSottoCommessaCert] WITH NOCHECK ADD CONSTRAINT [FK_xDoSottoCommessaCert_xDoSottoCommessa] FOREIGN KEY([Id_DoSottoCommessa])
		REFERENCES [dbo].[DOSottoCommessa] ([Id_DOSottoCommessa])
		ALTER TABLE [dbo].[xDoSottoCommessaCert] CHECK CONSTRAINT [FK_xDoSottoCommessaCert_xDoSottoCommessa]
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaCert', 'Numero'				, '[varchar](20) NULL'	, ''	, 'Numero della certificazione'
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaCert', 'Descrizione'	, '[varchar](50) NULL'	, ''	, 'Descrizione della certificazione'
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaCert', 'RilasciataDa'	, '[varchar](50) NULL'	, ''	, 'Descrizione dell ente certificatore'
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaCert', 'Data'					, '[smalldatetime] NULL', ''	, 'Data di rilascio della certificazione'
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaCert', 'Riga'					, '[smallint] NOT NULL'	, '0'	, 'Riga'
		
		/* Preferenze e impostazioni G.A.C. */
		-- Tabella delle preferenze e delle impostazioni
		IF dbo.afn_du_IsTable('xImpostazione') = 0
			EXEC asp_du_AddTable 'xImpostazione', 0, 'Tabella delle preferenze e delle impostazioni G.A.C.'
		
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'BloccaCd_DOCommessa'			, '[bit] NOT NULL'				, '0'			, '0 - è possibile codificare manualmente una commessa; 1 - non è possibile codificare manualmente una commessa'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'BloccaCd_DOSottoCommessa', '[bit] NOT NULL'				, '0'			, '0 - è possibile codificare manualmente una sottocommessa; 1 - non è possibile codificare manualmente una sottocommessa'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'Separatore'							, '[varchar](1) NOT NULL'	, '''.'''	, 'Carattere separatore (ripetuto da 1 a 5 volte) tra il codice commessa e il codice sottocommessa nella codifica automatica'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'Cmd_Genera_InExec'       , '[bit] NOT NULL', '0', '0 - è possibile avviare il wizard Preventivi\Generazione Commesse; 1 - wizard Preventivi\Generazione Commesse già in uso da un altro terminale'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'TipoValCosti'						, '[smallint] NOT NULL'		, '1'			, 'Tipo di valorizzazione dei costi'

		-- Tabella di configurazione del codice commessa
		IF dbo.afn_du_IsTable('xImpostazioneCC') = 0
			EXEC asp_du_AddTable 'xImpostazioneCC', 0, 'Tabella di configurazione del codice commessa'
			
		EXEC asp_du_AddAlterColumn 'xImpostazioneCC', 'Sequenza'	, '[int] NOT NULL'		, '0'			, 'Sequenza'
		EXEC asp_du_AddAlterColumn 'xImpostazioneCC', 'TipoCodice', '[char](1) NOT NULL', '''P'''	, 'Tipo codice (A = anno; M = mese; P = progressivo annuo; Q = progressivo assoluto)'
		EXEC asp_du_DropConstraint 'xImpostazioneCC', 'CK_xImpostazioneCC_TipoCodice'
		ALTER TABLE [dbo].[xImpostazioneCC] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazioneCC_TipoCodice] CHECK (([TipoCodice] = 'A' or ([TipoCodice] = 'M' or ([TipoCodice] = 'P' or ([TipoCodice] = 'Q')))))
		ALTER TABLE [dbo].[xImpostazioneCC] CHECK CONSTRAINT [CK_xImpostazioneCC_TipoCodice]
		EXEC asp_du_AddAlterColumn 'xImpostazioneCC', 'Lunghezza'	, '[int] NOT NULL'		, '2'			, 'Lunghezza'
			
		-- Tabella di configurazione del codice sottocommessa
		IF dbo.afn_du_IsTable('xImpostazioneCS') = 0
			EXEC asp_du_AddTable 'xImpostazioneCS', 0, 'Tabella di configurazione del codice sottocommessa'
			
		EXEC asp_du_AddAlterColumn 'xImpostazioneCS', 'Sequenza'	, '[int] NOT NULL'		, '0'			, 'Sequenza'
		EXEC asp_du_AddAlterColumn 'xImpostazioneCS', 'TipoCodice', '[char](1) NOT NULL', '''C'''	, 'Tipo codice (T = tipo; R = progressivo per tipo; C = progressivo per commessa)'
		EXEC asp_du_DropConstraint 'xImpostazioneCS', 'CK_xImpostazioneCS_TipoCodice'
		ALTER TABLE [dbo].[xImpostazioneCS] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazioneCS_TipoCodice] CHECK  (([TipoCodice] = 'T' or ([TipoCodice] = 'R' or ([TipoCodice] = 'C' ))))
		ALTER TABLE [dbo].[xImpostazioneCS] CHECK CONSTRAINT [CK_xImpostazioneCS_TipoCodice]
		EXEC asp_du_AddAlterColumn 'xImpostazioneCS', 'Lunghezza'	, '[int] NOT NULL'		, '1'			, 'Lunghezza'

		-- Tabella tipi per generazione codice sottocommessa
		IF dbo.afn_du_IsTable('xImpostazioneCSTipo') = 0
			EXEC asp_du_AddTable 'xImpostazioneCSTipo', 3, 'Tabella dei tipi per generazione codice sottocommessa'
			
		EXEC asp_du_AddAlterColumn	'xImpostazioneCSTipo', 'Descrizione', 'varchar(50) NOT NULL', '', 'Descrizione tipo'
			
		EXEC asp_du_AddAlterColumn	'DOSottoCommessa', 'xCd_xImpostazioneCSTipo', 'char(3) NULL', '', 'Tipo per generazione codice sottocommessa'
		EXEC asp_du_DropConstraint	'DOSottoCommessa', 'xFK_DOSottoCommessa_xImpostazioneCSTipo'
		ALTER TABLE [dbo].[DOSottoCommessa] WITH NOCHECK ADD CONSTRAINT [xFK_DOSottoCommessa_xImpostazioneCSTipo] FOREIGN KEY([xCd_xImpostazioneCSTipo])
		REFERENCES [dbo].[xImpostazioneCSTipo] ([Cd_xImpostazioneCSTipo]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[DOSottoCommessa] CHECK CONSTRAINT [xFK_DOSottoCommessa_xImpostazioneCSTipo]
		
		-- porto la versione a 1.0
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 0, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.1
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc

	if @currentVersion = '1.0' begin
		select 'Applico aggiornamenti al database: 1.0->1.1'
		-- qui operazioni per l'aggiornamento DB da 1.0 a 1.1

		-- porto la versione a 1.1
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 1, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.2
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.1' begin
		select 'Applico aggiornamenti al database: 1.1->1.2'
		-- qui operazioni per l'aggiornamento DB da 1.1 a 1.2
		
		/* Preventivi - Modifiche alla gestione del costo e del ricavo e nuova gestione del margine */
		/* 16-07-2010 */

		/* Materiali */
		-- Costo unitario lordo
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'CostoUnitarioLordoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario lordo in valuta'
		-- Sconto su acquisto
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'ScontoAcquisto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare sul costo unitario lordo'
		-- Margine reale gestione "Al Costo"
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'MargineCostoV', '[numeric](18, 6) NOT NULL', '0', 'Margine reale gestione "Al Costo"'
		EXEC asp_du_DropColumn		 'xPreventivoMateriale', 'MargineCostoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'MargineCostoE', 'AS (CONVERT([numeric](18,2), round(([MargineCostoV] / [Cambio]),2),(0)))', '', 'Margine reale gestione "Al Costo" in euro'
		-- Margine percentuale gestione "Al Costo"
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'MargineCostoPerc', '[varchar](15) NOT NULL', '('''')', 'Margine percentuale gestione "Al Costo"'
		-- Ricavo unitario scontato
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'RicavoUnitarioScontatoV', '[numeric](18, 6) NOT NULL', '0', 'Ricavo unitario scontato in valuta'
		-- Margine reale gestione "Al Ricavo"
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'MargineRicavoV', '[numeric](18, 6) NOT NULL', '0', 'Margine reale gestione "Al Ricavo"'
		EXEC asp_du_DropColumn		 'xPreventivoMateriale', 'MargineRicavoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'MargineRicavoE', 'AS (CONVERT([numeric](18,2), round(([MargineRicavoV] / [Cambio]),2),(0)))', '', 'Margine reale gestione "Al Ricavo" in euro'
		-- Margine percentuale gestione "Al Ricavo"
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'MargineRicavoPerc', '[varchar](15) NOT NULL', '('''')', 'Margine percentuale gestione "Al Ricavo"'

		/* Gruppi di materiale */
		-- Costo unitario lordo
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'CostoUnitarioLordoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario lordo in valuta'
		-- Sconto su acquisto
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'ScontoAcquisto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare sul costo unitario lordo'
		-- Margine reale gestione "Al Costo"
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'MargineCostoV', '[numeric](18, 6) NOT NULL', '0', 'Margine reale gestione "Al Costo"'
		EXEC asp_du_DropColumn		 'xPreventivoGruppo', 'MargineCostoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'MargineCostoE', 'AS (CONVERT([numeric](18,2), round(([MargineCostoV] / [Cambio]),2),(0)))', '', 'Margine reale gestione "Al Costo" in euro'
		-- Margine percentuale gestione "Al Costo"
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'MargineCostoPerc', '[varchar](15) NOT NULL', '('''')', 'Margine percentuale gestione "Al Costo"'
		-- Ricavo unitario scontato
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'RicavoUnitarioScontatoV', '[numeric](18, 6) NOT NULL', '0', 'Ricavo unitario scontato in valuta'
		-- Margine reale gestione "Al Ricavo"
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'MargineRicavoV', '[numeric](18, 6) NOT NULL', '0', 'Margine reale gestione "Al Ricavo"'
		EXEC asp_du_DropColumn		 'xPreventivoGruppo', 'MargineRicavoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'MargineRicavoE', 'AS (CONVERT([numeric](18,2), round(([MargineRicavoV] / [Cambio]),2),(0)))', '', 'Margine reale gestione "Al Ricavo" in euro'
		-- Margine percentuale gestione "Al Ricavo"
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'MargineRicavoPerc', '[varchar](15) NOT NULL', '('''')', 'Margine percentuale gestione "Al Ricavo"'

		/* Attività */
		-- Costo unitario lordo
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'CostoUnitarioLordoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario lordo in valuta'
		-- Sconto su acquisto
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'ScontoAcquisto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare sul costo unitario lordo'
		-- Margine reale gestione "Al Costo"
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'MargineCostoV', '[numeric](18, 6) NOT NULL', '0', 'Margine reale gestione "Al Costo"'
		EXEC asp_du_DropColumn		 'xPreventivoFase', 'MargineCostoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'MargineCostoE', 'AS (CONVERT([numeric](18,2), round(([MargineCostoV] / [Cambio]),2),(0)))', '', 'Margine reale gestione "Al Costo" in euro'
		-- Margine percentuale gestione "Al Costo"
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'MargineCostoPerc', '[varchar](15) NOT NULL', '('''')', 'Margine percentuale gestione "Al Costo"'
		-- Ricavo unitario scontato
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'RicavoUnitarioScontatoV', '[numeric](18, 6) NOT NULL', '0', 'Ricavo unitario scontato in valuta'
		-- Margine reale gestione "Al Ricavo"
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'MargineRicavoV', '[numeric](18, 6) NOT NULL', '0', 'Margine reale gestione "Al Ricavo"'
		EXEC asp_du_DropColumn		 'xPreventivoFase', 'MargineRicavoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'MargineRicavoE', 'AS (CONVERT([numeric](18,2), round(([MargineRicavoV] / [Cambio]),2),(0)))', '', 'Margine reale gestione "Al Ricavo" in euro'
		-- Margine percentuale gestione "Al Ricavo"
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'MargineRicavoPerc', '[varchar](15) NOT NULL', '('''')', 'Margine percentuale gestione "Al Ricavo"'

		/* Preventivi - Modello di valorizzazione */
		/* 27-07-2010 */

		-- Testa
		EXEC asp_du_AddAlterColumn 'xPreventivo'					, 'ModelloVal', '[char](1) NOT NULL', '''C''', 'C - Preventivo valorizzato "Al Costo"; R - Preventivo valorizzato "Al Ricavo"'
		-- Materiali
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale'	, 'ModelloVal', '[char](1) NOT NULL', '''C''', 'C - Materiale valorizzato "Al Costo"; R - Materiale valorizzato "Al Ricavo"'
		-- Gruppi di materiale		
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo'		, 'ModelloVal', '[char](1) NOT NULL', '''C''', 'C - Gruppo di materiale valorizzato "Al Costo"; R - Gruppo di materiale valorizzato "Al Ricavo"'
		-- Attività		
		EXEC asp_du_AddAlterColumn 'xPreventivoFase'			, 'ModelloVal', '[char](1) NOT NULL', '''C''', 'C - Attività valorizzata "Al Costo"; R - Attività valorizzata "Al Ricavo"'

		/* Preventivi - Modifiche alla gestione del costo per aggiunta:
										- costo unitario ricaricato lordo
										- sconto sul costo unitario ricaricato */
		/* 06-08-2010 */

		-- Materiali
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'CostoUnitarioRicaricatoLordoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario ricaricato lordo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'ScontoCostoRicaricato', '[varchar](20) NOT NULL', '('''')', 'Sconto al cliente da applicare sul costo unitario ricaricato'
		-- Gruppi di materiale
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'CostoUnitarioRicaricatoLordoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario ricaricato lordo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'ScontoCostoRicaricato', '[varchar](20) NOT NULL', '('''')', 'Sconto al cliente da applicare sul costo unitario ricaricato'
		-- Attività
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'CostoUnitarioRicaricatoLordoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario ricaricato lordo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'ScontoCostoRicaricato', '[varchar](20) NOT NULL', '('''')', 'Sconto al cliente da applicare sul costo unitario ricaricato'

		-- porto la versione a 1.2
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 2, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.3
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.2' begin
		select 'Applico aggiornamenti al database: 1.2->1.3'
		-- qui operazioni per l'aggiornamento DB da 1.2 a 1.3
		
		/* Contratti - Riferimento testa ordine */
		/* 08-09-2010 */
		EXEC asp_du_AddAlterColumn 'xContratto', 'RifID_DoTes' , 'INT NULL' ,'' , 'Riferimento testa ordine relativo al contratto'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_RifID_DoTes'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_RifID_DoTes] FOREIGN KEY([RifID_DoTes])
		REFERENCES [dbo].[DOTes] ([Id_DoTes])
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_RifID_DoTes]
		
		/* Contratti - Riferimento testa sottopreventivo esecutivo */
		/* 28-09-2010 */
		EXEC asp_du_AddAlterColumn 'xContratto', 'RifId_Preventivo' , 'INT NULL' ,'' , 'Riferimento testa sottopreventivo esecutivo'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_RifId_Preventivo'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_RifId_Preventivo] FOREIGN KEY([RifId_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Id_Preventivo])
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_RifId_Preventivo]

		/* Documenti - Nuova versione del ricalcolo sconti su ordini */
		/* 08-09-2010 */
		EXEC asp_du_DropColumn 'DOTES', 'xImportoTotaleV'

		/* Preventivi - Ricalcolo ricarichi e sconti in base al prezzo finale pattuito con il cliente */
		/* 10-09-2010 */
		-- Preferenze G.A.C. (tabella xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviRicalcolaMateriale', '[bit] NOT NULL', '1', '0 - i materiali sono esclusi dal ricalcolo ricarichi\sconti; 1 - i materiali sono inclusi nel ricalcolo ricarichi\sconti'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviRicalcolaFittizi'	, '[bit] NOT NULL', '1', '0 - gli articoli fittizi sono esclusi dal ricalcolo ricarichi\sconti; 1 - gli articoli fittizi sono inclusi nel ricalcolo ricarichi\sconti'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviRicalcolaFase'			, '[bit] NOT NULL', '1', '0 - le attività sono escluse dal ricalcolo ricarichi\sconti; 1 - le attività sono incluse nel ricalcolo ricarichi\sconti'

		/* Preventivi - Gestione dei Contratti di Manutenzione */
		/* 16-09-2010 */
		-- Preferenze G.A.C. (tabella xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'ContrattiCd_AR', '[varchar](20) NULL', '', 'Codice articolo di default per i canoni di manutenzione'
		EXEC asp_du_DropConstraint 'xImpostazione', 'FK_xImpostazione_ContrattiCd_AR'
		ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [FK_xImpostazione_ContrattiCd_AR] FOREIGN KEY([ContrattiCd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [FK_xImpostazione_ContrattiCd_AR]
		
		-- Sottopreventivo - Supporti e Manodopere
		IF dbo.afn_du_IsTable('xPreventivoContratto') = 0
			BEGIN
				CREATE TABLE [dbo].xPreventivoContratto(
					[Id_PreventivoContratto] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoContratto_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoContratto_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoContratto_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoContratto_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
				 CONSTRAINT [PK_xPreventivoContratto] PRIMARY KEY NONCLUSTERED 
				(
					[Id_PreventivoContratto] ASC
				)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
				) ON [PRIMARY]
			END
		EXEC asp_du_AddAlterTableComment 'xPreventivoContratto', 'Sottopreventivi - Contratto'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Id_Preventivo', '[int] NOT NULL', '', 'Identificativo testa sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Cd_ARGruppo1'	, '[char](3) NULL', '', 'Famiglia articolo'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Cd_ARGruppo2'	, '[char](3) NULL', '', 'Gruppo articolo'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Cd_ARGruppo3'	, '[char](3) NULL', '', 'Sottogruppo articolo'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Cd_AR', '[varchar](20) NULL', '', 'Codice articolo (è un supporto o una manodopera)'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Cd_VL', '[char](3) NULL', '', 'Valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Cambio'					, '[numeric](18, 6) NOT NULL'	, '1'			, 'Cambio'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Decimali'				, '[tinyint] NOT NULL'				, '2'			, 'Decimali per il prezzo totale'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'DecimaliPrzUn'	, '[tinyint] NOT NULL'				, '3'			, 'Decimali per il prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Quantita'				, '[numeric](18, 8) NOT NULL'	, '0'			, 'Quantità'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'FattoreToUM1'		, '[numeric](18, 8) NOT NULL'	, '1'			, 'Fattore di conversione all unità di misura principale'
		EXEC asp_du_DropColumn		 'xPreventivoContratto', 'QuantitaUM1'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'QuantitaUM1'		, 'AS ([Quantita] * [FattoreToUM1])', '', 'Quantità convertita all unità di misura principale'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'RicavoUnitarioV', '[numeric](18, 6) NOT NULL'	, '0'			, 'Ricavo unitario in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Sconto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare sul valore "Al Ricavo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'RicavoTotaleV', '[numeric](18, 6) NOT NULL', '0', 'Ricavo totale in valuta'
		EXEC asp_du_DropColumn		 'xPreventivoContratto', 'RicavoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'RicavoTotaleE', 'AS (CONVERT([numeric](18,2), round(([RicavoTotaleV] / [Cambio]),2),(0)))', '', 'Ricavo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'CostoUnitarioV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Ricarica', '[varchar](15) NOT NULL', '('''')', 'Ricarico da applicare sul valore "Al Costo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'CostoUnitarioRicaricatoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario ricaricato in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'CostoTotaleV', '[numeric](18, 6) NOT NULL', '0', 'Costo totale in valuta'
		EXEC asp_du_DropColumn		 'xPreventivoContratto', 'CostoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'CostoTotaleE', 'AS (CONVERT([numeric](18,2), round(([CostoTotaleV] / [Cambio]),2),(0)))', '', 'Costo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Opzionale', '[bit] NOT NULL', '0', '0 - Contratto non opzionale; 1 - Contratto opzionale'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'NotePreventivoContratto', 'text NULL', '', 'Note Contratto'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'Sequenza', '[int] NOT NULL', '0', 'Sequenza'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'CostoUnitarioLordoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario lordo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'ScontoAcquisto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare sul costo unitario lordo'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'MargineCostoV', '[numeric](18, 6) NOT NULL', '0', 'Margine reale gestione "Al Costo"'
		EXEC asp_du_DropColumn		 'xPreventivoContratto', 'MargineCostoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'MargineCostoE', 'AS (CONVERT([numeric](18,2), round(([MargineCostoV] / [Cambio]),2),(0)))', '', 'Margine reale gestione "Al Costo" in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'MargineCostoPerc', '[varchar](15) NOT NULL', '('''')', 'Margine percentuale gestione "Al Costo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'RicavoUnitarioScontatoV', '[numeric](18, 6) NOT NULL', '0', 'Ricavo unitario scontato in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'MargineRicavoV', '[numeric](18, 6) NOT NULL', '0', 'Margine reale gestione "Al Ricavo"'
		EXEC asp_du_DropColumn		 'xPreventivoContratto', 'MargineRicavoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'MargineRicavoE', 'AS (CONVERT([numeric](18,2), round(([MargineRicavoV] / [Cambio]),2),(0)))', '', 'Margine reale gestione "Al Ricavo" in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'MargineRicavoPerc', '[varchar](15) NOT NULL', '('''')', 'Margine percentuale gestione "Al Ricavo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'ModelloVal', '[char](1) NOT NULL', '''C''', 'C - Contratto valorizzato "Al Costo"; R - Contratto valorizzato "Al Ricavo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'CostoUnitarioRicaricatoLordoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario ricaricato lordo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoContratto', 'ScontoCostoRicaricato', '[varchar](20) NOT NULL', '('''')', 'Sconto al cliente da applicare sul costo unitario ricaricato'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'FK_xPreventivoContratto_AR'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'FK_xPreventivoContratto_ARMisura'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'FK_xPreventivoContratto_VL'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'FK_xPreventivoContratto_Preventivo'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'FK_xPreventivoContratto_ARGruppo1'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'FK_xPreventivoContratto_ARGruppo2'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'FK_xPreventivoContratto_ARGruppo3'
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoContratto_AR] FOREIGN KEY([Cd_AR]) REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [FK_xPreventivoContratto_AR]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoContratto_ARMisura] FOREIGN KEY([Cd_ARMisura]) REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [FK_xPreventivoContratto_ARMisura]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoContratto_VL] FOREIGN KEY([Cd_VL]) REFERENCES [dbo].[VL] ([Cd_VL]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [FK_xPreventivoContratto_VL]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoContratto_Preventivo] FOREIGN KEY([Id_Preventivo]) REFERENCES	[dbo].[xPreventivo] ([Id_Preventivo])--ON DELETE CASCADE
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [FK_xPreventivoContratto_Preventivo]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoContratto_ARGruppo1] FOREIGN KEY([Cd_ARGruppo1]) REFERENCES	[dbo].[ARGruppo1] ([Cd_ARGruppo1]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoContratto] NOCHECK CONSTRAINT [FK_xPreventivoContratto_ARGruppo1]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoContratto_ARGruppo2] FOREIGN KEY([Cd_ARGruppo1], [Cd_ARGruppo2]) REFERENCES	[dbo].[ARGruppo2] ([Cd_ARGruppo1], [Cd_ARGruppo2]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoContratto] NOCHECK CONSTRAINT [FK_xPreventivoContratto_ARGruppo2]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoContratto_ARGruppo3] FOREIGN KEY([Cd_ARGruppo1], [Cd_ARGruppo2], [Cd_ARGruppo3]) REFERENCES	[dbo].[ARGruppo3] ([Cd_ARGruppo1], [Cd_ARGruppo2], [Cd_ARGruppo3]) NOT FOR REPLICATION
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [FK_xPreventivoContratto_ARGruppo3]
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_CostoUnitarioV'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_CostoUnitarioRicaricatoV'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_CostoTotaleV'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_Quantita'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_RicavoUnitarioV'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_Sconto'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_RicavoTotaleV'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_CostoUnitarioLordoV'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_ScontoAcquisto'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_RicavoUnitarioScontatoV'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_MargineCostoPerc'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_MargineRicavoPerc'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_ModelloVal'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_CostoUnitarioRicaricatoLordoV'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_ScontoCostoRicaricato'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_Cd_ARGruppo123'
		EXEC asp_du_DropConstraint 'xPreventivoContratto', 'CK_xPreventivoContratto_Sequenza'
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_CostoUnitarioV] CHECK (([CostoUnitarioV] >= 0))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_CostoUnitarioV]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_CostoUnitarioRicaricatoV] CHECK (([CostoUnitarioRicaricatoV] >= 0))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_CostoUnitarioRicaricatoV]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_CostoTotaleV] CHECK (([CostoTotaleV] >= 0))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_CostoTotaleV]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_Quantita] CHECK (([Quantita] >= 0))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_Quantita]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_RicavoUnitarioV] CHECK (([RicavoUnitarioV] >= 0))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_RicavoUnitarioV]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH CHECK ADD CONSTRAINT [CK_xPreventivoContratto_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_Sconto]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_RicavoTotaleV] CHECK (([RicavoTotaleV] >= 0))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_RicavoTotaleV]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_Cd_ARGruppo123] CHECK (([Cd_ARGruppo1] IS NULL AND [Cd_ARGruppo2] IS NULL AND [Cd_ARGruppo3] IS NULL OR [Cd_ARGruppo1] IS NOT NULL AND [Cd_ARGruppo2] IS NOT NULL AND [Cd_ARGruppo3] IS NOT NULL))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_Cd_ARGruppo123] 
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_CostoUnitarioLordoV] CHECK (([CostoUnitarioLordoV] >= 0))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_CostoUnitarioLordoV]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH CHECK ADD CONSTRAINT [CK_xPreventivoContratto_ScontoAcquisto] CHECK (([dbo].[afn_PercStrValid]([ScontoAcquisto])=(1)))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_ScontoAcquisto]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_RicavoUnitarioScontatoV] CHECK (([RicavoUnitarioScontatoV] >= 0))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_RicavoUnitarioScontatoV]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH CHECK ADD CONSTRAINT [CK_xPreventivoContratto_MargineCostoPerc] CHECK (([dbo].[afn_PercStrValid]([MargineCostoPerc])=(1)))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_MargineCostoPerc]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH CHECK ADD CONSTRAINT [CK_xPreventivoContratto_MargineRicavoPerc] CHECK (([dbo].[afn_PercStrValid]([MargineRicavoPerc])=(1)))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_MargineRicavoPerc]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_ModelloVal] CHECK (([ModelloVal]='C' OR [ModelloVal]='R'))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_ModelloVal]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_CostoUnitarioRicaricatoLordoV] CHECK (([CostoUnitarioRicaricatoLordoV] >= 0))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_CostoUnitarioRicaricatoLordoV]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH CHECK ADD CONSTRAINT [CK_xPreventivoContratto_ScontoCostoRicaricato] CHECK (([dbo].[afn_PercStrValid]([ScontoCostoRicaricato])=(1)))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_ScontoCostoRicaricato]
		ALTER TABLE [dbo].[xPreventivoContratto] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoContratto_Sequenza] CHECK (([Sequenza] >= 0))
		ALTER TABLE [dbo].[xPreventivoContratto] CHECK CONSTRAINT [CK_xPreventivoContratto_Sequenza]
		
		-- Sottopreventivo - Dati del contratto di manutenzione
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_ContrattoTipo', '[char](3) NULL', '', 'Tipo di contratto'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_RinnovoTipo', '[char](3) NULL', '', 'Tipo di rinnovo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_LS_Contratto', '[char](7) NULL', '', 'Listino associato al contratto'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_SLA', '[char](2) NULL', '', 'SLA associato al contratto'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Periodo', '[int] NOT NULL', '1', 'Lunghezza temporale del contratto (in anni, mesi o giorni)'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FattoreMksPeriodo', '[numeric](25, 12) NOT NULL', '12', 'Fattore temporale del periodo (anni, mesi o giorni)'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'PeriodoFattura', '[int] NOT NULL', '1', 'Lunghezza temporale della fatturazione (in anni, mesi o giorni)'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FattoreMksPeriodoFattura', '[numeric](25, 12) NOT NULL', '12', 'Fattore temporale della fatturazione (anni, mesi o giorni)'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FattoreMksCicloFattura', '[numeric](25, 12) NOT NULL', '1', 'Ciclo di fatturazione (mensile, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'GiornoFattura', '[int] NOT NULL', '30', 'Giorno del mese nel quale avviene la fatturazione del contratto'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FatturaFineMese', '[bit] NOT NULL', '0', '0 - la fatturazione avviene il giorno stabilito in "GiornoFattura"; 1 - la fatturazione avviene l ultimo giorno del mese'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Anticipo', '[bit] NOT NULL', '0', '0 - la fatturazione avviene nel periodo di competenza; 1 - la fatturazione viene anticipata rispetto al periodo di competenza'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Rinnovabile', '[bit] NOT NULL', '0', '0 - il contratto non si può rinnovare; 1 - il contratto è rinnovabile'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_ContrattoTipo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_RinnovoTipo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_LS_Contratto'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_SLA'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_ContrattoTipo] FOREIGN KEY([Cd_ContrattoTipo])
		REFERENCES [dbo].[xContrattoTipo] ([Cd_xContrattoTipo]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_ContrattoTipo]
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_RinnovoTipo] FOREIGN KEY([Cd_RinnovoTipo])
		REFERENCES [dbo].[xRinnovoTipo] ([Cd_xRinnovoTipo]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_RinnovoTipo]
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_LS_Contratto] FOREIGN KEY([Cd_LS_Contratto])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_LS_Contratto]
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_SLA] FOREIGN KEY([Cd_SLA])
		REFERENCES [dbo].[xSLA] ([Cd_xSLA]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_SLA]
		
		/* 17-11-2010 */
		-- Sottopreventivo - Dati del contratto di manutenzione
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_LS_Contratto_Costo', '[char](7) NULL', '', 'Listino "Al Costo" associato al Contratto'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_LS_Contratto_Costo'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_LS_Contratto_Costo] FOREIGN KEY([Cd_LS_Contratto_Costo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_LS_Contratto_Costo]

		/* Documenti - Revisione alla gestione dei campi costo */
		/* 21-09-2010 */
		-- Preferenze G.A.C. (tabella xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'TipoValorizzazioneCosto' , 'tinyint NOT NULL' , '0', 'Tipologia di costo da gestire nella riga documento (se la riga non proviene da un preventivo)'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'Cd_LS_Costo' , 'char(7) NULL' , '', 'Listino di costo da gestire se tipologia = 8'
		EXEC asp_du_DropConstraint 'xImpostazione', 'FK_xImpostazione_Cd_LS_Costo'
		ALTER TABLE [dbo].[xImpostazione]  WITH NOCHECK ADD  CONSTRAINT [FK_xImpostazione_Cd_LS_Costo] FOREIGN KEY([Cd_LS_Costo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [FK_xImpostazione_Cd_LS_Costo]
		/* 09-11-2010 */
		-- Configurazione documento (tabella DO)
		EXEC asp_du_DropColumn 'DO', 'xTipoValorizzazioneCosto'
		EXEC asp_du_DropColumn 'DO', 'xCD_LS_Costo'

		/* Sottopreventivi\Attività - Gestione dei giorni lavorativi da 8 ore */
		/* 29-09-2010 */
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'CK_xPreventivoFase_FattoreMksI'
		UPDATE xPreventivoFase SET FattoreMksI = 28800 WHERE FattoreMksI = 86400
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_FattoreMksI] CHECK (([FattoreMksI] = 28800 or [FattoreMksI] = 3600))
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_FattoreMksI]

		/* Gestione Stampe su Word tramite MailMerge */
		/* 29-09-2010 */
		-- Anagrafica modelli MailMerge (tabella xMMModello)
		IF dbo.afn_du_IsTable('xMMModello') = 0
			EXEC asp_du_AddTable 'xMMModello', 10, 'Anagrafica tipologia modelli MailMerge (Stampa Unione)'
			
		Exec asp_du_AddAlterColumn	'xMMModello', 'Descrizione'			, 'varchar(80)  Not Null'	, '''<Descrizione Mancante>'''	, 'Descrizione del modello'
		Exec asp_du_AddAlterColumn	'xMMModello', 'TipoModello'			, 'tinyint NOT NULL'			, '1'														, 'Tipologia del MailMarge: 1 - Preventivazione; 2 - ...'
		Exec asp_du_AddAlterColumn	'xMMModello', 'FilePathModello'	, 'varchar(250) Not Null'	, ''														, 'Percorso e Nome del File Modello del MailMerge'
		Exec asp_du_AddAlterColumn	'xMMModello', 'OutputDir'				, 'varchar(250) Null'			, ''														, 'Cartella di default per il salvataggio di ogni documento creato a partire dal modello'
		Exec asp_du_AddAlterColumn	'xMMModello', 'Preview'					, 'bit NOT NULL'					,	'0'														, '0 - per default nessuna anteprima del documento creato a partire dal modello; 1 - per default anteprima di stampa del documento creato a partire dal modello'
		
		-- Teste sottopreventivi (tabella xPreventivo)
		Exec asp_du_AddAlterColumn	'xPreventivo', 'Cd_xMMModello'	, '[char](10) NULL'				,	''														, 'Modello Stampa Unione'
		Exec asp_du_DropConstraint	'xPreventivo', 'FK_xPreventivo_xMMModello'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_xMMModello] FOREIGN KEY([Cd_xMMModello])
		REFERENCES [dbo].[xMMModello] ([Cd_xMMModello]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_xMMModello]
		
		-- Tabella di appoggio Mail Marge Preventivi (tabella xMM1)
		IF dbo.afn_du_IsTable('xMM1') = 0
				BEGIN
					CREATE TABLE [dbo].[xMM1](
						[Id_xMM1] [int] IDENTITY(1,1) NOT NULL,
						[UserName][varchar](48) NOT NULL,
						[TipoRiga][tinyint] NOT NULL,
						[RowsCount][int] NOT NULL CONSTRAINT [DF_xMM1_RowsCount]  DEFAULT (0),
						[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xMM1_UserIns]  DEFAULT (host_name()),
						[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xMM1_UserUpd]  DEFAULT (host_name()),
						[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xMM1_TimeIns]  DEFAULT (getdate()),
						[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xMM1_TimeUpd]  DEFAULT (getdate()),
						[Ts] [timestamp] NOT NULL,
					CONSTRAINT [PK_xMM1] PRIMARY KEY NONCLUSTERED 
						(
							[Id_xMM1] ASC
						)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
						) ON [PRIMARY]
				END
				
		EXEC asp_du_AddAlterTableComment 'xMM1', 'Tabella di appoggio Mail Marge Preventivi'
		EXEC asp_du_AddAlterColumnComment 'xMM1', 'Id_xMM1'		, 'Riferimento univoco a ciascuna riga'
		EXEC asp_du_AddAlterColumnComment 'xMM1', 'UserName'	, 'Nome utente che ha richiesto la stampa del preventivo tramite mail merge'
		EXEC asp_du_AddAlterColumnComment 'xMM1', 'TipoRiga'	, '1 - Materiale, 2 - SubTotale Materiale, 3 - Attività, 4 - SubTotale Attività, 5 - Totale sottopreventivo'
		EXEC asp_du_AddAlterColumnComment 'xMM1', 'RowsCount'	, 'Numero dei records generati per il preventivo selezionato'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Id_Preventivo', '[int] NOT NULL', '', 'Identificativo testa sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_Preventivo', 'varchar(10)  NULL', ''	, 'Codice del preventivo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'DescrizionePreventivo'	, 'varchar(230)  NULL'	,	'''<Descrizione Mancante>''', 'Descrizione sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_PreventivoFamiglia', 'varchar(10) NULL',	'', 'Codice preventivo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'DescrizioneFamiglia'	, 'varchar(230)  NULL'	,	'''<Descrizione Mancante>''', 'Descrizione preventivo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'TipoPreventivo', 'tinyint  NULL',	'1', 'Tipo preventivo: 1 - commerciale; 2 - tecnico; 3 - esecutivo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_CF'				, 'char(7)  NULL'			, ''													, 'Cliente\fornitore'
		EXEC asp_du_AddAlterColumn 'xMM1', 'DescrizioneCF'	, 'varchar(230)  NULL'	,	'''<Descrizione Mancante>''', 'Ragione Sociale cliente\fornitore'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Indirizzo'	, '[varchar](80) NULL'	,	'', 'Indirizzo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Localita'	, '[varchar](60) NULL'	,	'', 'Località'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cap'	, '[varchar](10) NULL'	,	'', 'CAP'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_Provincia', '[char](3) NULL'	,	'', 'Provincia'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_Nazione'	, '[char](2) NULL'	,	'', 'Nazione'
		EXEC asp_du_AddAlterColumn 'xMM1', 'PartitaIva'	, '[varchar](17) NULL'	,	'', 'Partita Iva'
		EXEC asp_du_AddAlterColumn 'xMM1', 'CodiceFiscale'	, '[varchar](16) NULL'	,	'', 'Codice Fiscale'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Telefono'	, '[varchar](20) NULL'	,	'', 'Telefono'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Telefono2'	, '[varchar](20) NULL'	,	'', 'Telefono2'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cellulare'	, '[varchar](20) NULL'	,	'', 'Cellulare'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cellulare2'	, '[varchar](20) NULL'	,	'', 'Cellulare2'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Fax'	, '[varchar](20) NULL'	,	'', 'Fax'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Fax2'	, '[varchar](20) NULL'	,	'', 'Fax2'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Email'	, '[varchar](100) NULL'	,	'', 'Email'
		EXEC asp_du_AddAlterColumn 'xMM1', 'URL'	, '[varchar](128) NULL'	,	'', 'URL'
		EXEC asp_du_AddAlterColumn 'xMM1', 'PersDaContattare'	, '[varchar](30) NULL'	,	'', 'Persona da contattare'
		EXEC asp_du_AddAlterColumn 'xMM1', 'PersDaContattare2'	, '[varchar](30) NULL'	,	'', 'Persona da contattare 2'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_VL', '[char](3) NULL', ''						, 'Valuta'
		EXEC asp_du_AddAlterColumn 'xMM1', 'DescrizioneVL'	, 'varchar(230)  NULL'	,	'''<Descrizione Mancante>''', 'Descrizione Valuta'
		EXEC asp_du_AddAlterColumn 'xMM1', 'InizioValidita', 'smalldatetime  NULL',	'''19000101''', 'Inizio validità del sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cambio'					, 'numeric(18, 6)  NULL'	,	'1', 'Cambio'
		EXEC asp_du_AddAlterColumn 'xMM1', 'ImportoTotaleV'	, '[varchar](20) NULL'			,	'', 'Prezzo finale concordato con il cliente in valuta'
		EXEC asp_du_AddAlterColumn 'xMM1', 'ImportoTotaleE'	, '[varchar](20) NULL'			,	'', 'Prezzo finale concordato con il cliente in euro'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Template'				, 'bit  NULL'						,	'0', '0 - il sottopreventivo non è un modello; 1 - il sottopreventivo è un modello'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_Template'			, 'varchar(10) NULL'				,	'' , 'Codice dell eventuale modello di sottopreventivo utilizzato per generare il sottopreventivo corrente'
		EXEC asp_du_AddAlterColumn 'xMM1', 'NotePreventivo'	, 'text NULL'								,	''			, 'Note del sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_ARGruppo1'	, '[char](3) NULL', '', 'Famiglia articolo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_ARGruppo2'	, '[char](3) NULL', '', 'Gruppo articolo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_ARGruppo3'	, '[char](3) NULL', '', 'Sottogruppo articolo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_AR', '[varchar](20) NULL', '', 'Codice articolo (è un materiale o un articolo fittizio)'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Descrizione'		, '[varchar](80)  NULL'			, '('''')', 'Descrizione attività all interno del preventivo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Quantita'				, '[varchar](20) NULL'	, ''			, 'Quantità'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Picture1OriginalFile', '[text] NULL'	, ''			, 'Immagine 1 articolo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_PrAttivita'	, '[varchar](20) NULL'			, ''			, 'Codice attività'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Ore'							, '[varchar](20) NULL'	, ''			, 'Durata prevista per l attività espressa in ore'
		EXEC asp_du_AddAlterColumn 'xMM1', 'ModelloVal', '[char](1)  NULL', '''C''', 'C - Attività valorizzata "Al Costo"; R - Attività valorizzata "Al Ricavo"'
		EXEC asp_du_AddAlterColumn 'xMM1', 'CostoUnitarioLordoV', '[varchar](20) NULL', '', 'Costo unitario lordo in valuta'
		EXEC asp_du_AddAlterColumn 'xMM1', 'ScontoAcquisto', '[varchar](20) NULL', '('''')', 'Sconto da applicare sul costo unitario lordo'
		EXEC asp_du_AddAlterColumn 'xMM1', 'CostoUnitarioV'	, '[varchar](20) NULL'	, ''			, 'Costo unitario in valuta'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Ricarica'				, '[varchar](15)  NULL'		, '('''')', 'Ricarico da applicare sul valore "Al Costo"'
		EXEC asp_du_AddAlterColumn 'xMM1', 'CostoUnitarioRicaricatoLordoV', '[varchar](20) NULL', '', 'Costo unitario ricaricato lordo in valuta'
		EXEC asp_du_AddAlterColumn 'xMM1', 'ScontoCostoRicaricato', '[varchar](20)  NULL', '('''')', 'Sconto al cliente da applicare sul costo unitario ricaricato'
		EXEC asp_du_AddAlterColumn 'xMM1', 'CostoUnitarioRicaricatoV', '[varchar](20) NULL', '', 'Costo unitario ricaricato in valuta'
		EXEC asp_du_AddAlterColumn 'xMM1', 'CostoTotaleV'		, '[varchar](20) NULL', '', 'Costo totale in valuta'
		EXEC asp_du_AddAlterColumn 'xMM1', 'CostoTotaleE'		, '[varchar](20) NULL', '', 'Costo totale in euro'
		EXEC asp_du_AddAlterColumn 'xMM1', 'MargineCostoV', '[varchar](20) NULL', '', 'Margine reale gestione "Al Costo"'
		EXEC asp_du_AddAlterColumn 'xMM1', 'MargineCostoE', '[varchar](20) NULL', '', 'Margine reale gestione "Al Costo" in euro'
		EXEC asp_du_AddAlterColumn 'xMM1', 'MargineCostoPerc', '[varchar](15)  NULL', '('''')', 'Margine percentuale gestione "Al Costo"'
		EXEC asp_du_AddAlterColumn 'xMM1', 'RicavoUnitarioV'	, '[varchar](20) NULL'	, '', 'Ricavo unitario in valuta'
		EXEC asp_du_AddAlterColumn 'xMM1', 'Sconto'					, '[varchar](20)  NULL'		, '('''')', 'Sconto da applicare sul valore "Al Ricavo"'
		EXEC asp_du_AddAlterColumn 'xMM1', 'RicavoUnitarioScontatoV', '[varchar](20) NULL', '', 'Ricavo unitario scontato in valuta'
		EXEC asp_du_AddAlterColumn 'xMM1', 'RicavoTotaleV'		, '[varchar](20) NULL', ''			, 'Ricavo totale in valuta'
		EXEC asp_du_AddAlterColumn 'xMM1', 'RicavoTotaleE'		, '[varchar](20) NULL', ''			, 'Ricavo totale in euro'
		EXEC asp_du_AddAlterColumn 'xMM1', 'MargineRicavoV', '[varchar](20) NULL', '', 'Margine reale gestione "Al Ricavo"'
		EXEC asp_du_AddAlterColumn 'xMM1', 'MargineRicavoE', '[varchar](20) NULL', '', 'Margine reale gestione "Al Ricavo" in euro'
		EXEC asp_du_AddAlterColumn 'xMM1', 'MargineRicavoPerc', '[varchar](15)  NULL', '('''')', 'Margine percentuale gestione "Al Ricavo"'

		/* Commesse - Riferimento al preventivo */
		/* 26-10-2010 */
		EXEC asp_du_AddAlterColumn 'DOCommessa', 'xCd_PreventivoFamiglia', 'varchar(10) NULL', ''	, 'Codice del preventivo di riferimento'
		EXEC asp_du_DropConstraint 'DOCommessa', 'xFK_DOCommessa_Cd_PreventivoFamiglia'
		ALTER TABLE DOCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOCommessa_Cd_PreventivoFamiglia] FOREIGN KEY([xCd_PreventivoFamiglia])
		REFERENCES [dbo].[xPreventivoFamiglia] ([Cd_PreventivoFamiglia]) NOT FOR REPLICATION 
		ALTER TABLE DOCommessa CHECK CONSTRAINT [xFK_DOCommessa_Cd_PreventivoFamiglia]
		
		/* Elimina le voci a menu che non sono più utilizzate dalla versione 1.3 */
		/* 19-11-2010 */
		DELETE FROM Menu WHERE Descrizione = 'Gestione' And Convert(VarChar(1000), GenericText) = 'fedi_xpreventivo'
		DELETE FROM Menu WHERE															Convert(VarChar(1000), GenericText) = 'cmd_xdoassegnamateriali'
		
		-- porto la versione a 1.3
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 3, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.4
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.3' begin
		select 'Applico aggiornamenti al database: 1.3->1.4'
		-- qui operazioni per l'aggiornamento DB da 1.3 a 1.4
		
		/* Configurazione documenti - Documento per richiesta offerta */
		/* 17/11/2010 */
		EXEC asp_du_AddAlterColumn 'DO', 'xAttivaOfferta', '[bit] NOT NULL', '0', '0 - Nessuna richiesta offerta; 1 - Richiesta offerta'
		EXEC asp_du_AddAlterColumn 'DO', 'xCd_DOOfferta', 'char(3) NULL', '', 'Indica il documento da utilizzare per la creazione delle richieste offerte.'
		EXEC asp_du_DropConstraint 'DO', 'xFK_xCd_DOOfferta'
		ALTER TABLE [dbo].[DO] WITH NOCHECK ADD CONSTRAINT [xFK_xCd_DOOfferta] FOREIGN KEY([xCd_DOOfferta])
		REFERENCES [dbo].[DO] ([CD_DO])
		ALTER TABLE [dbo].[DO] CHECK CONSTRAINT [xFK_xCd_DOOfferta]
		
		/* Gestione ticket - Nuovi campi */
		/* 30/11/2010 */
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'DataApertura', 'smalldatetime NULL', '', 'Data apertura effettiva del ticket'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'DataChiusura', 'smalldatetime NULL', '', 'Data chiusura effettiva del ticket'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'DataAperturaPrev', 'smalldatetime NULL', '', 'Data apertura prevista del ticket'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'DataChiusuraPrev', 'smalldatetime NULL', '', 'Data chiusura prevista del ticket'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'NumeroMatricola', 'varchar(40) NULL', '', 'Numero matricola legato al ticket'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'CD_AR', 'varchar(20) NULL', '', 'Codice articolo legato al ticket'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_CD_AR'
		ALTER TABLE [dbo].[xRDTicket] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicket_CD_AR] FOREIGN KEY([CD_AR])
		REFERENCES [dbo].[AR] ([CD_AR])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_CD_AR]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'CD_xImpianto', 'char(10) NULL', '', 'Codice impianto legato al ticket'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xImpianto_CD_xImpianto'
		ALTER TABLE [dbo].[xRDTicket] WITH NOCHECK ADD CONSTRAINT [FK_xImpianto_CD_xImpianto] FOREIGN KEY([CD_xImpianto])
		REFERENCES [dbo].[xImpianto] ([CD_xImpianto])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xImpianto_CD_xImpianto]

		-- porto la versione a 1.4
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 4, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.5
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.4' begin
		select 'Applico aggiornamenti al database: 1.4->1.5'
		-- qui operazioni per l'aggiornamento DB da 1.4 a 1.5
		
		-- porto la versione a 1.5
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 5, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.6
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.5' begin
		select 'Applico aggiornamenti al database: 1.5->1.6'
		-- qui operazioni per l'aggiornamento DB da 1.5 a 1.6
		
		/* Configurazione documenti - Assegnazione materiale a commessa */
		/* 20/12/2010 */
		EXEC asp_du_AddAlterColumn 'DO', 'xAssegnaMateriale', '[bit] NOT NULL', '0', '0 - il documento non permette l assegnazione diretta dei materiali a commesssa; 1 - il documento permette l assegnazione diretta dei materiali a commessa'

		/* Commesse - default Gestione Ticket */
		/* 23-12-2010 */
		-- Preferenze G.A.C. (tabella xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'GestisciTicket', '[bit] NOT NULL', '1', '0 - si può gestire solo un ticket fittizio creato in automatico; 1 - si possono gestire diversi ticket creati dall utente'

		-- porto la versione a 1.6
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 6, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.7
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.6' begin
		select 'Applico aggiornamenti al database: 1.6->1.7'
		-- qui operazioni per l'aggiornamento DB da 1.6 a 1.7
		
		/* Gestione Import Listini */
		/* 25-10-2010 */
		-- Anagrafica tipologie listino (tabella xLS)
		IF dbo.afn_du_IsTable('xLS') = 0
			EXEC asp_du_AddTable 'xLS', 10, 'Anagrafica tipologie listino'

		EXEC asp_du_AddAlterColumnComment 'xLS', 'Id_xLS'		, 'Identificativo del listino'
		EXEC asp_du_AddAlterColumnComment 'xLS', 'Cd_xLS'		, 'Codice del listino'
		EXEC asp_du_AddAlterColumn 'xLS', 'Descrizione', 'varchar(80)  NULL',	'''<Descrizione Mancante>''', 'Descrizione listino'
		EXEC asp_du_AddAlterColumn 'xLS', 'FileProcedura', 'varchar(30)  NULL',	'''<Descrizione Mancante>''', 'Nome del file della procedura di normalizzazione a carico del partner'
		EXEC asp_du_AddAlterColumn 'xLS', 'DataUltimoImport', 'smalldatetime  NULL',	'''19000101''', 'Data e ora ultimo import effettuato'
		EXEC asp_du_AddAlterColumn 'xLS', 'Cd_CF', 'char(7)  NULL', '', 'Fornitore preferenziale associato al listino'
		EXEC asp_du_DropConstraint 'xLS', 'FK_xLS_CF'
		ALTER TABLE [dbo].[xLS] WITH NOCHECK ADD CONSTRAINT [FK_xLS_CF] FOREIGN KEY([Cd_CF]) REFERENCES [dbo].[CF] ([Cd_CF]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xLS] CHECK CONSTRAINT [FK_xLS_CF]
		
		-- Listini normalizzati (tabella xLSImport)
		IF dbo.afn_du_IsTable('xLSImport') = 0
			BEGIN
				CREATE TABLE [dbo].[xLSImport](
					[Id_xLSImport] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xLSImport_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xLSImport_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xLSImport_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xLSImport_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
				CONSTRAINT [PK_xLSImport] PRIMARY KEY NONCLUSTERED 
					(
						[Id_xLSImport] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
					) ON [PRIMARY]
			END

		EXEC asp_du_AddAlterTableComment 'xLSImport', 'Listini normalizzati'
		EXEC asp_du_AddAlterColumnComment 'xLSImport', 'Id_xLSImport'		, 'Identificativo riga listino normalizzato'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'Cd_xLS', 'char(10) NULL',	'', 'Codice del listino'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'Cd_AR', 'varchar(20) NULL',	'', 'Codice articolo fornitore'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'Descrizione', 'varchar(80) NULL',	'''<Descrizione Mancante>''', 'Descrizione articolo'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'UM', 'char(3) NULL',	'', 'Unità di misura del file di import'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'PrezzoAcquisto', '[numeric](18, 6) NOT NULL', '0', 'Prezzo acquisto'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'PrezzoVendita', '[numeric](18, 6) NOT NULL', '0', 'Prezzo vendita'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'Famiglia', 'varchar(20) NULL',	'', 'Famiglia articolo'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'Gruppo', 'varchar(20) NULL',	'', 'Gruppo articolo'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'Sottogruppo', 'varchar(20) NULL',	'', 'Sottogruppo articolo'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'CodiceAlternativo', 'varchar(20) NULL',	'', 'Codice alternativo fornitore'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'DescrizioneCodiceAlternativo', 'varchar(80) NULL',	'''<Descrizione Mancante>''', 'Descrizione alternativa'		
		EXEC asp_du_AddAlterColumn 'xLSImport', 'Cd_ARMarca', 'varchar(20) NULL',	'', 'Marca articolo'
		EXEC asp_du_DropConstraint 'xLSImport', 'FK_xLSImport_xLS'
		ALTER TABLE xLSImport WITH NOCHECK ADD CONSTRAINT [FK_xLSImport_xLS] FOREIGN KEY([Cd_xLS]) REFERENCES [dbo].[xLS] ([Cd_xLS]) NOT FOR REPLICATION 
		ALTER TABLE xLSImport CHECK CONSTRAINT [FK_xLSImport_xLS]

		-- Fornitori preferenziali degli articoli potenziali (tabella xAROtherCodCF)
		IF dbo.afn_du_IsTable('xAROtherCodCF') = 0
			BEGIN
				CREATE TABLE [dbo].[xAROtherCodCF](
					[Id_xAROtherCodCF] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xAROtherCodCF_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xAROtherCodCF_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xAROtherCodCF_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xAROtherCodCF_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
				CONSTRAINT [PK_xAROtherCodCF] PRIMARY KEY NONCLUSTERED 
					(
						[Id_xAROtherCodCF] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
					) ON [PRIMARY]
			END

		EXEC asp_du_AddAlterTableComment 'xAROtherCodCF', 'Fornitori preferenziali degli articoli potenziali'
		EXEC asp_du_AddAlterColumnComment 'xAROtherCodCF', 'Id_xAROtherCodCF'		, 'Identificativo fornitore articolo potenziale'
		EXEC asp_du_AddAlterColumn 'xAROtherCodCF', 'Cd_AROther', 'varchar(20) NOT NULL',	'', 'Codice articolo potenziale'
		EXEC asp_du_AddAlterColumn 'xAROtherCodCF', 'Cd_CF', 'char(7)  NULL', '', 'Fornitore preferenziale'
		EXEC asp_du_AddAlterColumn 'xAROtherCodCF', 'FornitorePreferenziale', '[bit] NOT NULL', '0', '0 - non è il fornitore preferenziale; 1 - è il fornitore preferenziale'
		EXEC asp_du_AddAlterColumn 'xAROtherCodCF', 'CodiceAlternativo', 'varchar(20) NULL',	'', 'Codice alternativo articolo potenziale'
		EXEC asp_du_AddAlterColumn 'xAROtherCodCF', 'Descrizione', 'varchar(80) NULL',	'''<Descrizione Mancante>''', 'Descrizione alternativa articolo potenziale'
		EXEC asp_du_AddAlterColumn 'xAROtherCodCF', 'PrezzoAcquisto', '[numeric](18, 6) NOT NULL', '0', 'Prezzo acquisto'
		EXEC asp_du_AddAlterColumn 'xAROtherCodCF', 'PrezzoVendita', '[numeric](18, 6) NOT NULL', '0', 'Prezzo vendita'
		EXEC asp_du_AddAlterColumn 'xAROtherCodCF', 'Sconto', 'varchar(10) NOT NULL',	'''''', 'Sconto'
		EXEC asp_du_DropConstraint 'xAROtherCodCF', 'FK_xAROtherCodCF_AROther'
		ALTER TABLE xAROtherCodCF WITH NOCHECK ADD CONSTRAINT [FK_xAROtherCodCF_AROther] FOREIGN KEY([Cd_AROther]) REFERENCES [dbo].[AROther] ([Cd_AROther]) ON DELETE CASCADE NOT FOR REPLICATION 
		ALTER TABLE xAROtherCodCF CHECK CONSTRAINT [FK_xAROtherCodCF_AROther]
		EXEC asp_du_DropConstraint 'xAROtherCodCF', 'FK_xAROtherCodCF_CF'
		ALTER TABLE [dbo].[xAROtherCodCF] WITH NOCHECK ADD CONSTRAINT [FK_xAROtherCodCF_CF] FOREIGN KEY([Cd_CF]) REFERENCES [dbo].[CF] ([Cd_CF]) ON DELETE CASCADE NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xAROtherCodCF] CHECK CONSTRAINT [FK_xAROtherCodCF_CF]

		-- Modifica e rinomina tabelle COMET
		-- xCometARMisura --> xLSARMisura
		IF dbo.afn_du_IsTable('xLSARMisura') = 0
			EXEC asp_du_AddTable 'xLSARMisura', 3, 'Associazione unità di misura gestionale --> unità di misura file di import'
		
		EXEC asp_du_AddAlterColumn 'xLSARMisura', 'Descrizione'	, 'varchar(50) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione unità di misura file di import'
		EXEC asp_du_AddAlterColumn 'xLSARMisura', 'Cd_ARMisura'	, '[char](2) NOT NULL'	, '('''')'										, 'Unità di misura gestionale'
		EXEC asp_du_DropConstraint 'xLSARMisura', 'FK_xLSARMisura_ARMisura'
		ALTER TABLE [dbo].[xLSARMisura] WITH NOCHECK ADD CONSTRAINT [FK_xLSARMisura_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xLSARMisura] CHECK CONSTRAINT [FK_xLSARMisura_ARMisura]
		EXEC asp_du_AddAlterColumn 'xLSARMisura', 'Cd_xLS', 'char(10) NOT NULL',	'''COMET''', 'Codice del listino'
		EXEC asp_du_DropConstraint 'xLSARMisura', 'FK_xLSARMisura_xLS'
		ALTER TABLE xLSARMisura WITH NOCHECK ADD CONSTRAINT [FK_xLSARMisura_xLS] FOREIGN KEY([Cd_xLS])
		REFERENCES [dbo].[xLS] ([Cd_xLS]) NOT FOR REPLICATION 
		ALTER TABLE xLSARMisura CHECK CONSTRAINT [FK_xLSARMisura_xLS]

		-- xCometARGruppo --> xLSARGruppo
		IF dbo.afn_du_IsTable('xLSARGruppo') = 0
			EXEC asp_du_AddTable 'xLSARGruppo', 0, 'Associazione gruppi articoli gestionale --> gruppi articoli file di import'

		EXEC asp_du_AddAlterColumn 'xLSARGruppo', 'Famiglia'		, '[varchar](20) NOT NULL', '', 'Famiglia file di import'
		EXEC asp_du_AddAlterColumn 'xLSARGruppo', 'Gruppo'			, '[varchar](20) NOT NULL', '', 'Gruppo file di import'
		EXEC asp_du_AddAlterColumn 'xLSARGruppo', 'Sottogruppo'	, '[varchar](20) NOT NULL', '', 'Sottogruppo file di import'
		EXEC asp_du_DropIndex			 'xLSARGruppo', 'UK_xLSARGruppo'
		EXEC asp_du_AddAlterIndex	 'xLSARGruppo', 'UK_xLSARGruppo',	'[Famiglia] ASC, [Gruppo] ASC, [Sottogruppo] ASC',	0, 0, 0, 1
		EXEC asp_du_AddAlterColumn 'xLSARGruppo', 'Descrizione'		, 'varchar(200) NOT NULL'	, '''<Descrizione Mancante>''', 'Descrizione famiglia\gruppo\sottogruppo'
		EXEC asp_du_AddAlterColumn 'xLSARGruppo', 'Cd_ARGruppo1'	, '[char](3) NOT NULL'		, '('''')'										, 'Famiglia di magazzino'
		EXEC asp_du_AddAlterColumn 'xLSARGruppo', 'Cd_ARGruppo2'	, '[char](3) NOT NULL'		, '('''')'										, 'Gruppo di magazzino'
		EXEC asp_du_AddAlterColumn 'xLSARGruppo', 'Cd_ARGruppo3'	, '[char](3) NOT NULL'		, '('''')'										, 'Sottogruppo di magazzino'
		EXEC asp_du_DropConstraint 'xLSARGruppo', 'FK_xLSARGruppo_ARGruppo1'
		EXEC asp_du_DropConstraint 'xLSARGruppo', 'FK_xLSARGruppo_ARGruppo2'
		EXEC asp_du_DropConstraint 'xLSARGruppo', 'FK_xLSARGruppo_ARGruppo3'
		ALTER TABLE [dbo].[xLSARGruppo] WITH NOCHECK ADD CONSTRAINT [FK_xLSARGruppo_ARGruppo1] FOREIGN KEY([Cd_ARGruppo1])
		REFERENCES [dbo].[ARGruppo1] ([Cd_ARGruppo1]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xLSARGruppo] NOCHECK CONSTRAINT [FK_xLSARGruppo_ARGruppo1]
		ALTER TABLE [dbo].[xLSARGruppo] WITH NOCHECK ADD CONSTRAINT [FK_xLSARGruppo_ARGruppo2] FOREIGN KEY([Cd_ARGruppo1], [Cd_ARGruppo2])
		REFERENCES [dbo].[ARGruppo2] ([Cd_ARGruppo1], [Cd_ARGruppo2]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xLSARGruppo] NOCHECK CONSTRAINT [FK_xLSARGruppo_ARGruppo2]
		ALTER TABLE [dbo].[xLSARGruppo] WITH NOCHECK ADD CONSTRAINT [FK_xLSARGruppo_ARGruppo3] FOREIGN KEY([Cd_ARGruppo1], [Cd_ARGruppo2], [Cd_ARGruppo3])
		REFERENCES [dbo].[ARGruppo3] ([Cd_ARGruppo1], [Cd_ARGruppo2], [Cd_ARGruppo3]) NOT FOR REPLICATION
		ALTER TABLE [dbo].[xLSARGruppo] CHECK CONSTRAINT [FK_xLSARGruppo_ARGruppo3]
		EXEC asp_du_AddAlterColumn 'xLSARGruppo', 'Cd_xLS', 'char(10) NOT NULL',	'''COMET''', 'Codice del listino'
		EXEC asp_du_DropConstraint 'xLSARGruppo', 'FK_xLSARGruppo_xLS'
		ALTER TABLE xLSARGruppo WITH NOCHECK ADD CONSTRAINT [FK_xLSARGruppo_xLS] FOREIGN KEY([Cd_xLS])
		REFERENCES [dbo].[xLS] ([Cd_xLS]) NOT FOR REPLICATION 
		ALTER TABLE xLSARGruppo CHECK CONSTRAINT [FK_xLSARGruppo_xLS]

		/* Elimina le voci a menu che non sono più utilizzate dalla versione 1.7 */
		/* 13-12-2010 */
		DELETE FROM Menu WHERE Descrizione Like '%COMET%'

		-- porto la versione a 1.7
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 7, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.8
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.7' begin
		select 'Applico aggiornamenti al database: 1.7->1.8'
		-- qui operazioni per l'aggiornamento DB da 1.7 a 1.8
		
 		/* Preventivi - Descrizione dei materiali (xPreventivoMateriale) */
		/* 14-02-2011 */
	  EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Descrizione'		, '[varchar](80) NOT NULL'			, '('''')', 'Descrizione materiale all interno del preventivo'

		-- porto la versione a 1.8
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 8, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.9
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.8' begin
		select 'Applico aggiornamenti al database: 1.8->1.9'
		-- qui operazioni per l'aggiornamento DB da 1.8 a 1.9
		
		-- porto la versione a 1.9
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 9, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.10
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.9' begin
		select 'Applico aggiornamenti al database: 1.9->1.10'
		-- qui operazioni per l'aggiornamento DB da 1.9 a 1.10

 		/* Documenti - Eliminazione della gestione "Analisi Disponibilità" */
		/* 03-03-2011 */
		EXEC asp_du_DropColumn	'DO', 'xDispAttiva'
		EXEC asp_du_DropColumn	'DO', 'xDispTipoMG'
		EXEC asp_du_DropColumn	'DO', 'xDispCd_MG'
		EXEC asp_du_DropColumn	'DO', 'xEmitDocAttiva'
		EXEC asp_du_DropTable		'xDOMGDisp'

		/* Configurazione documenti - Documento del ciclo attivo da utilizzare per l'assegnazione diretta dei materiali */
		/* 04-03-2011 */
		EXEC asp_du_AddAlterColumn 'DO', 'xAssegnaMaterialeCd_DO', 'char(3) NULL', '', 'Indica il documento del ciclo attivo da utilizzare per l assegnazione diretta dei materiali.'
		EXEC asp_du_DropConstraint 'DO', 'xFK_xAssegnaMaterialeCd_DO'
		ALTER TABLE [dbo].[DO] WITH NOCHECK ADD CONSTRAINT [xFK_xAssegnaMaterialeCd_DO] FOREIGN KEY([xAssegnaMaterialeCd_DO])
		REFERENCES [dbo].[DO] ([CD_DO])
		ALTER TABLE [dbo].[DO] CHECK CONSTRAINT [xFK_xAssegnaMaterialeCd_DO]
		
		-- porto la versione a 1.10
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 10, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.11
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.10' begin
		select 'Applico aggiornamenti al database: 1.10->1.11'
		-- qui operazioni per l'aggiornamento DB da 1.10 a 1.11

		/* Gestione Matricole */
		/* 14-03-2011 */
		-- Eliminazione tabella xRDTicketAttivitaMatricola
		Exec asp_du_DropTable 'xRDTicketAttivitaMatricola'

		-- Anagrafica matricole (xMatricola)
		IF dbo.afn_du_IsTable('xMatricola') = 0
			EXEC asp_du_AddTable 'xMatricola', 0, 'Anagrafica matricole'

		EXEC asp_du_AddAlterColumnComment 'xMatricola', 'Id_xMatricola', 'Identificativo matricola'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Cd_xMatricola', '[varchar] (40) NOT NULL', '', 'Numero matricola'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Descrizione', 'varchar(80) NOT NULL', '('''')', 'Descrizione matricola'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Cd_AR', '[varchar](20) NOT NULL', '', 'Codice articolo di magazzino'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_AR'
		ALTER TABLE [dbo].[xMatricola] WITH CHECK ADD CONSTRAINT [FK_xMatricola_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_AR]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'DescrizioneUbicazione', '[varchar] (100) NULL', '', 'Descrizione ubicazione'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'NoteAgente', 'text NULL',	'', 'Note relative all agente'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'RifID_DoTes', 'int NULL', '', 'Riferimento testa ordine relativo alla matricola'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_RifID_DoTes'
		ALTER TABLE [dbo].[xMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xMatricola_RifID_DoTes] FOREIGN KEY([RifID_DoTes])
		REFERENCES [dbo].[DOTes] ([Id_DoTes])
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_RifID_DoTes]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'NoteMatricola', 'text NULL',	'', 'Note relative alla matricola'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'NonRiparabile', '[bit] NOT NULL', '0', '0 - matricola riparabile; 1 - matricola non riparabile'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Noleggio', '[bit] NOT NULL', '0', '0 - nessun noleggio per la matricola; 1 - matricola data a noleggio'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Cd_LS_Noleggio', 'char(7) NULL', ''	, 'Listino contenente i prezzi del noleggio'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_Cd_LS_Noleggio'
		ALTER TABLE xMatricola WITH NOCHECK ADD CONSTRAINT [FK_xMatricola_Cd_LS_Noleggio] FOREIGN KEY([Cd_LS_Noleggio])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE xMatricola CHECK CONSTRAINT [FK_xMatricola_Cd_LS_Noleggio]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C1_Cd_AR', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 1'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_C1AR'
		ALTER TABLE [dbo].[xMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xMatricola_C1AR] FOREIGN KEY([C1_Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_C1AR]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C1_Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata al contatore 1'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_C1ARMisura'
		ALTER TABLE [dbo].[xMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xMatricola_C1ARMisura] FOREIGN KEY([C1_Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_C1ARMisura]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C1Prezzo', '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 1'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C1Decimali', '[tinyint] NOT NULL', '0', 'Decimali associati al contatore 1'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C2_Cd_AR', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 2'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_C2AR'
		ALTER TABLE [dbo].[xMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xMatricola_C2AR] FOREIGN KEY([C2_Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_C2AR]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C2_Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata al contatore 2'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_C2ARMisura'
		ALTER TABLE [dbo].[xMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xMatricola_C2ARMisura] FOREIGN KEY([C2_Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_C2ARMisura]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C2Prezzo', '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 2'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C2Decimali', '[tinyint] NOT NULL', '0', 'Decimali associati al contatore 2'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C3_Cd_AR', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 3'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_C3AR'
		ALTER TABLE [dbo].[xMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xMatricola_C3AR] FOREIGN KEY([C3_Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_C3AR]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C3_Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata al contatore 3'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_C3ARMisura'
		ALTER TABLE [dbo].[xMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xMatricola_C3ARMisura] FOREIGN KEY([C3_Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_C3ARMisura]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C3Prezzo', '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 3'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'C3Decimali', '[tinyint] NOT NULL', '0', 'Decimali associati al contatore 3'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Software', '[bit] NOT NULL', '0', '0 - non si tratta di un software; 1 - si tratta di un software'

		-- Prima di costruire l'indice bisogna obbligatoriemente eliminare il riferimento alle chiavi esterne in
		-- Contratti (tabella xContrattoMatricola), Impianti (xImpiantoMatricola) e Ticket (xRDTicket)
		EXEC asp_du_DropConstraint 'xContrattoMatricola', 'FK_xContrattoMatricola_xMatricola'
		EXEC asp_du_DropConstraint 'xImpiantoMatricola'	, 'FK_xImpiantoMatricola_xMatricola'
		EXEC asp_du_DropConstraint 'xRDTicket'					, 'FK_xRDTicket_xMatricola'
		EXEC asp_du_DropConstraint 'xMatricolaNoleggio'	, 'FK_xMatricolaNoleggio_xMatricola'
		EXEC asp_du_DropConstraint 'xMatricolaModulo'		, 'FK_xMatricolaModulo_xMatricola'
		EXEC asp_du_DropConstraint 'xContrattoNoleggio'	, 'FK_xContrattoNoleggio_xMatricola'
		EXEC asp_du_DropIndex	     'xMatricola'					, 'UK_xMatricola'
		EXEC asp_du_AddAlterIndex  'xMatricola'					, 'UK_xMatricola',	'[Cd_AR] ASC, [Cd_xMatricola] ASC',	0, 0, 0, 1

		-- Nei Contratti (tabella xContrattoMatricola), negli Impianti (xImpiantoMatricola) e nei Ticket (xRDTicket) il campo
		-- che riguarda la matricola deve essere rinominato Cd_xMatricola e referenziato rispetto all'anagrafica matricole.
    -- Bisogna quindi copiare i dati del vecchio campo NumeroMatricola nel nuovo campo Cd_xMatricola.
		-- Il campo NumeroMatricola viene eliminato.

		-- Contratti
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Numero matricola'
		ALTER TABLE [dbo].[xContrattoMatricola] WITH CHECK ADD CONSTRAINT [FK_xContrattoMatricola_xMatricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xContrattoMatricola] CHECK CONSTRAINT [FK_xContrattoMatricola_xMatricola]

		EXEC('
		Insert 
			Into xMatricola (Cd_xMatricola, Descrizione, Cd_AR)
		Select 
			Distinct xContrattoMatricola.NumeroMatricola, AR.Descrizione, xContrattoMatricola.Cd_AR 
		From 
			xContrattoMatricola Inner Join AR On xContrattoMatricola.Cd_AR = AR.Cd_AR
		Where 
			xContrattoMatricola. NumeroMatricola Is Not Null 
			And xContrattoMatricola.Cd_AR Is Not Null 
			And xContrattoMatricola.NumeroMatricola Not In (Select Distinct Cd_xMatricola From xMatricola)')
	
		EXEC('Update xContrattoMatricola Set Cd_xMatricola = NumeroMatricola')
		EXEC asp_du_DropColumn 'xContrattoMatricola', 'NumeroMatricola'

		-- Impianti
		EXEC asp_du_AddAlterColumn 'xImpiantoMatricola', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Numero matricola'
		ALTER TABLE [dbo].[xImpiantoMatricola] WITH CHECK ADD CONSTRAINT [FK_xImpiantoMatricola_xMatricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xImpiantoMatricola] CHECK CONSTRAINT [FK_xImpiantoMatricola_xMatricola]

		EXEC('
		Insert 
			Into xMatricola (Cd_xMatricola, Descrizione, Cd_AR)
		Select 
			Distinct xImpiantoMatricola.NumeroMatricola, AR.Descrizione, xImpiantoMatricola.Cd_AR
		From 
			xImpiantoMatricola Inner Join AR On xImpiantoMatricola.Cd_AR = AR.Cd_AR
		Where 
			xImpiantoMatricola.NumeroMatricola Is Not Null 
			And xImpiantoMatricola.Cd_AR Is Not Null 
			And xImpiantoMatricola.NumeroMatricola Not In (Select Distinct Cd_xMatricola From xMatricola)')

		EXEC('Update xImpiantoMatricola Set Cd_xMatricola = NumeroMatricola')
		EXEC asp_du_DropColumn 'xImpiantoMatricola', 'NumeroMatricola'

		-- Ticket
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Numero matricola'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_xMatricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xMatricola]

		EXEC('
		Insert 
			Into xMatricola (Cd_xMatricola, Descrizione, Cd_AR)
		Select 
			Distinct xRDTicket.NumeroMatricola, AR.Descrizione, xRDTicket.Cd_AR
		From 
			xRDTicket Inner Join AR On xRDTicket.Cd_AR = AR.Cd_AR						
		Where 
			xRDTicket.NumeroMatricola Is Not Null 
			And xRDTicket.Cd_AR Is Not Null 
			And xRDTicket.NumeroMatricola Not In (Select Distinct Cd_xMatricola From xMatricola)')
	
		EXEC('Update xRDTicket Set Cd_xMatricola = NumeroMatricola')
		EXEC asp_du_DropColumn 'xRDTicket', 'NumeroMatricola'
		
		-- Letture contatori per il noleggio di una matricola (xMatricolaNoleggio)
		IF dbo.afn_du_IsTable('xMatricolaNoleggio') = 0
			EXEC asp_du_AddTable 'xMatricolaNoleggio', 0, 'Letture dei contatori per il noleggio di una matricola'

		EXEC asp_du_AddAlterColumnComment 'xMatricolaNoleggio', 'Id_xMatricolaNoleggio', 'Identificativo matricola'
		EXEC asp_du_AddAlterColumn 'xMatricolaNoleggio', 'Id_xMatricola', '[int] NOT NULL', '', 'Identificativo matricola'
		EXEC asp_du_DropConstraint 'xMatricolaNoleggio', 'FK_xMatricolaNoleggio_xMatricola'
		ALTER TABLE [dbo].[xMatricolaNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xMatricolaNoleggio_xMatricola] FOREIGN KEY([Id_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Id_xMatricola]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xMatricolaNoleggio] CHECK CONSTRAINT [FK_xMatricolaNoleggio_xMatricola]
		EXEC asp_du_AddAlterColumn 'xMatricolaNoleggio', 'Cd_CF', '[char](7) NOT NULL', '', 'Codice cliente presso il quale sono state effettuate le letture'
		EXEC asp_du_DropConstraint 'xMatricolaNoleggio', 'FK_xMatricolaNoleggio_CF'
		ALTER TABLE [dbo].[xMatricolaNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xMatricolaNoleggio_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xMatricolaNoleggio] CHECK CONSTRAINT [FK_xMatricolaNoleggio_CF]
		EXEC asp_du_AddAlterColumn 'xMatricolaNoleggio', 'Cd_CFDest', 'char(3) NULL', '', 'Sede presso la quale sono state effettuate le letture'
		EXEC asp_du_DropConstraint 'xMatricolaNoleggio', 'FK_xMatricolaNoleggio_CFDest'
		ALTER TABLE xMatricolaNoleggio WITH NOCHECK ADD CONSTRAINT [FK_xMatricolaNoleggio_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE xMatricolaNoleggio CHECK CONSTRAINT [FK_xMatricolaNoleggio_CFDest]
		EXEC asp_du_AddAlterColumn 'xMatricolaNoleggio', 'DataLettura', '[smalldatetime] NOT NULL', '''19000101''', 'Data di effettuazione delle letture'
		EXEC asp_du_AddAlterColumn 'xMatricolaNoleggio', 'Contatore1', '[numeric](18, 6) NOT NULL', '0', 'Lettura contatore 1'
		EXEC asp_du_AddAlterColumn 'xMatricolaNoleggio', 'Contatore2', '[numeric](18, 6) NOT NULL', '0', 'Lettura contatore 2'
		EXEC asp_du_AddAlterColumn 'xMatricolaNoleggio', 'Contatore3', '[numeric](18, 6) NOT NULL', '0', 'Lettura contatore 3'

		-- Elenco dei moduli legati ad una matricola di software (xMatricolaModulo)
		IF dbo.afn_du_IsTable('xMatricolaModulo') = 0
			EXEC asp_du_AddTable 'xMatricolaModulo', 0, 'Moduli legati ad una matricola di software'

		EXEC asp_du_AddAlterColumnComment 'xMatricolaModulo', 'Id_xMatricolaModulo', 'Identificativo matricola'
		EXEC asp_du_AddAlterColumn 'xMatricolaModulo', 'Id_xMatricola', '[int] NOT NULL', '', 'Identificativo matricola'
		EXEC asp_du_DropConstraint 'xMatricolaModulo', 'FK_xMatricolaModulo_xMatricola'
		ALTER TABLE [dbo].[xMatricolaModulo] WITH NOCHECK ADD CONSTRAINT [FK_xMatricolaModulo_xMatricola] FOREIGN KEY([Id_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Id_xMatricola]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xMatricolaModulo] CHECK CONSTRAINT [FK_xMatricolaModulo_xMatricola]
		EXEC asp_du_AddAlterColumn 'xMatricolaModulo', 'Cd_AR', '[varchar](20) NULL', '', 'Codice articolo di magazzino che contraddistingue un modulo di software'
		EXEC asp_du_DropConstraint 'xMatricolaModulo', 'FK_xMatricolaModulo_AR'
		ALTER TABLE [dbo].[xMatricolaModulo] WITH CHECK ADD CONSTRAINT [FK_xMatricolaModulo_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xMatricolaModulo] CHECK CONSTRAINT [FK_xMatricolaModulo_AR]
		EXEC asp_du_AddAlterColumn 'xMatricolaModulo', 'Descrizione', '[varchar] (80) NULL', '', 'Descrizione del modulo'
		EXEC asp_du_AddAlterColumn 'xMatricolaModulo', 'NumeroUtenti', 'int NOT NULL', '0', 'Numero utenti abilitati per il modulo'
		EXEC asp_du_AddAlterColumn 'xMatricolaModulo', 'Version', '[char] (2) NULL', '', 'Versione del modulo'
		EXEC asp_du_AddAlterColumn 'xMatricolaModulo', 'Major', '[char] (2) NULL', '', 'Major del modulo'
		EXEC asp_du_AddAlterColumn 'xMatricolaModulo', 'Minor', '[char] (4) NULL', '', 'Minor del modulo'
		EXEC asp_du_AddAlterColumn 'xMatricolaModulo', 'DataAggiornamento', '[smalldatetime] NULL', '', 'Data aggiornamento'

		-- Aggiunta campi all'anagrafica articolo
		EXEC asp_du_AddAlterColumn 'AR', 'xCreaMatricola', '[bit] NOT NULL', '0', '0 - al salvataggio di una riga documento con matricola non verrà creata l anagrafica; 1 - al salvataggio di una riga documento con matricola verrà creata l anagrafica, se assente'
		EXEC asp_du_AddAlterColumn 'AR', 'xDurataGaranziaAcquisto'	, 'int NOT NULL', '0', 'Durata della garanzia di acquisto per l articolo'
		EXEC asp_du_AddAlterColumn 'AR', 'xDurataGaranziaVendita'	, 'int NOT NULL', '0', 'Durata della garanzia di vendita per l articolo'

		-- Aggiunta campi nelle preferenze
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'Noleggio', '[bit] NOT NULL', '0', '0 - non si gestiscono noleggi per le matricole; 1 - si possono gestire noleggi per le matricole'

		-- Aggiunta campi nei contratti
		-- xContratto
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_LS_Noleggio', 'char(7) NULL', ''	, 'Listino contenente i prezzi del noleggio'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_Cd_LS_Noleggio'
		ALTER TABLE xContratto WITH NOCHECK ADD CONSTRAINT [FK_xContratto_Cd_LS_Noleggio] FOREIGN KEY([Cd_LS_Noleggio])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE xContratto CHECK CONSTRAINT [FK_xContratto_Cd_LS_Noleggio]

		-- xContrattoNoleggio
		IF dbo.afn_du_IsTable('xContrattoNoleggio') = 0
			EXEC asp_du_AddTable 'xContrattoNoleggio', 0, 'Dati noleggio del contratto'

		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'Id_xContratto', '[int] NOT NULL', '', 'Identificativo contratto di appartenenza del noleggio'
		EXEC asp_du_DropConstraint 'xContrattoNoleggio', 'FK_xContrattoNoleggio_Contratto'
		ALTER TABLE [dbo].[xContrattoNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoNoleggio_Contratto] FOREIGN KEY([Id_xContratto])
		REFERENCES [dbo].[xContratto] ([Id_xContratto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoNoleggio] CHECK CONSTRAINT [FK_xContrattoNoleggio_Contratto]
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'Cd_AR', '[varchar](20) NOT NULL', '', 'Codice articolo di magazzino'
		EXEC asp_du_DropConstraint 'xContrattoNoleggio', 'FK_xContrattoNoleggio_AR'
		ALTER TABLE [dbo].[xContrattoNoleggio] WITH CHECK ADD CONSTRAINT [FK_xContrattoNoleggio_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContrattoNoleggio] CHECK CONSTRAINT [FK_xContrattoNoleggio_AR]
		EXEC asp_du_DropConstraint 'xContrattoNoleggio', 'FK_xContrattoNoleggio_xMatricola'
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Numero matricola'
		ALTER TABLE [dbo].[xContrattoNoleggio] WITH CHECK ADD CONSTRAINT [FK_xContrattoNoleggio_xMatricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xContrattoNoleggio] CHECK CONSTRAINT [FK_xContrattoNoleggio_xMatricola]
		EXEC asp_du_DropIndex			 'xContrattoNoleggio', 'UK_xContrattoNoleggio'
		EXEC asp_du_AddAlterIndex	 'xContrattoNoleggio', 'UK_xContrattoNoleggio',	'[Id_xContratto] ASC, [Cd_AR] ASC, [Cd_xMatricola] ASC',	0, 0, 0, 1
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C1_Cd_AR', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 1'
		EXEC asp_du_DropConstraint 'xContrattoNoleggio', 'FK_xContrattoNoleggio_C1AR'
		ALTER TABLE [dbo].[xContrattoNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoNoleggio_C1AR] FOREIGN KEY([C1_Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContrattoNoleggio] CHECK CONSTRAINT [FK_xContrattoNoleggio_C1AR]
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C1_Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata al contatore 1'
		EXEC asp_du_DropConstraint 'xContrattoNoleggio', 'FK_xContrattoNoleggio_C1ARMisura'
		ALTER TABLE [dbo].[xContrattoNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoNoleggio_C1ARMisura] FOREIGN KEY([C1_Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoNoleggio] CHECK CONSTRAINT [FK_xContrattoNoleggio_C1ARMisura]
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C1Prezzo', '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 1'
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C1Decimali', '[tinyint] NOT NULL', '0', 'Decimali associati al contatore 1'
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C2_Cd_AR', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 2'
		EXEC asp_du_DropConstraint 'xContrattoNoleggio', 'FK_xContrattoNoleggio_C2AR'
		ALTER TABLE [dbo].[xContrattoNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoNoleggio_C2AR] FOREIGN KEY([C2_Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContrattoNoleggio] CHECK CONSTRAINT [FK_xContrattoNoleggio_C2AR]
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C2_Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata al contatore 2'
		EXEC asp_du_DropConstraint 'xContrattoNoleggio', 'FK_xContrattoNoleggio_C2ARMisura'
		ALTER TABLE [dbo].[xContrattoNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoNoleggio_C2ARMisura] FOREIGN KEY([C2_Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoNoleggio] CHECK CONSTRAINT [FK_xContrattoNoleggio_C2ARMisura]
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C2Prezzo', '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 2'
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C2Decimali', '[tinyint] NOT NULL', '0', 'Decimali associati al contatore 2'
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C3_Cd_AR', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 3'
		EXEC asp_du_DropConstraint 'xContrattoNoleggio', 'FK_xContrattoNoleggio_C3AR'
		ALTER TABLE [dbo].[xContrattoNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoNoleggio_C3AR] FOREIGN KEY([C3_Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContrattoNoleggio] CHECK CONSTRAINT [FK_xContrattoNoleggio_C3AR]
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C3_Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata al contatore 3'
		EXEC asp_du_DropConstraint 'xContrattoNoleggio', 'FK_xContrattoNoleggio_C3ARMisura'
		ALTER TABLE [dbo].[xContrattoNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoNoleggio_C3ARMisura] FOREIGN KEY([C3_Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoNoleggio] CHECK CONSTRAINT [FK_xContrattoNoleggio_C3ARMisura]
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C3Prezzo'		, '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 3'
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'C3Decimali'	, '[tinyint] NOT NULL', '0', 'Decimali associati al contatore 3'
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'Riga'				, '[smallint] NOT NULL'			, '0'	, 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'DataInizio'	, '[smalldatetime] NULL', '', 'Data inizio noleggio matricola'
		EXEC asp_du_AddAlterColumn 'xContrattoNoleggio', 'DataFine'		, '[smalldatetime] NULL', '', 'Data fine noleggio matricola'

		/* Generazione codice preventivo/commessa */
		/* 30-03-2011 */
		--script xImpostazioneCCTipo
		IF dbo.afn_du_IsTable('xImpostazioneCCTipo') = 0
			EXEC asp_du_AddTable 'xImpostazioneCCTipo', 3, 'Tabella dei tipi per generazione codice commessa'
		EXEC asp_du_AddAlterColumn 'xImpostazioneCCTipo', 'Descrizione', 'VARCHAR(50) NOT NULL', '', 'Descrizione'

		EXEC asp_du_DropIndex 'xImpostazioneCCTipo', 'IX_xImpostazioneCCTipo_Descrizione'
		CREATE  INDEX IX_xImpostazioneCCTipo_Descrizione ON xImpostazioneCCTipo(Descrizione)
		EXEC asp_du_DropConstraint 'xImpostazioneCCTipo', 'CK_xImpostazioneCCTipo_Cd_xImpostazioneCCTipo'
		ALTER TABLE xImpostazioneCCTipo ADD CONSTRAINT CK_xImpostazioneCCTipo_Cd_xImpostazioneCCTipo CHECK ([Cd_xImpostazioneCCTipo]<>'')

		-- check valori commessa
		EXEC asp_du_DropConstraint 'xImpostazioneCC', 'CK_xImpostazioneCC_TipoCodice'
		ALTER TABLE [dbo].[xImpostazioneCC]  WITH NOCHECK ADD  CONSTRAINT [CK_xImpostazioneCC_TipoCodice] CHECK  ([TipoCodice]='A' OR [TipoCodice]='M' OR [TipoCodice]='P' OR [TipoCodice]='Q' OR [TipoCodice]='S' OR [TipoCodice]='L' OR [TipoCodice]='G')
		ALTER TABLE [dbo].[xImpostazioneCC] CHECK CONSTRAINT [CK_xImpostazioneCC_TipoCodice]

		-- aggiunta del campo agente
		EXEC asp_du_AddAlterColumn 'DOCommessa', 'xCd_Agente'		, 'char(3) NULL'		, ''	, 'Agente di riferimento per la Commessa'
		EXEC asp_du_DropConstraint 'DOCommessa', 'xFK_DOCommessa_Cd_Agente'
		ALTER TABLE DOCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOCommessa_Cd_Agente] FOREIGN KEY([xCd_Agente])
		REFERENCES [dbo].[Agente] ([Cd_Agente]) NOT FOR REPLICATION 
		ALTER TABLE DOCommessa CHECK CONSTRAINT [xFK_DOCommessa_Cd_Agente]

		-- aggiunta tabella per la generazione dei codici di preventivo
		IF dbo.afn_du_IsTable('xImpostazionePP') = 0
			EXEC asp_du_AddTable 'xImpostazionePP', 0, 'Tabella per la generazione dei codici di preventivo'
		EXEC asp_du_AddAlterColumn 'xImpostazionePP', 'Lunghezza', 'INT NOT NULL', '', 'Lunghezza'
		EXEC asp_du_AddAlterColumn 'xImpostazionePP', 'Sequenza', 'INT NOT NULL', '', 'Sequenza'
		EXEC asp_du_AddAlterColumn 'xImpostazionePP', 'TipoCodice', 'CHAR(1) NOT NULL', '', 'Tipo codice'
		EXEC asp_du_DropIndex 'xImpostazionePP', 'Ix_ximpostazionepp_tipocodice'
		CREATE  INDEX Ix_ximpostazionepp_tipocodice ON xImpostazionePP(TipoCodice)

		-- aggiunta tabella dei tipi di preventivo
		IF dbo.afn_du_IsTable('xImpostazionePPTipo') = 0
			EXEC asp_du_AddTable 'xImpostazionePPTipo', 3, 'Tabella dei tipi per generazione codice preventivo'
		EXEC asp_du_AddAlterColumn 'xImpostazionePPTipo', 'Descrizione', 'VARCHAR(50) NOT NULL', '', 'Descrizione'
		EXEC asp_du_DropIndex 'xImpostazionePPTipo', 'IX_xImpostazionePPTipo_Descrizione'
		CREATE  INDEX IX_xImpostazionePPTipo_Descrizione ON xImpostazionePPTipo(Descrizione)
		EXEC asp_du_DropConstraint 'xImpostazionePPTipo', 'CK_xImpostazionePPTipo_Cd_xImpostazionePPTipo'
		ALTER TABLE xImpostazionePPTipo ADD CONSTRAINT CK_xImpostazionePPTipo_Cd_xImpostazionePPTipo CHECK ([Cd_xImpostazionePPTipo]<>'')

		-- aggiunta tabella per la generazione dei codici di sottopreventivo
		IF dbo.afn_du_IsTable('xImpostazionePS') = 0
			EXEC asp_du_AddTable 'xImpostazionePS', 0, 'Tabella per la generazione dei codici di sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xImpostazionePS', 'Lunghezza', 'INT NOT NULL', '', 'Lunghezza'
		EXEC asp_du_AddAlterColumn 'xImpostazionePS', 'Sequenza', 'INT NOT NULL', '', 'Sequenza'
		EXEC asp_du_AddAlterColumn 'xImpostazionePS', 'TipoCodice', 'CHAR(1) NOT NULL', '', 'Tipo codice'
		EXEC asp_du_DropIndex 'xImpostazionePS', 'Ix_ximpostazioneps_tipocodice'
		CREATE  INDEX Ix_ximpostazioneps_tipocodice ON xImpostazionePS(TipoCodice)

		-- aggiunta tabella dei tipi di sottopreventivo
		IF dbo.afn_du_IsTable('xImpostazionePSTipo') = 0
			EXEC asp_du_AddTable 'xImpostazionePSTipo', 3, 'Tabella dei tipi per generazione codice sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xImpostazionePSTipo', 'Descrizione', 'VARCHAR(50) NOT NULL', '', 'Descrizione'
		EXEC asp_du_DropIndex 'xImpostazionePSTipo', 'IX_xImpostazionePSTipo_Descrizione'
		CREATE  INDEX IX_xImpostazionePSTipo_Descrizione ON xImpostazionePSTipo(Descrizione)
		EXEC asp_du_DropConstraint 'xImpostazionePSTipo', 'CK_xImpostazionePSTipo_Cd_xImpostazionePSTipo'
		ALTER TABLE xImpostazionePSTipo ADD CONSTRAINT CK_xImpostazionePSTipo_Cd_xImpostazionePSTipo CHECK ([Cd_xImpostazionePSTipo]<>'')

		-- modifica tabella xImpostazione
		EXEC asp_du_DropColumn 'xImpostazione','ReplicaSeparatore'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'BloccaCd_PreventivoFamiglia', 'BIT NOT NULL', '0', 'Generazione del codice preventivo famiglia obbligatoria'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'BloccaCd_Preventivo', 'BIT NOT NULL', '0', 'Generazione del codice preventivo obbligatoria'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'SeparatoreP', 'CHAR(1) NOT NULL', '''.''', 'Carattere separatore per Preventivo.Sottopreventivo'

		-- cancellazione della stored procedure xasp_gac_getnextnum_temp
		EXEC asp_du_DropProcedure 'xasp_gac_getnextnum_temp'

		-- modifica della lunghezza del campo Cd_Preventivo (tabella xPreventivo)
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_Template'
		EXEC asp_du_DropConstraint 'DOSottoCommessa', 'xFK_DOSottoCommessa_Cd_Preventivo'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xPreventivo'
		EXEC asp_du_DropConstraint 'xRDTicket', 'xRDTicket_xPreventivo'

		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_Preventivo', 'varchar(20) NULL',	'', 'Codice sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_Template', 'varchar(20) NULL',	'', 'Codice modello di riferimento'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_Template] FOREIGN KEY([Cd_Template])
		REFERENCES [dbo].[xPreventivo] ([Cd_Preventivo])
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_Template]
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xCd_Preventivo', 'varchar(20) NULL',	'', 'Codice sottopreventivo'
		ALTER TABLE DOSottoCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOSottoCommessa_Cd_Preventivo] FOREIGN KEY([xCd_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Cd_Preventivo]) NOT FOR REPLICATION 
		ALTER TABLE DOSottoCommessa CHECK CONSTRAINT [xFK_DOSottoCommessa_Cd_Preventivo]
		EXEC asp_du_AddAlterColumn 'xMM1', 'Cd_Preventivo', 'varchar(20) NULL',	'', 'Codice sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_Preventivo', 'varchar(20) NULL',	'', 'Codice sottopreventivo'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_xPreventivo] FOREIGN KEY([Cd_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Cd_Preventivo])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xPreventivo]

		-- aggiunta campi xPreventivoFamiglia.CD_Agente, xPreventivoFamiglia.CD_CFDest
		-- , xPreventivo.Cd_DoSottoCommessaTipo, xPreventivo.CD_Agente, xPreventivo.CD_CFDest 
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'CD_Agente', 'char(3) NULL',	'', 'Codice agente'
		EXEC asp_du_DropConstraint 'xPreventivoFamiglia', 'FK_xPreventivoFamiglia_CD_Agente'
		ALTER TABLE [dbo].[xPreventivoFamiglia] WITH CHECK ADD CONSTRAINT [FK_xPreventivoFamiglia_CD_Agente] FOREIGN KEY([Cd_Agente])
		REFERENCES [dbo].[Agente] ([Cd_Agente])
		ALTER TABLE [dbo].[xPreventivoFamiglia] CHECK CONSTRAINT [FK_xPreventivoFamiglia_CD_Agente]

		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'CD_CFDest', 'char(3) NULL',	'', 'Destinazione diversa'
		EXEC asp_du_DropConstraint 'xPreventivoFamiglia', 'FK_xPreventivoFamiglia_CD_CFDest'
		ALTER TABLE [dbo].[xPreventivoFamiglia] WITH CHECK ADD CONSTRAINT [FK_xPreventivoFamiglia_CD_CFDest] FOREIGN KEY([CD_CF], [CD_CFDest])
		REFERENCES [dbo].[CFDest] ([CD_CF], [CD_CFDest])
		ALTER TABLE [dbo].[xPreventivoFamiglia] CHECK CONSTRAINT [FK_xPreventivoFamiglia_CD_CFDest]

		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_Agente', 'char(3) NULL',	'', 'Codice agente'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_CD_Agente'
		ALTER TABLE [dbo].[xPreventivo] WITH CHECK ADD CONSTRAINT [FK_xPreventivo_CD_Agente] FOREIGN KEY([Cd_Agente])
		REFERENCES [dbo].[Agente] ([Cd_Agente])
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_CD_Agente]

		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_CFDest', 'char(3) NULL',	'', 'Destinazione diversa'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_CD_CFDest'
		ALTER TABLE [dbo].[xPreventivo] WITH CHECK ADD CONSTRAINT [FK_xPreventivo_CD_CFDest] FOREIGN KEY([CD_CF], [CD_CFDest])
		REFERENCES [dbo].[CFDest] ([CD_CF], [CD_CFDest])
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_CD_CFDest]

		EXEC asp_du_AddAlterColumn 'DOCommessa', 'xCd_CFDest'		, 'char(3) NULL'		, ''	, 'Destinazione diversa per la commessa'
		EXEC asp_du_DropConstraint 'DOCommessa', 'xFK_DOCommessa_Cd_CFDest'
		ALTER TABLE DOCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DOCommessa_Cd_CFDest] FOREIGN KEY([Cd_CF], [xCd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE DOCommessa CHECK CONSTRAINT [xFK_DOCommessa_Cd_CFDest]

		/* Ticket Materiale e Spese */
		/* 04-04-2011 */

		-- Anagrafica spese (xSpesa)
		IF dbo.afn_du_IsTable('xSpesa') = 0
			EXEC asp_du_AddTable 'xSpesa', 3, 'Anagrafica spesa'

		EXEC asp_du_AddAlterColumnComment 'xSpesa', 'Id_xSpesa', 'Identificativo spesa'
		EXEC asp_du_AddAlterColumn 'xSpesa', 'Descrizione', 'varchar(80) NOT NULL', '('''')', 'Descrizione spesa'
		EXEC asp_du_AddAlterColumn 'xSpesa', 'Cd_AR', '[varchar](20) NOT NULL', '', 'Codice articolo associato alla spesa'
		EXEC asp_du_DropConstraint 'xSpesa', 'FK_xSpesa_AR'
		ALTER TABLE [dbo].[xSpesa] WITH CHECK ADD CONSTRAINT [FK_xSpesa_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xSpesa] CHECK CONSTRAINT [FK_xSpesa_AR]
		EXEC asp_du_AddAlterColumn 'xSpesa', 'Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata alla spesa'
		EXEC asp_du_DropConstraint 'xSpesa', 'FK_xSpesa_ARMisura'
		ALTER TABLE [dbo].[xSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xSpesa_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xSpesa] CHECK CONSTRAINT [FK_xSpesa_ARMisura]
		EXEC asp_du_AddAlterColumn 'xSpesa', 'TipoCosto', 'tinyint NOT NULL',	'1', 'Tipo costo: 1 - il costo è uguale al prezzo; 2 - il costo si basa su un listino'
		EXEC asp_du_AddAlterColumn 'xSpesa', 'Cd_LS_Costo', '[char](7) NULL', '', 'Listino associato al costo'
		EXEC asp_du_DropConstraint 'xSpesa', 'FK_xSpesa_LS_Costo'
		ALTER TABLE [dbo].[xSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xSpesa_LS_Costo] FOREIGN KEY([Cd_LS_Costo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xSpesa] CHECK CONSTRAINT [FK_xSpesa_LS_Costo]
		EXEC asp_du_AddAlterColumn 'xSpesa', 'Cd_LS_Prezzo', '[char](7) NULL', '', 'Listino associato al Prezzo'
		EXEC asp_du_DropConstraint 'xSpesa', 'FK_xSpesa_LS_Prezzo'
		ALTER TABLE [dbo].[xSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xSpesa_LS_Prezzo] FOREIGN KEY([Cd_LS_Prezzo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xSpesa] CHECK CONSTRAINT [FK_xSpesa_LS_Prezzo]
		EXEC asp_du_AddAlterColumn 'xSpesa', 'EsclusoDaVal', '[bit] NOT NULL', '0', '0 - spesa addebitata; 1 - spesa non addebitata'

		-- Tabella Ticket Materiale e Spesa Movimenti (xRDTicketMaterialeSpesaMov)
		IF dbo.afn_du_IsTable('xRDTicketMaterialeSpesaMov') = 0
			EXEC asp_du_AddTable 'xRDTicketMaterialeSpesaMov', 0, 'Ticket - Movimenti di materiale e spese'

		EXEC asp_du_AddAlterColumnComment 'xRDTicketMaterialeSpesaMov', 'Id_xRDTicketMaterialeSpesaMov', 'Identificativo movimento di materiale o spesa'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Id_xRDTicket', '[int] NOT NULL',  '', 'Identificativo del ticket'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_xRDTicket'
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH CHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_xRDTicket] FOREIGN KEY([Id_xRDTicket])
		REFERENCES [dbo].[xRDTicket] ([Id_xRDTicket]) 
		On Update No Action 
		On Delete Cascade 
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_xRDTicket]
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Cd_xOperatore', '[varchar](20) NOT NULL',  '', 'Codice operatore'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_xOperatore'
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH CHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_xOperatore] FOREIGN KEY([Cd_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_xOperatore]
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Cd_xSpesa', '[char](3) NULL',  '', 'Codice spesa (Null = Materiale)'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_xSpesa'
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH CHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_xSpesa] FOREIGN KEY([Cd_xSpesa])
		REFERENCES [dbo].[xSpesa] ([Cd_xSpesa])
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_xSpesa]
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'CD_AR', 'varchar(20) NULL', '', 'Codice articolo'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_CD_AR'
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_CD_AR] FOREIGN KEY([CD_AR])
		REFERENCES [dbo].[AR] ([CD_AR])
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_CD_AR]
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Descrizione', 'varchar(80) NOT NULL', '('''')', 'Descrizione materiale o spesa'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata alla spesa'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_ARMisura'
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_ARMisura]
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'FattoreToUM1', '[numeric](18, 8) NOT NULL', '1', 'Fattore di conversione all unità di misura principale'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Quantita', '[numeric](18, 8) NOT NULL', '0', 'Quantità'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'CostoUnitarioV', '[numeric](18, 6) NULL', '', 'Costo unitario'
		EXEC asp_du_DropColumn		 'xRDTicketMaterialeSpesaMov', 'CostoTotaleV'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'CostoTotaleV', 'AS (CONVERT([numeric](18,6),[Quantita]*[CostoUnitarioV],(0)))', '', 'Costo totale'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'PrezzoUnitarioV', 'numeric(18, 6) NULL', '0', 'Prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'PrezzoTotaleV', 'numeric(18, 6) NULL', '0', 'Prezzo totale'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'ScontoRiga', 'varchar(20) NOT NULL'	,	'('''')', 'Formula dello sconto'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Provvigione', 'varchar(10) NULL', '', 'Provvigione in % da liquidare all agente'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Omaggio', 'tinyint NULL', '', 'Omaggio'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Cd_MG_P', 'char(5) NULL',	'', 'Codice magazzino partenza'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_MG_P'
		ALTER TABLE xRDTicketMaterialeSpesaMov WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MG_P] FOREIGN KEY([Cd_MG_P])
		REFERENCES [dbo].[MG] ([Cd_MG])	NOT FOR REPLICATION 
		ALTER TABLE xRDTicketMaterialeSpesaMov CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MG_P]
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Cd_MGUbicazione_P', 'varchar(20) NULL',	'', 'Codice ubicazione di partenza'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_MGUbicazione_P'
		ALTER TABLE xRDTicketMaterialeSpesaMov WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MGUbicazione_P] FOREIGN KEY( [Cd_MG_P], [Cd_MGUbicazione_P])
		REFERENCES [dbo].[MGUbicazione] ([Cd_MG], [Cd_MGUbicazione])
		ALTER TABLE xRDTicketMaterialeSpesaMov CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MG_P]
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Cd_MG_A', 'char(5) NULL',	'', 'Codice magazzino arrivo'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_MG_A'
		ALTER TABLE xRDTicketMaterialeSpesaMov WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MG_A] FOREIGN KEY([Cd_MG_A])
		REFERENCES [dbo].[MG] ([Cd_MG])	NOT FOR REPLICATION 
		ALTER TABLE xRDTicketMaterialeSpesaMov CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MG_A]
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Cd_MGUbicazione_A', 'varchar(20) NULL',	'', 'Codice ubicazione di arrivo'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_MGUbicazione_A'
		ALTER TABLE xRDTicketMaterialeSpesaMov WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MGUbicazione_A] FOREIGN KEY([Cd_MG_A], [Cd_MGUbicazione_A])
		REFERENCES [dbo].[MGUbicazione] ([Cd_MG], [Cd_MGUbicazione])
		ALTER TABLE xRDTicketMaterialeSpesaMov CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MGUbicazione_A]
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Matricole', '[xml](CONTENT [dbo].[Matricole]) NULL'	, ''	, 'Matricole in xml'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'CD_ARLotto', 'varchar(20) NULL', '', 'Codice lotto'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_ARLotto'
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_ARLotto] FOREIGN KEY([Cd_AR], [Cd_ARLotto])
		REFERENCES [dbo].[ARLotto] ([Cd_AR], [Cd_ARLotto])
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_ARLotto]
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'NumRapportino', '[varchar](20) NULL', '', 'Numero del rapportino'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'EsclusoDaVal', '[bit] NOT NULL', '0', '0 - si può valorizzare il movimento ; 1 - non si può valorizzare il movimento'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'FattProvvigione', '[numeric](10, 9) NOT NULL', '0', 'Fattore relativo alla provvigione'
		EXEC asp_du_DropColumn		 'xRDTicketMaterialeSpesaMov', 'ValProvvigione'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'ValProvvigione', 'AS ((Quantita * PrezzoUnitarioV) * FattProvvigione)', '', 'Valore della provvigione'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Riga'					, '[smallint] NOT NULL'	, '0'	, 'Riga'

		/* Contratti - Sviluppo scadenze */
		/* 05-04-2011 */

		-- Sviluppo scadenze (xContrattoSviluppo)
		IF dbo.afn_du_IsTable('xContrattoSviluppo') = 0
			EXEC asp_du_AddTable 'xContrattoSviluppo', 0, 'Sviluppo scadenze'

		EXEC asp_du_AddAlterColumnComment 'xContrattoSviluppo', 'Id_xContrattoSviluppo', 'Identificativo scadenza'
		EXEC asp_du_AddAlterColumn 'xContrattoSviluppo', 'Id_xContratto', '[int] NOT NULL', '', 'Identificativo contratto'
		EXEC asp_du_DropConstraint 'xContrattoSviluppo', 'FK_xContrattoSviluppo_Contratto'
		ALTER TABLE [dbo].[xContrattoSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoSviluppo_Contratto] FOREIGN KEY([Id_xContratto])
		REFERENCES [dbo].[xContratto] ([Id_xContratto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoSviluppo] CHECK CONSTRAINT [FK_xContrattoSviluppo_Contratto]
		EXEC asp_du_AddAlterColumn 'xContrattoSviluppo', 'DataFattura', '[smalldatetime] NOT NULL', '''19000101''', 'Data fattura'
		EXEC asp_du_AddAlterColumn 'xContrattoSviluppo', 'ImportoFattura', '[numeric](18, 6) NULL', '0', 'Importo fattura'
		EXEC asp_du_AddAlterColumn 'xContrattoSviluppo', 'Cd_PG', '[char](4) NULL', '', 'Codice pagamento'
		EXEC asp_du_DropConstraint 'xContrattoSviluppo', 'FK_xContrattoSviluppo_PG'
		ALTER TABLE [dbo].[xContrattoSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoSviluppo_PG] FOREIGN KEY([Cd_PG])
		REFERENCES [dbo].[PG] ([Cd_PG]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoSviluppo] CHECK CONSTRAINT [FK_xContrattoSviluppo_PG]
		EXEC asp_du_AddAlterColumn 'xContrattoSviluppo', 'Id_DOTes'	, '[int] NULL', '', 'Id del documento fattura con la quale è stata evasa la scadenza'
		EXEC asp_du_DropConstraint 'xContrattoSviluppo', 'FK_xContrattoSviluppo_Id_DOTes'
		ALTER TABLE [dbo].[xContrattoSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoSviluppo_Id_DOTes] FOREIGN KEY([Id_DOTes])
		REFERENCES [dbo].[DOTes] ([Id_DOTes])
		ALTER TABLE [dbo].[xContrattoSviluppo] CHECK CONSTRAINT [FK_xContrattoSviluppo_Id_DOTes]
		EXEC asp_du_AddAlterColumn 'xContrattoSviluppo', 'NoteContrattoSviluppo', 'text NULL', '',	'Note'
		EXEC asp_du_AddAlterColumn 'xContrattoSviluppo', 'Riga', '[smallint] NOT NULL', '0'	, 'Numero di riga'

		-- Contratto (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'Tacitamente', '[bit] NOT NULL', '0', '0 - il contratto non è rinnovabile tacitamente; 1 - il contratto è rinnovabile tacitamente'
		EXEC asp_du_AddAlterColumn 'xContratto', 'GiorniAvvisoRinnovo', '[int] NOT NULL', '0', 'Giorni avviso prima della scadenza'
		EXEC asp_du_AddAlterColumn 'xContratto', 'GiorniDisdettaCliente', '[int] NOT NULL', '0', 'Giorni disdetta da parte del cliente'
		EXEC asp_du_AddAlterColumn 'xContratto', 'GiorniDisdettaFornitore', '[int] NOT NULL', '0', 'Giorni disdetta da parte del fornitore'
		EXEC asp_du_AddAlterColumn 'xContratto', 'DataEsecuzioneRinnovo', '[smalldatetime] NULL'	, '', 'Data di esecuzione dell ultimo rinnovo'
		EXEC asp_du_AddAlterColumn 'xContratto', 'DataInizioUltimoRinnovo', '[smalldatetime] NULL'	, '', 'Inizio ultimo rinnovo'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_CFDest', '[char](3) NULL', '', 'Destinazione diversa'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_CFDest'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_CFDest]
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_AR', '[varchar](20) NULL', '', 'Codice articolo di default per i canoni di manutenzione'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_AR'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_AR]
		EXEC asp_du_AddAlterColumn 'xContratto', 'ISTAT', '[numeric](18, 2) NULL', '0', 'Percentuale adeguamento ISTAT'

		/* Contratti - Gestione Spese */
		/* 06-04-2011 */

		-- Gestione Spese (xContrattoSpesa)
		IF dbo.afn_du_IsTable('xContrattoSpesa') = 0
			EXEC asp_du_AddTable 'xContrattoSpesa', 0, 'Gestione delle spese nei contratti'

		EXEC asp_du_AddAlterColumnComment 'xContrattoSpesa', 'Id_xContrattoSpesa', 'Identificativo spesa'
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'Id_xContratto', '[int] NOT NULL', '', 'Identificativo contratto'
		EXEC asp_du_DropConstraint 'xContrattoSpesa', 'FK_xContrattoSpesa_Contratto'
		ALTER TABLE [dbo].[xContrattoSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoSpesa_Contratto] FOREIGN KEY([Id_xContratto])
		REFERENCES [dbo].[xContratto] ([Id_xContratto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoSpesa] CHECK CONSTRAINT [FK_xContrattoSpesa_Contratto]
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'Cd_xSpesa', '[char](3) NOT NULL', '', 'Codice spesa'
		EXEC asp_du_DropConstraint 'xContrattoSpesa', 'FK_xContrattoSpesa_xSpesa'
		ALTER TABLE [dbo].[xContrattoSpesa] WITH CHECK ADD CONSTRAINT [FK_xContrattoSpesa_xSpesa] FOREIGN KEY([Cd_xSpesa])
		REFERENCES [dbo].[xSpesa] ([Cd_xSpesa])
		ALTER TABLE [dbo].[xContrattoSpesa] CHECK CONSTRAINT [FK_xContrattoSpesa_xSpesa]
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'Descrizione', 'varchar(80) NOT NULL', '('''')', 'Descrizione spesa'
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'Cd_AR', '[varchar](20) NOT NULL', '', 'Codice articolo associato alla spesa'
		EXEC asp_du_DropConstraint 'xContrattoSpesa', 'FK_xContrattoSpesa_AR'
		ALTER TABLE [dbo].[xContrattoSpesa] WITH CHECK ADD CONSTRAINT [FK_xContrattoSpesa_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContrattoSpesa] CHECK CONSTRAINT [FK_xContrattoSpesa_AR]
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata alla spesa'
		EXEC asp_du_DropConstraint 'xContrattoSpesa', 'FK_xContrattoSpesa_ARMisura'
		ALTER TABLE [dbo].[xContrattoSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoSpesa_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoSpesa] CHECK CONSTRAINT [FK_xContrattoSpesa_ARMisura]
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'PrezzoUnitarioV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato alla spesa'
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'Sconto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare al prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'PrezzoUnitarioScontatoV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo unitario scontato in valuta'
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'EsclusoDaVal', '[bit] NOT NULL', '0', '0 - spesa addebitata; 1 - spesa non addebitata'
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'Riga', '[smallint] NOT NULL', '0'	, 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'DataInizio', '[smalldatetime] NULL'	, '', 'Inizio spesa'
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'DataFine', '[smalldatetime] NULL'	, '', 'Fine spesa'

		-- Contratto (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'Provvigione', 'varchar(10) NULL', '', 'Provvigione in % da liquidare all agente'
		EXEC asp_du_AddAlterColumn 'xContratto', 'TipoSpesa', 'tinyint NOT NULL',	'1', 'Tipo spesa: 1 - spese incluse nel contratto; 2 - spese in base ad anagrafica; 3 - spese a listino; 4 - spese con prezzi personalizzati'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_LS_Spesa', '[char](7) NULL', '', 'Listino associato alle spese'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_LS_Spesa'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_LS_Spesa] FOREIGN KEY([Cd_LS_Spesa])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_LS_Spesa]
		EXEC asp_du_AddAlterColumn 'xContratto', 'SpesaScontoRiga'	, 'varchar(1000) NOT NULL'	,	'('''')', 'Formula dello sconto di riga da applicare alle spese se si è scelto l opzione "spese a listino"'

		/* Contratti - Gestione Attività */
		/* 06-04-2011 */

		-- Gestione Attività (xContrattoFase)
		IF dbo.afn_du_IsTable('xContrattoFase') = 0
			EXEC asp_du_AddTable 'xContrattoFase', 0, 'Gestione attività nei contratti'

		EXEC asp_du_AddAlterColumnComment 'xContrattoFase', 'Id_xContrattoFase', 'Identificativo attività'
		EXEC asp_du_AddAlterColumn 'xContrattoFase', 'Id_xContratto', '[int] NOT NULL', '', 'Identificativo contratto'
		EXEC asp_du_DropConstraint 'xContrattoFase', 'FK_xContrattoFase_Contratto'
		ALTER TABLE [dbo].[xContrattoFase] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoFase_Contratto] FOREIGN KEY([Id_xContratto])
		REFERENCES [dbo].[xContratto] ([Id_xContratto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoFase] CHECK CONSTRAINT [FK_xContrattoFase_Contratto]
		EXEC asp_du_AddAlterColumn 'xContrattoFase', 'Cd_PrAttivita', '[varchar](20) NOT NULL', '', 'Codice attività'
		EXEC asp_du_DropConstraint 'xContrattoFase', 'FK_xContrattoFase_PRAttivita'
		ALTER TABLE [dbo].[xContrattoFase] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoFase_PRAttivita] FOREIGN KEY([Cd_PrAttivita])
		REFERENCES [dbo].[PrAttivita] ([Cd_PrAttivita])
		ALTER TABLE [dbo].[xContrattoFase] CHECK CONSTRAINT [FK_xContrattoFase_PRAttivita]
		EXEC asp_du_AddAlterColumn 'xContrattoFase', 'Descrizione', '[varchar](80) NOT NULL', '('''')', 'Descrizione attività all interno del contratto'
		EXEC asp_du_AddAlterColumn 'xContrattoFase', 'PrezzoUnitarioV', '[numeric](18, 6) NOT NULL'	, '0', 'Prezzo unitario in valuta'
		EXEC asp_du_AddAlterColumn 'xContrattoFase', 'Sconto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare al prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xContrattoFase', 'PrezzoUnitarioScontatoV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo unitario scontato in valuta'
		EXEC asp_du_AddAlterColumn 'xContrattoFase', 'DataInizio', '[smalldatetime] NULL'	, '', 'Inizio attività'
		EXEC asp_du_AddAlterColumn 'xContrattoFase', 'DataFine', '[smalldatetime] NULL'	, '', 'Fine attività'
		EXEC asp_du_AddAlterColumn 'xContrattoFase', 'Riga', '[smallint] NOT NULL', '0'	, 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xContrattoFase', 'Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata all attività'
		EXEC asp_du_DropConstraint 'xContrattoFase', 'FK_xContrattoFase_ARMisura'
		ALTER TABLE [dbo].[xContrattoFase] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoFase_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoFase] CHECK CONSTRAINT [FK_xContrattoFase_ARMisura]

		-- Contratto (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'TipoFase', 'tinyint NOT NULL',	'1', 'Tipo attività: 1 - attività incluse nel contratto; 2 - attività a prezzo unico; 3 - attività a listino; 4 - attività con prezzi personalizzati'
		EXEC asp_du_AddAlterColumn 'xContratto', 'FasePrezzoUnitarioV', '[numeric](18, 6) NOT NULL'	, '0', 'Prezzo unitario in valuta per attività a prezzo unico'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_LS_Fase'	, '[char](7) NULL', '', 'Listino associato alle attività'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_LS_Fase'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_LS_Fase] FOREIGN KEY([Cd_LS_Fase])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_LS_Fase]
		EXEC asp_du_AddAlterColumn 'xContratto', 'FaseScontoRiga'	, 'varchar(1000) NOT NULL'	,	'('''')', 'Formula dello sconto di riga da applicare alle attività se si è scelto l opzione "attività a listino"'

		/* Articoli - Gestione Matricole */
		/* 07-04-2011 */
		EXEC asp_du_AddAlterColumn 'AR', 'xCreaMatricola', '[bit] NOT NULL', '0', '0 - nessun automatismo; 1 - crea automaticamente l anagrafica della matricola associata all articolo in un documento'
		EXEC asp_du_AddAlterColumn 'AR', 'xDurataGaranziaAcquisto', '[smallint] NOT NULL', '0', 'Durata garanzia acquisto'
		EXEC asp_du_AddAlterColumn 'AR', 'xDurataGaranziaVendita', '[smallint] NOT NULL', '0', 'Durata garanzia vendita'

		/* Contratti - Gestione Rinnovi */
		/* 08-04-2011 */

		-- Gestione Rinnovi (xContrattoRinnovo)
		IF dbo.afn_du_IsTable('xContrattoRinnovo') = 0
			EXEC asp_du_AddTable 'xContrattoRinnovo', 0, 'Gestione rinnovi nei contratti'

		EXEC asp_du_AddAlterColumnComment 'xContrattoRinnovo', 'Id_xContrattoRinnovo', 'Identificativo rinnovo'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'Id_xContratto', '[int] NOT NULL', '', 'Identificativo contratto'
		EXEC asp_du_DropConstraint 'xContrattoRinnovo', 'FK_xContrattoRinnovo_Contratto'
		ALTER TABLE [dbo].[xContrattoRinnovo] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoRinnovo_Contratto] FOREIGN KEY([Id_xContratto])
		REFERENCES [dbo].[xContratto] ([Id_xContratto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoRinnovo] CHECK CONSTRAINT [FK_xContrattoRinnovo_Contratto]
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'DataInizio', '[smalldatetime] NULL'	, '', 'Inizio rinnovo'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'DataFine', '[smalldatetime] NULL'	, '', 'Fine rinnovo'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'ImportoTotaleContratto', '[numeric](18, 6) NOT NULL', '0', 'Importo totale contratto'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'ImportoTotaleFattura', '[numeric](18, 6) NOT NULL', '0', 'Importo totale fattura'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'ISTAT', '[numeric](18, 2) NULL', '0', 'Percentuale adeguamento ISTAT'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'DataConfermaRinnovo', '[smalldatetime] NULL'	, '', 'Data conferma rinnovo'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'Tacitamente', '[bit] NOT NULL', '0', '0 - il contratto non è rinnovabile tacitamente; 1 - il contratto è rinnovabile tacitamente'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'Riga', '[smallint] NOT NULL', '0'	, 'Numero di riga'

		/* Contratti - Gestione Matricole */
		/* 08-04-2011 */

		-- Gestione Matricole (xContrattoMatricola)
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Disattiva', '[bit] NOT NULL', '0', '0 - la matricola è sotto contratto; 1 - la matricola non è più sotto contratto'

		/* Tickets - Campi aggiuntivi */
		/* 08-04-2011 */

		-- Gestione Tickets (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_DOSottoCommessaInst', '[varchar](20) NULL',  '', 'Codice sottocommessa di installazione'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_DOSottoCommessaInst'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_DOSottoCommessaInst] FOREIGN KEY([Cd_DOSottoCommessaInst])
		REFERENCES [dbo].[DOSottoCommessa] ([Cd_DOSottoCommessa])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_DOSottoCommessaInst]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_xOperatore'	, '[varchar](20) NULL', '', 'Codice operatore che ha emesso il ticket'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xOperatore'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_xOperatore] FOREIGN KEY([Cd_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xOperatore]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_CFDest', '[char](3) NULL', '', 'Destinazione diversa ticket'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_CFDest'
		ALTER TABLE [dbo].[xRDTicket] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicket_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_CFDest]

		/* Operatori - Campi aggiuntivi */
		/* 11-04-2011 */

		-- Operatori (xOperatore)
		EXEC asp_du_AddAlterColumn 'xOperatore', 'AperturaTicket', '[bit] NOT NULL', '0', '0 - l operatore non può aprire un ticket; 1 - l operatore può aprire un ticket'

		-- Elenco risorse di appartenenza (xOperatorePRRisorsa)
		IF dbo.afn_du_IsTable('xOperatorePRRisorsa') = 0
			EXEC asp_du_AddTable 'xOperatorePRRisorsa', 0, 'Elenco risorse di appartenenza di ogni operatore'

		EXEC asp_du_AddAlterColumnComment 'xOperatorePRRisorsa', 'Id_xOperatorePRRisorsa', 'Identificativo risorsa di appartenenza'
		EXEC asp_du_AddAlterColumn 'xOperatorePRRisorsa', 'Id_xOperatore', '[int] NOT NULL', '', 'Identificativo Operatore'
		EXEC asp_du_DropConstraint 'xOperatorePRRisorsa', 'FK_xOperatorePRRisorsa_Operatore'
		ALTER TABLE [dbo].[xOperatorePRRisorsa] WITH NOCHECK ADD CONSTRAINT [FK_xOperatorePRRisorsa_Operatore] FOREIGN KEY([Id_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Id_xOperatore]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xOperatorePRRisorsa] CHECK CONSTRAINT [FK_xOperatorePRRisorsa_Operatore]		
		EXEC asp_du_AddAlterColumn 'xOperatorePRRisorsa', 'Cd_PrRisorsa', '[varchar](20) NOT NULL',  '', 'Codice risorsa'
		EXEC asp_du_DropConstraint 'xOperatorePRRisorsa', 'FK_xOperatorePRRisorsa_PrRisorsa'
		ALTER TABLE [dbo].[xOperatorePRRisorsa] WITH CHECK ADD CONSTRAINT [FK_xOperatorePRRisorsa_PrRisorsa] FOREIGN KEY([Cd_PrRisorsa])
		REFERENCES [dbo].[PrRisorsa] ([Cd_PrRisorsa])
		ALTER TABLE [dbo].[xOperatorePRRisorsa] CHECK CONSTRAINT [FK_xOperatorePRRisorsa_PrRisorsa]
		EXEC asp_du_AddAlterColumn 'xOperatorePRRisorsa', 'Riga', '[smallint] NOT NULL', '0'	, 'Numero di riga'

		/* Gestione Matricole */
		/* 14-04-2011 */

		-- Anagrafica matricole (xMatricola)
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Cd_CF', '[char](7) NULL', '', 'Codice cliente'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_CF'
		ALTER TABLE [dbo].[xMatricola] WITH CHECK ADD CONSTRAINT [FK_xMatricola_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_CF]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'ScadenzaGaranziaAcquisto', '[smalldatetime] NULL', '', 'Scadenza garanzia acquisto'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'ScadenzaGaranziaVendita', '[smalldatetime] NULL', '', 'Scadenza garanzia vendita'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Cd_CFDest', '[char](3) NULL', '', 'Destinazione diversa'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_CFDest'
		ALTER TABLE [dbo].[xMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xMatricola_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_CFDest]

		/* Assegnazione Materiale a Commessa */
		/* 14-04-2011 */

		-- Righe documenti (DORig)
		EXEC asp_du_DropColumn		 'DORig', 'xCostoUnitarioE'
		EXEC asp_du_AddAlterColumn 'DORig', 'xCostoUnitarioE', 'AS (CONVERT([numeric](18,6), round(([xCostoUnitarioV] / [Cambio]),6),(0)))', '', 'Costo unitario in euro'
		EXEC asp_du_DropColumn		 'DORig', 'xCostoTotaleE'
		EXEC asp_du_AddAlterColumn 'DORig', 'xCostoTotaleE', 'AS (CONVERT([numeric](18,2), round(([xCostoTotaleV] / [Cambio]),2),(0)))', '', 'Costo totale in euro'

		/* Contratti - Gestione Matricole */
		/* 18-04-2011 */

		-- Gestione Matricole (xContrattoMatricola)
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Rateo', 'numeric(18, 6) NULL', '0', 'Rateo di riga'

		-- Gestione Contratto (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'Rateo', 'numeric(18, 6) NULL', '0', 'Rateo corrente del contratto'

		/* Contratti - Gestione Materiali */
		/* 20-04-2011 */

		-- Gestione Materiali (xContrattoMateriale)
		IF dbo.afn_du_IsTable('xContrattoMateriale') = 0
			EXEC asp_du_AddTable 'xContrattoMateriale', 0, 'Gestione materiali nei contratti'

		EXEC asp_du_AddAlterColumnComment 'xContrattoMateriale', 'Id_xContrattoMateriale', 'Identificativo materiale'
		EXEC asp_du_AddAlterColumn 'xContrattoMateriale', 'Id_xContratto', '[int] NOT NULL', '', 'Identificativo contratto'
		EXEC asp_du_DropConstraint 'xContrattoMateriale', 'FK_xContrattoMateriale_Contratto'
		ALTER TABLE [dbo].[xContrattoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoMateriale_Contratto] FOREIGN KEY([Id_xContratto])
		REFERENCES [dbo].[xContratto] ([Id_xContratto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoMateriale] CHECK CONSTRAINT [FK_xContrattoMateriale_Contratto]
		EXEC asp_du_AddAlterColumn 'xContrattoMateriale', 'Cd_AR', '[varchar](20) NULL', '', 'Codice articolo (è un materiale o un articolo fittizio)'
		EXEC asp_du_DropConstraint 'xContrattoMateriale', 'FK_xContrattoMateriale_AR'
		ALTER TABLE [dbo].[xContrattoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoMateriale_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContrattoMateriale] CHECK CONSTRAINT [FK_xContrattoMateriale_AR]
		EXEC asp_du_AddAlterColumn 'xContrattoMateriale', 'Descrizione', '[varchar](80) NOT NULL', '('''')', 'Descrizione materiale all interno del contratto'
		EXEC asp_du_AddAlterColumn 'xContrattoMateriale', 'Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata al materiale'
		EXEC asp_du_DropConstraint 'xContrattoMateriale', 'FK_xContrattoMateriale_ARMisura'
		ALTER TABLE [dbo].[xContrattoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoMateriale_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoMateriale] CHECK CONSTRAINT [FK_xContrattoMateriale_ARMisura]
		EXEC asp_du_AddAlterColumn 'xContrattoMateriale', 'PrezzoUnitarioV', '[numeric](18, 6) NOT NULL'	, '0', 'Prezzo unitario in valuta'
		EXEC asp_du_AddAlterColumn 'xContrattoMateriale', 'Sconto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare al prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xContrattoMateriale', 'PrezzoUnitarioScontatoV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo unitario scontato in valuta'
		EXEC asp_du_AddAlterColumn 'xContrattoMateriale', 'DataInizio', '[smalldatetime] NULL'	, '', 'Inizio validità materiale'
		EXEC asp_du_AddAlterColumn 'xContrattoMateriale', 'DataFine', '[smalldatetime] NULL'	, '', 'Fine validità materiale'
		EXEC asp_du_AddAlterColumn 'xContrattoMateriale', 'Riga', '[smallint] NOT NULL', '0'	, 'Numero di riga'

		-- Contratto (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'TipoMateriale', 'tinyint NOT NULL',	'1', 'Tipo attività: 1 - attività incluse nel contratto; 2 - attività a prezzo unico; 3 - attività a listino; 4 - attività con prezzi personalizzati'
		--EXEC asp_du_AddAlterColumn 'xContratto', 'MaterialePrezzoUnitarioV', '[numeric](18, 6) NOT NULL'	, '0', 'Prezzo unitario in valuta per attività a prezzo unico'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_LS_Materiale'	, '[char](7) NULL', '', 'Listino associato alle attività'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_LS_Materiale'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_LS_Materiale] FOREIGN KEY([Cd_LS_Materiale])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_LS_Materiale]
		EXEC asp_du_AddAlterColumn 'xContratto', 'MaterialeScontoRiga'	, 'varchar(1000) NOT NULL'	,	'('''')', 'Formula dello sconto di riga da applicare alle attività se si è scelto l opzione "attività a listino"'

		/* Impianti - Modifiche varie */
		/* 23-04-2011 */

		-- Gestione Impianti (xImpianto)
		EXEC asp_du_AddAlterColumn 'xImpianto', 'DataCollaudo', '[smalldatetime] NULL', '', 'Data di collaudo dell impianto'

		/* Ticket */
		/* 26-04-2011 */

		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'PrezzoUnitarioV', 'NUMERIC(18, 6) NULL', '', 'Prezzo unitario della riga'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'PrezzoTotaleV', 'NUMERIC(18, 6) NULL', '', 'Prezzo totale della riga'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Scontoriga', 'VARCHAR(20) NULL', '', 'Sconto da applicare alla riga'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Provvigione', 'varchar(10) NULL', '', 'Provvigione in % da liquidare all agente'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'FattProvvigione', '[numeric](10, 9) NOT NULL', '0', 'Fattore relativo alla provvigione'
		EXEC asp_du_DropColumn		 'xRDTicketAttivitaMov', 'ValProvvigione'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'ValProvvigione', 'AS ((Durata * PrezzoUnitarioV) * FattProvvigione)', '', 'Valore della provvigione'

		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Cd_CFDest', 'CHAR(3) NULL', '', ''

		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_Agente', '[char](3) NULL', '', 'Codice agente'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_Agente'
		ALTER TABLE [dbo].[xRDTicket] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicket_Agente] FOREIGN KEY([Cd_Agente])
		REFERENCES [dbo].[Agente] ([Cd_Agente]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_Agente]

		/* Impostazioni - Nuovi campi */
		/* 27/04/2011 */
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'Cd_DoAttivita', 'char(3) NULL', '', 'Indica il documento di default per la valorizzazione dell attività'
		EXEC asp_du_DropConstraint 'xImpostazione', 'FK_xImpostazione_DoAttivita'
		ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [FK_xImpostazione_DoAttivita] FOREIGN KEY([CD_DoAttivita])
		REFERENCES [dbo].[DO] ([Cd_DO])
		ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [FK_xImpostazione_DoAttivita]
		ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [FK_xImpostazione_DoAttivita]
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'AssistenzaTipoValCosto' , 'tinyint NOT NULL' , '0', 'Tipologia di costo da gestire nelle righe materiali per l assistenza'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'Cd_LS_CostoAssistenza' , 'char(7) NULL' , '', 'Listino di costo da gestire nelle righe materiali per l assistenza se tipologia = 8'
		EXEC asp_du_DropConstraint 'xImpostazione', 'FK_xImpostazione_Cd_LS_CostoAssistenza'
		ALTER TABLE [dbo].[xImpostazione]  WITH NOCHECK ADD  CONSTRAINT [FK_xImpostazione_Cd_LS_CostoAssistenza] FOREIGN KEY([Cd_LS_Costo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [FK_xImpostazione_Cd_LS_CostoAssistenza]

		/* DORig - Gestione della messaggistica */
		/* 12/05/2011 */
		Exec asp_du_AddAlterErrMsgFK 'DORig', 'xFK_Id_DORig_CP', 'Associazione alla riga del ciclo passivo non valida', 'Non è possibile eliminare il documento perchè il materiale presente in una o più righe è stato assegnato a commessa in un documento del ciclo attivo'

		/* DORig - Ticket Materiali e Spese */
		/* 13-05-2011 */
		EXEC asp_du_AddAlterColumn 'DORig', 'xId_xRDTicketMaterialeSpesaMov'	, 'INT NULL'				, '', 'Identificativo del movimento del ticket nelle righe documento'
		EXEC asp_du_DropConstraint 'DORig', 'xFK_DORig_xId_xRDTicketMaterialeSpesaMov'
		ALTER TABLE [DORig] WITH NOCHECK ADD CONSTRAINT [xFK_DORig_xId_xRDTicketMaterialeSpesaMov] FOREIGN KEY([xId_xRDTicketMaterialeSpesaMov]) 
		REFERENCES [xRDTicketMaterialeSpesaMov] ([Id_xRDTicketMaterialeSpesaMov])
		ALTER TABLE [DORig] CHECK CONSTRAINT [xFK_DORig_xId_xRDTicketMaterialeSpesaMov]

		/* Ordinamento Stampa Unione */
		/* 31-05-2011 */

		-- Famiglia Articoli (ARGruppo1)
		EXEC asp_du_AddAlterColumn 'ARGruppo1', 'xOrdinamentoStampa', 'Char(3) NULL', '', 'ordinamento alfa-numerico per mail merge'
		-- Tabella di appoggio Stampa Unione (xMM1)
		EXEC asp_du_AddAlterColumn 'xMM1'			, 'xOrdinamentoStampa', 'VarChar(20) NULL', '', 'ordinamento alfa-numerico per mail merge'

		/* Ticket - Gestione Origine */
		/* 01-06-2011 */

		-- Tabella anagrafica delle Origini (xRDTicketOrigine)
		IF dbo.afn_du_IsTable('xRDOrigine') = 0
			EXEC asp_du_AddTable 'xRDOrigine', 3, 'Origine del ticket (telefonata, mail, fax, agente...)'

		EXEC asp_du_AddAlterColumnComment 'xRDOrigine', 'Id_xRDOrigine', 'Identificativo origine'
		EXEC asp_du_AddAlterColumn 'xRDOrigine', 'Descrizione', '[varchar](80) NOT NULL', '('''')', 'Descrizione origine'

		-- Anagrafica ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_xRDOrigine', '[char](3) NULL', '', 'Codice origine'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xRDOrigine'
		ALTER TABLE [dbo].[xRDTicket] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicket_xRDOrigine] FOREIGN KEY([Cd_xRDOrigine])
		REFERENCES [dbo].[xRDOrigine] ([Cd_xRDOrigine])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xRDOrigine]

		/* Gestione Garanzia */
		/* 01-06-2011 */
		-- Anagrafica Contratti (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'Modalita', 'tinyint NOT NULL',	'1', 'Modalità: 1 - assistenza post-vendita; 2 - garanzia; 3 - estensione garanzia'

		-- Tabella Modalità (xRDModalita)
		IF dbo.afn_du_IsTable('xRDModalita') = 0
			EXEC asp_du_AddTable 'xRDModalita', 1, 'Modalità del ticket (1-Fuori Contratto; 2-Garanzia; 3-Contratto; 4-Estensione Garanzia)'

		EXEC asp_du_AddAlterColumnComment 'xRDModalita', 'Id_xRDModalita', 'Identificativo modalità'
		EXEC asp_du_AddAlterColumn 'xRDModalita', 'Descrizione', '[varchar](80) NOT NULL', '('''')', 'Descrizione modalità'

		-- Anagrafica Ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_xRDModalita', '[char](1) NULL', '', 'Codice modalità'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xRDModalita'
		ALTER TABLE [dbo].[xRDTicket] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicket_xRDModalita] FOREIGN KEY([Cd_xRDModalita])
		REFERENCES [dbo].[xRDModalita] ([Cd_xRDModalita])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xRDModalita]

		/* Attività - Gestione Documenti Generabili */
		/* 07-06-2011 */
		-- Anagrafica Attività (PRAttivita)
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xCd_DO', '[char](3) NULL', '', 'Codice documento'
		EXEC asp_du_DropConstraint 'PRAttivita', 'xFK_PRAttivita_xCd_DO'
		ALTER TABLE [dbo].[PRAttivita] WITH NOCHECK ADD CONSTRAINT [xFK_PRAttivita_xCd_DO] FOREIGN KEY([xCd_DO])
		REFERENCES [dbo].[DO] ([Cd_DO])
		ALTER TABLE [dbo].[PRAttivita] CHECK CONSTRAINT [xFK_PRAttivita_xCd_DO]
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xNuovoEvadi', '[char](1) NOT NULL', '''N''', 'N-nuovo documento; E-evasione documenti'

		/* Gestione Documenti - Id Ticket */
		/* 10-06-2011 */
		EXEC asp_du_AddAlterColumn 'DORig', 'xId_RDTicket'	, 'INT NULL'				, '', 'Identificativo del movimento del ticket nelle righe documento'
		EXEC asp_du_DropConstraint 'DORig', 'xFK_DORig_xId_RDTicket'
		ALTER TABLE [DORig] WITH NOCHECK ADD CONSTRAINT [xFK_DORig_xId_RDTicket] FOREIGN KEY([xId_RDTicket]) 
		REFERENCES [xRDTicket] ([Id_xRDTicket])
		ALTER TABLE [DORig] CHECK CONSTRAINT [xFK_DORig_xId_RDTicket]

		/* Contratti - Durata Standard/Rinnovo */
		-- 14-06-2011
		-- Anagrafica Contratti (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'PeriodoStandardRinnovo'	, '[int] NOT NULL'	, '1'	, 'Lunghezza temporale standard e del rinnovo (in anni, mesi o giorni)'
		EXEC asp_du_AddAlterColumn 'xContratto', 'FattoreMksPeriodoStandardRinnovo', '[numeric](25, 12) NOT NULL', '12'	, 'Fattore temporale del periodo (anni, mesi o giorni)'

		/* Impostazione - Gestione Commessa obbligatoria nelle Rilevazioni */
		/* 14-06-2011 */
		-- Tabella Impostazioni G.A.C. (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'AssistenzaCommessaObbligatoria', 'bit NOT NULL', '0', '0 - commessa non obbligatoria nelle rilevazioni; 1 - commessa obbligatoria nelle rilevazioni'		

		/* Clienti - Gestione Distanza */
		/* 16-06-2011 */
		-- Anagrafica Clienti\Fornitori (CF)
		EXEC asp_du_AddAlterColumn 'CF'			, 'xDistanza', '[int] NOT NULL', '0', 'Distanza del cliente in km'
		-- Anagrafica Sedi (CFDest)
		EXEC asp_du_AddAlterColumn 'CFDest'	, 'xDistanza', '[int] NOT NULL', '0', 'Distanza della destinazione cliente in km'

		/* Sottocommessa - Provvigione */
		/* 17-06-2011 */
		-- Anagrafica Sottocommessa (DOSottoCommessa)
		If Exists(Select * from ADB_System.aad.License where Name = 'LicF_Commesse' And Value = 1)
			Begin
				EXEC('Update DOSottoCommessa Set Provvigione = IsNull(xProvvigione, '''')')
			End
		
		EXEC asp_du_DropColumn 'DOSottoCommessa', 'xProvvigione'

		-- porto la versione a 1.11
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 11, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.12
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.11' begin
		select 'Applico aggiornamenti al database: 1.11->1.12'
		-- qui operazioni per l'aggiornamento DB da 1.11 a 1.12

		/* Impianti - Eliminazione vincolo con anagrafica matricole */
		/* 20-06-2011 */
		EXEC asp_du_DropConstraint 'xImpiantoMatricola'	, 'FK_xImpiantoMatricola_xMatricola'

		--/* Contratti - Eliminazione campi di testa */
		--/* 22-06-2011 */
		EXEC asp_du_AddAlterColumn 'xContrattoSviluppo', 'RR_DataInizio'	, '[smalldatetime] NULL', '''19000101''', 'Inizio Competenza'
		EXEC asp_du_AddAlterColumn 'xContrattoSviluppo', 'RR_DataFine'		, '[smalldatetime] NULL', '''19000101''', 'Fine Competenza'

		/* Contratti - Obbligatorietà sottocommessa */
		/* 27-06-2011 */
		-- Anagrafica contratti (xContratto)
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_DOSottoCommessa'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_DoSottoCommessa', '[varchar](20) NULL', '', 'Sottocommessa associata al contratto'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_DOSottoCommessa] FOREIGN KEY([Cd_DoSottoCommessa])
		REFERENCES [dbo].[DOSottoCommessa] ([Cd_DOSottoCommessa]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_DOSottoCommessa]

		/* Attività - Responsabile */
		/* 04-07-2011 */
		-- Anagrafica attività (PRAttivita)
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xCd_Operatore', '[varchar](20) NULL', '', 'Responsabile'
		EXEC asp_du_DropConstraint 'PRAttivita', 'xFK_PRAttivita_xCd_Operatore'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xModificaPrelevabile', 'bit NOT NULL',	'0'	, '0 - nessuna modifica al bit prelevabile del documento; 1 - il bit prelevabile del documento viene aggiornato dal wizard di generazione rapportini\fatture'
		ALTER TABLE [dbo].[PRAttivita] WITH NOCHECK ADD CONSTRAINT [xFK_PRAttivita_xCd_Operatore] FOREIGN KEY([xCd_Operatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[PRAttivita] CHECK CONSTRAINT [xFK_PRAttivita_xCd_Operatore]

		-- porto la versione a 1.12
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 12, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.13
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.12' begin
		select 'Applico aggiornamenti al database: 1.12->1.13'
		-- qui operazioni per l'aggiornamento DB da 1.12 a 1.13

		/* Gestione Tipologia Commessa */
		/* 20-07-2011 */
		-- Anagrafica Sottocommesse (DOSottoCommessa)
		EXEC asp_du_DropColumn 'DOSottoCommessa', 'xGestisciTicket'

		-- Impostazioni G.A.C. (tabella xImpostazione)
		EXEC asp_du_DropColumn 'xImpostazione'	, 'GestisciTicket'
		EXEC asp_du_AddAlterColumn	'xImpostazione'	, 'TuttiOperatoriDisp'							, '[bit] NOT NULL', '0', '0 - se nel ticket di produzione non saranno definiti operatori, nessun operatore sarà visualizzato; 1 - se nel ticket di produzione non saranno definiti operatori, tutti gli operatori saranno visualizzati'
		EXEC asp_du_AddAlterColumn	'xImpostazione'	, 'AssistenzaTuttiOperatoriDisp'		, '[bit] NOT NULL', '0', '0 - se nel ticket di assistenza non saranno definiti operatori, nessun operatore sarà visualizzato; 1 - se nel ticket di assistenza non saranno definiti operatori, tutti gli operatori saranno visualizzati'
		EXEC asp_du_AddAlterColumn	'xImpostazione' , 'DOCommessaForza'									, 'bit Not Null', '0'	, '0 - commessa non obbligatoria, 1 - commessa obbligatoria'
		EXEC asp_du_AddAlterColumn	'xImpostazione' , 'Cd_ARMisuraAttivita'							, 'char(2) NULL', ''	, 'Unità di misura per le attività'
		EXEC asp_du_DropConstraint	'xImpostazione' , 'FK_xImpostazione_ARMisuraAttivita'
		ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [FK_xImpostazione_ARMisuraAttivita] FOREIGN KEY([Cd_ARMisuraAttivita])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [FK_xImpostazione_ARMisuraAttivita]
		EXEC asp_du_AddAlterColumn	'xImpostazione'	, 'Cd_ARMisuraContratto'						, 'char(2) NULL', ''	, 'Unità di misura per i contratti'
		EXEC asp_du_DropConstraint	'xImpostazione'	, 'FK_xImpostazione_ARMisuraContratto'
		ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [FK_xImpostazione_ARMisuraContratto] FOREIGN KEY([Cd_ARMisuraContratto])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [FK_xImpostazione_ARMisuraContratto]

		EXEC('Declare @xDOCommessaForza Bit
					Declare @xCd_ARMisuraAttivita Char(2)
					Declare @xCd_ARMisuraContratto Char(2)

					Select 
						@xDOCommessaForza					= xDOCommessaForza
						, @xCd_ARMisuraAttivita		= xCd_ARMisuraAttivita
						, @xCd_ARMisuraContratto	= xCd_ARMisuraContratto
					From	
						Preferenza

					Update 
						xImpostazione 
					Set 
						DOCommessaForza						= @xDOCommessaForza
						, Cd_ARMisuraAttivita			= @xCd_ARMisuraAttivita
						, Cd_ARMisuraContratto		= @xCd_ARMisuraContratto')
			
		-- Preferenze (tabella Preferenza)
		EXEC asp_du_DropColumn			'Preferenza', 'xDOCommessaForza'
		EXEC asp_du_DropColumn			'Preferenza', 'xCd_ARMisuraAttivita'
		EXEC asp_du_DropColumn			'Preferenza', 'xCd_ARMisuraContratto'
		
		-- porto la versione a 1.13
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 13, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.14
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.13' begin
		select 'Applico aggiornamenti al database: 1.13->1.14'
		-- qui operazioni per l'aggiornamento DB da 1.13 a 1.14

		/* Cancellazione documenti di evasione scadenze contratti */
		/* 31-08-2011 */
		-- Sviluppo Scadenze (tabella xContrattoSviluppo)
		EXEC asp_du_DropConstraint 'xContrattoSviluppo', 'FK_xContrattoSviluppo_Id_DOTes'
		ALTER TABLE [dbo].[xContrattoSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoSviluppo_Id_DOTes] FOREIGN KEY([Id_DOTes])
		REFERENCES [dbo].[DOTes] ([Id_DOTes]) --ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoSviluppo] CHECK CONSTRAINT [FK_xContrattoSviluppo_Id_DOTes]

		-- porto la versione a 1.14
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 14, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.15
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.14' begin
		select 'Applico aggiornamenti al database: 1.14->1.15'
		-- qui operazioni per l'aggiornamento DB da 1.14 a 1.15

		/* Attività - Gestione Reports Collegati */
		/* 13-09-2011 */
		-- Anagrafica Attività (PRAttivita)
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xId_Report1', 'int NULL', '', 'Id Report 1'
		EXEC asp_du_DropConstraint 'PRAttivita', 'xFK_PRAttivita_xId_Report1'
		ALTER TABLE [dbo].[PRAttivita] WITH NOCHECK ADD CONSTRAINT [xFK_PRAttivita_xId_Report1] FOREIGN KEY([xId_Report1])
		REFERENCES [dbo].[Report] ([Id_Report])
		ALTER TABLE [dbo].[PRAttivita] CHECK CONSTRAINT [xFK_PRAttivita_xId_Report1]
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xId_Report2', 'int NULL', '', 'Id Report 2'
		EXEC asp_du_DropConstraint 'PRAttivita', 'xFK_PRAttivita_xId_Report2'
		ALTER TABLE [dbo].[PRAttivita] WITH NOCHECK ADD CONSTRAINT [xFK_PRAttivita_xId_Report2] FOREIGN KEY([xId_Report2])
		REFERENCES [dbo].[Report] ([Id_Report])
		ALTER TABLE [dbo].[PRAttivita] CHECK CONSTRAINT [xFK_PRAttivita_xId_Report2]
		/* Gestione Attività On.Site */
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xFuoriSede', 'bit Not Null', '0'	, '0 - attività interna, 1 - attività fuori sede'

		/* Clienti - Gestione Tempo Trasferta */
		/* 13-09-2011 */
		-- Anagrafica Clienti\Fornitori (CF)
		EXEC asp_du_AddAlterColumn 'CF'			, 'xTempoTrasferta', '[int] NOT NULL', '0', 'Tempo della trasferta presso il cliente in ore'
		-- Anagrafica Sedi (CFDest)
		EXEC asp_du_AddAlterColumn 'CFDest'	, 'xTempoTrasferta', '[int] NOT NULL', '0', 'Tempo della trasferta presso la destinazione del cliente in ore'

		/* Anagrafica Spese - Gestione Default Qta */
		/* 13-09-2011 */
		-- Anagrafica Spese (xSpesa)
		EXEC asp_du_AddAlterColumn 'xSpesa', 'DefaultQta', '[char](1) NOT NULL', '''N''', 'N-nessuno; D-distanza [km]; T-tempo trasferta [ore]'
		/* Gestione Spesa associata ad Attività On.Site */
		EXEC asp_du_AddAlterColumn 'xSpesa', 'FuoriSede', 'bit Not Null', '0'	, '0 - spesa non associata ad attività fuori sede, 1 - spesa associata ad attività fuori sede'

		/* Ticket - Gestione Operatori Confermati */
		/* 13-09-2011 */
		-- Operatori di una attività del ticket (xRDTicketAttivitaOperatore)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Confermato', 'bit Not Null', '0'	, '0 - incarico non confermato per operatore, 1 - incarico confermato per operatore'

		/* Ticket Materiale e Spese - Gestione della data */
		/* 16-09-2011 */
		-- Tabella Ticket Materiale e Spesa Movimenti (xRDTicketMaterialeSpesaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'DataRiferimento', '[smalldatetime] NOT NULL', '''19000101''', 'Data riferimento materiale o spesa'

		/* Ticket - Chiusura attività da rilevazione */
		/* 22-09-2011 */
		-- Tabella rilevazioni (xRDTicketAttivitaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'ChiusuraAttivita', 'bit Not Null', '0'	, '0 - con la rilevazione non si chiude la relativa attività, 1 - con la rilevazione si chiude la relativa attività'

		/* Contratti - Disattivazione obbligatorietà SLA */
		/* 22-09-2011 */
		-- Tabella Anagrafica Contratti (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_SLA', '[char](2) NULL', '', 'SLA associato al contratto'
		-- Tabella Associazione Matricole nei Contratti (xContrattoMatricola)
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Cd_SLA', '[char](2) NULL', '', 'SLA associato alla riga'

		/* Ticket - Gestione automatica operatori */
		/* 23-09-2011 */
		-- Anagrafica Attività (PRAttivita)
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xPopolaOperatoriRisorse', 'bit Not Null', '0'	, '0 - nessun automatismo, 1 - gli operatori appartenenti alle risorse di un attività vengono aggiunti automaticamente al ticket'

		/* Gestione Matricole */
		/* 28-09-2011 */
		-- Anagrafica matricole (xMatricola)
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Cd_CF_For', '[char](7) NULL', '', 'Codice fornitore'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_CF_For'
		ALTER TABLE [dbo].[xMatricola] WITH CHECK ADD CONSTRAINT [FK_xMatricola_CF_For] FOREIGN KEY([Cd_CF_For])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_CF_For]

		/* Documenti - Creazione Automatica Matricola */
		/* 28-09-2011 */
		EXEC asp_du_AddAlterColumn 'xMatricola', 'DaFatturaCliente', 'bit Not Null', '0'	, '0 - fattura cliente assente, 1 - fattura cliente presente'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'DaFatturaFornitore', 'bit Not Null', '0'	, '0 - fattura fornitore assente, 1 - fattura fornitore presente'

		-- porto la versione a 1.15
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 15, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.16
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.15' begin
		select 'Applico aggiornamenti al database: 1.15->1.16'
		-- qui operazioni per l'aggiornamento DB da 1.15 a 1.16

		/* Gestione Matricole */
		/* 05-10-2011 */
		-- Anagrafica matricole (xMatricola)
		EXEC asp_du_AddAlterColumn 'xMatricola', 'RifID_DoTes_C', 'int NULL', '', 'Riferimento testa bolla o fattura cliente relativo alla matricola'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_RifID_DoTes_C'
		ALTER TABLE [dbo].[xMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xMatricola_RifID_DoTes_C] FOREIGN KEY([RifID_DoTes_C])
		REFERENCES [dbo].[DOTes] ([Id_DoTes])
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_RifID_DoTes_C]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'RifID_DoTes_F', 'int NULL', '', 'Riferimento testa bolla o fattura fornitore relativo alla matricola'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_RifID_DoTes_F'
		ALTER TABLE [dbo].[xMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xMatricola_RifID_DoTes_F] FOREIGN KEY([RifID_DoTes_F])
		REFERENCES [dbo].[DOTes] ([Id_DoTes])
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_RifID_DoTes_F]

		/* Gestione Matricole negli impianti */
		/* 06-10-2011 */
		-- Associazione matricole-impianti (xImpiantoMatricola)
		EXEC asp_du_AddAlterColumn 'xImpiantoMatricola', 'DataInizio'	, 'smalldatetime NULL', '', 'Data inizio validità riga'
		EXEC asp_du_AddAlterColumn 'xImpiantoMatricola', 'DataFine'		, 'smalldatetime NULL', '', 'Data fine validità riga'

		/* Contratti - Eliminazione campi */
		/* 11-10-2011 */
		-- Tabella Anagrafica Contratti (xContratto)
		EXEC asp_du_DropColumn 'xContratto', 'DataFatturaLast'
		EXEC asp_du_DropColumn 'xContratto', 'ImportoFatturaLast'
		EXEC asp_du_DropColumn 'xContratto', 'ImportoFatturaNext'
		EXEC asp_du_DropColumn 'xContratto', 'Rateo'

		/* Ticket Attività - Disattivazione obbligatorietà responsabile */
		/* 11-10-2011 */
		-- Tabella Ticket Attività (xRDTicketAttivita)
		EXEC asp_du_DropConstraint 'xRDTicketAttivita', 'FK_xRDTicketAttivita_xOperatore'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Cd_xOperatore'	, '[varchar](20) NULL', '', 'Codice operatore'
		ALTER TABLE [dbo].[xRDTicketAttivita] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivita_xOperatore] FOREIGN KEY([Cd_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[xRDTicketAttivita] CHECK CONSTRAINT [FK_xRDTicketAttivita_xOperatore]

		/* Contratti - Adeguamento ISTAT */
		/* 13-10-2011 */
		-- Tabella Anagrafica Contratti (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'TipoISTAT', 'tinyint NOT NULL',	'1', 'Tipo adeguamento ISTAT: 1 - applicato standard; 2 - applicato personalizzato; 3 - non applicato'

		-- Tabella Anagrafica ISTAT (xISTAT)
		IF dbo.afn_du_IsTable('xISTAT') = 0
			EXEC asp_du_AddTable 'xISTAT', 0, 'Anagrafica ISTAT'

		EXEC asp_du_AddAlterColumnComment 'xISTAT', 'Id_xISTAT'				, 'Identificativo ISTAT'
		EXEC asp_du_AddAlterColumn				'xISTAT', 'Anno'						, 'Char(4) NOT NULL'				, ''	, 'Anno di riferimento'
		EXEC asp_du_AddAlterColumn				'xISTAT', 'PercAdeguamento'	, 'Numeric(18, 2) NULL'	, ''	, 'Percentuale di adeguamento'

		/* Contratti - Gestione della chiusura */
		/* 14-10-2011 */
		-- Anagrafica Contratti (tabella xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'DataChiusura', '[smalldatetime] NULL'	, '', 'Data chiusura contratto'
		EXEC('Update xContratto Set DataChiusura = DataFine Where Chiuso = 1')
		EXEC asp_du_DropColumn	'xContratto', 'Chiuso'
		EXEC asp_du_DropColumn	'xContratto', 'DataEsecuzioneRinnovo'

		/* Gestione Contratti - Parametri di default */
		/* 17-10-2011 */
		-- Tabella Impostazioni G.A.C. (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'ContrattoGiornoFattura'					, '[int] NOT NULL'				, '30', 'Giorno del mese nel quale avviene la fatturazione del contratto'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'ContrattoGiorniAvvisoRinnovo'		, '[int] NOT NULL'				, '0', 'Giorni avviso prima della scadenza'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'ContrattoGiorniDisdettaCliente'	, '[int] NOT NULL'				, '0', 'Giorni disdetta da parte del cliente'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'ContrattoGiorniDisdettaFornitore', '[int] NOT NULL'				, '0', 'Giorni disdetta da parte del fornitore'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'ContrattoTipoISTAT'							, 'tinyint NOT NULL'			,	'1', 'Tipo adeguamento ISTAT: 1 - applicato standard; 2 - applicato personalizzato; 3 - non applicato'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'ContrattoISTAT'									, '[numeric](18, 2) NULL'	, '0', 'Percentuale adeguamento ISTAT'

		-- porto la versione a 1.16
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 16, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.17
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.16' begin
		select 'Applico aggiornamenti al database: 1.16->1.17'
		-- qui operazioni per l'aggiornamento DB da 1.16 a 1.17

		-- porto la versione a 1.17
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 17, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.18
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.17' begin
		select 'Applico aggiornamenti al database: 1.17->1.18'
		-- qui operazioni per l'aggiornamento DB da 1.17 a 1.18

		/* Import Listini - Gestione Barcode */
		/* 04-11-2011 */
		-- Listini normalizzati (tabella xLSImport)
		EXEC asp_du_AddAlterColumn 'xLSImport', 'Barcode', 'varchar(20) NULL',	'', 'Barcode'
		-- Fornitori preferenziali degli articoli potenziali (tabella xAROtherCodCF)
		EXEC asp_du_AddAlterColumn 'xAROtherCodCF', 'Alias', 'varchar(20) NULL',	'', 'Codice alias'

		-- porto la versione a 1.18
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 18, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.19
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.18' begin
		select 'Applico aggiornamenti al database: 1.18->1.19'
		-- qui operazioni per l'aggiornamento DB da 1.18 a 1.19

		/* Contratti - Sviluppo scadenze */
		/* 08-11-2011 */
		-- Sviluppo scadenze (xContrattoSviluppo)
		EXEC asp_du_AddAlterColumn 'xContrattoSviluppo', 'Evasa', '[bit] NOT NULL', '0', '0 - scadenza non evasa; 1 - scadenza evasa'

		-- porto la versione a 1.19
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 19, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.20
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.19' begin
		select 'Applico aggiornamenti al database: 1.19->1.20'
		-- qui operazioni per l'aggiornamento DB da 1.19 a 1.20

		/* Contratti - Rinnovi */
		/* 10-11-2011 */
		-- Rinnovi dei contratti (xContrattoRinnovo)
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'DaProcedura', '[bit] NOT NULL', '0', '0 - il rinnovo è stato fatto manualmente; 1 - il rinnovo è stato elaborato dal relativo wizard'
		-- Anagrafica contratti (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'ISTATUltimoRinnovo', '[numeric](18, 2) NULL', '0', 'Percentuale adeguamento ISTAT utilizzato durante l''ultimo rinnovo elaborato da wizard'
		EXEC asp_du_AddAlterColumn 'xContratto', 'Esecutivo', '[bit] NOT NULL', '0', '0 - il contratto non è esecutivo; 1 - il contratto è esecutivo (si può fatturare, si può rinnovare)'
		-- Matricole dei contratti (xContrattoMatricola)
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Rinnovato', '[bit] NOT NULL', '0', '0 - la matricola è ancora valida; 1 - la matricola è stata rinnovata'
		-- Attività dei contratti (xContrattoFase)
		EXEC asp_du_AddAlterColumn 'xContrattoFase', 'Rinnovato', '[bit] NOT NULL', '0', '0 - l''attività è ancora valida; 1 - l''attività è stata rinnovata'
		-- Materiali dei contratti (xContrattoMateriale)
		EXEC asp_du_AddAlterColumn 'xContrattoMateriale', 'Rinnovato', '[bit] NOT NULL', '0', '0 - il materiale è ancora valido; 1 - il materiale è stato rinnovato'
		-- Spese dei contratti (xContrattoSpesa)
		EXEC asp_du_AddAlterColumn 'xContrattoSpesa', 'Rinnovato', '[bit] NOT NULL', '0', '0 - la spesa è ancora valida; 1 - la spesa è stata rinnovata'

		-- porto la versione a 1.20
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 20, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.21
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.20' begin
		select 'Applico aggiornamenti al database: 1.20->1.21'
		-- qui operazioni per l'aggiornamento DB da 1.20 a 1.21

		/* Contratti - Sistemazione dati matricola */
		/* 25-11-2011 */
		EXEC('Update xContrattoMatricola
		Set PrezzoUnitarioV = Round((Rateo / (DATEDIFF(DD, DataInizio, DataFine) + 1)) * 365, 2)
		Where PrezzoUnitarioV <> Round((Rateo / (DATEDIFF(DD, DataInizio, DataFine) + 1)) * 365, 2)')

		/* Contratti - Sviluppo */
		/* 01-12-2011 */
		EXEC asp_du_AddAlterColumn 'xContratto', 'MesePrecedente', 'bit Not Null', '0', '0 - sviluppo scadenze a partire dal mese corrente, 1 - sviluppo scadenze a partire dal mese precedente'

		-- porto la versione a 1.21
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 21, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.22
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.21' begin
		select 'Applico aggiornamenti al database: 1.21->1.22'
		-- qui operazioni per l'aggiornamento DB da 1.21 a 1.22

		/* Contratti - Zona */
		/* 07-12-2011 */
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_CFZona', 'char(3) NULL', '', 'Codice zona'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_Cd_CFZona'
		ALTER TABLE xContratto WITH NOCHECK ADD CONSTRAINT [FK_xContratto_Cd_CFZona] FOREIGN KEY([Cd_CFZona])
		REFERENCES [dbo].[CFZona] ([Cd_CFZona]) NOT FOR REPLICATION 
		ALTER TABLE xContratto CHECK CONSTRAINT [FK_xContratto_Cd_CFZona]

		/* Attività - Reports */
		/* 07-12-2011 */
		-- Anagrafica Attività (PRAttivita)
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xUD_Report1', '[uniqueidentifier] NULL', '', 'Unique identifier Report 1'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xUD_Report2', '[uniqueidentifier] NULL', '', 'Unique identifier Report 2'

		EXEC('Update PRAttivita 
			Set PRAttivita.xUD_Report1 = Report.UD_Report
			From PRAttivita	Inner Join Report On (PRAttivita.xId_Report1 = Report.Id_Report)')

		EXEC('Update PRAttivita 
			Set PRAttivita.xUD_Report2 = Report.UD_Report
			From PRAttivita	Inner Join Report On (PRAttivita.xId_Report2 = Report.Id_Report)')

		EXEC asp_du_DropColumn 'PRAttivita', 'xId_Report1'
		EXEC asp_du_DropColumn 'PRAttivita', 'xId_Report2'

		-- porto la versione a 1.22
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 22, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.23
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.22' begin
		select 'Applico aggiornamenti al database: 1.22->1.23'
		-- qui operazioni per l'aggiornamento DB da 1.22 a 1.23

		/* HotFix (Chiave esterna su Cd_xImpianto) */
		/* 30-12-2011 */
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xImpianto_CD_xImpianto'
		EXEC asp_du_AddAlterColumn 'xImpianto', 'CD_xImpianto', 'char(10) NULL', '', 'Codice impianto'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'CD_xImpianto', 'char(10) NULL', '', 'Codice impianto legato al ticket'
		ALTER TABLE [dbo].[xRDTicket] WITH NOCHECK ADD CONSTRAINT [FK_xImpianto_CD_xImpianto] FOREIGN KEY([CD_xImpianto])
		REFERENCES [dbo].[xImpianto] ([CD_xImpianto])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xImpianto_CD_xImpianto]

		/* Gestione Interventi Programmati */
		/* 12-12-2011 */
		-- Anagrafica Interventi Programmati (xInterventoProg)
		IF dbo.afn_du_IsTable('xInterventoProg') = 0
			EXEC asp_du_AddTable 'xInterventoProg', 0, 'Interventi programmati'

		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Descrizione', '[varchar](230) NULL', '''<Descrizione Mancante>'''	, 'Descrizione intervento programmato'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Cd_CF'			 , '[char](7) NOT NULL' , '', 'Codice cliente\fornitore'
		EXEC asp_du_DropConstraint 'xInterventoProg', 'FK_xInterventoProg_CF'
		ALTER TABLE [dbo].[xInterventoProg] WITH CHECK ADD CONSTRAINT [FK_xInterventoProg_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [FK_xInterventoProg_CF]
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Cd_CFDest', '[char](3) NULL', '', 'Destinazione diversa intervento programmato'
		EXEC asp_du_DropConstraint 'xInterventoProg', 'FK_xInterventoProg_CFDest'
		ALTER TABLE [dbo].[xInterventoProg] WITH NOCHECK ADD CONSTRAINT [FK_xInterventoProg_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [FK_xInterventoProg_CFDest]
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'NoteInterventoProg', '[text] NULL', '', 'Note intervento programmato'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Cd_xContratto'	, '[char](10) NULL', '', 'Codice contratto'
		EXEC asp_du_DropConstraint 'xInterventoProg', 'FK_xInterventoProg_xContratto'
		ALTER TABLE [dbo].[xInterventoProg] WITH CHECK ADD CONSTRAINT [FK_xInterventoProg_xContratto] FOREIGN KEY([Cd_xContratto])
		REFERENCES [dbo].[xContratto] ([Cd_xContratto])
		ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [FK_xInterventoProg_xContratto]
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Cd_DOSottoCommessa', '[varchar](20) NULL',  '', 'Codice sottocommessa'
		EXEC asp_du_DropConstraint 'xInterventoProg', 'FK_xInterventoProg_DOSottoCommessa'
		ALTER TABLE [dbo].[xInterventoProg] WITH CHECK ADD CONSTRAINT [FK_xInterventoProg_DOSottoCommessa] FOREIGN KEY([Cd_DOSottoCommessa])
		REFERENCES [dbo].[DOSottoCommessa] ([Cd_DOSottoCommessa])
		ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [FK_xInterventoProg_DOSottoCommessa]
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Contatto'		, '[varchar](50) NULL', '' , 'Contatto del cliente\fornitore'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Telefono'		, '[varchar](20) NULL', '' , 'Telefono'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Email'				, '[varchar](50) NULL', '' , 'Indirizzo e-mail'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Cd_Preventivo', '[varchar](20) NULL',  '', 'Codice preventivo esecutivo'
		EXEC asp_du_DropConstraint 'xInterventoProg', 'FK_xInterventoProg_xPreventivo'
		ALTER TABLE [dbo].[xInterventoProg] WITH CHECK ADD CONSTRAINT [FK_xInterventoProg_xPreventivo] FOREIGN KEY([Cd_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Cd_Preventivo])
		ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [FK_xInterventoProg_xPreventivo]
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Cd_DOSottoCommessaInst', '[varchar](20) NULL',  '', 'Codice sottocommessa di installazione'
		EXEC asp_du_DropConstraint 'xInterventoProg', 'FK_xInterventoProg_DOSottoCommessaInst'
		ALTER TABLE [dbo].[xInterventoProg] WITH CHECK ADD CONSTRAINT [FK_xInterventoProg_DOSottoCommessaInst] FOREIGN KEY([Cd_DOSottoCommessaInst])
		REFERENCES [dbo].[DOSottoCommessa] ([Cd_DOSottoCommessa])
		ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [FK_xInterventoProg_DOSottoCommessaInst]
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Cd_Agente', '[char](3) NULL', '', 'Codice agente'
		EXEC asp_du_DropConstraint 'xInterventoProg', 'FK_xInterventoProg_Agente'
		ALTER TABLE [dbo].[xInterventoProg] WITH NOCHECK ADD CONSTRAINT [FK_xInterventoProg_Agente] FOREIGN KEY([Cd_Agente])
		REFERENCES [dbo].[Agente] ([Cd_Agente]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [FK_xInterventoProg_Agente]
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'CD_AR', 'varchar(20) NULL', '', 'Codice articolo'
		EXEC asp_du_DropConstraint 'xInterventoProg', 'FK_xInterventoProg_CD_AR'
		ALTER TABLE [dbo].[xInterventoProg] WITH NOCHECK ADD CONSTRAINT [FK_xInterventoProg_CD_AR] FOREIGN KEY([CD_AR])
		REFERENCES [dbo].[AR] ([CD_AR])
		ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [FK_xInterventoProg_CD_AR]
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'CD_xImpianto', 'char(10) NULL', '', 'Codice impianto'
		EXEC asp_du_DropConstraint 'xInterventoProg', 'FK_xInterventoProg_CD_xImpianto'
		ALTER TABLE [dbo].[xInterventoProg] WITH NOCHECK ADD CONSTRAINT [FK_xInterventoProg_CD_xImpianto] FOREIGN KEY([CD_xImpianto])
		REFERENCES [dbo].[xImpianto] ([CD_xImpianto])
		ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [FK_xInterventoProg_CD_xImpianto]
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Numero matricola'
		EXEC asp_du_DropConstraint 'xInterventoProg', 'FK_xInterventoProg_xMatricola'
		ALTER TABLE [dbo].[xInterventoProg] WITH CHECK ADD CONSTRAINT [FK_xInterventoProg_xMatricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [FK_xInterventoProg_xMatricola]
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Cd_CFZona', 'char(3) NULL', '', 'Codice zona'
		EXEC asp_du_DropConstraint 'xInterventoProg', 'FK_xInterventoProg_Cd_CFZona'
		ALTER TABLE xInterventoProg WITH NOCHECK ADD CONSTRAINT [FK_xInterventoProg_Cd_CFZona] FOREIGN KEY([Cd_CFZona])
		REFERENCES [dbo].[CFZona] ([Cd_CFZona]) NOT FOR REPLICATION 
		ALTER TABLE xInterventoProg CHECK CONSTRAINT [FK_xInterventoProg_Cd_CFZona]
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'DataDefinizione', '[smalldatetime] NOT NULL'	, '''19000101''', 'Inizio validità scadenze interventi programmati'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'Esecutivo', '[bit] NOT NULL', '0', '0 - intervento programmato non attivo; 1 - intervento programmato attivo'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'DataDisattivazione', '[smalldatetime] NULL'	, '', 'Disattivazione scadenze interventi programmati'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'FattoreMksCiclo', '[int] NOT NULL', '1', 'Periodicità intervento programmato (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'GiornoSettimana', '[int] NOT NULL', '0', 'Giorno settimana nel quale avviene intervento programmato (0 = vuoto)'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'GiornoIntervento', '[int] NOT NULL', '0', 'Giorno del mese nel quale avviene intervento programmato'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'GiorniAnticipoEmissioneTicket', '[int] NOT NULL', '0', 'Giorni di anticipo per emissione ticket'
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'DataInterventoNext', '[smalldatetime] NULL'	, '', 'Data prossimo intervento'

		-- Scadenze Interventi Programmati (xInterventoProgScadenza)
		IF dbo.afn_du_IsTable('xInterventoProgScadenza') = 0
			EXEC asp_du_AddTable 'xInterventoProgScadenza', 0, 'Interventi Programmati - Sviluppo scadenze'

		EXEC asp_du_AddAlterColumnComment 'xInterventoProgScadenza', 'Id_xInterventoProgScadenza', 'Identificativo scadenza'
		EXEC asp_du_AddAlterColumn 'xInterventoProgScadenza', 'Id_xInterventoProg', '[int] NOT NULL', '', 'Identificativo Intervento Programmato'
		EXEC asp_du_DropConstraint 'xInterventoProgScadenza', 'FK_xInterventoProgScadenza_InterventoProg'
		ALTER TABLE [dbo].[xInterventoProgScadenza] WITH NOCHECK ADD CONSTRAINT [FK_xInterventoProgScadenza_InterventoProg] FOREIGN KEY([Id_xInterventoProg])
		REFERENCES [dbo].[xInterventoProg] ([Id_xInterventoProg]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xInterventoProgScadenza] CHECK CONSTRAINT [FK_xInterventoProgScadenza_InterventoProg]
		EXEC asp_du_AddAlterColumn 'xInterventoProgScadenza', 'DataScadenza', '[smalldatetime] NOT NULL', '''19000101''', 'Data scadenza'
		EXEC asp_du_AddAlterColumn 'xInterventoProgScadenza', 'Id_xRDTicket', '[int] NULL',  '', 'Identificativo del ticket'
		EXEC asp_du_DropConstraint 'xInterventoProgScadenza', 'FK_xInterventoProgScadenza_xRDTicket'
		ALTER TABLE [dbo].[xInterventoProgScadenza] WITH CHECK ADD CONSTRAINT [FK_xInterventoProgScadenza_xRDTicket] FOREIGN KEY([Id_xRDTicket])
		REFERENCES [dbo].[xRDTicket] ([Id_xRDTicket]) 
		EXEC asp_du_AddAlterColumn 'xInterventoProgScadenza', 'NoteInterventoProgScadenza', 'text NULL', '',	'Note'
		EXEC asp_du_AddAlterColumn 'xInterventoProgScadenza', 'Riga', '[smallint] NOT NULL', '0'	, 'Numero di riga'

		-- Tabella Attività Interventi Programmati (xInterventoProgAttivita)
		IF dbo.afn_du_IsTable('xInterventoProgAttivita') = 0
			EXEC asp_du_AddTable 'xInterventoProgAttivita', 0, 'Interventi Programmati - Attività'

		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'Id_xInterventoProg', '[int] NOT NULL', '', 'Identificativo Intervento Programmato'
		EXEC asp_du_DropConstraint 'xInterventoProgAttivita', 'FK_xInterventoProgAttivita_InterventoProg'
		ALTER TABLE [dbo].[xInterventoProgAttivita] WITH NOCHECK ADD CONSTRAINT [FK_xInterventoProgAttivita_InterventoProg] FOREIGN KEY([Id_xInterventoProg])
		REFERENCES [dbo].[xInterventoProg] ([Id_xInterventoProg]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xInterventoProgAttivita] CHECK CONSTRAINT [FK_xInterventoProgAttivita_InterventoProg]
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'Cd_PrAttivita', '[varchar](20) NOT NULL'	, '', 'Codice attività'
		EXEC asp_du_DropConstraint 'xInterventoProgAttivita', 'FK_xInterventoProgAttivita_PrAttivita'
		ALTER TABLE [dbo].[xInterventoProgAttivita] WITH CHECK ADD CONSTRAINT [FK_xInterventoProgAttivita_PrAttivita] FOREIGN KEY([Cd_PrAttivita])
		REFERENCES [dbo].[PrAttivita] ([Cd_PrAttivita])
		ALTER TABLE [dbo].[xInterventoProgAttivita] CHECK CONSTRAINT [FK_xInterventoProgAttivita_PrAttivita]
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'Descrizione'		, '[varchar](230) NULL'		, '''<Descrizione Mancante>'''	, 'Descrizione attività nel ticket'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'Cd_xOperatore'	, '[varchar](20) NULL', '', 'Codice operatore'
		EXEC asp_du_DropConstraint 'xInterventoProgAttivita', 'FK_xInterventoProgAttivita_xOperatore'
		ALTER TABLE [dbo].[xInterventoProgAttivita] WITH CHECK ADD CONSTRAINT [FK_xInterventoProgAttivita_xOperatore] FOREIGN KEY([Cd_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[xInterventoProgAttivita] CHECK CONSTRAINT [FK_xInterventoProgAttivita_xOperatore]
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'Cd_CFDest', '[char](3) NULL', '', 'Destinazione diversa'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'NumOrePrev', '[numeric](18, 6) NULL'	, '', 'Numero ore previste'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'Riga', '[smallint] NOT NULL', '0'	, 'Numero di riga'

		-- Tabella Operatori Attività Interventi Programmati (xInterventoProgAttivitaOperatore)
		IF dbo.afn_du_IsTable('xInterventoProgAttivitaOperatore') = 0
			EXEC asp_du_AddTable 'xInterventoProgAttivitaOperatore', 0, 'Interventi Programmati - Operatori abilitati per ogni attività'

		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivitaOperatore', 'Id_xInterventoProgAttivita', '[int] NOT NULL',  '', 'Identificativo dell attività'
		EXEC asp_du_DropConstraint 'xInterventoProgAttivitaOperatore', 'FK_xInterventoProgAttivitaOperatore_xInterventoProgAttivita'
		ALTER TABLE [dbo].[xInterventoProgAttivitaOperatore] WITH CHECK ADD CONSTRAINT [FK_xInterventoProgAttivitaOperatore_xInterventoProgAttivita] FOREIGN KEY([Id_xInterventoProgAttivita])
		REFERENCES [dbo].[xInterventoProgAttivita] ([Id_xInterventoProgAttivita]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xInterventoProgAttivitaOperatore] CHECK CONSTRAINT [FK_xInterventoProgAttivitaOperatore_xInterventoProgAttivita]
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivitaOperatore', 'Cd_xOperatore', '[varchar](20) NOT NULL',  '', 'Codice operatore'
		EXEC asp_du_DropConstraint 'xInterventoProgAttivitaOperatore', 'FK_xInterventoProgAttivitaOperatore_xOperatore'
		ALTER TABLE [dbo].[xInterventoProgAttivitaOperatore] WITH CHECK ADD CONSTRAINT [FK_xInterventoProgAttivitaOperatore_xOperatore] FOREIGN KEY([Cd_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[xInterventoProgAttivitaOperatore] CHECK CONSTRAINT [FK_xInterventoProgAttivitaOperatore_xOperatore]
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivitaOperatore', 'Riga'				, '[smallint] NULL'	, ''	, 'Riga'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivitaOperatore', 'RigaPadre'	, '[smallint] NULL'	, ''	, 'Riga dell associazione padre'

		-- Tabella Materiali e Spese Interventi Programmati (xInterventoProgMaterialeSpesa)
		IF dbo.afn_du_IsTable('xInterventoProgMaterialeSpesa') = 0
			EXEC asp_du_AddTable 'xInterventoProgMaterialeSpesa', 0, 'Interventi Programmati - Materiali e Spese previste'

		EXEC asp_du_AddAlterColumnComment 'xInterventoProgMaterialeSpesa', 'Id_xInterventoProgMaterialeSpesa', 'Identificativo materiale o spesa prevista'
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'Id_xInterventoProg', '[int] NOT NULL',  '', 'Identificativo intervento programmato'
		EXEC asp_du_DropConstraint 'xInterventoProgMaterialeSpesa', 'FK_xInterventoProgMaterialeSpesa_xInterventoProg'
		ALTER TABLE [dbo].[xInterventoProgMaterialeSpesa] WITH CHECK ADD CONSTRAINT [FK_xInterventoProgMaterialeSpesa_xInterventoProg] FOREIGN KEY([Id_xInterventoProg])
		REFERENCES [dbo].[xInterventoProg] ([Id_xInterventoProg]) 
		On Update No Action 
		On Delete Cascade 
		ALTER TABLE [dbo].[xInterventoProgMaterialeSpesa] CHECK CONSTRAINT [FK_xInterventoProgMaterialeSpesa_xInterventoProg]
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'Cd_xSpesa', '[char](3) NULL',  '', 'Codice spesa (Null = Materiale)'
		EXEC asp_du_DropConstraint 'xInterventoProgMaterialeSpesa', 'FK_xInterventoProgMaterialeSpesa_xSpesa'
		ALTER TABLE [dbo].[xInterventoProgMaterialeSpesa] WITH CHECK ADD CONSTRAINT [FK_xInterventoProgMaterialeSpesa_xSpesa] FOREIGN KEY([Cd_xSpesa])
		REFERENCES [dbo].[xSpesa] ([Cd_xSpesa])
		ALTER TABLE [dbo].[xInterventoProgMaterialeSpesa] CHECK CONSTRAINT [FK_xInterventoProgMaterialeSpesa_xSpesa]
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'CD_AR', 'varchar(20) NULL', '', 'Codice articolo'
		EXEC asp_du_DropConstraint 'xInterventoProgMaterialeSpesa', 'FK_xInterventoProgMaterialeSpesa_CD_AR'
		ALTER TABLE [dbo].[xInterventoProgMaterialeSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xInterventoProgMaterialeSpesa_CD_AR] FOREIGN KEY([CD_AR])
		REFERENCES [dbo].[AR] ([CD_AR])
		ALTER TABLE [dbo].[xInterventoProgMaterialeSpesa] CHECK CONSTRAINT [FK_xInterventoProgMaterialeSpesa_CD_AR]
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'Descrizione', 'varchar(80) NOT NULL', '('''')', 'Descrizione materiale o spesa'
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata alla spesa'
		EXEC asp_du_DropConstraint 'xInterventoProgMaterialeSpesa', 'FK_xInterventoProgMaterialeSpesa_ARMisura'
		ALTER TABLE [dbo].[xInterventoProgMaterialeSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xInterventoProgMaterialeSpesa_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xInterventoProgMaterialeSpesa] CHECK CONSTRAINT [FK_xInterventoProgMaterialeSpesa_ARMisura]
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'FattoreToUM1', '[numeric](18, 8) NOT NULL', '1', 'Fattore di conversione all unità di misura principale'
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'Quantita', '[numeric](18, 8) NOT NULL', '0', 'Quantità'
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'Cd_CFDest', '[char](3) NULL', '', 'Destinazione diversa'
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'Riga', '[smallint] NOT NULL'	, '0'	, 'Riga'

		-- Tabella Ticket Materiale e Spesa Movimenti (xRDTicketMaterialeSpesaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Previsto', '[bit] NOT NULL', '0', '0 - materiale o spesa movimentata; 1 - materiale o spesa prevista'

		-- Tabella Impostazioni G.A.C. (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'InterventoProgFattoreMksCiclo', '[int] NOT NULL', '1', 'Periodicità intervento programmato (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'InterventoProgGiornoSettimana', '[int] NOT NULL', '0', 'Giorno settimana nel quale avviene intervento programmato (0 = vuoto)'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'InterventoProgGiornoIntervento', '[int] NOT NULL', '0', 'Giorno del mese nel quale avviene intervento programmato'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'InterventoProgGiorniAnticipoEmissioneTicket', '[int] NOT NULL', '0', 'Giorni di anticipo per emissione ticket'

		-- Tabella Materiali e Spese dei Ticket (xRDTicketMaterialeSpesaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Previsto', '[bit] NOT NULL', '0', '0 - materiale effettivo \ spesa effettiva ; 1 - materiale previsto \ spesa prevista'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Cd_xOperatore', '[varchar](20) NULL',  '', 'Codice operatore'

		-- porto la versione a 1.23
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 23, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.24
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.23' begin
		select 'Applico aggiornamenti al database: 1.23->1.24'
		-- qui operazioni per l'aggiornamento DB da 1.23 a 1.24

		/* Gestione Ticket Iniziati */
		/* 28-12-2011 */
		-- Anagrafica Ticket
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Iniziato', '[bit] NOT NULL', '0', '0 - non esiste alcuna rilevazione; 1 - esiste almeno una rilevazione'

		-- porto la versione a 1.24
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 24, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.25
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.24' begin
		select 'Applico aggiornamenti al database: 1.24->1.25'
		-- qui operazioni per l'aggiornamento DB da 1.24 a 1.25

		/* Gestione Contratti - Riferimenti */
		/* 16-01-12 */
		-- Anagrafica Contratti
		EXEC asp_du_AddAlterColumn 'xContratto', 'NumeroDocRif'	, '[varchar](20) NULL'	, '', 'Numero documento di riferimento'
		EXEC asp_du_AddAlterColumn 'xContratto', 'DataDocRif'		, '[smalldatetime] NULL', '', 'Data documento di riferimento'

		/* Gestione Commesse - Creazione Ticket di Produzione */
		/* 16-01-12 */
		-- Impostazioni G.A.C.
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'GeneraTicket'	, 'bit'	, '0', '0 - non propone di generare il ticket di produzione; 1 - propone di generare il ticket di produzione'

		/* Creazione matricole */
		/* 20-01-2012 */
		EXEC asp_du_DropColumn 'xMatricola', 'DaFatturaCliente'
		EXEC asp_du_DropColumn 'xMatricola', 'DaFatturaFornitore'

		/* Gestione Attività del Ticket */
		/* 23-01-2012 */
		-- Tabella Attività del Ticket (xRDTicketAttivita)
		IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_xRDTicketAttivita_DataAperturaPrev]') AND type = 'D')
			ALTER TABLE [dbo].[xRDTicketAttivita] DROP CONSTRAINT [DF_xRDTicketAttivita_DataAperturaPrev]
		IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_xRDTicketAttivita_DataPianificazione]') AND type = 'D')
			ALTER TABLE [dbo].[xRDTicketAttivita] DROP CONSTRAINT [DF_xRDTicketAttivita_DataPianificazione]

		-- porto la versione a 1.25
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 25, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.26
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.25' begin
		select 'Applico aggiornamenti al database: 1.25->1.26'
		-- qui operazioni per l'aggiornamento DB da 1.25 a 1.26

		/* Contratti - Report */
		/* 09-01-2012 */
		-- Impostazioni (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'ContrattoUD_Report1', '[uniqueidentifier] NULL', '', 'Unique identifier Report 1'
		-- Anagrafica Contratti (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'xUD_Report1', '[uniqueidentifier] NULL', '', 'Unique identifier Report 1'

		/* Menu */
		/* 15-02-2012 */
		-- Cancellazione voce "Tipi Attività" sotto le tabelle delle attività delle commesse.
		DELETE FROM Menu WHERE Cd_Menu = '3C3E2C90-E4DC-4E87-9F00-C79F3B57AD07'

		-- porto la versione a 1.26
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 26, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.27
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.26' begin
		select 'Applico aggiornamenti al database: 1.26->1.27'
		-- qui operazioni per l'aggiornamento DB da 1.26 a 1.27

		/* Gestione Import Rilevazione Tempi */
		/* 22-02-2012 */
		-- Anagrafica tipologie import rilevazione tempi (tabella xRDImportTipo)
		IF dbo.afn_du_IsTable('xRDImportTipo') = 0
			EXEC asp_du_AddTable 'xRDImportTipo', 10, 'Anagrafica tipologie import rilevazione tempi'
		EXEC asp_du_AddAlterColumnComment 'xRDImportTipo', 'Id_xRDImportTipo'		, 'Identificativo tipo import'
		EXEC asp_du_AddAlterColumnComment 'xRDImportTipo', 'Cd_xRDImportTipo'		, 'Codice tipo import rilevazione tempi'
		EXEC asp_du_AddAlterColumn 'xRDImportTipo', 'Descrizione', 'varchar(80)  NULL',	'''<Descrizione Mancante>''', 'Descrizione tipo import rilevazione tempi'
		EXEC asp_du_AddAlterColumn 'xRDImportTipo', 'FileProcedura', 'varchar(30)  NULL',	'''<Descrizione Mancante>''', 'Nome del file della procedura di normalizzazione a carico del partner'

		-- Righe di rilevazione tempi normalizzate (tabella xRDImport)
		IF dbo.afn_du_IsTable('xRDImport') = 0
			BEGIN
				CREATE TABLE [dbo].[xRDImport](
					[Id_xRDImport] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xRDImport_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xRDImport_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xRDImport_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xRDImport_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
				CONSTRAINT [PK_xRDImport] PRIMARY KEY NONCLUSTERED 
					(
						[Id_xRDImport] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
					) ON [PRIMARY]
			END
		EXEC asp_du_AddAlterTableComment 'xRDImport', 'Righe di rilevazione tempi normalizzate'
		EXEC asp_du_AddAlterColumnComment 'xRDImport', 'Id_xRDImport'		, 'Identificativo riga rilevazione tempi normalizzata'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'Cd_xRDImportTipo', 'char(10) NULL',	'', 'Codice tipo import rilevazione tempi'
		EXEC asp_du_DropConstraint 'xRDImport', 'FK_xRDImport_xRDImportTipo'
		ALTER TABLE xRDImport WITH NOCHECK ADD CONSTRAINT [FK_xRDImport_xRDImportTipo] FOREIGN KEY([Cd_xRDImportTipo]) REFERENCES [dbo].[xRDImportTipo] ([Cd_xRDImportTipo]) NOT FOR REPLICATION 
		ALTER TABLE xRDImport CHECK CONSTRAINT [FK_xRDImport_xRDImportTipo]
		EXEC asp_du_AddAlterColumn 'xRDImport', 'Id_xRDTicket'				, '[int] NOT NULL'			, '', 'Identificativo del ticket'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'Cd_DOSottoCommessa'		, '[varchar](20) NULL'		, '', 'Codice sottocommessa'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'Id_xRDTicketAttivita'		, '[int] NOT NULL'			, '', 'Identificativo della riga attività'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'Cd_PrAttivita'				, '[varchar](20) NOT NULL'	, '', 'Codice attività'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'Cd_PrRisorsa'				, '[varchar](20) NOT NULL'	, '', 'Codice risorsa'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'Cd_xOperatore'				, '[varchar](20) NOT NULL'	, '', 'Codice operatore'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'DataInizio'				, '[smalldatetime] NOT NULL', '', 'Data inizio'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'DataFine'					, '[smalldatetime] NULL'	, '', 'Data fine'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'TempoInizio'				, 'int NULL'				, '', 'Ora Inizio'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'TempoFine'					, 'int NULL'				, '', 'Ora fine'
		EXEC asp_du_DropColumn	   'xRDImport', 'DurataSecondi'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'DurataSecondi'				, 'AS (isnull([TempoFine],0) - isnull([TempoInizio],0))', '', 'Durata espressa in secondi'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'NoteAttivitaMov'			, '[text] NULL'				, '', 'Note del movimento'
		EXEC asp_du_AddAlterColumn 'xRDImport', 'Cd_xRDTipoValorizzazione'	, '[char](5) NOT NULL'		, '', 'Tipo di valorizzazione'

		-- porto la versione a 1.27
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 27, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.28
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.27' begin
		select 'Applico aggiornamenti al database: 1.27->1.28'
		-- qui operazioni per l'aggiornamento DB da 1.27 a 1.28

		/* Contratti - Report */
		/* 09-03-2012 */
		-- Anagrafica Contratti (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'UD_Report1', '[uniqueidentifier] NULL', '', 'Unique identifier Report 1'
		EXEC asp_du_DropColumn	   'xContratto', 'xUD_Report1'

		/* Ticket - Descrizioni Materiali e Spese */
		/* 12-03-2012 */
		-- Tabella materiali e spese dei ticket (xRDTicketMaterialeSpesaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Descrizione', 'varchar(80)  NULL', '', 'Descrizione materiale o spesa'

		/* Contratti - Selezione Matricole */
		/* 13-03-2012 */
		-- Impostazioni Contratti (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'ContrattoTipoSelMatricola', 'tinyint NOT NULL', '1', 'Tipo selezione matricole: 1 - cliente\sede; 2 - tutte le matricole'

		/* Clienti\Sedi - Gestione Tempo Trasferta */
		/* 20-03-2012 */
		-- Anagrafica Clienti\Fornitori (CF)
		EXEC asp_du_AddAlterColumn 'CF'		, 'xTempoTrasferta', 'Numeric(18, 2) NOT NULL', '0', 'Tempo della trasferta presso il cliente in ore'
		-- Anagrafica Sedi (CFDest)
		EXEC asp_du_AddAlterColumn 'CFDest'	, 'xTempoTrasferta', 'Numeric(18, 2) NOT NULL', '0', 'Tempo della trasferta presso la destinazione del cliente in ore'

		/* Gestione Import Righe Preventivo */
		/* 29-03-2012 */
		-- Anagrafica tipologie import righe preventivo (tabella xPreventivoImportTipo)
		IF dbo.afn_du_IsTable('xPreventivoImportTipo') = 0
			EXEC asp_du_AddTable 'xPreventivoImportTipo', 10, 'Anagrafica tipologie import righe preventivo'

		EXEC asp_du_AddAlterColumnComment 'xPreventivoImportTipo', 'Id_xPreventivoImportTipo'		, 'Identificativo tipo import'
		EXEC asp_du_AddAlterColumnComment 'xPreventivoImportTipo', 'Cd_xPreventivoImportTipo'		, 'Codice tipo import righe preventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivoImportTipo', 'Descrizione', 'varchar(80)  NULL',	'''<Descrizione Mancante>''', 'Descrizione tipo import righe preventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivoImportTipo', 'FileProcedura', 'varchar(30)  NULL',	'''<Descrizione Mancante>''', 'Nome del file della procedura di normalizzazione a carico del partner'

		-- Associazione unità di misura gestionale con unità di misura file di import
		IF dbo.afn_du_IsTable('xPreventivoImportARMisura') = 0
			EXEC asp_du_AddTable 'xPreventivoImportARMisura', 3, 'Associazione unità di misura gestionale --> unità di misura file di import'

		EXEC asp_du_AddAlterColumn 'xPreventivoImportARMisura', 'Descrizione'	, 'varchar(50) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione unità di misura file di import'
		EXEC asp_du_AddAlterColumn 'xPreventivoImportARMisura', 'Cd_ARMisura'	, '[char](2) NOT NULL'	, '('''')'										, 'Unità di misura gestionale'
		EXEC asp_du_DropConstraint 'xPreventivoImportARMisura', 'FK_xPreventivoImportARMisura_ARMisura'
		ALTER TABLE [dbo].[xPreventivoImportARMisura] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoImportARMisura_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoImportARMisura] CHECK CONSTRAINT [FK_xPreventivoImportARMisura_ARMisura]
		EXEC asp_du_AddAlterColumn 'xPreventivoImportARMisura', 'Cd_xPreventivoImportTipo', 'char(10) NOT NULL',	'', 'Codice tipo import righe preventivo'
		EXEC asp_du_DropConstraint 'xPreventivoImportARMisura', 'FK_xPreventivoImportARMisura_xPreventivoImportTipo'
		ALTER TABLE xPreventivoImportARMisura WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoImportARMisura_xPreventivoImportTipo] FOREIGN KEY([Cd_xPreventivoImportTipo])
		REFERENCES [dbo].[xPreventivoImportTipo] ([Cd_xPreventivoImportTipo]) NOT FOR REPLICATION 
		ALTER TABLE xPreventivoImportARMisura CHECK CONSTRAINT [FK_xPreventivoImportARMisura_xPreventivoImportTipo]

		-- Righe preventivo normalizzate (tabella xPreventivoImport)
		IF dbo.afn_du_IsTable('xPreventivoImport') = 0
			BEGIN
				CREATE TABLE [dbo].[xPreventivoImport](
					[Id_xPreventivoImport] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoImport_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoImport_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoImport_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoImport_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
				CONSTRAINT [PK_xPreventivoImport] PRIMARY KEY NONCLUSTERED 
					(
						[Id_xPreventivoImport] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
					) ON [PRIMARY]
			END

		EXEC asp_du_AddAlterTableComment 'xPreventivoImport', 'Righe preventivo normalizzate'
		EXEC asp_du_AddAlterColumnComment 'xPreventivoImport', 'Id_xPreventivoImport'		, 'Identificativo riga preventivo normalizzata'
		EXEC asp_du_AddAlterColumn 'xPreventivoImport', 'Cd_xPreventivoImportTipo', 'char(10) NULL',	'', 'Codice tipo import righe preventivo'
		EXEC asp_du_DropConstraint 'xPreventivoImport', 'FK_xPreventivoImport_xPreventivoImportTipo'
		ALTER TABLE xPreventivoImport WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoImport_xPreventivoImportTipo] FOREIGN KEY([Cd_xPreventivoImportTipo]) REFERENCES [dbo].[xPreventivoImportTipo] ([Cd_xPreventivoImportTipo]) NOT FOR REPLICATION 
		ALTER TABLE xPreventivoImport CHECK CONSTRAINT [FK_xPreventivoImport_xPreventivoImportTipo]
		EXEC asp_du_AddAlterColumn 'xPreventivoImport', 'Cd_AR', 'varchar(20) NULL',	'', 'Codice articolo'
		EXEC asp_du_AddAlterColumn 'xPreventivoImport', 'Descrizione', 'varchar(80) NULL',	'', 'Descrizione articolo'
		EXEC asp_du_AddAlterColumn 'xPreventivoImport', 'UM', 'char(3) NULL',	'', 'Unità di misura del file di import'
		EXEC asp_du_AddAlterColumn 'xPreventivoImport', 'Quantita', '[numeric](18, 8) NOT NULL', '0', 'Quantità'
		EXEC asp_du_AddAlterColumn 'xPreventivoImport', 'CostoUnitarioV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario'
		EXEC asp_du_AddAlterColumn 'xPreventivoImport', 'RicavoUnitarioV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xPreventivoImport', 'Cd_ARMarca', 'varchar(20) NULL',	'', 'Marca articolo'

		-- porto la versione a 1.28
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 28, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.29
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.28' begin
		select 'Applico aggiornamenti al database: 1.28->1.29'
		-- qui operazioni per l'aggiornamento DB da 1.28 a 1.29

		/* Import Articoli e Listini */
		/* 11-04-2012 */
		-- Tabella di import (xLSImport)
		EXEC asp_du_AddAlterColumn 'xLSImport', 'ScontoAcquisto', '[varchar](20) NOT NULL', '('''')', 'Sconto su listino di acquisto'
		EXEC asp_du_AddAlterColumn 'xLSImport', 'NotexLSImport', 'text NULL', '', 'Note'

		/* Import Rilevazioni */
		/* 16-04-2012 */
		-- Tabella di import (xRDImport)
		EXEC asp_du_AddAlterColumn 'xRDImport', 'Durata', '[numeric](18, 6) NOT NULL' , '0', 'Durata lavoro'

		/* Contratti - Sede amministrativa */
		/* 20-04-2012 */
		-- Anagrafica contratti (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_CFSede', '[char](3) NULL', '', 'Sede amministrativa cliente'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_CFSede'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_CFSede] FOREIGN KEY([Cd_CF], [Cd_CFSede])
		REFERENCES [dbo].[CFSede] ([Cd_CF], [Cd_CFSede]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_CFSede]

		-- porto la versione a 1.29
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 29, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.30
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.29' begin
		select 'Applico aggiornamenti al database: 1.29->1.30'
		-- qui operazioni per l'aggiornamento DB da 1.29 a 1.30

		/* Ticket - Cliente di Fatturazione */
		/* 23-04-2012 */
		-- Anagrafica ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_CF_Fatt', '[char](7) NULL', '', 'Codice cliente\fornitore al quale va intestata la fattura'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_CF_Fatt'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_CF_Fatt] FOREIGN KEY([Cd_CF_Fatt])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_CF_Fatt]

		-- porto la versione a 1.30
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 30, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.31
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.30' begin
		select 'Applico aggiornamenti al database: 1.30->1.31'
		-- qui operazioni per l'aggiornamento DB da 1.30 a 1.31

		/* Ticket - Gestione privati */
		/* 08-05-2012 */
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Privato'		, '[bit] NOT NULL'		, '0', '0 - cliente normale; 1 - privato'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Indirizzo'	, '[varchar](80) NULL'	, '' , 'Indirizzo del privato'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cap'			, '[varchar](10) NULL'	, '' , 'Cap del privato'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Localita'		, '[varchar](60) NULL'	, '' , 'Località del privato'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_Nazione'	, '[char](2) NULL'		,  '', 'Codice nazione del privato'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_Nazione'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_Nazione] FOREIGN KEY([Cd_Nazione])
		REFERENCES [dbo].[Nazione] ([Cd_Nazione])
		NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_Nazione]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_Provincia', '[char](3) NULL'		,  '', 'Codice provincia del privato'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_Provincia'
		ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [FK_xRDTicket_Provincia] FOREIGN KEY([Cd_Nazione], [Cd_Provincia])
		REFERENCES [dbo].[Provincia] ([Cd_Nazione], [Cd_Provincia])
		NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_Provincia]

		/* Ticket - Attività create chiuse */
		/* 08-05-2012 */
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xCreaChiusa', 'bit NOT NULL',	'0', '0 - attività aggiunta al ticket normalmente; 1 - attività aggiunta al ticket come già chiusa'

		/* Ticket - Chiusura automatica ticket */
		/* 08-05-2012 */
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'AssistenzaChiusuraTicket', 'bit NOT NULL', '0', '0 - la chiusura di un ticket di assistenza va sempre gestita manualmente; 1 - da rilevazione, chiude automaticamente il ticket alla chiusura dell''ultima attività'

		-- porto la versione a 1.31
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 31, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.32
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.31' begin
		select 'Applico aggiornamenti al database: 1.31->1.32'
		-- qui operazioni per l'aggiornamento DB da 1.31 a 1.32

		/* Ticket - Piede */
		/* 14/05/2012 */
		-- Anagrafica Ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_DoTrasporto', '[char](3) NULL', '', 'Causale di trasporto'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_DoVettore_1', '[char](2) NULL', '', 'Vettore 1'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_DoVettore_2', '[char](2) NULL', '', 'Vettore 2'

		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_DOTrasporto'
		ALTER TABLE [dbo].[xRDTicket]  WITH NOCHECK ADD  CONSTRAINT [FK_xRDTicket_DOTrasporto] FOREIGN KEY([Cd_DoTrasporto])
		REFERENCES [dbo].[DOTrasporto] ([Cd_DOTrasporto]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_DOTrasporto]
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_DOVettore_1'
		ALTER TABLE [dbo].[xRDTicket]  WITH NOCHECK ADD  CONSTRAINT [FK_xRDTicket_DOVettore_1] FOREIGN KEY([Cd_DoVettore_1])
		REFERENCES [dbo].[DOVettore] ([Cd_DoVettore]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_DOVettore_1]
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_DOVettore_2'
		ALTER TABLE [dbo].[xRDTicket]  WITH NOCHECK ADD  CONSTRAINT [FK_xRDTicket_DOVettore_2] FOREIGN KEY([Cd_DoVettore_2])
		REFERENCES [dbo].[DOVettore] ([Cd_DoVettore]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_DOVettore_2]

		-- porto la versione a 1.32
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 32, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.33
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.32' begin
		select 'Applico aggiornamenti al database: 1.32->1.33'
		-- qui operazioni per l'aggiornamento DB da 1.32 a 1.33

		/* Assistenza - Gestione dei preventivi */
		/* 16-05-2012 */
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'AssistenzaPreventivo', 'bit NOT NULL',	'0', '0 - nell''area assistenza non vengono gestiti i preventivi; 1 - nell''area assistenza vengono gestiti i preventivi'
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'Area', 'tinyint NOT NULL',	'1', 'Area di gestione: 1 - gac; 2 - assistenza; 3 - contratti'
		EXEC asp_du_AddAlterColumn 'xPreventivo'			, 'Area', 'tinyint NOT NULL',	'1', 'Area di gestione: 1 - gac; 2 - assistenza; 3 - contratti'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Id_PreventivoMateriale'		, '[int] NULL'					, '' , 'Identificativo della riga materiale all interno del preventivo (> 0 se materiale proviene dal wizard di emissione ticket da preventivo)'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_PreventivoMateriale'
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_PreventivoMateriale] FOREIGN KEY([Id_PreventivoMateriale])
		REFERENCES [dbo].[xPreventivoMateriale] ([Id_PreventivoMateriale])

		/* Operatori - Associazione con operatori gestionale */
		/* 22-05-2012 */
		EXEC asp_du_AddAlterColumn	'xOperatore', 'Cd_OperatoreArca', 'varchar(20) NULL', '', 'Operatore gestionale relativo'
		EXEC asp_du_DropConstraint 'xOperatore', 'FK_xOperatore_Cd_OperatoreArca'
		ALTER TABLE xOperatore WITH NOCHECK ADD CONSTRAINT [FK_xOperatore_Cd_OperatoreArca] FOREIGN KEY([Cd_OperatoreArca])
		REFERENCES [dbo].[Operatore] ([Cd_Operatore]) NOT FOR REPLICATION 
		ALTER TABLE xOperatore CHECK CONSTRAINT [FK_xOperatore_Cd_OperatoreArca]

		/* Ticket - Gestione costi e prezzi per le attività, i materiali e le spese previste */
		/* 22-05-2012 */
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'CostoUnPrev', '[numeric](18, 6) NULL', '', 'Costo unitario previsto'
		EXEC asp_du_DropColumn		'xRDTicketAttivita', 'CostoTotPrev'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'CostoTotPrev', 'AS (CONVERT([numeric](18,6),[NumOrePrev]*[CostoUnPrev],(0)))', '', 'Costo totale previsto'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'PrezzoUnPrev', 'NUMERIC(18, 6) NULL', '', 'Prezzo unitario previsto'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'PrezzoTotPrev', 'NUMERIC(18, 6) NULL', '', 'Prezzo totale previsto'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'ScontoRigaPrev', 'VARCHAR(20) NULL', '', 'Sconto previsto'

		/* Assistenza - Gestione dei preventivi */
		/* 16-05-2012 */
		EXEC('Update xPreventivoFamiglia Set Area = 1') -- quelli già presenti sono tutti dell'area gac
		EXEC('Update xPreventivo			Set Area = 1') -- quelli già presenti sono tutti dell'area gac

		-- porto la versione a 1.33
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 33, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.34
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.33' begin
		select 'Applico aggiornamenti al database: 1.33->1.34'
		-- qui operazioni per l'aggiornamento DB da 1.33 a 1.34

		-- porto la versione a 1.34
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 34, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.35
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.34' begin
		select 'Applico aggiornamenti al database: 1.34->1.35'
		-- qui operazioni per l'aggiornamento DB da 1.34 a 1.35

		/* Interventi Programmati - Gestione costi e prezzi per le attività, i materiali e le spese previste */
		/* 30-05-2012 */
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'CostoUnPrev', '[numeric](18, 6) NULL', '0', 'Costo unitario previsto'
		EXEC asp_du_DropColumn	   'xInterventoProgAttivita', 'CostoTotPrev'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'CostoTotPrev', 'AS (CONVERT([numeric](18,6),[NumOrePrev]*[CostoUnPrev],(0)))', '', 'Costo totale previsto'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'PrezzoUnPrev', 'NUMERIC(18, 6) NULL', '0', 'Prezzo unitario previsto'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'PrezzoTotPrev', 'NUMERIC(18, 6) NULL', '0', 'Prezzo totale previsto'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'ScontoRigaPrev', 'VARCHAR(20) NULL', '', 'Sconto previsto'
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'CostoUnPrev', '[numeric](18, 6) NULL', '0', 'Costo unitario previsto'
		EXEC asp_du_DropColumn	   'xInterventoProgMaterialeSpesa', 'CostoTotPrev'
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'CostoTotPrev', 'AS (CONVERT([numeric](18,6),[Quantita]*[CostoUnPrev],(0)))', '', 'Costo totale previsto'
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'PrezzoUnPrev', 'NUMERIC(18, 6) NULL', '0', 'Prezzo unitario previsto'
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'PrezzoTotPrev', 'NUMERIC(18, 6) NULL', '0', 'Prezzo totale previsto'
		EXEC asp_du_AddAlterColumn 'xInterventoProgMaterialeSpesa', 'ScontoRigaPrev', 'VARCHAR(20) NULL', '', 'Sconto previsto'

		-- porto la versione a 1.35
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 35, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.36
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.35' begin
		select 'Applico aggiornamenti al database: 1.35->1.36'
		-- qui operazioni per l'aggiornamento DB da 1.35 a 1.36

		-- porto la versione a 1.36
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 36, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.37
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.36' begin
		select 'Applico aggiornamenti al database: 1.36->1.37'
		-- qui operazioni per l'aggiornamento DB da 1.36 a 1.37

		/* Contratti - Gestione dello sconto nelle matricole */
		/* 12-06-2012 */
		-- Matricole nei contratti (xContrattoMatricola)
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Sconto', '[varchar](20) NOT NULL', '('''')', 'Sconto matricola'

		/* Sottopreventivi - Spese */
		/* 13-06-2012 */
		-- Tabella spese nei sottopreventivi (xPreventivoSpesa)
		IF dbo.afn_du_IsTable('xPreventivoSpesa') = 0
			BEGIN
				CREATE TABLE [dbo].xPreventivoSpesa(
					[Id_PreventivoSpesa] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoSpesa_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoSpesa_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoSpesa_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoSpesa_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
				 CONSTRAINT [PK_xPreventivoSpesa] PRIMARY KEY NONCLUSTERED 
				(
					[Id_PreventivoSpesa] ASC
				)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
				) ON [PRIMARY]
			END

		EXEC asp_du_AddAlterTableComment 'xPreventivoSpesa', 'Sottopreventivi - spesa'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Id_Preventivo', '[int] NOT NULL', '', 'Identificativo testa sottopreventivo'
		EXEC asp_du_DropConstraint 'xPreventivoSpesa', 'FK_xPreventivoSpesa_Preventivo'
		ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoSpesa_Preventivo] FOREIGN KEY([Id_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Id_Preventivo])--ON DELETE CASCADE
		ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [FK_xPreventivoSpesa_Preventivo]
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Cd_xSpesa', '[char](3) NULL',  '', 'Codice spesa'
		EXEC asp_du_DropConstraint 'xPreventivoSpesa', 'FK_xPreventivoSpesa_xSpesa'
		ALTER TABLE [dbo].[xPreventivoSpesa] WITH CHECK ADD CONSTRAINT [FK_xPreventivoSpesa_xSpesa] FOREIGN KEY([Cd_xSpesa])
		REFERENCES [dbo].[xSpesa] ([Cd_xSpesa])
		ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [FK_xPreventivoSpesa_xSpesa]
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Cd_AR', '[varchar](20) NULL', '', 'Codice articolo (legato alla spesa)'
		EXEC asp_du_DropConstraint 'xPreventivoSpesa', 'FK_xPreventivoSpesa_AR'
		ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoSpesa_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [FK_xPreventivoSpesa_AR]
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura'
		EXEC asp_du_DropConstraint 'xPreventivoSpesa', 'FK_xPreventivoSpesa_ARMisura'
		ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoSpesa_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [FK_xPreventivoSpesa_ARMisura]
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Cd_VL', '[char](3) NULL', '', 'Valuta'
		EXEC asp_du_DropConstraint 'xPreventivoSpesa', 'FK_xPreventivoSpesa_VL'
		ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoSpesa_VL] FOREIGN KEY([Cd_VL])
		REFERENCES [dbo].[VL] ([Cd_VL]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [FK_xPreventivoSpesa_VL]
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Cambio'			, '[numeric](18, 6) NOT NULL'	, '1'			, 'Cambio'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Decimali'		, '[tinyint] NOT NULL'			, '2'			, 'Decimali per il prezzo totale'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'DecimaliPrzUn'	, '[tinyint] NOT NULL'			, '3'			, 'Decimali per il prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Quantita'		, '[numeric](18, 8) NOT NULL'	, '0'			, 'Quantità'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'FattoreToUM1'		, '[numeric](18, 8) NOT NULL'	, '1'			, 'Fattore di conversione all unità di misura principale'
		EXEC asp_du_DropColumn	   'xPreventivoSpesa', 'QuantitaUM1'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'QuantitaUM1'		, 'AS ([Quantita] * [FattoreToUM1])', '', 'Quantità convertita all unità di misura principale'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'RicavoUnitarioV', '[numeric](18, 6) NOT NULL'	, '0'			, 'Ricavo unitario in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Sconto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare sul valore "Al Ricavo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'RicavoTotaleV', '[numeric](18, 6) NOT NULL', '0', 'Ricavo totale in valuta'
		EXEC asp_du_DropColumn	   'xPreventivoSpesa', 'RicavoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'RicavoTotaleE', 'AS (CONVERT([numeric](18,2), round(([RicavoTotaleV] / [Cambio]),2),(0)))', '', 'Ricavo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'CostoUnitarioV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Ricarica', '[varchar](15) NOT NULL', '('''')', 'Ricarico da applicare sul valore "Al Costo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'CostoUnitarioRicaricatoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario ricaricato in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'CostoTotaleV', '[numeric](18, 6) NOT NULL', '0', 'Costo totale in valuta'
		EXEC asp_du_DropColumn	   'xPreventivoSpesa', 'CostoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'CostoTotaleE', 'AS (CONVERT([numeric](18,2), round(([CostoTotaleV] / [Cambio]),2),(0)))', '', 'Costo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Opzionale', '[bit] NOT NULL', '0', '0 - spesa non opzionale; 1 - spesa opzionale'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'NotePreventivoSpesa', 'text NULL', '', 'Note spesa'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Sequenza', '[int] NOT NULL', '0', 'Sequenza'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'CostoUnitarioLordoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario lordo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'ScontoAcquisto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare sul costo unitario lordo'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'MargineCostoV', '[numeric](18, 6) NOT NULL', '0', 'Margine reale gestione "Al Costo"'
		EXEC asp_du_DropColumn	   'xPreventivoSpesa', 'MargineCostoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'MargineCostoE', 'AS (CONVERT([numeric](18,2), round(([MargineCostoV] / [Cambio]),2),(0)))', '', 'Margine reale gestione "Al Costo" in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'MargineCostoPerc', '[varchar](15) NOT NULL', '('''')', 'Margine percentuale gestione "Al Costo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'RicavoUnitarioScontatoV', '[numeric](18, 6) NOT NULL', '0', 'Ricavo unitario scontato in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'MargineRicavoV', '[numeric](18, 6) NOT NULL', '0', 'Margine reale gestione "Al Ricavo"'
		EXEC asp_du_DropColumn	   'xPreventivoSpesa', 'MargineRicavoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'MargineRicavoE', 'AS (CONVERT([numeric](18,2), round(([MargineRicavoV] / [Cambio]),2),(0)))', '', 'Margine reale gestione "Al Ricavo" in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'MargineRicavoPerc', '[varchar](15) NOT NULL', '('''')', 'Margine percentuale gestione "Al Ricavo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'ModelloVal', '[char](1) NOT NULL', '''C''', 'C - Spesa valorizzata "Al Costo"; R - Spesa valorizzata "Al Ricavo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'CostoUnitarioRicaricatoLordoV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario ricaricato lordo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'ScontoCostoRicaricato', '[varchar](20) NOT NULL', '('''')', 'Sconto al cliente da applicare sul costo unitario ricaricato'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Descrizione'		, '[varchar](80) NOT NULL'			, '('''')', 'Descrizione spesa all interno del preventivo'

		-- Tabella dei materiali e delle spese nei ticket (xRDTicketMaterialeSpesaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Id_PreventivoSpesa', '[int] NULL', '', 'Identificativo della riga spesa all interno del preventivo (> 0 se spesa proviene dal wizard di emissione ticket da preventivo)'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_PreventivoSpesa'
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_PreventivoSpesa] FOREIGN KEY([Id_PreventivoSpesa])
		REFERENCES [dbo].[xPreventivoSpesa] ([Id_PreventivoSpesa])

		/* Ticket Attività - Data Chiusura Prevista */
		/* 13-06-2012 */
		-- Tabella attività nei ticket (xRDTicketAttivita)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'DataChiusuraPrev', 'smalldatetime NULL', '', 'Data chiusura prevista del''attività'

		-- porto la versione a 1.37
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 37, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go


-- Versione 1.38
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.37' begin
		select 'Applico aggiornamenti al database: 1.37->1.38'
		-- qui operazioni per l'aggiornamento DB da 1.37 a 1.38

		/* Matricole e Ticket - Riferimenti manuali ai documenti */
		/* 26-06-2012 */
		EXEC asp_du_AddAlterColumn 'xMatricola'	, 'NumeroDocRif_C', 'varchar(20) NULL', '', 'Numero riferimento al documento cliente'
		EXEC asp_du_AddAlterColumn 'xMatricola'	, 'DataDocRif_C', 'smalldatetime NULL', '', 'Data riferimento al documento cliente'
		EXEC asp_du_AddAlterColumn 'xMatricola'	, 'ImportoDocRif_C', 'Numeric(18, 6) NULL', '0', 'Importo del documento cliente'
		EXEC asp_du_AddAlterColumn 'xMatricola'	, 'NumeroDocRif_F', 'varchar(20) NULL', '', 'Numero riferimento al documento fornitore'
		EXEC asp_du_AddAlterColumn 'xMatricola'	, 'DataDocRif_F', 'smalldatetime NULL', '', 'Data riferimento al documento fornitore'
		EXEC asp_du_AddAlterColumn 'xMatricola'	, 'ImportoDocRif_F', 'Numeric(18, 6) NULL', '0', 'Importo del documento fornitore'
		EXEC asp_du_AddAlterColumn 'xRDTicket'	, 'NumeroDocRif_C', 'varchar(20) NULL', '', 'Numero riferimento al documento cliente'
		EXEC asp_du_AddAlterColumn 'xRDTicket'	, 'DataDocRif_C', 'smalldatetime NULL', '', 'Data riferimento al documento cliente'
		EXEC asp_du_AddAlterColumn 'xRDTicket'	, 'ImportoDocRif_C', 'Numeric(18, 6) NULL', '0', 'Importo del documento cliente'
		EXEC asp_du_AddAlterColumn 'xRDTicket'	, 'NumeroDocRif_F', 'varchar(20) NULL', '', 'Numero riferimento al documento fornitore'
		EXEC asp_du_AddAlterColumn 'xRDTicket'	, 'DataDocRif_F', 'smalldatetime NULL', '', 'Data riferimento al documento fornitore'
		EXEC asp_du_AddAlterColumn 'xRDTicket'	, 'ImportoDocRif_F', 'Numeric(18, 6) NULL', '0', 'Importo del documento fornitore'

		/* Ticket - Gestione Note e Note Interne */
		/* 26-06-2012 */
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov'		, 'NoteInterneAttivitaMov'		, '[text] NULL', '', 'Note interne del movimento'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov'	, 'NoteMaterialeSpesaMov'		, '[text] NULL', '', 'Note del movimento di materiale o spesa'
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov'	, 'NoteInterneMaterialeSpesaMov', '[text] NULL', '', 'Note interne del movimento di materiale o spesa'

		/* Ticket - Piede */
		/* 27/06/2012 */
		-- Anagrafica Ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_DoPorto', '[char](3) NULL', '', 'Porto'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_DOPorto'
		ALTER TABLE [dbo].[xRDTicket]  WITH NOCHECK ADD  CONSTRAINT [FK_xRDTicket_DOPorto] FOREIGN KEY([Cd_DoPorto])
		REFERENCES [dbo].[DOPorto] ([Cd_DoPorto]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_DOPorto]

		-- porto la versione a 1.38
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 38, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.39
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.38' begin
		select 'Applico aggiornamenti al database: 1.38->1.39'
		-- qui operazioni per l'aggiornamento DB da 1.38 a 1.39

		/* Ticket - Riferimenti richiesta di assistenza */
		/* 03-07-2012 */
		EXEC asp_du_AddAlterColumn 'xRDTicket'	, 'NumeroRifRichiesta'	, 'varchar(20) NULL'		, '', 'Numero riferimento della richiesta del cliente'
		EXEC asp_du_AddAlterColumn 'xRDTicket'	, 'DataRifRichiesta'		, 'smalldatetime NULL'	, '', 'Data riferimento della richiesta del cliente'

		/* Ticket - Piede */
		/* 03/07/2012 */
		-- Anagrafica Ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_DoSped', '[char](3) NULL', '', 'Spedizione'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_DOSped'
		ALTER TABLE [dbo].[xRDTicket]  WITH NOCHECK ADD  CONSTRAINT [FK_xRDTicket_DOSped] FOREIGN KEY([Cd_DoSped])
		REFERENCES [dbo].[DOSped] ([Cd_DoSped]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_DOSped]

		-- porto la versione a 1.39
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 39, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.40
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.39' begin
		select 'Applico aggiornamenti al database: 1.39->1.40'
		-- qui operazioni per l'aggiornamento DB da 1.39 a 1.40

		/* Ticket - Descrizione Articolo e Matricola */
		/* 10-07-2012 */
		EXEC asp_du_AddAlterColumn	'xRDTicket', 'AR_Desc'			, 'varchar(80) NULL', '', 'Descrizione articolo'
		EXEC asp_du_AddAlterColumn	'xRDTicket', 'xMatricola_Desc', 'varchar(80) NULL', '', 'Descrizione matricola'

		/* Ticket - Creazione indici per prestazioni */
		/* 10-07-2012 */
		CREATE NONCLUSTERED INDEX [xIX_DORig_xId_RDTicketAttivitaMov] ON [dbo].[DORig] ([xId_RDTicketAttivitaMov] ASC)
		WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
		CREATE NONCLUSTERED INDEX [xIX_DORig_xId_xRDTicketMaterialeSpesaMov] ON [dbo].[DORig] ([xId_xRDTicketMaterialeSpesaMov] ASC)
		WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]

		/* Ticket - Tabella delle Rilevazioni di Produzione */
		/* 12-07-2012 */
		-- Tabella delle Rilevazioni di Produzione
		IF dbo.afn_du_IsTable('xRDTicketAttivitaMovRL') = 0
			EXEC asp_du_AddTable 'xRDTicketAttivitaMovRL', 0, 'Produzione CCA - Rilevazioni di Produzione'

		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Id_xRDTicketAttivita', '[int] NOT NULL',  '', 'Identificativo dell attività'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL', 'FK_xRDTicketAttivitaMovRL_xRDTicketAttivita'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTicketAttivita] FOREIGN KEY([Id_xRDTicketAttivita])
		REFERENCES [dbo].[xRDTicketAttivita] ([Id_xRDTicketAttivita])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTicketAttivita]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Id_xRDTicketAttivitaMov', '[int] NULL',  '', 'Identificativo della rilevazione'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL', 'FK_xRDTicketAttivitaMovRL_xRDTicketAttivitaMov'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTicketAttivitaMov] FOREIGN KEY([Id_xRDTicketAttivitaMov])
		REFERENCES [dbo].[xRDTicketAttivitaMov] ([Id_xRDTicketAttivitaMov])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTicketAttivitaMov]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Terminale'	, '[varchar](50) NOT NULL',  'left((host_name()+'';'')+app_name(),(50))', 'Terminale'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'DataOra'		, '[smalldatetime] NOT NULL'	, 'GetDate()', 'Data ora della rilevazione'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Cd_PrAttivita', '[varchar](20) NULL',  '', 'Codice attività'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL', 'FK_xRDTicketAttivitaMovRL_PrAttivita'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovRL_PrAttivita] FOREIGN KEY([Cd_PrAttivita])
		REFERENCES [dbo].[PrAttivita] ([Cd_PrAttivita])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovRL_PrAttivita]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Cd_xOperatore', '[varchar](20) NULL',  '', 'Codice operatore'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL', 'FK_xRDTicketAttivitaMovRL_xOperatore'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovRL_xOperatore] FOREIGN KEY([Cd_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovRL_xOperatore]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Cd_PrRisorsa', '[varchar](20) NOT NULL',  '', 'Codice risorsa'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL', 'FK_xRDTicketAttivitaMovRL_PrRisorsa'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovRL_PrRisorsa] FOREIGN KEY([Cd_PrRisorsa])
		REFERENCES [dbo].[PrRisorsa] ([Cd_PrRisorsa])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovRL_PrRisorsa]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'UltimoRL', '[bit] NOT NULL', '0', '0 - non è l''ultima rilevazione ; 1 - è l''ultima rilevazione'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Id_xRDTicketAttivitaMovRL_Sibling', '[int] NULL',  '', 'Identificativo della rilevazione di apertura o di chiusura'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL', 'FK_xRDTicketAttivitaMovRL_xRDTicketAttivitaMovRL_Sibling'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTicketAttivitaMovRL_Sibling] FOREIGN KEY([Id_xRDTicketAttivitaMovRL_Sibling])
		REFERENCES [dbo].[xRDTicketAttivitaMovRL] ([Id_xRDTicketAttivitaMovRL])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTicketAttivitaMovRL_Sibling]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'InizioFine'	, '[char](1) NOT NULL', '''I''', 'I = Inizio; F = Fine'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Durata'		, '[numeric](18, 2) NULL' , '', 'Durata lavoro'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'DurataMks'	, '[numeric](18, 2) NOT NULL' , '1', 'Durata lavoro espressa in secondi'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'FattoreMks'	, '[int] NULL' , '', 'Fattore di conversione della durata lavoro'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Riga_xRDTicketAttivita', '[smallint] NULL', ''	, 'Numero di riga dell''attività'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Cd_xRDTipoValorizzazione'	, '[char](5) NULL', ''	, 'Tipo di valorizzazione'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL', 'FK_xRDTicketAttivitaMovRL_xRDTipoValorizzazione'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTipoValorizzazione] FOREIGN KEY([Cd_xRDTipoValorizzazione])
		REFERENCES [dbo].[xRDTipoValorizzazione] ([Cd_xRDTipoValorizzazione])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTipoValorizzazione]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Note', '[text] NULL', '', 'Note della rilevazione'

		/* Ticket - Note interne nelle attività */
		/* 16-07-2012 */
		-- Tabella attività (xRDTicketAttivita)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'NoteInterneAttivita', '[text] NULL', '', 'Note interne dell''attività'

		/* Ticket - Gestione Spese "A Forfait" */
		/* 16-07-2012 */
		-- Anagrafica Spese (xSpesa)
		EXEC asp_du_AddAlterColumn 'xSpesa', 'AForfait', '[bit] NOT NULL', '0', '0 - spesa non utiliazzata per ricavi a forfait; 1 - spesa utilizzata per ricavi a forfait'

		/* Ticket - Chiusura del ticket */
		/* 18-07-2012 */
		-- Tabella impostazioni (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'AssistenzaChiusuraAttivita', '[smallint] NOT NULL', '1', 'Tipo di chiusura attività alla chiusura del ticket: 1 - chiude anche attività e rilevazioni; 2 - lascia inalterate attività e rilevazioni'

		-- porto la versione a 1.40
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 40, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.41
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.40' begin
		select 'Applico aggiornamenti al database: 1.40->1.41'
		-- qui operazioni per l'aggiornamento DB da 1.40 a 1.41
		
		/* Gestione del Plafond */
		/* 25-07-2012 */
		-- Anagrafica Contratti (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'FasePlafondAttiva'		, '[bit] NOT NULL'			, '0', '0 - non gestisce un plafond; 1 - gestisce un plafond'
		EXEC asp_du_AddAlterColumn 'xContratto', 'FasePlafondOrePreviste'	, '[numeric](18, 2) NULL'	, '0', 'Ore plafond previste'
		EXEC asp_du_AddAlterColumn 'xContratto', 'FasePlafondRecuperaOre'	, '[bit] NOT NULL'			, '0', '0 - in caso di rinnovo, non recupera le ore di plafond non utilizzate; 1 - in caso di rinnovo, recupera le ore di plafond non utilizzate'
		EXEC asp_du_AddAlterColumn 'xContratto', 'FasePlafondOrePartenza'	, '[numeric](18, 2) NULL'	, '0', 'Ore plafond partenza'
		-- Rinnovi dei contratti (xContrattoRinnovo)
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'PlafondOrePreviste'	, '[numeric](18, 2) NULL', '0', 'Ore plafond previste nel periodo rinnovato'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'PlafondOrePartenza'	, '[numeric](18, 2) NULL', '0', 'Ore plafond partenza nel periodo rinnovato'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'PlafondOreResidue'	, '[numeric](18, 2) NULL', '0', 'Ore plafond residue nel periodo rinnovato'
		-- Rilevazioni attività nei ticket (xRDTicketAttivitaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'DurataIns', '[numeric](18, 6) NOT NULL' , '0'	, 'Durata lavoro inserita dall''utente'

		EXEC('Update xRDTicketAttivitaMov Set DurataIns = Durata')

		/* Matricole - Aggiunta campi */
		/* 26-07-2012 */
		-- Anagrafica Matricole (xMatricola)
		EXEC asp_du_AddAlterColumn 'xMatricola', 'CD_Agente', 'char(3) NULL',	'', 'Codice agente'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_CD_Agente'
		ALTER TABLE [dbo].[xMatricola] WITH CHECK ADD CONSTRAINT [FK_xMatricola_CD_Agente] FOREIGN KEY([Cd_Agente])
		REFERENCES [dbo].[Agente] ([Cd_Agente])
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_CD_Agente]
		EXEC asp_du_AddAlterColumn 'xMatricola', 'NoteInterneMatricola', 'text NULL',	'', 'Note interne relative alla matricola'

		-- porto la versione a 1.41
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 41, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.42
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.41' begin
		select 'Applico aggiornamenti al database: 1.41->1.42'
		-- qui operazioni per l'aggiornamento DB da 1.41 a 1.42
		
		/* Ticket - Gestione Plafond */
		/* 13-09-2012 */
		-- Tabella Ticket Attività (xRDTicketAttivita)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'NumOrePlafond', '[numeric](18, 6) NULL', '', 'Numero ore plafond'

		-- porto la versione a 1.42
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 42, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.43
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.42' begin
		select 'Applico aggiornamenti al database: 1.42->1.43'
		-- qui operazioni per l'aggiornamento DB da 1.42 a 1.43
		
		/* Impostazioni Rilevazioni - Opzioni in Modifica */
		/* 20-09-2012 */
		-- Tabella delle impostazioni (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PrezziPerQta', '[smallint] NOT NULL', '2', 'Modalità di aggiornamento di prezzo\sconto\provvigione al variare delle regole di valorizzazione: 1 - Non variare; 2 - Chiedi conferma; 3 - Varia senza chiedere conferma'
		
		-- porto la versione a 1.43
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 43, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.44
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.43' begin
		select 'Applico aggiornamenti al database: 1.43->1.44'
		-- qui operazioni per l'aggiornamento DB da 1.43 a 1.44

		/* Preventivi - Gestione Operatore nelle attività */
		/* 24-09-2012 */
		-- Tabella delle attività nei sottopreventivi (xPreventivoFase)
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Cd_xOperatore', '[varchar](20) NULL',  '', 'Codice operatore'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'FK_xPreventivoFase_xOperatore'
		ALTER TABLE [dbo].[xPreventivoFase] WITH CHECK ADD CONSTRAINT [FK_xPreventivoFase_xOperatore] FOREIGN KEY([Cd_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [FK_xPreventivoFase_xOperatore]
		
		-- porto la versione a 1.44
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 44, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.45
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.44' begin
		select 'Applico aggiornamenti al database: 1.44->1.45'
		-- qui operazioni per l'aggiornamento DB da 1.44 a 1.45

		/* Ticket - Gestione delle rilevazioni "Solo Interne" */
		/* 26-09-2012 */
		-- Il flag "No Fatt." è stato rinominato "Solo Interno" e la sua imputazione
		-- automatica nel caso di ticket "a forfait" è ora affidata ad un default da 
		-- impostare in anagrafica cliente.
		-- Anagrafica Clienti\Fornitori (tabella CF)
		EXEC asp_du_AddAlterColumn 'CF', 'xSoloInterno_Attivita'	, '[Bit] NOT NULL', '0', 'Nella gestione dei ticket "A Forfait": 0 - le righe attività vengono inserite senza il flag "Solo Interno"; 1 - le righe attività vengono inserite con il flag "Solo Interno"'
		EXEC asp_du_AddAlterColumn 'CF', 'xSoloInterno_Materiale', '[Bit] NOT NULL', '0', 'Nella gestione dei ticket "A Forfait": 0 - le righe materiale vengono inserite senza il flag "Solo Interno"; 1 - le righe materiale vengono inserite con il flag "Solo Interno"'
		EXEC asp_du_AddAlterColumn 'CF', 'xSoloInterno_Spesa'		, '[Bit] NOT NULL', '0', 'Nella gestione dei ticket "A Forfait": 0 - le righe spesa vengono inserite senza il flag "Solo Interno"; 1 - le righe spesa vengono inserite con il flag "Solo Interno"'

		/* Preventivi - Utilizzo del costo nei ticket */
		/* 02-10-2012 */
		-- Anagrafica sottopreventivi (xPreventivo)
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FaseUsaCostoV'		, 'bit NOT NULL', '0', '0 - valorizzazione standard nei ticket del costo per le attività; 1 - utilizza il costo nella valorizzazione delle attività nei ticket'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'MaterialeUsaCostoV'	, 'bit NOT NULL', '0', '0 - valorizzazione standard nei ticket del costo per i materiali; 1 - utilizza il costo nella valorizzazione dei materiali nei ticket'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'SpesaUsaCostoV'		, 'bit NOT NULL', '0', '0 - valorizzazione standard nei ticket del costo per le spese; 1 - utilizza il costo nella valorizzazione delle spese nei ticket'

		-- porto la versione a 1.45
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 45, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.46
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.45' begin
		select 'Applico aggiornamenti al database: 1.45->1.46'
		-- qui operazioni per l'aggiornamento DB da 1.45 a 1.46

		/* Contratti - Gestione Impianti e Commesse */
		/* 03-10-2012 */
		-- Tabella di collegamento degli impianti con i contratti (xContrattoImpianto)
		IF dbo.afn_du_IsTable('xContrattoImpianto') = 0
			EXEC asp_du_AddTable 'xContrattoImpianto', 0, 'Impianti contratto'

		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'Id_xContratto', '[int] NOT NULL', '', 'Identificativo contratto di appartenenza dell''impianto'
		EXEC asp_du_DropConstraint 'xContrattoImpianto', 'FK_xContrattoImpianto_Contratto'
		ALTER TABLE [dbo].[xContrattoImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoImpianto_Contratto] FOREIGN KEY([Id_xContratto])
		REFERENCES [dbo].[xContratto] ([Id_xContratto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoImpianto] CHECK CONSTRAINT [FK_xContrattoImpianto_Contratto]
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'Cd_xImpianto', '[char](10) NOT NULL', '', 'Codice impianto'
		EXEC asp_du_DropConstraint 'xContrattoImpianto', 'FK_xContrattoImpianto_Impianto'
		ALTER TABLE [dbo].[xContrattoImpianto] WITH CHECK ADD CONSTRAINT [FK_xContrattoImpianto_Impianto] FOREIGN KEY([Cd_xImpianto])
		REFERENCES [dbo].[xImpianto] ([Cd_xImpianto])
		ALTER TABLE [dbo].[xContrattoImpianto] CHECK CONSTRAINT [FK_xContrattoImpianto_Impianto]
		EXEC asp_du_DropIndex		'xContrattoImpianto', 'UK_xContrattoImpianto'
		EXEC asp_du_AddAlterIndex	'xContrattoImpianto', 'UK_xContrattoImpianto',	'[Id_xContratto] ASC, [Cd_xImpianto] ASC', 0, 0, 0, 1
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'Cd_xSLA', '[char](2) NULL', '', 'SLA associato alla riga'
		EXEC asp_du_DropConstraint 'xContrattoImpianto', 'FK_xContrattoImpianto_xSLA'
		ALTER TABLE [dbo].[xContrattoImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoImpianto_xSLA] FOREIGN KEY([Cd_xSLA])
		REFERENCES [dbo].[xSLA] ([Cd_xSLA]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoImpianto] CHECK CONSTRAINT [FK_xContrattoImpianto_xSLA]
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'Riga'			, '[smallint] NOT NULL', '0', 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'DataInizio'	, 'smalldatetime NULL' , '' , 'Data inizio validità riga'
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'DataFine'		, 'smalldatetime NULL' , '' , 'Data fine validità riga'
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'Cd_CF'			, 'char(7) NULL'		  , '' , 'Cliente riga' -- Necessario per la FK DD. Sempre = xContratto.Cd_CF. Non presente nell'interfaccia.
		EXEC asp_du_DropConstraint 'xContrattoImpianto', 'FK_xContrattoImpianto_CF'
		ALTER TABLE [dbo].[xContrattoImpianto] WITH CHECK ADD CONSTRAINT [FK_xContrattoImpianto_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xContrattoImpianto] CHECK CONSTRAINT [FK_xContrattoImpianto_CF]
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'Cd_CFDest'	, 'char(3) NULL', '', 'Destinazione diversa riga'
		EXEC asp_du_DropConstraint 'xContrattoImpianto', 'FK_xContrattoImpianto_CFDest'
		ALTER TABLE [dbo].[xContrattoImpianto]  WITH NOCHECK ADD  CONSTRAINT [FK_xContrattoImpianto_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoImpianto] CHECK CONSTRAINT [FK_xContrattoImpianto_CFDest]
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'PrezzoUnitarioV'	, 'numeric(18, 6) NULL'		, '0'	, 'Prezzo unitario riga'
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'Disattiva'			, '[bit] NOT NULL'			, '0', '0 - l''impianto è sotto contratto; 1 - l''impianto non è più sotto contratto'
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'Rateo'					, 'numeric(18, 6) NULL'		, '0', 'Rateo di riga'
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'Rinnovato'			, '[bit] NOT NULL'			, '0', '0 - l''impianto è ancora valido; 1 - l''impianto è stato rinnovato'
		EXEC asp_du_AddAlterColumn 'xContrattoImpianto', 'Sconto'				, '[varchar](20) NOT NULL'	, '('''')', 'Sconto impianto'

		-- Tabella di collegamento delle sottocommesse con i contratti (xContrattoDOSottoCommessa)
		IF dbo.afn_du_IsTable('xContrattoDOSottoCommessa') = 0
			EXEC asp_du_AddTable 'xContrattoDOSottoCommessa', 0, 'Sottocommesse contratto'

		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'Id_xContratto', '[int] NOT NULL', '', 'Identificativo contratto di appartenenza della sottocommessa'
		EXEC asp_du_DropConstraint 'xContrattoDOSottoCommessa', 'FK_xContrattoDOSottoCommessa_Contratto'
		ALTER TABLE [dbo].[xContrattoDOSottoCommessa] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoDOSottoCommessa_Contratto] FOREIGN KEY([Id_xContratto])
		REFERENCES [dbo].[xContratto] ([Id_xContratto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoDOSottoCommessa] CHECK CONSTRAINT [FK_xContrattoDOSottoCommessa_Contratto]
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'Cd_DOSottocommessa', '[varchar](20) NOT NULL', '', 'Codice sottocommessa'
		EXEC asp_du_DropConstraint 'xContrattoDOSottoCommessa', 'FK_xContrattoDOSottoCommessa_DOSottoCommessa'
		ALTER TABLE [dbo].[xContrattoDOSottoCommessa] WITH CHECK ADD CONSTRAINT [FK_xContrattoDOSottoCommessa_DOSottoCommessa] FOREIGN KEY([Cd_DOSottocommessa])
		REFERENCES [dbo].[DOSottocommessa] ([Cd_DOSottocommessa])
		ALTER TABLE [dbo].[xContrattoDOSottoCommessa] CHECK CONSTRAINT [FK_xContrattoDOSottoCommessa_DOSottoCommessa]
		EXEC asp_du_DropIndex		'xContrattoDOSottoCommessa', 'UK_xContrattoDOSottoCommessa'
		EXEC asp_du_AddAlterIndex	'xContrattoDOSottoCommessa', 'UK_xContrattoDOSottoCommessa',	'[Id_xContratto] ASC, [Cd_DOSottocommessa] ASC', 0, 0, 0, 1
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'Cd_xSLA', '[char](2) NULL', '', 'SLA associato alla riga'
		EXEC asp_du_DropConstraint 'xContrattoDOSottoCommessa', 'FK_xContrattoDOSottoCommessa_xSLA'
		ALTER TABLE [dbo].[xContrattoDOSottoCommessa] WITH NOCHECK ADD CONSTRAINT [FK_xContrattoDOSottoCommessa_xSLA] FOREIGN KEY([Cd_xSLA])
		REFERENCES [dbo].[xSLA] ([Cd_xSLA]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoDOSottoCommessa] CHECK CONSTRAINT [FK_xContrattoDOSottoCommessa_xSLA]
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'Riga'			, '[smallint] NOT NULL', '0', 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'DataInizio'	, 'smalldatetime NULL' , '' , 'Data inizio validità riga'
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'DataFine'		, 'smalldatetime NULL' , '' , 'Data fine validità riga'
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'Cd_CF'			, 'char(7) NULL'		  , '' , 'Cliente riga' -- Necessario per la FK DD. Sempre = xContratto.Cd_CF. Non presente nell'interfaccia.
		EXEC asp_du_DropConstraint 'xContrattoDOSottoCommessa', 'FK_xContrattoDOSottoCommessa_CF'
		ALTER TABLE [dbo].[xContrattoDOSottoCommessa] WITH CHECK ADD CONSTRAINT [FK_xContrattoDOSottoCommessa_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xContrattoDOSottoCommessa] CHECK CONSTRAINT [FK_xContrattoDOSottoCommessa_CF]
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'Cd_CFDest'	, 'char(3) NULL', '', 'Destinazione diversa riga'
		EXEC asp_du_DropConstraint 'xContrattoDOSottoCommessa', 'FK_xContrattoDOSottoCommessa_CFDest'
		ALTER TABLE [dbo].[xContrattoDOSottoCommessa]  WITH NOCHECK ADD  CONSTRAINT [FK_xContrattoDOSottoCommessa_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContrattoDOSottoCommessa] CHECK CONSTRAINT [FK_xContrattoDOSottoCommessa_CFDest]
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'PrezzoUnitarioV'	, 'numeric(18, 6) NULL'		, '0'	, 'Prezzo unitario riga'
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'Disattiva'			, '[bit] NOT NULL'			, '0', '0 - la sottocommessa è sotto contratto; 1 - la sottocommessa non è più sotto contratto'
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'Rateo'					, 'numeric(18, 6) NULL'		, '0', 'Rateo di riga'
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'Rinnovato'			, '[bit] NOT NULL'			, '0', '0 - la sottocommessa è ancora valida; 1 - la sottocommessa è stata rinnovata'
		EXEC asp_du_AddAlterColumn 'xContrattoDOSottoCommessa', 'Sconto'				, '[varchar](20) NOT NULL'	, '('''')', 'Sconto sottocommessa'

		/* Preventivi - Gestione delle spese */
		/* 09/10/2012 */
		-- Anagrafica sottopreventivi (xPreventivo)
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'SpesaRicarica', 'varchar(10) NOT NULL',	'('''')', 'Formula del ricarico da applicare nella gestione "Al Costo" per le spese'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'SpesaCd_LS_Ricavo', 'char(7) NULL', '', 'Listino per valorizzazione spese "Al Ricavo"'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_SpesaLS_Ricavo'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_SpesaLS_Ricavo] FOREIGN KEY([SpesaCd_LS_Ricavo])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_SpesaLS_Ricavo]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'SpesaScontoRiga'	, 'varchar(1000) NOT NULL'	, '('''')', 'Formula dello sconto di riga da applicare nella gestione "Al Ricavo" per le spese'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'SpesaCostoV'		, 'numeric(18, 0) NOT NULL' ,	'0'			, 'Costo totale delle spese in valuta'
		EXEC asp_du_DropColumn		'xPreventivo', 'SpesaCostoE'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'SpesaCostoE'		, 'AS (CONVERT([numeric](18,0), round(([SpesaCostoV] / [Cambio]),0),(0)))', '', 'Costo totale delle spese in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'SpesaRicavoV'		, 'numeric(18, 0) NOT NULL' ,	'0'			, 'Ricavo totale sulle spese in valuta'
		EXEC asp_du_DropColumn		'xPreventivo', 'SpesaRicavoE'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'SpesaRicavoE'		, 'AS (CONVERT([numeric](18,0), round(([SpesaRicavoV] / [Cambio]),0),(0)))', '', 'Ricavo totale sulle spese in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaSC1'	, 'char(3) NULL'					,	''			, 'Cd Formula 1 Spesa-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaSC2'	, 'char(3) NULL'					,	''			, 'Cd Formula 2 Spesa-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaSC3'	, 'char(3) NULL'					,	''			, 'Cd Formula 3 Spesa-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaSC4'	, 'char(3) NULL'					,	''			, 'Cd Formula 4 Spesa-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaSC5'	, 'char(3) NULL'					,	''			, 'Cd Formula 5 Spesa-Costo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaSC1'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaSC2'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaSC3'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaSC4'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaSC5'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaSC1] FOREIGN KEY([Cd_FormulaSC1])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaSC2] FOREIGN KEY([Cd_FormulaSC2])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaSC3] FOREIGN KEY([Cd_FormulaSC3])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaSC4] FOREIGN KEY([Cd_FormulaSC4])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaSC5] FOREIGN KEY([Cd_FormulaSC5])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaSR1'	, 'char(3) NULL'					,	''			, 'Cd Formula 1 Spesa-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaSR2'	, 'char(3) NULL'					,	''			, 'Cd Formula 2 Spesa-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaSR3'	, 'char(3) NULL'					,	''			, 'Cd Formula 3 Spesa-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaSR4'	, 'char(3) NULL'					,	''			, 'Cd Formula 4 Spesa-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_FormulaSR5'	, 'char(3) NULL'					,	''			, 'Cd Formula 5 Spesa-Ricavo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaSR1'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaSR2'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaSR3'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaSR4'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_FormulaSR5'
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaSR1] FOREIGN KEY([Cd_FormulaSR1])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaSR2] FOREIGN KEY([Cd_FormulaSR2])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaSR3] FOREIGN KEY([Cd_FormulaSR3])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaSR4] FOREIGN KEY([Cd_FormulaSR4])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [FK_xPreventivo_FormulaSR5] FOREIGN KEY([Cd_FormulaSR5])
		REFERENCES [dbo].[xFormula] ([Cd_xFormula])	NOT FOR REPLICATION 
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaSC1'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 1 Spesa-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaSC2'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 2 Spesa-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaSC3'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 3 Spesa-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaSC4'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 4 Spesa-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaSC5'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 5 Spesa-Costo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaSR1'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 1 Spesa-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaSR2'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 2 Spesa-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaSR3'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 3 Spesa-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaSR4'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 4 Spesa-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FormulaSR5'		, 'varchar(10) NOT NULL'		,	'('''')', 'Formula 5 Spesa-Ricavo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC1V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 1 Spesa-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC2V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 2 Spesa-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC3V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 3 Spesa-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC4V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 4 Spesa-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC5V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 5 Spesa-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR1V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 1 Spesa-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR2V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 2 Spesa-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR3V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 3 Spesa-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR4V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 4 Spesa-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR5V'		, 'numeric(18, 0) NOT NULL'	,	'0'			, 'Valore 5 Spesa-Ricavo in valuta'
		EXEC asp_du_DropColumn		'xPreventivo', 'ValoreSC1E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC1E', 'AS (CONVERT([numeric](18,0), round(([ValoreSC1V] / [Cambio]),0),(0)))', '', 'Valore 1 Spesa-Costo in euro'
		EXEC asp_du_DropColumn		'xPreventivo', 'ValoreSC2E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC2E', 'AS (CONVERT([numeric](18,0), round(([ValoreSC2V] / [Cambio]),0),(0)))', '', 'Valore 2 Spesa-Costo in euro'
		EXEC asp_du_DropColumn		'xPreventivo', 'ValoreSC3E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC3E', 'AS (CONVERT([numeric](18,0), round(([ValoreSC3V] / [Cambio]),0),(0)))', '', 'Valore 3 Spesa-Costo in euro'
		EXEC asp_du_DropColumn		'xPreventivo', 'ValoreSC4E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC4E', 'AS (CONVERT([numeric](18,0), round(([ValoreSC4V] / [Cambio]),0),(0)))', '', 'Valore 4 Spesa-Costo in euro'
		EXEC asp_du_DropColumn		'xPreventivo', 'ValoreSC5E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC5E', 'AS (CONVERT([numeric](18,0), round(([ValoreSC5V] / [Cambio]),0),(0)))', '', 'Valore 5 Spesa-Costo in euro'
		EXEC asp_du_DropColumn		'xPreventivo', 'ValoreSR1E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR1E', 'AS (CONVERT([numeric](18,0), round(([ValoreSR1V] / [Cambio]),0),(0)))', '', 'Valore 1 Spesa-Ricavo in euro'
		EXEC asp_du_DropColumn		'xPreventivo', 'ValoreSR2E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR2E', 'AS (CONVERT([numeric](18,0), round(([ValoreSR2V] / [Cambio]),0),(0)))', '', 'Valore 2 Spesa-Ricavo in euro'
		EXEC asp_du_DropColumn		'xPreventivo', 'ValoreSR3E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR3E', 'AS (CONVERT([numeric](18,0), round(([ValoreSR3V] / [Cambio]),0),(0)))', '', 'Valore 3 Spesa-Ricavo in euro'
		EXEC asp_du_DropColumn		'xPreventivo', 'ValoreSR4E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR4E', 'AS (CONVERT([numeric](18,0), round(([ValoreSR4V] / [Cambio]),0),(0)))', '', 'Valore 4 Spesa-Ricavo in euro'
		EXEC asp_du_DropColumn		'xPreventivo', 'ValoreSR5E'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR5E', 'AS (CONVERT([numeric](18,0), round(([ValoreSR5V] / [Cambio]),0),(0)))', '', 'Valore 5 Spesa-Ricavo in euro'
		-- Anagrafica ricarichi generali (xFormula)
		EXEC asp_du_AddAlterColumn	'xFormula', 'TipoFormula', 'tinyint NOT NULL', '3', '1 - applicabile solo sui materiali; 2 - applicabile solo sulle attività; 3 - applicabile sulla sommatoria dei materiali + le attività + le spese; 4 - applicabile solo sulle spese'

		/* Commesse - Gestione Ricambi */
		/* 16-10-2012 */
		-- Anagrafica sottocommesse (DOSottoCommessa)
		EXEC asp_du_AddAlterColumn 'DoSottoCommessa', 'xCd_LS_Ricambio', 'char(7) NULL', '', 'Listino di costo per la gestione dei ricambi'
		EXEC asp_du_DropConstraint 'DoSottoCommessa', 'xFK_DoSottoCommessa_Cd_LS_Ricambio'
		ALTER TABLE DoSottoCommessa WITH NOCHECK ADD CONSTRAINT [xFK_DoSottoCommessa_Cd_LS_Ricambio] FOREIGN KEY([xCd_LS_Ricambio])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE DoSottoCommessa CHECK CONSTRAINT [xFK_DoSottoCommessa_Cd_LS_Ricambio]

		-- Tabella di collegamento tra i ricambi e le sottocommesse (xDOSottoCommessaRicambio)
		IF dbo.afn_du_IsTable('xDoSottoCommessaRicambio') = 0
			EXEC asp_du_AddTable 'xDoSottoCommessaRicambio', 0, 'Tabella dei ricambi'

		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaRicambio', 'Cd_DoSottoCommessa', '[varchar](20) NOT NULL', '', 'Codice della sottocommessa'
		EXEC asp_du_DropConstraint 'xDoSottoCommessaRicambio', 'FK_xDoSottoCommessaRicambio_DoSottoCommessa'
		ALTER TABLE [dbo].[xDoSottoCommessaRicambio] WITH NOCHECK ADD CONSTRAINT [FK_xDoSottoCommessaRicambio_DoSottoCommessa] FOREIGN KEY([Cd_DoSottoCommessa])
		REFERENCES [dbo].[DOSottoCommessa] ([Cd_DOSottoCommessa]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xDoSottoCommessaRicambio] CHECK CONSTRAINT [FK_xDoSottoCommessaRicambio_DoSottoCommessa]
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaRicambio', 'Cd_AR', '[varchar](20) NOT NULL', '', 'Codice articolo di ricambio'
		EXEC asp_du_DropConstraint 'xDoSottoCommessaRicambio', 'FK_xDoSottoCommessaRicambio_AR'
		ALTER TABLE [dbo].[xDoSottoCommessaRicambio] WITH NOCHECK ADD CONSTRAINT [FK_xDoSottoCommessaRicambio_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xDoSottoCommessaRicambio] CHECK CONSTRAINT [FK_xDoSottoCommessaRicambio_AR]
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaRicambio', 'Descrizione'	, '[varchar](80) NULL', ''	, 'Descrizione dell''articolo di ricambio'
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaRicambio', 'Cd_ARMisura', '[char](2) NULL', '', 'Unità di misura associata all''articolo di ricambio'
		EXEC asp_du_DropConstraint 'xDoSottoCommessaRicambio', 'FK_xDoSottoCommessaRicambio_ARMisura'
		ALTER TABLE [dbo].[xDoSottoCommessaRicambio] WITH NOCHECK ADD CONSTRAINT [FK_xDoSottoCommessaRicambio_ARMisura] FOREIGN KEY([Cd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xDoSottoCommessaRicambio] CHECK CONSTRAINT [FK_xDoSottoCommessaRicambio_ARMisura]
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaRicambio', 'Quantita', '[numeric](18, 8) NOT NULL'	, '0', 'Quantità'
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaRicambio', 'CostoUnitarioV', '[numeric](18, 6) NOT NULL', '0', 'Costo unitario in valuta'
		EXEC asp_du_AddAlterColumn 'xDoSottoCommessaRicambio', 'Riga', '[smallint] NOT NULL', '0'	, 'Riga'

		/* Gestione della Garanzia */
		/* 17-10-2012 */
		-- Anagrafica sottocommesse (DOSottoCommessa)
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xDataInizioGaranzia'	, '[smalldatetime] NULL', '', 'Data di inizio della garanzia'
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xDurataGaranzia'		, '[smallint] NOT NULL', '0', 'Durata della garanzia'
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xDataFineGaranzia'		, '[smalldatetime] NULL', '', 'Data di fine della garanzia'
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xValoreGaranzia'		, 'numeric(18, 6) NOT NULL','0', 'Valore della garanzia'
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xAttivitaInGaranzia'	, '[bit] NOT NULL','1', '0 - Attività non coperte da garanzia; 1 - Attività coperte da garanzia'
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xMaterialeInGaranzia'	, '[bit] NOT NULL','1', '0 - Materiali non coperti da garanzia; 1 - Materiali coperti da garanzia'
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa', 'xSpesaInGaranzia'		, '[bit] NOT NULL','1', '0 - Spese non coperte da garanzia; 1 - Spese coperte da garanzia'

		-- Anagrafica impianti (xImpianto)
		EXEC asp_du_AddAlterColumn 'xImpianto', 'DataInizioGaranzia'	, '[smalldatetime] NULL', '', 'Data di inizio della garanzia'
		EXEC asp_du_AddAlterColumn 'xImpianto', 'DurataGaranzia'			, '[smallint] NOT NULL', '0', 'Durata della garanzia'
		EXEC asp_du_AddAlterColumn 'xImpianto', 'DataFineGaranzia'		, '[smalldatetime] NULL', '', 'Data di fine della garanzia'
		EXEC asp_du_AddAlterColumn 'xImpianto', 'ValoreGaranzia'			, 'numeric(18, 6) NOT NULL','0', 'Valore della garanzia'
		EXEC asp_du_AddAlterColumn 'xImpianto', 'AttivitaInGaranzia'	, '[bit] NOT NULL','1', '0 - Attività non coperte da garanzia; 1 - Attività coperte da garanzia'
		EXEC asp_du_AddAlterColumn 'xImpianto', 'MaterialeInGaranzia'	, '[bit] NOT NULL','1', '0 - Materiali non coperti da garanzia; 1 - Materiali coperti da garanzia'
		EXEC asp_du_AddAlterColumn 'xImpianto', 'SpesaInGaranzia'		, '[bit] NOT NULL','1', '0 - Spese non coperte da garanzia; 1 - Spese coperte da garanzia'

		-- Tabella di collegamento tra le sottocommesse e gli impianti (xImpiantoDOSottoCommessa)
		IF dbo.afn_du_IsTable('xImpiantoDOSottoCommessa') = 0
			EXEC asp_du_AddTable 'xImpiantoDOSottoCommessa', 0, 'Sottocommesse impianto'

		EXEC asp_du_AddAlterColumn 'xImpiantoDOSottoCommessa', 'Cd_xImpianto', '[char](10) NOT NULL', '', 'Codice impianto di appartenenza della sottocommessa'
		EXEC asp_du_DropConstraint 'xImpiantoDOSottoCommessa', 'FK_xImpiantoDOSottoCommessa_Impianto'
		ALTER TABLE [dbo].[xImpiantoDOSottoCommessa] WITH NOCHECK ADD CONSTRAINT [FK_xImpiantoDOSottoCommessa_Impianto] FOREIGN KEY([Cd_xImpianto])
		REFERENCES [dbo].[xImpianto] ([Cd_xImpianto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xImpiantoDOSottoCommessa] CHECK CONSTRAINT [FK_xImpiantoDOSottoCommessa_Impianto]
		EXEC asp_du_AddAlterColumn 'xImpiantoDOSottoCommessa', 'Cd_DOSottoCommessa', '[varchar](20) NOT NULL', '', 'Codice sottocommessa'
		EXEC asp_du_DropConstraint 'xImpiantoDOSottoCommessa', 'FK_xImpiantoDOSottoCommessa_DOSottoCommessa'
		ALTER TABLE [dbo].[xImpiantoDOSottoCommessa] WITH CHECK ADD CONSTRAINT [FK_xImpiantoDOSottoCommessa_DOSottoCommessa] FOREIGN KEY([Cd_DOSottoCommessa])
		REFERENCES [dbo].[DOSottoCommessa] ([Cd_DOSottoCommessa])
		ALTER TABLE [dbo].[xImpiantoDOSottoCommessa] CHECK CONSTRAINT [FK_xImpiantoDOSottoCommessa_DOSottoCommessa]
		EXEC asp_du_DropIndex		'xImpiantoDOSottoCommessa', 'UK_xImpiantoDOSottoCommessa'
		EXEC asp_du_AddAlterIndex	'xImpiantoDOSottoCommessa', 'UK_xImpiantoDOSottoCommessa',	'[Cd_xImpianto] ASC, [Cd_DOSottoCommessa] ASC',	0, 0, 0, 1
		EXEC asp_du_AddAlterColumn 'xImpiantoDOSottoCommessa', 'Riga', '[smallint] NOT NULL', '0'	, 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xImpiantoDOSottoCommessa', 'Riferimento', '[varchar] (100) COLLATE Latin1_General_CI_AS NULL', '', 'Riferimento documento di chiusura della sottocommessa'
		EXEC asp_du_AddAlterColumn 'xImpiantoDOSottoCommessa', 'Id_DOTes', '[int] NULL', '', 'Identificativo testa documento di chiusura della sottocommessa'
		EXEC asp_du_DropConstraint 'xImpiantoDOSottoCommessa', 'FK_xImpiantoDOSottoCommessa_DOTes'
		ALTER TABLE [dbo].[xImpiantoDOSottoCommessa] WITH NOCHECK ADD CONSTRAINT [FK_xImpiantoDOSottoCommessa_DOTes] FOREIGN KEY([Id_DOTes])
		REFERENCES [dbo].[DOTes] ([Id_DoTes]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xImpiantoDOSottoCommessa] CHECK CONSTRAINT [FK_xImpiantoDOSottoCommessa_DOTes]
		EXEC asp_du_AddAlterColumn 'xImpiantoDOSottoCommessa', 'DataInizio', 'smalldatetime NULL', '', 'Data inizio validità riga'
		EXEC asp_du_AddAlterColumn 'xImpiantoDOSottoCommessa', 'DataFine', 'smalldatetime NULL', '', 'Data fine validità riga'

		-- Anagrafica articoli (AR)
		EXEC asp_du_AddAlterColumn 'AR', 'xValoreGaranzia'			, 'numeric(18, 6) NOT NULL','0', 'Valore della garanzia'
		EXEC asp_du_AddAlterColumn 'AR', 'xAttivitaInGaranzia'	, '[bit] NOT NULL','1', '0 - Attività non coperte da garanzia; 1 - Attività coperte da garanzia'
		EXEC asp_du_AddAlterColumn 'AR', 'xMaterialeInGaranzia'	, '[bit] NOT NULL','1', '0 - Materiali non coperti da garanzia; 1 - Materiali coperti da garanzia'
		EXEC asp_du_AddAlterColumn 'AR', 'xSpesaInGaranzia'		, '[bit] NOT NULL','1', '0 - Spese non coperte da garanzia; 1 - Spese coperte da garanzia'

		-- Anagrafica ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'SGV_Etichetta', '[char](1) NULL', '', 'M - scadenza garanzia vendita presa dalla matricola; S - scadenza garanzia vendita presa dalla sottocommessa; I - scadenza garanzia vendita presa dall''impianto.'

		/* Preventivi - Aggiunta campi e gestione dello stato */
		/* 19-10-2012 */
		-- Anagrafica sottopreventivi (xPreventivo)
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'DataIns'			, '[smalldatetime] NULL'	, ''		, 'Data inserimento sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'InizioValidita'	, '[smalldatetime] NULL'	, ''		, 'Inizio validità del sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FineValidita'		, '[smalldatetime] NULL'	, ''		, 'Fine validità del sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Stato'				, '[char](1) NOT NULL'		, '''P''', 'Stato sottopreventivo (P - in preparazione; C - consegnato; S - sospeso; F - confermato; R - revisionato; A - annullato; I - rifiutato)'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'DataStato'			, '[smalldatetime] NULL'	, ''		, 'Data di cambio dello stato'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Probabilita'		, '[numeric](18, 2) NULL'	, '0'		, 'Probabilità acquisizione'

		/* Gestione della Garanzia */
		/* 17-10-2012 */
		If Exists(Select * from ADB_System.aad.License where Name = 'LicF_Commesse' And Value = 1)
			Begin
				EXEC('Update DOSottoCommessa Set xDataInizioGaranzia = DataFineReale Where DataFineReale Is Not Null')
			End
		
		EXEC('Update xRDTicket Set SGV_Etichetta = ''M'' Where Cd_xRDModalita = ''2''')

		-- porto la versione a 1.46
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 46, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.47
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.46' begin
		select 'Applico aggiornamenti al database: 1.46->1.47'
		-- qui operazioni per l'aggiornamento DB da 1.46 a 1.47

		/* Gestione della Garanzia */
		/* 25-10-2012 */
		-- Anagrafica matricole (xMatricola)
		EXEC asp_du_AddAlterColumn 'xMatricola', 'ValoreGaranzia'		, 'numeric(18, 6) NOT NULL','0', 'Valore della garanzia'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'AttivitaInGaranzia'	, '[bit] NOT NULL','1', '0 - Attività non coperte da garanzia; 1 - Attività coperte da garanzia'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'MaterialeInGaranzia'	, '[bit] NOT NULL','1', '0 - Materiali non coperti da garanzia; 1 - Materiali coperti da garanzia'
		EXEC asp_du_AddAlterColumn 'xMatricola', 'SpesaInGaranzia'		, '[bit] NOT NULL','1', '0 - Spese non coperte da garanzia; 1 - Spese coperte da garanzia'

		-- Tabella di collegamento tra le sottocommesse e gli impianti (xImpiantoDOSottoCommessa)
		EXEC asp_du_DropConstraint 'xImpiantoDOSottoCommessa', 'FK_xImpiantoDOSottoCommessa_DOTes'
		EXEC asp_du_DropColumn		'xImpiantoDOSottoCommessa', 'Id_DOTes'

		/* Preventivi */
		/* 29/10/2012 */
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'InizioValidita', '[smalldatetime] NULL', '', 'Inizio validità del preventivo'

		/* Preventivi - Ricalcolo ricarichi e sconti in base al prezzo finale pattuito con il cliente */
		/* 30-10-2012 */
		-- Preferenze G.A.C. (tabella xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviRicalcolaSpesa', '[bit] NOT NULL', '1', '0 - le spese sono escluse dal ricalcolo ricarichi\sconti; 1 - le spese sono incluse nel ricalcolo ricarichi\sconti'

		/* Gestione della Garanzia */
		/* 30-10-2012 */
		EXEC('Update xImpianto Set DataInizioGaranzia = DataCollaudo Where DataCollaudo Is Not Null')

		-- porto la versione a 1.47
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 47, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.48
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.47' begin
		select 'Applico aggiornamenti al database: 1.47->1.48'
		-- qui operazioni per l'aggiornamento DB da 1.47 a 1.48

		-- Pulizia menu
		Delete From Menu Where Cd_Menu = '6C8D4512-98B5-4592-B4A5-F9F8A218E811' -- Import Matricole e Contratti da Professional
		
		/* Interventi Programmati - Programmazione scadenze */
		/* 07-11-2012 */
		-- Anagrafica Interventi Programmati (xInterventoProg)
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'DaUltimoTicket', '[bit] NOT NULL', '0', '0 - in caso di ritardo, programma la scadenza successiva seguendo le regole standard; 1 - in caso di ritardo, programma la scadenza successiva dall''ultimo ticket generato'

		/* Anagrafica Operatori */
		/* 20-11-2012 */
		-- Anagrafica Operatori
		EXEC asp_du_AddAlterColumn 'xOperatore', 'DataFineRapporto', 'smalldatetime NULL',	'', 'Data di fine rapporto'
		-- Tabella Valorizzazioni per Operatore
		EXEC asp_du_AddAlterColumn 'xOperatoreVal', 'InizioValidita', 'smalldatetime NULL',	'', 'Data di inizio validità del costo orario'

		/* Matricole - Gestione della sottocommessa */
		/* 06-12-2012 */
		-- Anagrafica Matricole (xMatricola)
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Cd_DOSottoCommessaInst', '[varchar](20) NULL',  '', 'Codice sottocommessa di installazione'
		EXEC asp_du_DropConstraint 'xMatricola', 'FK_xMatricola_DOSottoCommessaInst'
		ALTER TABLE [dbo].[xMatricola] WITH CHECK ADD CONSTRAINT [FK_xMatricola_DOSottoCommessaInst] FOREIGN KEY([Cd_DOSottoCommessaInst])
		REFERENCES [dbo].[DOSottoCommessa] ([Cd_DOSottoCommessa])
		ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [FK_xMatricola_DOSottoCommessaInst]

		EXEC('Update xMatricola
				Set xMatricola.Cd_DOSottoCommessaInst = C.Cd_DOSottoCommessa
				From xMatricola Inner Join
					(
					Select Cd_AR, Cd_xMatricola, Cd_DOSottoCommessa
					From (
						Select ROW_NUMBER() Over(Partition By Cd_AR, Cd_xMatricola Order By DataDoc Desc) As Posizione
								 , DataDoc
								 , Cd_AR
								 , Cd_xMatricola
								 , Cd_DOSottoCommessa
						From (
							Select DataDoc, Cd_AR, R.r.value(''@matricola'', ''nvarchar(20)'') As Cd_xMatricola, CD_DOSottocommessa
							From DORig CROSS APPLY Matricole.nodes(''rows/row'') As R(r)
							Where (TipoDocumento In (''A'', ''F'', ''B'')) And (Cd_DOSottoCommessa Is Not Null)
							) A
						) B
					Where Posizione = 1
					) C On xMatricola.Cd_AR = C.Cd_AR And xMatricola.Cd_xMatricola = C.Cd_xMatricola')

		-- porto la versione a 1.48
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 48, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.49
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.48' begin
		select 'Applico aggiornamenti al database: 1.48->1.49'
		-- qui operazioni per l'aggiornamento DB da 1.48 a 1.49

		/* Contratti - Gestione dei Rinnovi */
		/* 07-02-2013 */
		-- Storico dei Rinnovi (xContrattoRinnovo)
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'Costo'				, '[numeric](18, 6) NOT NULL'	, '0'			, 'Costi sostenuti per ticket di assistenza a contratto'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'MargineFatt'		, '[numeric](18, 6) NOT NULL'	, '0'			, 'Margine su fatturato'
		EXEC asp_du_AddAlterColumn 'xContrattoRinnovo', 'MargineFattPerc'	, '[varchar](15) NOT NULL'		, '('''')'	, 'Margine percentuale su fatturato'

		/* Gestione Commesse - Data Inizio Presunta */
		/* 08-03-2013 */
		-- Anagrafica commesse (DOCommessa)
		EXEC asp_du_AddAlterColumn 'DOCommessa'		, 'xDataInizioPresunta'	, '[smalldatetime] NULL', '', 'Data di inizio presunta'
		-- Anagrafica sottocommesse (DOSottoCommessa)
		EXEC asp_du_AddAlterColumn 'DOSottoCommessa'	, 'xDataInizioPresunta'	, '[smalldatetime] NULL', '', 'Data di inizio presunta'

		-- porto la versione a 1.49
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 49, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.50
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.49' begin
		select 'Applico aggiornamenti al database: 1.49->1.50'
		-- qui operazioni per l'aggiornamento DB da 1.49 a 1.50

		/* Contratti - Sviluppo Scadenze */
		/* 19-03-2013 */
		-- Tabella Anagrafica Contratti (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'TipoSviluppoFattura'	, 'tinyint NOT NULL', '5', 'Tipo sviluppo fatture: 1 - coincide con l''inizio del periodo; 2 - coincide con la fine del periodo; 3 - anticipato nel periodo; 4 - anticipato prima del periodo; 5 - successivo al periodo'
		EXEC asp_du_AddAlterColumn 'xContratto', 'TipoGiornoFattura'	, 'tinyint NOT NULL', '1', 'Tipo giorno fattura: 1 - giorno da specificare; 2 - fine mese'

		EXEC('Update xContratto Set TipoSviluppoFattura = Case	When Anticipo = 0 And MesePrecedente = 0 Then 5 -- Successivo
																					When Anticipo = 1 And MesePrecedente = 0 Then 3 -- Anticipato nel
																					When Anticipo = 1 And MesePrecedente = 1 Then 4 -- Anticipato prima
																					Else 5 End -- Sussessivo')
		EXEC('Update xContratto Set TipoGiornoFattura = Case FatturaFineMese When 1 Then 2 Else 1 End')

		EXEC asp_du_DropColumn 'xContratto', 'FatturaFineMese'
		EXEC asp_du_DropColumn 'xContratto', 'Anticipo'
		EXEC asp_du_DropColumn 'xContratto', 'MesePrecedente'

		/* Interventi Programmati - Evasione manuale Scadenze */
		/* 11-04-2013 */
		-- Scadenze Interventi Programmati (xInterventoProgScadenza)
		EXEC asp_du_AddAlterColumn 'xInterventoProgScadenza', 'Evasa', '[bit] NOT NULL', '0', '0 - scadenza non evasa; 1 - scadenza evasa'

		-- porto la versione a 1.50
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 50, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.51
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.50' begin
		select 'Applico aggiornamenti al database: 1.50->1.51'
		-- qui operazioni per l'aggiornamento DB da 1.50 a 1.51

		/* GEP [ovvero CCA + EasyPlanning] */
		/* 21-05-2013 */
		-- Anagrafica Preventivi (xPreventivoFamiglia)
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'DataAperturaPrev', 'smalldatetime NULL', '', 'Data Apertura Prevista'
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'DataChiusuraPrev', 'smalldatetime NULL', '', 'Data Chiusura Prevista'
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'RicalcolaDatePrev','bit NOT NULL'		, '0', '0 - nessun ricalcolo; 1 - ricalcola apertura e chiusura prevista al salvataggio'
		-- Anagrafica Sottopreventivi (xPreventivo)
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'DataAperturaPrev', 'smalldatetime NULL', '', 'Data Apertura Prevista'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'DataChiusuraPrev', 'smalldatetime NULL', '', 'Data Chiusura Prevista'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'RicalcolaDatePrev','bit NOT NULL'		 , '0', '0 - nessun ricalcolo; 1 - ricalcola apertura e chiusura prevista al salvataggio'
		-- Tabella Attività Sottopreventivi (xPreventivoFase)
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Vincolo', '[varchar](100) NULL',  '', 'Vincolo Sequenza'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Cd_PrRisorsa', '[varchar](20) NULL',  '', 'Codice risorsa'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'FK_xPreventivoFase_PrRisorsa'
		ALTER TABLE [dbo].[xPreventivoFase] WITH CHECK ADD CONSTRAINT [FK_xPreventivoFase_PrRisorsa] FOREIGN KEY([Cd_PrRisorsa])
		REFERENCES [dbo].[PrRisorsa] ([Cd_PrRisorsa])
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [FK_xPreventivoFase_PrRisorsa]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'DataAperturaPrev', 'smalldatetime NULL', '', 'Data Apertura Prevista'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'DataChiusuraPrev', 'smalldatetime NULL', '', 'Data Chiusura Prevista'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'PiaInizio', 'smalldatetime NULL', '', 'Data Inizio Pianificata'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'PiaFine', 'smalldatetime NULL', '', 'Data Fine Pianificata'
		-- Tabella Scadenze Interventi Programmati (xInterventoProgScadenza)
		EXEC asp_du_AddAlterColumn 'xInterventoProgScadenza', 'DataAperturaPrev', 'smalldatetime NULL', '', 'Data Apertura Prevista'
		EXEC asp_du_AddAlterColumn 'xInterventoProgScadenza', 'DataChiusuraPrev', 'smalldatetime NULL', '', 'Data Chiusura Prevista'
		EXEC asp_du_AddAlterColumn 'xInterventoProgScadenza', 'PiaInizio', 'smalldatetime NULL', '', 'Data Inizio Pianificata'
		EXEC asp_du_AddAlterColumn 'xInterventoProgScadenza', 'PiaFine', 'smalldatetime NULL', '', 'Data Fine Pianificata'
		-- Tabella Attività Interventi Programmati (xInterventoProgAttivita)
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'Vincolo', '[varchar](100) NULL',  '', 'Vincolo Sequenza'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'Cd_PrRisorsa', '[varchar](20) NULL',  '', 'Codice risorsa'
		EXEC asp_du_DropConstraint 'xInterventoProgAttivita', 'FK_xInterventoProgAttivita_PrRisorsa'
		ALTER TABLE [dbo].[xInterventoProgAttivita] WITH CHECK ADD CONSTRAINT [FK_xInterventoProgAttivita_PrRisorsa] FOREIGN KEY([Cd_PrRisorsa])
		REFERENCES [dbo].[PrRisorsa] ([Cd_PrRisorsa])
		ALTER TABLE [dbo].[xInterventoProgAttivita] CHECK CONSTRAINT [FK_xInterventoProgAttivita_PrRisorsa]
		-- Anagrafica Commesse (DOCommessa)
		EXEC asp_du_AddAlterColumn 'DOCommessa', 'xRicalcolaDatePrev','bit NOT NULL', '0', '0 - nessun ricalcolo; 1 - ricalcola apertura e chiusura prevista al salvataggio'
		-- Anagrafica Sottocommesse (DOSottocommessa)
		EXEC asp_du_AddAlterColumn 'DOSottocommessa', 'xRicalcolaDatePrev','bit NOT NULL', '0', '0 - nessun ricalcolo; 1 - ricalcola apertura e chiusura prevista al salvataggio'
		-- Anagrafica Ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'RicalcolaDatePrev','bit NOT NULL', '0', '0 - nessun ricalcolo; 1 - ricalcola apertura e chiusura prevista al salvataggio'
		-- Tabella Attività Ticket (xRDTicketAttivita)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Vincolo', '[varchar](100) NULL',  '', 'Vincolo Sequenza'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Cd_PrRisorsa', '[varchar](20) NULL',  '', 'Codice risorsa'
		EXEC asp_du_DropConstraint 'xRDTicketAttivita', 'FK_xRDTicketAttivita_PrRisorsa'
		ALTER TABLE [dbo].[xRDTicketAttivita] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivita_PrRisorsa] FOREIGN KEY([Cd_PrRisorsa])
		REFERENCES [dbo].[PrRisorsa] ([Cd_PrRisorsa])
		ALTER TABLE [dbo].[xRDTicketAttivita] CHECK CONSTRAINT [FK_xRDTicketAttivita_PrRisorsa]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'PiaInizio', 'smalldatetime NULL', '', 'Data Inizio Pianificata'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'PiaFine', 'smalldatetime NULL', '', 'Data Fine Pianificata'
		-- Aggiornamento Sequenza per le Attività dei Sottopreventivi con Sequenza = 0
		Exec('Update PF
				 Set PF.Sequenza = PF.Sequenza + 1
				 From xPreventivoFase PF Inner Join xPreventivo P On PF.Id_Preventivo = P.Id_Preventivo
				 Where PF.Id_Preventivo In (
				  Select Distinct Id_Preventivo From xPreventivoFase Where Sequenza = 0
				  )')
		-- Aggiornamento Vincolo per le Attività dei Sottopreventivi già presenti
		Exec('Update xPreventivoFase Set Vincolo = CAST(Sequenza - 1 As Varchar(100)) Where Sequenza > 1')
		-- Aggiornamento Vincolo per le Attività degli Interventi Programmati già presenti
		Exec('Update xInterventoProgAttivita Set Vincolo = CAST(Riga - 1 As Varchar(100)) Where Riga > 1')
		-- Aggiornamento Vincolo per le Attività dei Ticket già presenti
		Exec('Update xRDTicketAttivita Set Vincolo = CAST(Riga - 1 As Varchar(100)) Where Riga > 1')

		/* Compatibilità versione 2/2013 del gestionale */
		/* 13-06-2013 */
		-- Tabella Ticket Materiale e Spesa Movimenti (xRDTicketMaterialeSpesaMov)
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_MGUbicazione_P'
		ALTER TABLE xRDTicketMaterialeSpesaMov WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MGUbicazione_P] FOREIGN KEY( [Cd_MG_P], [Cd_MGUbicazione_P])
		REFERENCES [dbo].[MGUbicazione] ([Cd_MG], [Cd_MGUbicazione])
		ALTER TABLE xRDTicketMaterialeSpesaMov CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MG_P]
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_MGUbicazione_A'
		ALTER TABLE xRDTicketMaterialeSpesaMov WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MGUbicazione_A] FOREIGN KEY([Cd_MG_A], [Cd_MGUbicazione_A])
		REFERENCES [dbo].[MGUbicazione] ([Cd_MG], [Cd_MGUbicazione])
		ALTER TABLE xRDTicketMaterialeSpesaMov CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_MGUbicazione_A]

		-- porto la versione a 1.51
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 51, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.52
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.51' begin
		select 'Applico aggiornamenti al database: 1.51->1.52'
		-- qui operazioni per l'aggiornamento DB da 1.51 a 1.52

		/* Preventivi - Listini nei Materiali */
		/* 09-09-2013 */
		-- Tabella Materiali dei Sottopreventivi (xPreventivoMateriale)
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Cd_LS', 'char(7) NULL', '', 'Listino per valorizzazione riga materiale'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'FK_xPreventivoMateriale_LS'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoMateriale_LS] FOREIGN KEY([Cd_LS])
		REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [FK_xPreventivoMateriale_LS]

		-- porto la versione a 1.52
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 52, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.53
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.52' begin
		select 'Applico aggiornamenti al database: 1.52->1.53'
		-- qui operazioni per l'aggiornamento DB da 1.52 a 1.53

		/* Ticket - Chiusura automatica ticket */
		/* 17-09-2013 */
		-- Impostazioni GAC (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'ChiusuraTicket', 'bit NOT NULL', '0', '0 - la chiusura di un ticket di produzione va sempre gestita manualmente; 1 - da rilevazione, chiude automaticamente il ticket di produzione alla chiusura dell''ultima attività'

		/* Ticket - Analisi Disponibilità Operatori */
		/* 26-09-2013 */
		-- Tabella Ticket Attività Operatori (xRDTicketAttivitaOperatore)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Durata', '[numeric](18, 6) NOT NULL', '0', 'Durata assegnata all''operatore'

		/* Operatori - Risorsa di default */
		/* 07-10-2013 */
		-- Tabella delle Risorse associate agli Operatori (xOperatorePRRisorsa)
		EXEC asp_du_AddAlterColumn 'xOperatorePRRisorsa', 'DefaultPRRisorsa', '[bit] NOT NULL', '0', '0 - non è la risorsa di default; 1 - è la risorsa di default'
		-- Aggiornamento Risorsa di default per le associazioni già presenti
		Exec('Update xOperatorePRRisorsa Set DefaultPRRisorsa = 1 Where Riga = 1')

		/* Operatori - Matricola di join con altri DB */
		/* 11-10-2013 */
		-- Anagrafica Operatori (xOperatore)
		EXEC asp_du_AddAlterColumn 'xOperatore', 'NumeroMatricola', '[varchar](20) NULL', '', 'Numero matricola utile per il collegamento con altri db'

		-- porto la versione a 1.53
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 53, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.54
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.53' begin
		select 'Applico aggiornamenti al database: 1.53->1.54'
		-- qui operazioni per l'aggiornamento DB da 1.53 a 1.54

		/* Preventivi - Coefficienti per calcolo Quantità */
		/* 11-11-2013 */
		-- Tabella delle preferenze e delle impostazioni (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviNumCoeff' , 'tinyint NOT NULL' , '1', 'Numero di coefficienti presenti nelle righe materiale del sottopreventivo per calcolo della quantità'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviCoeff1UM', '[int] NOT NULL', '1', 'Unità di misura di default coefficiente 1'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviCoeff2UM', '[int] NOT NULL', '1', 'Unità di misura di default coefficiente 2'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviCoeff3UM', '[int] NOT NULL', '1', 'Unità di misura di default coefficiente 3'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviCoeff4UM', '[int] NOT NULL', '1', 'Unità di misura di default coefficiente 4'

		-- Tabella Materiali dei Sottopreventivi (xPreventivoMateriale)
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Coeff1' , '[numeric](18, 8) NOT NULL', '0', 'Coefficiente 1'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Coeff2' , '[numeric](18, 8) NOT NULL', '0', 'Coefficiente 2'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Coeff3' , '[numeric](18, 8) NOT NULL', '0', 'Coefficiente 3'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Coeff4' , '[numeric](18, 8) NOT NULL', '0', 'Coefficiente 4'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'UMDORig', '[int] NOT NULL', '1', 'Unità di misura da riportare nella riga documento'

		-- porto la versione a 1.54
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 54, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.55
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.54' begin
		select 'Applico aggiornamenti al database: 1.54->1.55'
		-- qui operazioni per l'aggiornamento DB da 1.54 a 1.55

		/* Matricole - Gestione Altra Matricola */
		/* 04-12-2013 */
		-- Anagrafica Matricole (xMatricola)
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Cd_xMatricolaOther', '[varchar] (40) NULL', '', 'Altra Matricola'

		/* Ticket - Gestione Reparto */
		/* 05-12-2013 */
		-- Anagrafica Reparti (xRDReparto)
		IF dbo.afn_du_IsTable('xRDReparto') = 0
			EXEC asp_du_AddTable 'xRDReparto', 6, 'Tabella reparti'

		EXEC asp_du_AddAlterColumn 'xRDReparto', 'Descrizione', 'varchar(80) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione reparto'

		-- Anagrafica Ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_xRDReparto', '[char] (6) NULL', '', 'Reparto'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xRDReparto'
		ALTER TABLE [dbo].[xRDTicket] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicket_xRDReparto] FOREIGN KEY(Cd_xRDReparto)
		REFERENCES [dbo].[xRDReparto] (Cd_xRDReparto) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_xRDReparto]

		-- Attività consuntive del Ticket (xRDTicketAttivitaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Cd_xRDReparto', '[char] (6) NULL', '', 'Reparto'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov', 'FK_xRDTicketAttivitaMov_xRDReparto'
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_xRDReparto] FOREIGN KEY(Cd_xRDReparto)
		REFERENCES [dbo].[xRDReparto] (Cd_xRDReparto) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_xRDReparto]

		-- Materiali e Spese del Ticket (xRDTicketMaterialeSpesaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Cd_xRDReparto', '[char] (6) NULL', '', 'Reparto'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_xRDReparto'
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_xRDReparto] FOREIGN KEY(Cd_xRDReparto)
		REFERENCES [dbo].[xRDReparto] (Cd_xRDReparto) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_xRDReparto]

		-- Documenti - Teste (DOTes)
		EXEC asp_du_AddAlterColumn 'DOTes', 'xCd_xRDReparto', '[char] (6) NULL', '', 'Reparto'
		EXEC asp_du_DropConstraint 'DOTes', 'xFK_DOTes_xRDReparto'
		ALTER TABLE [dbo].[DOTes] WITH NOCHECK ADD CONSTRAINT [xFK_DOTes_xRDReparto] FOREIGN KEY(xCd_xRDReparto)
		REFERENCES [dbo].[xRDReparto] (Cd_xRDReparto) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[DOTes] CHECK CONSTRAINT [xFK_DOTes_xRDReparto]

		-- Documenti - Righe (DORig)
		EXEC asp_du_AddAlterColumn 'DORig', 'xCd_xRDReparto', '[char] (6) NULL', '', 'Reparto'
		EXEC asp_du_DropConstraint 'DORig', 'xFK_DORig_xRDReparto'
		ALTER TABLE [dbo].[DORig] WITH NOCHECK ADD CONSTRAINT [xFK_DORig_xRDReparto] FOREIGN KEY(xCd_xRDReparto)
		REFERENCES [dbo].[xRDReparto] (Cd_xRDReparto) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[DORig] CHECK CONSTRAINT [xFK_DORig_xRDReparto]

		/* Ticket - Num Rapportino nella Testa del Ticket */
		/* 11-12-2013 */
		-- Anagrafica Ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'NumRapportino', '[char](20) NULL', '', 'Numero del rapportino'

		-- porto la versione a 1.55
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 55, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.56
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.55' begin
		select 'Applico aggiornamenti al database: 1.55->1.56'
		-- qui operazioni per l'aggiornamento DB da 1.55 a 1.56

		/* Ticket - Dettaglio Durata */
		/* 16-12-2013 */
		-- Anagrafica Attività (PRAttivita)
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xTipoDurata'                    , '[smallint] NOT NULL', '1', 'Tipo durata: 1 - durata unica; 2 - dettaglio durata'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xDUTipoValCosti'                , '[int] NOT NULL', '1', 'Durata unica: tipo di valorizzazione dei costi'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xDDRisorsa'                     , 'bit Not Null', '1', '0 - durata risorsa non gestita, 1 - durata risorsa gestita'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xDDRisorsaTipoValCosti'         , '[int] NOT NULL', '1', 'Dettaglio durata: tipo di valorizzazione dei costi per la durata risorsa'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xDDOperatore'                   , 'bit Not Null', '0', '0 - durata operatore non gestita, 1 - durata operatore gestita'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xDDOperatoreTipoValCosti'       , '[int] NOT NULL', '1', 'Dettaglio durata: tipo di valorizzazione dei costi per la durata operatore'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xDDRisorsaOperatore'            , 'bit Not Null', '0', '0 - durata risorsa + operatore non gestita, 1 - durata risorsa + operatore gestita'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xDDRisorsaOperatoreTipoValCosti', '[int] NOT NULL', '1', 'Dettaglio durata: tipo di valorizzazione dei costi per la durata risorsa + operatore'
		
		-- Tabella Ticket Attività Movimenti (xRDTicketAttivitaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'DurataOperatore', '[numeric](18, 6) NOT NULL' , '0', 'Durata operatore'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Cd_xRDTipoValorizzazione_Operatore', '[char](5) NULL', '', 'Tipo di valorizzazione operatore'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov', 'FK_xRDTicketAttivitaMov_xRDTipoValorizzazione_Operatore'
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_xRDTipoValorizzazione_Operatore] FOREIGN KEY([Cd_xRDTipoValorizzazione_Operatore])
		REFERENCES [dbo].[xRDTipoValorizzazione] ([Cd_xRDTipoValorizzazione])
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_xRDTipoValorizzazione_Operatore]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'CostoUnOperatore', '[numeric](18, 6) NULL', '0', 'Costo unitario operatore'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'DurataRisorsaOperatore', '[numeric](18, 6) NOT NULL' , '0', 'Durata risorsa + operatore'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Cd_xRDTipoValorizzazione_RisorsaOperatore', '[char](5) NULL', '', 'Tipo di valorizzazione risorsa + operatore'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov', 'FK_xRDTicketAttivitaMov_xRDTipoValorizzazione_RisorsaOperatore'
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_xRDTipoValorizzazione_RisorsaOperatore] FOREIGN KEY([Cd_xRDTipoValorizzazione_RisorsaOperatore])
		REFERENCES [dbo].[xRDTipoValorizzazione] ([Cd_xRDTipoValorizzazione])
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_xRDTipoValorizzazione_RisorsaOperatore]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'CostoUnRisorsaOperatore', '[numeric](18, 6) NULL', '0', 'Costo unitario risorsa + operatore'
		EXEC asp_du_DropColumn		'xRDTicketAttivitaMov', 'CostoTot'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'CostoTot', 'AS (CONVERT([numeric](18,6),([Durata] * [CostoUn]) + (IsNull(DurataOperatore, 0) * IsNull(CostoUnOperatore, 0)) + (IsNull(DurataRisorsaOperatore, 0) * IsNull(CostoUnRisorsaOperatore, 0)),(0)))', '', 'Costo totale'

		-- Tabella delle Rilevazioni di Produzione (xRDTicketAttivitaMovRL)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Durata', '[numeric](18, 8) NULL' , '', 'Durata operatore'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'DurataMKS', '[numeric](18, 8) NOT NULL' , '1', 'Durata operatore mks'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'DurataOperatore', '[numeric](18, 8) NULL' , '', 'Durata operatore'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'DurataOperatoreMKS', '[numeric](18, 8) NOT NULL' , '1', 'Durata operatore mks'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Cd_xRDTipoValorizzazione_Operatore', '[char](5) NULL', '', 'Tipo di valorizzazione operatore'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL', 'FK_xRDTicketAttivitaMovRL_xRDTipoValorizzazione_Operatore'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTipoValorizzazione_Operatore] FOREIGN KEY([Cd_xRDTipoValorizzazione_Operatore])
		REFERENCES [dbo].[xRDTipoValorizzazione] ([Cd_xRDTipoValorizzazione])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTipoValorizzazione_Operatore]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'DurataRisorsaOperatore', '[numeric](18, 8) NULL' , '', 'Durata risorsa + operatore'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'DurataRisorsaOperatoreMKS', '[numeric](18, 8) NOT NULL' , '1', 'Durata operatore mks'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Cd_xRDTipoValorizzazione_RisorsaOperatore', '[char](5) NULL', '', 'Tipo di valorizzazione risorsa + operatore'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL', 'FK_xRDTicketAttivitaMovRL_xRDTipoValorizzazione_RisorsaOperatore'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTipoValorizzazione_RisorsaOperatore] FOREIGN KEY([Cd_xRDTipoValorizzazione_RisorsaOperatore])
		REFERENCES [dbo].[xRDTipoValorizzazione] ([Cd_xRDTipoValorizzazione])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDTipoValorizzazione_RisorsaOperatore]

		/* Gestione Item */
		/* 19-12-2013 */
		-- Tabella delle preferenze e delle impostazioni (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviItem'   , '[bit] NOT NULL', '0', '0 - gestione item non attiva; 1 - gestione item attiva'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'GeneraTicket4Item', '[bit] NOT NULL', '0', '0 - non spezza i ticket di produzione per item; 1 - spezza i ticket di produzione per item'

		-- Sottopreventivo - Attività (xPreventivoFase)
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Cd_ARItem', '[varchar](20) NULL', '', 'Codice item (è un articolo fittizio)'
		EXEC asp_du_DropConstraint 'xPreventivoFase', 'FK_xPreventivoFase_ARItem'
		ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoFase_ARItem] FOREIGN KEY([Cd_ARItem])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [FK_xPreventivoFase_ARItem]
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'DescrizioneARItem', '[varchar](80) NULL', '', 'Descrizione item'

		-- Ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'Cd_ARItem', '[varchar](20) NULL', '', 'Codice item (è un articolo fittizio)'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_ARItem'
		ALTER TABLE [dbo].[xRDTicket] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicket_ARItem] FOREIGN KEY([Cd_ARItem])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [FK_xRDTicket_ARItem]
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'DescrizioneARItem', '[varchar](80) NULL', '', 'Descrizione item'

		-- Tabella Ticket Attività (xRDTicketAttivita)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Cd_ARItem', '[varchar](20) NULL', '', 'Codice item (è un articolo fittizio)'
		EXEC asp_du_DropConstraint 'xRDTicketAttivita', 'FK_xRDTicketAttivita_ARItem'
		ALTER TABLE [dbo].[xRDTicketAttivita] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketAttivita_ARItem] FOREIGN KEY([Cd_ARItem])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xRDTicketAttivita] CHECK CONSTRAINT [FK_xRDTicketAttivita_ARItem]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'DescrizioneARItem', '[varchar](80) NULL', '', 'Descrizione item'

		-- porto la versione a 1.56
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 56, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.57
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.56' begin
		select 'Applico aggiornamenti al database: 1.56->1.57'
		-- qui operazioni per l'aggiornamento DB da 1.56 a 1.57

		/* Ticket - Dettaglio Durata */
		/* 24-01-2014 */
		-- Allineo il Tipo Valorizzazione Costi per la Durata Unica con le Impostazioni di CCA
		EXEC('Declare @TipoValCosti Int
				Select @TipoValCosti = IsNull(TipoValCosti, 1) From xImpostazione
				Update PRAttivita Set xDUTipoValCosti = IsNull(@TipoValCosti, 1)')

		-- porto la versione a 1.57
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 57, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.58
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.57' begin
		select 'Applico aggiornamenti al database: 1.57->1.58'
		-- qui operazioni per l'aggiornamento DB da 1.57 a 1.58

		/* Ticket - Rileva */
		/* 06-03-2014 */
		-- Tabella Impostazioni CCA (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'RilevaTestRitardoAttiva', '[bit] NOT NULL'    , '0', '0 - controllo inserimento in ritardo rilevazioni di tipo apri\chiudi non attivo; 1 - controllo inserimento in ritardo rilevazioni di tipo apri\chiudi attivo'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'RilevaGiorniRitardoMax'	, '[int] NOT NULL'    , '0', 'Numero giorni di ritardo massimo consentiti'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'RilevaTestRitardoAzione', 'tinyint NOT NULL'  , '1', 'Azione da eseguire per le rilevazioni di tipo apri\chiudi quando inserite in ritardo: 1 - Nessun azione; 2 - Avvisa; 3 - Blocca'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'RilevaTestRitardoAvviso', '[varchar](60) NULL', ''	, 'Messaggio di avviso'
		-- Anagrafica Attività (PRAttivita)
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xRiferimentoUI', 'bit NOT NULL',	'0', '0 - attività senza specifica del riferimento in rileva; 1 - attività con specifica del riferimento in rileva'
		-- Tabella rilevazioni (xRDTicketAttivitaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Riferimento', '[varchar](80) NULL', '', 'Riferimento: gestito nelle righe provenienti da rileva'
		-- Tabella rilevazioni Rileva (xRDTicketAttivitaMovRL)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Riferimento', '[varchar](80) NULL', '', 'Riferimento: gestito da rileva'

		/* Preventivi - Gestione Coefficienti */
		/* 03-03-2014 */
		-- Tabella Impostazioni CCA (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'DecimaliCoeff'		, 'tinyint NOT NULL'    , '0', 'Numero di decimali per i coefficienti dei preventivi'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'EtichettaCoeff1'	, '[varchar](20) NULL'	, '' , 'Etichetta del coefficiente 1 nella maschera dei Preventivi\Materiali'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'EtichettaCoeff2'	, '[varchar](20) NULL'	, '' , 'Etichetta del coefficiente 2 nella maschera dei Preventivi\Materiali'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'EtichettaCoeff3'	, '[varchar](20) NULL'	, '' , 'Etichetta del coefficiente 3 nella maschera dei Preventivi\Materiali'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'EtichettaCoeff4'	, '[varchar](20) NULL'	, '' , 'Etichetta del coefficiente 4 nella maschera dei Preventivi\Materiali'

		-- porto la versione a 1.58
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 58, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.59
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.58' begin
		select 'Applico aggiornamenti al database: 1.58->1.59'
		-- qui operazioni per l'aggiornamento DB da 1.58 a 1.59

		EXEC asp_du_AddAlterColumn 'xImpostazione', 'AssistenzaDataRichiesta', '[bit] NOT NULL', '0', '0 - la data richiesta non è riportata in automatico nelle rilevazioni dei ticket di assistenza; 1 - la data richiesta è riportata in automatico nelle rilevazioni dei ticket di assistenza'

		-- porto la versione a 1.59
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 59, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.60
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.59' begin
		select 'Applico aggiornamenti al database: 1.59->1.60'
		-- qui operazioni per l'aggiornamento DB da 1.59 a 1.60

		/* Ticket - Analisi Disponibilità Operatori */
		/* 30-01-2014 */
		-- Tabella Ticket Attività Operatori (xRDTicketAttivitaOperatore)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Durata'			, '[numeric](18, 6) NOT NULL', '0', 'Durata attività assegnata all''operatore'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'DurataTrasferta'	, '[numeric](18, 6) NOT NULL', '0', 'Durata trasferta assegnata all''operatore'

		/* Allegati - Nuova gestione DMS */
		/* 03-06-2014 */
		Declare @Id_DMSClass1_Commesse   						As Int
		Declare @Id_DMSClass1_Contratti  						As Int
		Declare @Id_DMSClass1_Assistenza 						As Int
		Declare @Id_DMSClass1_Matricole  						As Int
		Declare @Id_DMSClass1_Impianti   						As Int
		Declare @Id_DMSClass2_Commesse_Preventivi				As Int
		Declare @Id_DMSClass2_Commesse_Sottopreventivi			As Int
		Declare @Id_DMSClass2_Commesse_Commesse					As Int
		Declare @Id_DMSClass2_Commesse_Sottocommesse			As Int
		Declare @Id_DMSClass2_Commesse_TicketProduzione			As Int
		Declare @Id_DMSClass2_Contratti_Contratti				As Int
		Declare @Id_DMSClass2_Assistenza_Preventivi				As Int
		Declare @Id_DMSClass2_Assistenza_Sottopreventivi		As Int
		Declare @Id_DMSClass2_Assistenza_TicketAssistenza		As Int
		Declare @Id_DMSClass2_Assistenza_InterventiProgrammati  As Int
		Declare @Id_DMSClass2_Matricole_Matricole				As Int
		Declare @Id_DMSClass2_Impianti_Impianti					As Int

		-- Tabella DMSClass1
		Insert Into DmsClass1 (Descrizione) Values ('Commesse')
		set @Id_DMSClass1_Commesse  = @@Identity

		Insert Into DmsClass1 (Descrizione) Values ('Contratti')
		set @Id_DMSClass1_Contratti  = @@Identity

		Insert Into DmsClass1 (Descrizione) Values ('Assistenza')
		set @Id_DMSClass1_Assistenza  = @@Identity

		Insert Into DmsClass1 (Descrizione) Values ('Matricole')
		set @Id_DMSClass1_Matricole  = @@Identity

		Insert Into DmsClass1 (Descrizione) Values ('Impianti')
		set @Id_DMSClass1_Impianti  = @@Identity

		-- Tabella DMSClass2
		-- x Commesse
		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Commesse  , 'Preventivi')
		set @Id_DMSClass2_Commesse_Preventivi  = @@Identity

		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Commesse  , 'Sottopreventivi')
		set @Id_DMSClass2_Commesse_Sottopreventivi  = @@Identity

		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Commesse  , 'Commesse')
		set @Id_DMSClass2_Commesse_Commesse  = @@Identity

		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Commesse  , 'Sottocommesse')
		set @Id_DMSClass2_Commesse_Sottocommesse  = @@Identity

		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Commesse  , 'Ticket di Produzione')
		set @Id_DMSClass2_Commesse_TicketProduzione  = @@Identity

		-- x Contratti
		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Contratti , 'Contratti')
		set @Id_DMSClass2_Contratti_Contratti  = @@Identity

		-- x Assistenza
		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Assistenza, 'Preventivi')
		set @Id_DMSClass2_Assistenza_Preventivi  = @@Identity

		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Assistenza, 'Sottopreventivi')
		set @Id_DMSClass2_Assistenza_Sottopreventivi  = @@Identity

		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Assistenza, 'Ticket di Assistenza')
		set @Id_DMSClass2_Assistenza_TicketAssistenza  = @@Identity

		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Assistenza, 'Interventi Programmati')
		set @Id_DMSClass2_Assistenza_InterventiProgrammati  = @@Identity

		-- x Matricole
		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Matricole , 'Matricole')
		set @Id_DMSClass2_Matricole_Matricole  = @@Identity

		-- x Impianti
		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Impianti  , 'Impianti')
		set @Id_DMSClass2_Impianti_Impianti  = @@Identity

		-- Tabella DMSMapExpressions
		Insert Into [DmsMapExpressions] ([EntityTable],[EntityId],[MasterTable],[MasterTableId],[Level1],[Level2]) Values ('xContratto'			, 'Cd_xContratto', Null, Null, Null, Null)
		Insert Into [DmsMapExpressions] ([EntityTable],[EntityId],[MasterTable],[MasterTableId],[Level1],[Level2]) Values ('xImpianto'			, 'Cd_xImpianto', Null, Null, Null, Null)
		Insert Into [DmsMapExpressions] ([EntityTable],[EntityId],[MasterTable],[MasterTableId],[Level1],[Level2]) Values ('xInterventoProg'	, 'Id_xInterventoProg', Null, Null, Null, Null)
		Insert Into [DmsMapExpressions] ([EntityTable],[EntityId],[MasterTable],[MasterTableId],[Level1],[Level2]) Values ('xMatricola'			, 'Id_xMatricola', Null, Null, Null, Null)
		Insert Into [DmsMapExpressions] ([EntityTable],[EntityId],[MasterTable],[MasterTableId],[Level1],[Level2]) Values ('xPreventivo'		, 'Cd_Preventivo', Null, Null, Null, Null)
		Insert Into [DmsMapExpressions] ([EntityTable],[EntityId],[MasterTable],[MasterTableId],[Level1],[Level2]) Values ('xPreventivoFamiglia', 'Cd_PreventivoFamiglia', Null, Null, Null, Null)
		Insert Into [DmsMapExpressions] ([EntityTable],[EntityId],[MasterTable],[MasterTableId],[Level1],[Level2]) Values ('xRDTicket'			, 'Id_xRDTicket', Null, Null, Null, Null)
																																																				 
		Update [DmsMapExpressions] Set Level1 = 'Case When Area = 1 Then ''C'' Else ''A'' End '				Where EntityTable = 'xPreventivo'									 
		Update [DmsMapExpressions] Set Level1 = 'Case When Area = 1 Then ''C'' Else ''A'' End '				Where EntityTable = 'xPreventivoFamiglia'							 
		Update [DmsMapExpressions] Set Level1 = 'Case When GestisciTicket = 0 Then ''C'' Else ''A'' End '	Where EntityTable = 'xRDTicket'							 
																																																				 
		-- Tabella DMSMapRules
		Insert Into DmsMapRules	([EntityTable],[Level],[Type],[Note],[Id_DmsClass1],[Id_DmsClass2],[DmsClass3],[Cd_DmsType],[EntityDescription])
			  Values ('xContratto', 0, '', 'Contratto', @Id_DMSClass1_Contratti, @Id_DMSClass2_Contratti_Contratti, '''''', '00', '''[Contratto] ''' + ' ' + '+' + ' ' + 'Descrizione')
		Insert Into DmsMapRules	([EntityTable],[Level],[Type],[Note],[Id_DmsClass1],[Id_DmsClass2],[DmsClass3],[Cd_DmsType],[EntityDescription])
			  Values ('xImpianto', 0, '', 'Impianto', @Id_DMSClass1_Impianti, @Id_DMSClass2_Impianti_Impianti, '''''', '00', '''[Impianto] ''' + ' ' + '+' + ' ' + 'Descrizione')
		Insert Into DmsMapRules	([EntityTable],[Level],[Type],[Note],[Id_DmsClass1],[Id_DmsClass2],[DmsClass3],[Cd_DmsType],[EntityDescription])
			  Values ('xInterventoProg', 0, '', 'Intervento Programmato', @Id_DMSClass1_Assistenza, @Id_DMSClass2_Assistenza_InterventiProgrammati, '''''', '00', '''[Intervento] ''' + ' ' + '+' + ' ' + 'Descrizione')
		Insert Into DmsMapRules	([EntityTable],[Level],[Type],[Note],[Id_DmsClass1],[Id_DmsClass2],[DmsClass3],[Cd_DmsType],[EntityDescription])
			  Values ('xMatricola', 0, '', 'Matricola', @Id_DMSClass1_Matricole, @Id_DMSClass2_Matricole_Matricole, '''''', '00', '''[Matricola] ''' + ' ' + '+' + ' ' + 'Descrizione')
		Insert Into DmsMapRules	([EntityTable],[Level],[Type],[Note],[Id_DmsClass1],[Id_DmsClass2],[DmsClass3],[Cd_DmsType],[EntityDescription])
			  Values ('xPreventivo', 0, '', 'Sottopreventivo', 0, 0, '''''', '00', '''[Sottopreventivo] ''' + ' ' + '+' + ' ' + 'Descrizione')
		Insert Into DmsMapRules (EntityTable, Level, Type, Note, Id_DmsClass1, Id_DmsClass2, DmsClass3, Cd_DmsType, EntityDescription)
			  Values ('xPreventivo', 1, 'C', 'Sottopreventivi Produzione', @Id_DMSClass1_Commesse, @Id_DMSClass2_Commesse_Sottopreventivi, Null, '00', Null)
		Insert Into DmsMapRules (EntityTable, Level, Type, Note, Id_DmsClass1, Id_DmsClass2, DmsClass3, Cd_DmsType, EntityDescription)
			  Values ('xPreventivo', 1, 'A', 'Sottopreventivi Assistenza', @Id_DMSClass1_Assistenza, @Id_DMSClass2_Assistenza_Sottopreventivi, Null, '00', Null)
		Insert Into DmsMapRules	([EntityTable],[Level],[Type],[Note],[Id_DmsClass1],[Id_DmsClass2],[DmsClass3],[Cd_DmsType],[EntityDescription])
			  Values ('xPreventivoFamiglia', 0, '', 'Preventivo', 0, 0, '''''', '00', '''[Preventivo] ''' + ' ' + '+' + ' ' + 'Descrizione')
		Insert into DmsMapRules (EntityTable, Level, Type, Note, Id_DmsClass1, Id_DmsClass2, DmsClass3, Cd_DmsType, EntityDescription)
			  Values ('xPreventivoFamiglia', 1, 'C', 'Preventivi Produzione', @Id_DMSClass1_Commesse, @Id_DMSClass2_Commesse_Preventivi, Null, '00', Null)
		Insert into DmsMapRules (EntityTable, Level, Type, Note, Id_DmsClass1, Id_DmsClass2, DmsClass3, Cd_DmsType, EntityDescription)
			  Values ('xPreventivoFamiglia', 1, 'A', 'Preventivi Assistenza', @Id_DMSClass1_Assistenza, @Id_DMSClass2_Assistenza_Preventivi, Null, '00', Null)
		Insert Into [DmsMapRules]	([EntityTable],[Level],[Type],[Note],[Id_DmsClass1],[Id_DmsClass2],[DmsClass3],[Cd_DmsType],[EntityDescription])
			  Values ('xRDTicket', 0, '', 'Ticket', 0, 0, '''''', '00', '''[Ticket] ''' + ' ' + '+' + ' ' + 'Descrizione')																																																		 
		Insert into DmsMapRules (EntityTable, Level, Type, Note, Id_DmsClass1, Id_DmsClass2, DmsClass3, Cd_DmsType, EntityDescription)
			  Values ('xRDTicket', 1, 'C', 'Ticket Produzione', @Id_DMSClass1_Commesse, @Id_DMSClass2_Commesse_TicketProduzione, Null, '00', Null)
		Insert into DmsMapRules (EntityTable, Level, Type, Note, Id_DmsClass1, Id_DmsClass2, DmsClass3, Cd_DmsType, EntityDescription)
			  Values ('xRDTicket', 1, 'A', 'Ticket Assistenza', @Id_DMSClass1_Assistenza, @Id_DMSClass2_Assistenza_TicketAssistenza, Null, '00', Null)

		Update DmsMapRules 
			Set Id_DmsClass1 = @Id_DMSClass1_Commesse, Id_DmsClass2 = @Id_DMSClass2_Commesse_Commesse
			Where EntityTable = 'DOCommessa' And Level = 1
			
		Update DmsMapRules 
			Set Id_DmsClass1 = @Id_DMSClass1_Commesse, Id_DmsClass2 = @Id_DMSClass2_Commesse_Sottocommesse
			Where EntityTable = 'DOSottocommessa' And Level = 1

		-- porto la versione a 1.60
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 60, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.61
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.60' begin
		select 'Applico aggiornamenti al database: 1.60->1.61'
		-- qui operazioni per l'aggiornamento DB da 1.60 a 1.61

		/* Ticket - Analisi Disponibilità Operatori */
		/* 10-06-2014 */
		-- Tabella Ticket Attività (xRDTicketAttivita)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'NumOrePrevInterventi', '[numeric](18, 6) NULL', '0', 'Durata interventi previsti'
		EXEC('Update TA
			Set TA.NumOrePrevInterventi = TAO.Durata 
			From xRDTicketAttivita TA Inner Join (
				Select Id_xRDTicketAttivita, SUM(Durata) As Durata From xRDTicketAttivitaOperatore Where Sospeso = 0 Group By Id_xRDTicketAttivita
			) TAO On TA.Id_xRDTicketAttivita = TAO.Id_xRDTicketAttivita')
		EXEC asp_du_DropColumn		'xRDTicketAttivita', 'NumOreDaGestire'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'NumOreDaGestire', 'AS (CONVERT([numeric](18,6), CASE WHEN NumOrePrev - NumOrePrevInterventi > 0 THEN NumOrePrev - NumOrePrevInterventi ELSE 0 END))', '', 'Durata da gestire'

		/* 02 Ticket - Miglioramento Prestazioni */
		/* 13-06-2014 */
		CREATE NONCLUSTERED INDEX [xIX_xRDTicketAttivitaOperatore_Id_xRDTicketAttivita_Cd_xOperatore] 
		ON [dbo].[xRDTicketAttivitaOperatore]([Id_xRDTicketAttivita] ASC, [Cd_xOperatore] ASC)
		INCLUDE ([Confermato]) 
		WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) 
		ON [PRIMARY]

		-- porto la versione a 1.61
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 61, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.62
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.61' begin
		select 'Applico aggiornamenti al database: 1.61->1.62'
		-- qui operazioni per l'aggiornamento DB da 1.61 a 1.62

		-- porto la versione a 1.62
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 62, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.63
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.62' begin
		select 'Applico aggiornamenti al database: 1.62->1.63'
		-- qui operazioni per l'aggiornamento DB da 1.62 a 1.63

		/* Anagrafica Zone - Attività e Risorse */
		/* 08-07-2014 */
		-- Tabella di legame Zone\Attività\Risorse (xCFZonaAttivita)
		IF dbo.afn_du_IsTable('xCFZonaAttivita') = 0
			EXEC asp_du_AddTable 'xCFZonaAttivita', 0, 'Tabella di legame Zone\Attività\Risorse'

		EXEC asp_du_AddAlterColumn 'xCFZonaAttivita', 'Cd_CFZona', '[char](3) NOT NULL', '', 'Zona'
		EXEC asp_du_DropConstraint 'xCFZonaAttivita', 'FK_xCFZonaAttivita_CFZona'
		ALTER TABLE [dbo].[xCFZonaAttivita] WITH CHECK ADD CONSTRAINT [FK_xCFZonaAttivita_CFZona] FOREIGN KEY([Cd_CFZona])
		REFERENCES [dbo].[CFZona] ([Cd_CFZona]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xCFZonaAttivita] CHECK CONSTRAINT [FK_xCFZonaAttivita_CFZona]
		EXEC asp_du_AddAlterColumn 'xCFZonaAttivita', 'Riga', '[smallint] NOT NULL', '0', 'Riga'
		EXEC asp_du_AddAlterColumn 'xCFZonaAttivita', 'Cd_PRAttivita', '[varchar](20) NOT NULL', '', 'Attività'
		EXEC asp_du_DropConstraint 'xCFZonaAttivita', 'FK_xCFZonaAttivita_PRAttivita'
		ALTER TABLE [dbo].[xCFZonaAttivita] WITH CHECK ADD CONSTRAINT [FK_xCFZonaAttivita_PRAttivita] FOREIGN KEY([Cd_PRAttivita])
		REFERENCES [dbo].[PRAttivita] ([Cd_PRAttivita])
		ALTER TABLE [dbo].[xCFZonaAttivita] CHECK CONSTRAINT [FK_xCFZonaAttivita_PRAttivita]
		EXEC asp_du_AddAlterColumn 'xCFZonaAttivita', 'Cd_PRRisorsa', '[varchar](20) NOT NULL', '', 'Risorsa'
		EXEC asp_du_DropConstraint 'xCFZonaAttivita', 'FK_xCFZonaAttivita_PRRisorsa'
		ALTER TABLE [dbo].[xCFZonaAttivita] WITH CHECK ADD CONSTRAINT [FK_xCFZonaAttivita_PRRisorsa] FOREIGN KEY([Cd_PRRisorsa])
		REFERENCES [dbo].[PRRisorsa] ([Cd_PRRisorsa])
		ALTER TABLE [dbo].[xCFZonaAttivita] CHECK CONSTRAINT [FK_xCFZonaAttivita_PRRisorsa]

		/* Interventi e Ticket - Numero Unità e Note */
		/* 08-07-2014 */
		-- Anagrafica Interventi Programmati (xInterventoProg)
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'NoteInterneInterventoProg', '[text] NULL', '', 'Note interne intervento programmato'
		-- Attività Interventi Programmati (xInterventoProgAttivita)
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'NumUnitaProduttive', '[int] NOT NULL', '1', 'Numero unità produttive'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'NoteAttivita', '[text] NULL', '', 'Note attività intervento programmato'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivita', 'NoteInterneAttivita', '[text] NULL', '', 'Note interne attività intervento programmato'
		-- Anagrafica Ticket (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'NoteInterneRDTicket', '[text] NULL', '', 'Note interne ticket'
		-- Attività Ticket (xRDTicketAttivita)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'NumUnitaProduttive', '[int] NOT NULL', '1', 'Numero unità produttive'

		-- porto la versione a 1.63
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 63, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.64
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.63' begin
		select 'Applico aggiornamenti al database: 1.63->1.64'
		-- qui operazioni per l'aggiornamento DB da 1.63 a 1.64

		/* Attività - Gestione MicroAttività */
		/* 16-07-2014 */
		-- Tabella MicroAttività per Attività (xPRAttivitaMicroAtt)
		IF dbo.afn_du_IsTable('xPRAttivitaMicroAtt') = 0
			EXEC asp_du_AddTable 'xPRAttivitaMicroAtt', 0, 'Tabella microattività per attività'

		EXEC asp_du_AddAlterColumn 'xPRAttivitaMicroAtt', 'Id_PRAttivita', '[int] NOT NULL', '', 'Identificativo attività'
		EXEC asp_du_DropConstraint 'xPRAttivitaMicroAtt', 'FK_xPRAttivitaMicroAtt_PRAttivita'
		ALTER TABLE [dbo].[xPRAttivitaMicroAtt] WITH CHECK ADD CONSTRAINT [FK_xPRAttivitaMicroAtt_PRAttivita] FOREIGN KEY([Id_PRAttivita])
		REFERENCES [dbo].[PrAttivita] ([Id_PrAttivita]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xPRAttivitaMicroAtt] CHECK CONSTRAINT [FK_xPRAttivitaMicroAtt_PRAttivita]
		EXEC asp_du_AddAlterColumn 'xPRAttivitaMicroAtt', 'Cd_PRAttivita', '[varchar](20) NOT NULL', '', 'Micro-attività'
		EXEC asp_du_DropConstraint 'xPRAttivitaMicroAtt', 'FK_xPRAttivitaMicroAtt_PRAttivitaMicroAtt'
		ALTER TABLE [dbo].[xPRAttivitaMicroAtt] WITH CHECK ADD CONSTRAINT [FK_xPRAttivitaMicroAtt_PRAttivitaMicroAtt] FOREIGN KEY([Cd_PRAttivita])
		REFERENCES [dbo].[PrAttivita] ([Cd_PrAttivita])
		ALTER TABLE [dbo].[xPRAttivitaMicroAtt] CHECK CONSTRAINT [FK_xPRAttivitaMicroAtt_PRAttivitaMicroAtt]
		EXEC asp_du_AddAlterColumn 'xPRAttivitaMicroAtt', 'Descrizione', '[varchar](80) NULL',  '', 'Descrizione microattività'
		EXEC asp_du_AddAlterColumn 'xPRAttivitaMicroAtt', 'Riga', '[smallint] NOT NULL', '0', 'Riga'

		-- Tabella MicroAttività per Attività del Ticket (xRDTicketAttivitaMicroAtt)
		IF dbo.afn_du_IsTable('xRDTicketAttivitaMicroAtt') = 0
			EXEC asp_du_AddTable 'xRDTicketAttivitaMicroAtt', 0, 'Tabella microattività per attività'

		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMicroAtt', 'Id_xRDTicketAttivita', '[int] NOT NULL', '', 'Identificativo attività ticket'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMicroAtt', 'FK_xRDTicketAttivitaMicroAtt_xRDTicketAttivita'
		ALTER TABLE [dbo].[xRDTicketAttivitaMicroAtt] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMicroAtt_xRDTicketAttivita] FOREIGN KEY([Id_xRDTicketAttivita])
		REFERENCES [dbo].[xRDTicketAttivita] ([Id_xRDTicketAttivita]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xRDTicketAttivitaMicroAtt] CHECK CONSTRAINT [FK_xRDTicketAttivitaMicroAtt_xRDTicketAttivita]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMicroAtt', 'Cd_PRAttivita', '[varchar](20) NOT NULL', '', 'Micro-attività'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMicroAtt', 'FK_xRDTicketAttivitaMicroAtt_PRAttivitaMicroAtt'
		ALTER TABLE [dbo].[xRDTicketAttivitaMicroAtt] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMicroAtt_PRAttivitaMicroAtt] FOREIGN KEY([Cd_PRAttivita])
		REFERENCES [dbo].[PrAttivita] ([Cd_PrAttivita])
		ALTER TABLE [dbo].[xRDTicketAttivitaMicroAtt] CHECK CONSTRAINT [FK_xRDTicketAttivitaMicroAtt_PRAttivitaMicroAtt]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMicroAtt', 'Descrizione', '[varchar](80) NULL', '' , 'Descrizione microattività'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMicroAtt', 'Iniziata'   , '[bit] NOT NULL'	 , '0', '0 - microattività non iniziata; 1 - microattività iniziata'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMicroAtt', 'Eseguita'   , '[bit] NOT NULL'	 , '0', '0 - microattività non eseguita; 1 - microattività eseguita'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMicroAtt', 'DataEsecuzione', '[smalldatetime] NULL', '', 'Data esecuzione microattività'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMicroAtt', 'Cd_xOperatore'	, '[varchar](20) NULL'  , '', 'Codice operatore che ha eseguito la microattività'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMicroAtt', 'FK_xRDTicketAttivitaMicroAtt_xOperatore'
		ALTER TABLE [dbo].[xRDTicketAttivitaMicroAtt] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMicroAtt_xOperatore] FOREIGN KEY([Cd_xOperatore])
		REFERENCES [dbo].[xOperatore] ([Cd_xOperatore])
		ALTER TABLE [dbo].[xRDTicketAttivitaMicroAtt] CHECK CONSTRAINT [FK_xRDTicketAttivitaMicroAtt_xOperatore]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMicroAtt', 'Riga'		 , '[smallint] NOT NULL', '0', 'Riga'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMicroAtt', 'RigaPadre', '[smallint] NULL'		, '' , 'Riga dell'' associazione padre'

		-- Tabella MicroAttività per Attività dell'Intervento Programmato (xInterventoProgAttivitaMicroAtt)
		IF dbo.afn_du_IsTable('xInterventoProgAttivitaMicroAtt') = 0
			EXEC asp_du_AddTable 'xInterventoProgAttivitaMicroAtt', 0, 'Tabella microattività per attività'

		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivitaMicroAtt', 'Id_xInterventoProgAttivita', '[int] NOT NULL', '', 'Identificativo attività ticket'
		EXEC asp_du_DropConstraint 'xInterventoProgAttivitaMicroAtt', 'FK_xInterventoProgAttivitaMicroAtt_xInterventoProgAttivita'
		ALTER TABLE [dbo].[xInterventoProgAttivitaMicroAtt] WITH CHECK ADD CONSTRAINT [FK_xInterventoProgAttivitaMicroAtt_xInterventoProgAttivita] FOREIGN KEY([Id_xInterventoProgAttivita])
		REFERENCES [dbo].[xInterventoProgAttivita] ([Id_xInterventoProgAttivita]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xInterventoProgAttivitaMicroAtt] CHECK CONSTRAINT [FK_xInterventoProgAttivitaMicroAtt_xInterventoProgAttivita]
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivitaMicroAtt', 'Cd_PRAttivita', '[varchar](20) NOT NULL', '', 'Micro-attività'
		EXEC asp_du_DropConstraint 'xInterventoProgAttivitaMicroAtt', 'FK_xInterventoProgAttivitaMicroAtt_PRAttivitaMicroAtt'
		ALTER TABLE [dbo].[xInterventoProgAttivitaMicroAtt] WITH CHECK ADD CONSTRAINT [FK_xInterventoProgAttivitaMicroAtt_PRAttivitaMicroAtt] FOREIGN KEY([Cd_PRAttivita])
		REFERENCES [dbo].[PrAttivita] ([Cd_PrAttivita])
		ALTER TABLE [dbo].[xInterventoProgAttivitaMicroAtt] CHECK CONSTRAINT [FK_xInterventoProgAttivitaMicroAtt_PRAttivitaMicroAtt]
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivitaMicroAtt', 'Descrizione', '[varchar](80) NULL', '' , 'Descrizione microattività'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivitaMicroAtt', 'Riga'		 , '[smallint] NOT NULL', '0', 'Riga'
		EXEC asp_du_AddAlterColumn 'xInterventoProgAttivitaMicroAtt', 'RigaPadre', '[smallint] NULL'		, '' , 'Riga dell'' associazione padre'

		-- porto la versione a 1.64
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 64, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.65
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.64' begin
		select 'Applico aggiornamenti al database: 1.64->1.65'
		-- qui operazioni per l'aggiornamento DB da 1.64 a 1.65

		/* Sottopreventivi - Sviluppo Costi per Date di Competenza */
		/* 03-09-2014 */
		-- Tabella di sviluppo Costi per i Gruppi di Materiale (xPreventivoGruppoSviluppo)
		IF dbo.afn_du_IsTable('xPreventivoGruppoSviluppo') = 0
			EXEC asp_du_AddTable 'xPreventivoGruppoSviluppo', 0, 'Tabella di sviluppo Costi per i Gruppi di Materiale'

		EXEC asp_du_AddAlterColumn 'xPreventivoGruppoSviluppo', 'Id_PreventivoGruppo', '[int] NOT NULL', '', 'Identificativo gruppo di materiali'
		EXEC asp_du_DropConstraint 'xPreventivoGruppoSviluppo', 'FK_xPreventivoGruppoSviluppo_PreventivoGruppo'
		ALTER TABLE [dbo].[xPreventivoGruppoSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoGruppoSviluppo_PreventivoGruppo] FOREIGN KEY([Id_PreventivoGruppo])
		REFERENCES [dbo].[xPreventivoGruppo] ([Id_PreventivoGruppo]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xPreventivoGruppoSviluppo] CHECK CONSTRAINT [FK_xPreventivoGruppoSviluppo_PreventivoGruppo]
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppoSviluppo', 'Riga', '[smallint] NOT NULL', '0', 'Riga'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppoSviluppo', 'RigaPadre', '[smallint] NULL', '' , 'Riga dell'' associazione padre'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppoSviluppo', 'DataCompetenza', '[smalldatetime] NOT NULL', '''19000101''', 'Data inizio competenza dell''importo'
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppoSviluppo', 'CostoV', '[numeric](18, 6) NOT NULL', '0', 'Costo di competenza in valuta'

		-- Tabella di sviluppo Costi per le Attività (xPreventivoFaseSviluppo)
		IF dbo.afn_du_IsTable('xPreventivoFaseSviluppo') = 0
			EXEC asp_du_AddTable 'xPreventivoFaseSviluppo', 0, 'Tabella di sviluppo Costi per le Attività'

		EXEC asp_du_AddAlterColumn 'xPreventivoFaseSviluppo', 'Id_PreventivoFase', '[int] NOT NULL', '', 'Identificativo attività'
		EXEC asp_du_DropConstraint 'xPreventivoFaseSviluppo', 'FK_xPreventivoFaseSviluppo_PreventivoFase'
		ALTER TABLE [dbo].[xPreventivoFaseSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoFaseSviluppo_PreventivoFase] FOREIGN KEY([Id_PreventivoFase])
		REFERENCES [dbo].[xPreventivoFase] ([Id_PreventivoFase]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xPreventivoFaseSviluppo] CHECK CONSTRAINT [FK_xPreventivoFaseSviluppo_PreventivoFase]
		EXEC asp_du_AddAlterColumn 'xPreventivoFaseSviluppo', 'Riga', '[smallint] NOT NULL', '0', 'Riga'
		EXEC asp_du_AddAlterColumn 'xPreventivoFaseSviluppo', 'RigaPadre', '[smallint] NULL', '' , 'Riga dell'' associazione padre'
		EXEC asp_du_AddAlterColumn 'xPreventivoFaseSviluppo', 'DataCompetenza', '[smalldatetime] NOT NULL', '''19000101''', 'Data inizio competenza dell''importo'
		EXEC asp_du_AddAlterColumn 'xPreventivoFaseSviluppo', 'CostoV', '[numeric](18, 6) NOT NULL', '0', 'Costo di competenza in valuta'

		-- Aggiustamento campo Sequenza nei Gruppi di Materiale
		Declare @Id_Preventivo As Int

		DECLARE curPreventivo CURSOR FAST_FORWARD FOR
			Select Distinct Id_Preventivo
			From xPreventivoGruppo

		OPEN curPreventivo
		FETCH NEXT FROM curPreventivo INTO @Id_Preventivo
		WHILE @@FETCH_STATUS = 0 BEGIN

			-- Con appoggio su tabella temporanea (per la funzione Identity(Int,1,1)) sistema i numeri di riga
			Select   Identity(Int,1,1) As RigaNew, Id_PreventivoGruppo + 0 As Id_PreventivoGruppo		-- + 0 xché altrimenti "Cannot add identity column, using the SELECT INTO statement, to table '#RigheNewNum', which already has column 'Id_xPreventivoGruppo' that inherits the identity property."
			Into     #RigheNewNum
			From     xPreventivoGruppo
			Where    Id_Preventivo = @Id_Preventivo
			Order By	Sequenza, Id_PreventivoGruppo

			Update R Set R.Sequenza = N.RigaNew
			From xPreventivoGruppo R Join #RigheNewNum N On R.Id_PreventivoGruppo = N.Id_PreventivoGruppo
			Where R.Sequenza != N.RigaNew

			Drop Table #RigheNewNum

			FETCH NEXT FROM curPreventivo INTO @Id_Preventivo
		END -- curPreventivo FETCH
		CLOSE curPreventivo
		DEALLOCATE curPreventivo

		-- porto la versione a 1.65
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 65, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.66
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.65' begin
		select 'Applico aggiornamenti al database: 1.65->1.66'
		-- qui operazioni per l'aggiornamento DB da 1.65 a 1.66

		/* Ticket - Modifiche alla griglia Operatori Abilitati / Interventi Previsti */
		/* 30-09-2014 */
		-- Tabella degli Operatori Abilitati / Interventi Previsti (xRDTicketAttivitaOperatore)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Pernotto', '[bit] NOT NULL', '0', '0 - non considera pernotto ; 1 - considera pernotto'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'RigaDuplicata', '[smallint] NULL',  '', 'Riga operatore duplicata perché riguarda lo stesso intervento'

		/* Gestione Automezzi */
		/* 30-09-2014 */
		-- Anagrafica Matricole (xMatricola)
		EXEC asp_du_AddAlterColumn 'xMatricola', 'Automezzo', '[bit] NOT NULL', '0', '0 - non è un automezzo per interventi; 1 - è un automezzo per interventi'

		-- Tabella degli Operatori Abilitati / Interventi Previsti (xRDTicketAttivitaOperatore)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'CD_AR', 'varchar(20) NULL', '', 'Codice articolo legato all''automezzo'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaOperatore', 'FK_xRDTicketAttivitaOperatore_AR'
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketAttivitaOperatore_AR] FOREIGN KEY([CD_AR])
		REFERENCES [dbo].[AR] ([CD_AR])
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] CHECK CONSTRAINT [FK_xRDTicketAttivitaOperatore_AR]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Automezzo per interventi'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaOperatore', 'FK_xRDTicketAttivitaOperatore_xMatricola'
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaOperatore_xMatricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xRDTicketAttivitaOperatore] CHECK CONSTRAINT [FK_xRDTicketAttivitaOperatore_xMatricola]

		-- Tabella delle Rilevazioni Attività (xRDTicketAttivitaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'CD_AR', 'varchar(20) NULL', '', 'Codice articolo legato all''automezzo'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov', 'FK_xRDTicketAttivitaMov_AR'
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_AR] FOREIGN KEY([CD_AR])
		REFERENCES [dbo].[AR] ([CD_AR])
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_AR]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Automezzo per interventi'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov', 'FK_xRDTicketAttivitaMov_xMatricola'
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_xMatricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xRDTicketAttivitaMov] CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_xMatricola]

		/* Preventivi - Sviluppo Costi */
		/* 02-10-2014 */
		-- Tabella dei Gruppi Materiale nei Sottopreventivi (xPreventivoGruppo)
		EXEC asp_du_AddAlterColumn 'xPreventivoGruppo', 'Sviluppo', '[bit] NOT NULL', '0', '0 - sviluppo costi non effettuato; 1 - sviluppo costi effettuato'

		-- Tabella delle Attivià nei Sottopreventivi (xPreventivoFase)
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'Sviluppo', '[bit] NOT NULL', '0', '0 - sviluppo costi non effettuato; 1 - sviluppo costi effettuato'

		-- porto la versione a 1.66
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 66, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.67
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.66' begin
		select 'Applico aggiornamenti al database: 1.66->1.67'
		-- qui operazioni per l'aggiornamento DB da 1.66 a 1.67
		
		-- Aggiornamento Reports
		Update ReportAll 
		 Set Tipo = 'xRDAnalisi'
		 Where Ud_Report IN ('21A64B10-D38C-4CB1-85B2-1623E3C937CF',
				'9D13F584-3959-4427-893F-9D8BA63C9A35',
				'F9796307-71C2-496F-B5E5-96AE80339DED',
				'A22EAF66-854F-47A4-B61C-16145037EBC9',
				'21A05BDD-B56C-4092-AFE0-2828C7E10E3E',
				'3D2CE3B5-9AAC-4EE9-99FD-DF7FB82F6A88',
				'6CE4A2FC-3026-4946-A11A-22CC9F2BAF52',
				'948AA17D-F98F-4EF0-B266-D19EE5226EE8',
				'695160BE-1C1D-48C2-AC47-F6170486EA63',
				'70BFAC5E-5A43-4739-ACDF-FD71274B2D7D',
				'B0929848-D9B6-41A2-AED4-DA5F3CDD1BC4',
				'63EB5A0D-D4E4-4F24-B233-F92413B1BD89',
				'78E01971-0E6D-4749-947F-42F93B1776B9',
				'799B2321-8D0A-488C-A295-22F4E8D9CB45',
				'FA6E733A-7A50-42E3-BD32-054941907882',
				'9CA554B3-3FD8-4B52-8998-C33032D3AEF0',
				'C2459CAA-7BA6-4A8A-803D-ECF9775429CB')

		-- porto la versione a 1.67
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 67, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.68
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.67' begin
		select 'Applico aggiornamenti al database: 1.67->1.68'
		-- qui operazioni per l'aggiornamento DB da 1.67 a 1.68
		
		-- Aggiornamento movimenti di tipo Spesa nei Ticket
		Update TMSM
			Set TMSM.Cd_AR = S.Cd_AR
			From xRDTicketMaterialeSpesaMov TMSM Inner Join xSpesa S On TMSM.Cd_xSpesa = S.Cd_xSpesa
			Where TMSM.Cd_AR Is Null
		
		/* Ticket - Note Attività Operatore e view Interventi */
		/* 02-12-2014 */
		-- Tabella degli Operatori abilitati per le Attività dei Ticket (xRDTicketAttivitaOperatore)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaOperatore', 'NoteAttivitaOperatore', '[text] NULL', '', 'Note dell''operatore associato all''attività nel ticket'

		/* Ticket Attività - Interventi Previsti e Ore Da Gestire */
		/* 02-12-2014 */
		-- Tabella Attività del Ticket (xRDTicketAttivita)
		EXEC asp_du_DropColumn 'xRDTicketAttivita', 'NumOrePrevInterventi'
		EXEC asp_du_DropColumn 'xRDTicketAttivita', 'NumOreDaGestire'

		-- porto la versione a 1.68
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 68, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.69
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.68' begin
		select 'Applico aggiornamenti al database: 1.68->1.69'
		-- qui operazioni per l'aggiornamento DB da 1.68 a 1.69
		
		-- porto la versione a 1.69
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 69, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.70
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.69' begin
		select 'Applico aggiornamenti al database: 1.69->1.70'
		-- qui operazioni per l'aggiornamento DB da 1.69 a 1.70

		/* Interventi Programmati - Giorni Anticipo Pianificazione */
		/* 09-03-2015 */
		-- Tabella degli Interventi Programmati (xInterventoProg)
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'GiorniAnticipoPianificazione', '[int] NOT NULL', '0', 'Giorni di anticipo per la pianificazione'
		
		-- porto la versione a 1.70
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 70, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.71
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.70' begin
		select 'Applico aggiornamenti al database: 1.70->1.71'
		-- qui operazioni per l'aggiornamento DB da 1.70 a 1.71

		-- porto la versione a 1.71
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 71, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.72
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.71' begin
		select 'Applico aggiornamenti al database: 1.71->1.72'
		-- qui operazioni per l'aggiornamento DB da 1.71 a 1.72

		-- porto la versione a 1.72
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 72, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.73
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.72' begin
		select 'Applico aggiornamenti al database: 1.72->1.73'
		-- qui operazioni per l'aggiornamento DB da 1.72 a 1.73

		/* Gestione Preventivi - Tipo Sottopreventivo */
		/* 04-05-2015 */
		-- Tabella dei Sottopreventivi (xPreventivo)
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Cd_xDOSottoCommessaTipo', 'char(3) NULL', '', 'Tipo sottopreventivo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_Cd_xDOSottoCommessaTipo'
		ALTER TABLE xPreventivo WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_Cd_xDOSottoCommessaTipo] FOREIGN KEY([Cd_xDOSottoCommessaTipo])
		REFERENCES [dbo].[xDOSottoCommessaTipo] ([Cd_xDOSottoCommessaTipo]) NOT FOR REPLICATION 
		ALTER TABLE xPreventivo CHECK CONSTRAINT [FK_xPreventivo_Cd_xDOSottoCommessaTipo]

		-- porto la versione a 1.73
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 73, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.74
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.73' begin
		select 'Applico aggiornamenti al database: 1.73->1.74'
		-- qui operazioni per l'aggiornamento DB da 1.73 a 1.74

		-- porto la versione a 1.74
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 74, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.75
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.74' begin
		select 'Applico aggiornamenti al database: 1.74->1.75'
		-- qui operazioni per l'aggiornamento DB da 1.74 a 1.75

		/* Commesse - selezione Sottocommessa nei Documenti */
		/* 29-05-2015 */
		-- tabella delle Impostazioni (xImpostazione)
		EXEC asp_du_AddAlterColumn	'xImpostazione' , 'DOCommessaCliente', 'bit Not Null', '1', '0 - commessa libera, 1 - solo commesse del cliente'

		/* MultiMatricola - Dismissione - Sostituzione - Import Contratti */
		/* 11-09-2015 */
		-- interventi programmati (xInterventoProg)
		EXEC asp_du_AddAlterColumn 'xInterventoProg', 'MatricoleTutte', '[bit] NOT NULL', '0', '0 - le matricole vanno specificate; 1 - include tutte le matricole dell''impianto o del cliente/sede'

		-- ticket di assistenza (xRDTicket)
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'GestioneMatricola', '[char](1) NULL', '', 'Modalità di gestione della matricola (M - mono-matricola; U - matricole uguali per tutte le attività; D - matricole diverse per le attività)'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'CopiaMatricola', '[bit] NOT NULL', '0', '0 - non vengono copiate in automatico le matricole da un''attività alla successiva; 1 - vengono copiate in automatico le matricole da un''attività alla successiva'
		EXEC asp_du_AddAlterColumn 'xRDTicket', 'CopiaMatricolaDaAttivita', '[bit] NOT NULL', '0', '0 - non vengono copiate in automatico le matricole dell''attività nella rilevazione; 1 - vengono copiate in automatico le matricole dell''attività nella rilevazione'

		EXEC('Update xRDTicket Set GestioneMatricola = ''M'' Where GestisciTicket = 1') -- default per i ticket di assistenza presenti al momento dell'aggiornamento

		-- nuova tabella delle matricole associate alle attività del ticket (xRDTicketAttivitaMatricola)
		IF dbo.afn_du_IsTable('xRDTicketAttivitaMatricola') = 0
			EXEC asp_du_AddTable 'xRDTicketAttivitaMatricola', 0, 'Matricole associate alle attività del ticket'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'Id_xRDTicketAttivita', '[int] NOT NULL', '', 'Identificativo attività del ticket'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMatricola', 'FK_xRDTicketAttivitaMatricola_xRDTicketAttivita'
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMatricola_xRDTicketAttivita] FOREIGN KEY([Id_xRDTicketAttivita])
		REFERENCES [dbo].[xRDTicketAttivita] ([Id_xRDTicketAttivita]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMatricola_xRDTicketAttivita]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'Cd_AR', '[varchar](20) NULL', '', 'Articolo intervento'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMatricola', 'FK_xRDTicketAttivitaMatricola_AR'
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMatricola_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMatricola_AR]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Matricola intervento'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMatricola', 'FK_xRDTicketAttivitaMatricola_xMatricola'
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMatricola_xMatricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMatricola_xMatricola]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'Riga', '[smallint] NOT NULL', '0', 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'RigaPadre', '[smallint] NULL', '', 'Numero di riga dell''associazione padre'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'Manutenuta', '[bit] NOT NULL', '0', '0 - matricola ancora da manutenere; 1 - matricola manutenuta'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'Cd_AR_Sub', '[varchar](20) NULL', '', 'Articolo della matricola sostitutiva'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMatricola', 'FK_xRDTicketAttivitaMatricola_AR_Sub'
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMatricola_AR_Sub] FOREIGN KEY([Cd_AR_Sub])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMatricola_AR_Sub]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'Cd_xMatricola_Sub', '[varchar](40) NULL', '', 'Matricola sostitutiva'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMatricola', 'FK_xRDTicketAttivitaMatricola_xMatricola_Sub'
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMatricola_xMatricola_Sub] FOREIGN KEY([Cd_AR_Sub], [Cd_xMatricola_Sub])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xRDTicketAttivitaMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMatricola_xMatricola_Sub]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMatricola', 'DataManutenzione', '[smalldatetime] NULL', '', 'Data / ora della manutenzione'

		-- rilevazioni delle attività del ticket (xRDTicketAttivitaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'MatricoleBit', '[bit] NOT NULL', '0', '0 - nessuna matricola elencata; 1 - con matricole elencate'

		-- nuova tabella delle matricole associate alle rilevazioni delle attività del ticket (xRDTicketAttivitaMovMatricola)
		IF dbo.afn_du_IsTable('xRDTicketAttivitaMovMatricola') = 0
			EXEC asp_du_AddTable 'xRDTicketAttivitaMovMatricola', 0, 'Matricole associate alle rilevazioni delle attività del ticket'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovMatricola', 'Id_xRDTicketAttivitaMov', '[int] NOT NULL', '', 'Identificativo rilevazione dell''attività del ticket'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovMatricola', 'FK_xRDTicketAttivitaMovMatricola_xRDTicketAttivitaMov'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovMatricola_xRDTicketAttivitaMov] FOREIGN KEY([Id_xRDTicketAttivitaMov])
		REFERENCES [dbo].[xRDTicketAttivitaMov] ([Id_xRDTicketAttivitaMov]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xRDTicketAttivitaMovMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovMatricola_xRDTicketAttivitaMov]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovMatricola', 'Cd_AR', '[varchar](20) NULL', '', 'Articolo intervento'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovMatricola', 'FK_xRDTicketAttivitaMovMatricola_AR'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovMatricola_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovMatricola_AR]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovMatricola', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Matricola intervento'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovMatricola', 'FK_xRDTicketAttivitaMovMatricola_xMatricola'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovMatricola_xMatricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovMatricola_xMatricola]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovMatricola', 'Riga', '[smallint] NOT NULL', '0', 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovMatricola', 'RigaPadre', '[smallint] NULL', '', 'Numero di riga dell''associazione padre'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovMatricola', 'RigaNonno', '[smallint] NULL', '', 'Numero di riga dell''associazione padre con l''associazione padre'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovMatricola', 'Dismissione', '[bit] NOT NULL', '0', '0 - matricola ancora valida; 1 - matricola dismessa'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovMatricola', 'Cd_AR_Sub', '[varchar](20) NULL', '', 'Articolo della matricola sostitutiva'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovMatricola', 'FK_xRDTicketAttivitaMovMatricola_AR_Sub'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovMatricola_AR_Sub] FOREIGN KEY([Cd_AR_Sub])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovMatricola_AR_Sub]
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovMatricola', 'Cd_xMatricola_Sub', '[varchar](40) NULL', '', 'Matricola sostitutiva'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovMatricola', 'FK_xRDTicketAttivitaMovMatricola_xMatricola_Sub'
		ALTER TABLE [dbo].[xRDTicketAttivitaMovMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovMatricola_xMatricola_Sub] FOREIGN KEY([Cd_AR_Sub], [Cd_xMatricola_Sub])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xRDTicketAttivitaMovMatricola] CHECK CONSTRAINT [FK_xRDTicketAttivitaMovMatricola_xMatricola_Sub]

		-- nuova tabella delle matricole normalizzate e associate alle rilevazioni tempi normalizzate per l'import (xRDImportMatricola)
		IF dbo.afn_du_IsTable('xRDImportMatricola') = 0
			EXEC asp_du_AddTable 'xRDImportMatricola', 0, 'Matricole associate alle righe di rilevazione tempi normalizzate'
		EXEC asp_du_AddAlterColumn 'xRDImportMatricola', 'Id_xRDImport', '[int] NOT NULL', '', 'Identificativo riga rilevazione tempi normalizzata'
		EXEC asp_du_DropConstraint 'xRDImportMatricola', 'FK_xRDImportMatricola_xRDImport'
		ALTER TABLE [dbo].[xRDImportMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDImportMatricola_xRDImport] FOREIGN KEY([Id_xRDImport])
		REFERENCES [dbo].[xRDImport] ([Id_xRDImport]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xRDImportMatricola] CHECK CONSTRAINT [FK_xRDImportMatricola_xRDImport]
		EXEC asp_du_AddAlterColumn 'xRDImportMatricola', 'Cd_AR', '[varchar](20) NULL', '', 'Articolo intervento'
		EXEC asp_du_DropConstraint 'xRDImportMatricola', 'FK_xRDImportMatricola_AR'
		ALTER TABLE [dbo].[xRDImportMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDImportMatricola_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xRDImportMatricola] CHECK CONSTRAINT [FK_xRDImportMatricola_AR]
		EXEC asp_du_AddAlterColumn 'xRDImportMatricola', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Matricola intervento'
		EXEC asp_du_DropConstraint 'xRDImportMatricola', 'FK_xRDImportMatricola_xMatricola'
		ALTER TABLE [dbo].[xRDImportMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDImportMatricola_xMatricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xRDImportMatricola] CHECK CONSTRAINT [FK_xRDImportMatricola_xMatricola]
		EXEC asp_du_AddAlterColumn 'xRDImportMatricola', 'Riga', '[smallint] NOT NULL', '0', 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xRDImportMatricola', 'Dismissione', '[bit] NOT NULL', '0', '0 - matricola ancora valida; 1 - matricola dismessa'
		EXEC asp_du_AddAlterColumn 'xRDImportMatricola', 'Cd_AR_Sub', '[varchar](20) NULL', '', 'Articolo della matricola sostitutiva'
		EXEC asp_du_DropConstraint 'xRDImportMatricola', 'FK_xRDImportMatricola_AR_Sub'
		ALTER TABLE [dbo].[xRDImportMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDImportMatricola_AR_Sub] FOREIGN KEY([Cd_AR_Sub])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xRDImportMatricola] CHECK CONSTRAINT [FK_xRDImportMatricola_AR_Sub]
		EXEC asp_du_AddAlterColumn 'xRDImportMatricola', 'Cd_xMatricola_Sub', '[varchar](40) NULL', '', 'Matricola sostitutiva'
		EXEC asp_du_DropConstraint 'xRDImportMatricola', 'FK_xRDImportMatricola_xMatricola_Sub'
		ALTER TABLE [dbo].[xRDImportMatricola] WITH CHECK ADD CONSTRAINT [FK_xRDImportMatricola_xMatricola_Sub] FOREIGN KEY([Cd_AR_Sub], [Cd_xMatricola_Sub])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xRDImportMatricola] CHECK CONSTRAINT [FK_xRDImportMatricola_xMatricola_Sub]

		-- contratti (xContratto)
		EXEC asp_du_AddAlterColumn 'xContratto', 'DaRicalcolare', '[bit] NOT NULL', '0', '0 - non necessita di un ricalcolo degli importi e delle scadenze; 1 - necessita di un ricalcolo degli importi e delle scadenze in presenza di matricole dismesse'

		-- tabella delle matricole associate al contratto (xContrattoMatricola)
		EXEC asp_du_AddAlterColumn 'xContrattoMatricola', 'Id_xContrattoMatricola_Sostituisce', '[int] NULL', '', 'Identificativo matricola sostituita'
		EXEC asp_du_DropConstraint 'xContrattoMatricola', 'FK_xContrattoMatricola_xContrattoMatricola_Sostituisce'
		ALTER TABLE [dbo].[xContrattoMatricola] WITH CHECK ADD CONSTRAINT [FK_xContrattoMatricola_xContrattoMatricola_Sostituisce] FOREIGN KEY([Id_xContrattoMatricola_Sostituisce])
		REFERENCES [dbo].[xContrattoMatricola] ([Id_xContrattoMatricola])
		ALTER TABLE [dbo].[xContrattoMatricola] CHECK CONSTRAINT [FK_xContrattoMatricola_xContrattoMatricola_Sostituisce]

		-- matricole (xMatricola)
		EXEC asp_du_AddAlterColumn 'xMatricola', 'DaInserireContratto', '[bit] NOT NULL', '0', '0 - non necessita di essere inserita in un contratto; 1 - necessita di essere inserita in un contratto'

		-- nuova anagrafica tipologie import contratti (tabella xContrattoImportTipo)
		IF dbo.afn_du_IsTable('xContrattoImportTipo') = 0
			EXEC asp_du_AddTable 'xContrattoImportTipo', 10, 'Anagrafica tipologie import contratti'
		EXEC asp_du_AddAlterColumnComment 'xContrattoImportTipo', 'Id_xContrattoImportTipo'		, 'Identificativo tipo import'
		EXEC asp_du_AddAlterColumnComment 'xContrattoImportTipo', 'Cd_xContrattoImportTipo'		, 'Codice tipo import contratti'
		EXEC asp_du_AddAlterColumn 'xContrattoImportTipo', 'Descrizione', 'varchar(80)  NULL',	'''<Descrizione Mancante>''', 'Descrizione tipo import contratti'
		EXEC asp_du_AddAlterColumn 'xContrattoImportTipo', 'FileProcedura', 'varchar(30)  NULL',	'''<Descrizione Mancante>''', 'Nome del file della procedura di normalizzazione a carico del partner'

		-- nuova tabella dei contratti normalizzati per l'import (xContrattoImport)
		IF dbo.afn_du_IsTable('xContrattoImport') = 0
			BEGIN
				CREATE TABLE [dbo].[xContrattoImport](
					[Id_xContrattoImport] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xContrattoImport_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xContrattoImport_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xContrattoImport_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xContrattoImport_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
					--Generale
					[Cd_xContratto] [char](10) NOT NULL,--'Codice contratto'
					[Descrizione] [varchar](230) NULL CONSTRAINT [DF_xContrattoImport_Descrizione]  DEFAULT ('<Descrizione Mancante>'),--'Descrizione contratto'
					[Cd_CF] [char](7) NOT NULL,--'Codice cliente\fornitore'
					[Cd_CFDest] [char](3) NULL,--'Destinazione diversa'
					[PersDaContattare] [varchar](30) NULL,--'Persona da contattare'
					[Cd_VL] [char](3) NULL,--'Valuta'
					[Cd_CFSede] [char](3) NULL,--'Sede amministrativa cliente' 
					[Cd_CF_Fatt] [char](7) NULL,--'Codice cliente\fornitore al quale va intestata la fattura'
					[Cambio] [numeric](18, 6) NOT NULL CONSTRAINT [DF_xContrattoImport_Cambio]  DEFAULT ((1)),--'Cambio'
					[Cd_AR] [varchar](20) NULL,--'Codice articolo di default per i canoni di manutenzione'
					[NoteContratto] [text] NULL,--'Note del contratto'
					[Modalita] [tinyint] NOT NULL CONSTRAINT [DF_xContrattoImport_Modalita]  DEFAULT ((1)),--'Modalità: 1 - assistenza post-vendita; 2 - garanzia; 3 - estensione garanzia'
					[Cd_ContrattoTipo] [char](3) NULL CONSTRAINT [DF_xContrattoImport_Cd_ContrattoTipo]  DEFAULT (''),--'Tipo di contratto'
					[Cd_RinnovoTipo] [char](3) NULL CONSTRAINT [DF_xContrattoImport_Cd_RinnovoTipo]  DEFAULT (''),--'Tipo di rinnovo'
					[Cd_Agente] [char](3) NULL,--'Codice agente'
					[Cd_PG] [char](4) NULL,--'Codice pagamento'
					[Provvigione] [varchar](10) NULL,--'Provvigione in % da liquidare all agente'
					[Cd_CFZona] [char](3) NULL,--'Codice zona'
					[Cd_LS_Contratto] [char](7) NULL,--'Listino associato al contratto'
					--Sviluppo
					[DataInizio] [smalldatetime] NOT NULL CONSTRAINT [DF_xContrattoImport_DataInizio]  DEFAULT ('19000101'),--'Inizio validità contratto'
					[Esecutivo] [bit] NOT NULL CONSTRAINT [DF_xContrattoImport_Esecutivo]  DEFAULT ((0)),--'0 - il contratto non è esecutivo; 1 - il contratto è esecutivo (si può fatturare, si può rinnovare)'
					[DataChiusura] [smalldatetime] NULL,--'Data chiusura contratto' 
					[DataInizioUltimoRinnovo] [smalldatetime] NULL CONSTRAINT [DF_xContrattoImport_DataInizioUltimoRinnovo]  DEFAULT ('19000101'),--'Inizio ultimo rinnovo'
					[Periodo] [int] NOT NULL CONSTRAINT [DF_xContrattoImport_Periodo]  DEFAULT ((1)),--'Lunghezza temporale del contratto (in anni, mesi o giorni)'
					[FattoreMksPeriodo] [numeric](25, 12) NOT NULL CONSTRAINT [DF_xContrattoImport_FattoreMksPeriodo]  DEFAULT ((12)),--'Fattore temporale del periodo (anni, mesi o giorni)'	
					[DataFine] [smalldatetime] NOT NULL CONSTRAINT [DF_xContrattoImport_DataFine]  DEFAULT ('19000101'),--'Fine validità contratto'
					[DataInizioFattura] [smalldatetime] NOT NULL CONSTRAINT [DF_xContrattoImport_DataInizioFattura]  DEFAULT ('19000101'),--'Inizio fatturazione contratto'
					[PeriodoFattura] [int] NOT NULL CONSTRAINT [DF_xContrattoImport_PeriodoFattura]  DEFAULT ((1)),--'Lunghezza temporale della fatturazione (in anni, mesi o giorni)'
					[FattoreMksPeriodoFattura] [numeric](25, 12) NOT NULL CONSTRAINT [DF_xContrattoImport_FattoreMksPeriodoFattura]  DEFAULT ((12)),--'Fattore temporale della fatturazione (anni, mesi o giorni)'
					[DataFineFattura] [smalldatetime] NOT NULL CONSTRAINT [DF_xContrattoImport_DataFineFattura]  DEFAULT ('19000101'),--'Fine fatturazione contratto'
					[FattoreMksCicloFattura] [numeric](25, 12) NOT NULL CONSTRAINT [DF_xContrattoImport_FattoreMksCicloFattura]  DEFAULT ((1)),--'Ciclo di fatturazione (mensile, trimestrale, quadrimestrale, semestrale, annuale)'
					[TipoSviluppoFattura] [tinyint] NOT NULL CONSTRAINT [DF_xContrattoImport_TipoSviluppoFattura]  DEFAULT ((5)),--'Tipo sviluppo fattura: 1 - coincide con l''inizio del periodo di competenza; 2 - coincide con la fine del periodo di competenza; 3 - anticipato nel periodo di competenza; 4 - anticipato prima del periodo di competenza; 5 - successivo al periodo di competenza'
					[TipoGiornoFattura] [tinyint] NOT NULL CONSTRAINT [DF_xContrattoImport_TipoGiornoFattura]  DEFAULT ((1)),--'Tipo giorno fattura: 1 - giorno da specificare; 2 - fine mese'
					[GiornoFattura] [int] NOT NULL CONSTRAINT [DF_xContrattoImport_GiornoFattura]  DEFAULT ((30)),--'Giorno del mese nel quale avviene la fatturazione del contratto'
					[ImportoTotaleContratto] [numeric](18, 6) NULL CONSTRAINT [DF_xContrattoImport_ImportoTotaleContratto]  DEFAULT ((0)),--'Importo totale del contratto'
					[ImportoTotaleFattura] [numeric](18, 6) NULL CONSTRAINT [DF_xContrattoImport_ImportoTotaleFattura]  DEFAULT ((0)),--'Importo totale già fatturato'
					[Rinnovabile] [bit] NOT NULL CONSTRAINT [DF_xContrattoImport_Rinnovabile]  DEFAULT ((0)),--'0 - il contratto non si può rinnovare; 1 - il contratto è rinnovabile'
					[PeriodoStandardRinnovo] [int] NOT NULL CONSTRAINT [DF_xContrattoImport_PeriodoStandardRinnovo]  DEFAULT ((1)),--'Lunghezza temporale standard e del rinnovo (in anni, mesi o giorni)' 
					[FattoreMksPeriodoStandardRinnovo] [numeric](25, 12) NOT NULL CONSTRAINT [DF_xContrattoImport_FattoreMksPeriodoStandardRinnovo]  DEFAULT ((12)),--'Fattore temporale del periodo (anni, mesi o giorni)' 
					[GiorniAvvisoRinnovo] [int] NOT NULL CONSTRAINT [DF_xContrattoImport_GiorniAvvisoRinnovo]  DEFAULT ((0)),--'Giorni avviso prima della scadenza'
					[Tacitamente] [bit] NOT NULL CONSTRAINT [DF_xContrattoImport_Tacitamente]  DEFAULT ((0)),--'0 - il contratto non è rinnovabile tacitamente; 1 - il contratto è rinnovabile tacitamente'
					[GiorniDisdettaCliente] [int] NOT NULL CONSTRAINT [DF_xContrattoImport_GiorniDisdettaCliente]  DEFAULT ((0)),--'Giorni disdetta da parte del cliente'
					[GiorniDisdettaFornitore] [int] NOT NULL CONSTRAINT [DF_xContrattoImport_GiorniDisdettaFornitore]  DEFAULT ((0)),--'Giorni disdetta da parte del fornitore'
					[TipoISTAT] [tinyint] NOT NULL CONSTRAINT [DF_xContrattoImport_TipoISTAT]  DEFAULT ((1)),--'Tipo adeguamento ISTAT: 1 - applicato standard; 2 - applicato personalizzato; 3 - non applicato' 
					[ISTAT] [numeric](18, 2) NULL CONSTRAINT [DF_xContrattoImport_ISTAT]  DEFAULT ((0)),--'Percentuale adeguamento ISTAT'
					--Attività
					[TipoFase] [tinyint] NOT NULL CONSTRAINT [DF_xContrattoImport_TipoFase]  DEFAULT ((1)),--'Tipo attività: 1 - attività incluse nel contratto; 2 - attività a prezzo unico; 3 - attività a listino; 4 - attività con prezzi personalizzati'
					[FasePrezzoUnitarioV] [numeric](18, 6) NOT NULL CONSTRAINT [DF_xContrattoImport_FasePrezzoUnitarioV]  DEFAULT ((0)),--'Prezzo unitario in valuta per attività a prezzo unico'
					[Cd_LS_Fase] [char](7) NULL,--'Listino associato alle attività'
					[FaseScontoRiga] [varchar](1000) NOT NULL CONSTRAINT [DF_xContrattoImport_FaseScontoRiga]  DEFAULT (''),--'Formula dello sconto di riga da applicare alle attività se si è scelto l opzione "attività a listino"' 
					--Materiali
					[TipoMateriale] [tinyint] NOT NULL CONSTRAINT [DF_xContrattoImport_TipoMateriale]  DEFAULT ((1)),
					[Cd_LS_Materiale] [char](7) NULL,
					[MaterialeScontoRiga] [varchar](1000) NOT NULL CONSTRAINT [DF_xContrattoImport_MaterialeScontoRiga]  DEFAULT (''),
					--Spese
					[TipoSpesa] [tinyint] NOT NULL CONSTRAINT [DF_xContrattoImport_TipoSpesa]  DEFAULT ((1)),--'Tipo spesa: 1 - spese incluse nel contratto; 2 - spese in base ad anagrafica; 3 - spese a listino; 4 - spese con prezzi personalizzati'
					[Cd_LS_Spesa] [char](7) NULL,--'Listino associato alle spese'
					[SpesaScontoRiga] [varchar](1000) NOT NULL CONSTRAINT [DF_xContrattoImport_SpesaScontoRiga]  DEFAULT (''),--'Formula dello sconto di riga da applicare alle spese se si è scelto l opzione "spese a listino"'
				CONSTRAINT [PK_xContrattoImport] PRIMARY KEY NONCLUSTERED 
					(
						[Id_xContrattoImport] ASC
					)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
					) ON [PRIMARY]
			END
		EXEC asp_du_AddAlterTableComment 'xContrattoImport', 'Contratti normalizzati'
		EXEC asp_du_AddAlterColumnComment 'xContrattoImport', 'Id_xContrattoImport'		, 'Identificativo contratto normalizzato'
		EXEC asp_du_AddAlterColumn 'xContrattoImport', 'Cd_xContrattoImportTipo', 'char(10) NULL',	'', 'Codice tipo import contratti'
		EXEC asp_du_DropConstraint 'xContrattoImport', 'FK_xContrattoImport_xContrattoImportTipo'
		ALTER TABLE xContrattoImport WITH NOCHECK ADD CONSTRAINT [FK_xContrattoImport_xContrattoImportTipo] FOREIGN KEY([Cd_xContrattoImportTipo]) REFERENCES [dbo].[xContrattoImportTipo] ([Cd_xContrattoImportTipo]) NOT FOR REPLICATION 
		ALTER TABLE xContrattoImport CHECK CONSTRAINT [FK_xContrattoImport_xContrattoImportTipo]

		-- nuova tabella delle matricole normalizzate e associate ai contratti normalizzati per l'import (xContrattoImportMatricola)
		IF dbo.afn_du_IsTable('xContrattoImportMatricola') = 0
			BEGIN
				CREATE TABLE [dbo].[xContrattoImportMatricola](
					[Id_xContrattoImportMatricola] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xContrattoImportMatricola_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xContrattoImportMatricola_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xContrattoImportMatricola_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xContrattoImportMatricola_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
					[Cd_AR] [varchar](20) NOT NULL, --Codice articolo di magazzino
					[Cd_xMatricola] [varchar](40) NULL, --Matricola
					[Cd_CF] [char](7) NULL, --Cliente (solo per Sede)
					[Cd_CFDest] [char](3) NULL, --Sede
					[Riga] [smallint] NOT NULL CONSTRAINT [DF_xContrattoImportMatricola_Riga]  DEFAULT ((0)), --Progressivo riga
					[DataInizio] [smalldatetime] NULL, --Data inizio validità matricola
					[DataFine] [smalldatetime] NULL, --Data fine validità matricola
					[PrezzoUnitarioV] [numeric](18, 6) NULL CONSTRAINT [DF_xContrattoImportMatricola_PrezzoUnitarioV]  DEFAULT ((0)), --Prezzo unitario annuo
					[Disattiva] [bit] NOT NULL CONSTRAINT [DF_xContrattoImportMatricola_Disattiva]  DEFAULT ((0)), --0 - matricola attiva; 1 - matricola disattiva
					[Sconto] [varchar](20) NOT NULL CONSTRAINT [DF_xContrattoImportMatricola_Sconto]  DEFAULT (''), --Sconto da applicare nel calcolo del rateo
				 CONSTRAINT [PK_xContrattoImportMatricola] PRIMARY KEY NONCLUSTERED 
				(
					[Id_xContrattoImportMatricola] ASC
				)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
				) ON [PRIMARY]
			END
		EXEC asp_du_AddAlterTableComment 'xContrattoImportMatricola', 'Matricole normalizzate e associate ai contratti normalizzati'
		EXEC asp_du_AddAlterColumn 'xContrattoImportMatricola', 'Id_xContrattoImport', '[int] NOT NULL', '', 'Identificativo contratto normalizzato' --obbligatorio per join con xContrattoImport
		EXEC asp_du_DropConstraint 'xContrattoImportMatricola', 'FK_xContrattoImportMatricola_xContrattoImport'
		ALTER TABLE [dbo].[xContrattoImportMatricola] WITH CHECK ADD CONSTRAINT [FK_xContrattoImportMatricola_xContrattoImport] FOREIGN KEY([Id_xContrattoImport])
		REFERENCES [dbo].[xContrattoImport] ([Id_xContrattoImport]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoImportMatricola] CHECK CONSTRAINT [FK_xContrattoImportMatricola_xContrattoImport]

		-- nuova tabella delle scadenze normalizzate e associate ai contratti normalizzati per l'import (xContrattoImportSviluppo)
		IF dbo.afn_du_IsTable('xContrattoImportSviluppo') = 0
			BEGIN
				CREATE TABLE [dbo].[xContrattoImportSviluppo](
					[Id_xContrattoImportSviluppo] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xContrattoImportSviluppo_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xContrattoImportSviluppo_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xContrattoImportSviluppo_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xContrattoImportSviluppo_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
					[Riga] [smallint] NOT NULL CONSTRAINT [DF_xContrattoImportSviluppo_Riga]  DEFAULT ((0)), --Progressivo riga
					[DataFattura] [smalldatetime] NOT NULL CONSTRAINT [DF_xContrattoImportSviluppo_DataFattura]  DEFAULT ('19000101'), --Data della scadenza da fatturare
					[ImportoFattura] [numeric](18, 6) NULL CONSTRAINT [DF_xContrattoImportSviluppo_ImportoFattura]  DEFAULT ((0)), --Importo della scadenza da fatturare
					[Cd_PG] [char](4) NULL, --Codice Pagamento riferito alla singola scadenza
					[NoteContrattoSviluppo] [text] NULL, --Note scadenza
					[RR_DataInizio] [smalldatetime] NULL CONSTRAINT [DF_xContrattoImportSviluppo_RR_DataInizio]  DEFAULT ('19000101'), --Data inizio competenza per gestione ratei e risconti
					[RR_DataFine] [smalldatetime] NULL CONSTRAINT [DF_xContrattoImportSviluppo_RR_DataFine]  DEFAULT ('19000101'), --Data fine competenza per gestione ratei e risconti
				 CONSTRAINT [PK_xContrattoImportSviluppo] PRIMARY KEY NONCLUSTERED 
				(
					[Id_xContrattoImportSviluppo] ASC
				)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
				) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
			END
		EXEC asp_du_AddAlterTableComment 'xContrattoImportSviluppo', 'Scadenze normalizzate e associate ai contratti normalizzati'
		EXEC asp_du_AddAlterColumn 'xContrattoImportSviluppo', 'Id_xContrattoImport', '[int] NOT NULL', '', 'Identificativo contratto normalizzato' --obbligatorio per join con xContrattoImport
		EXEC asp_du_DropConstraint 'xContrattoImportSviluppo', 'FK_xContrattoImportSviluppo_xContrattoImport'
		ALTER TABLE [dbo].[xContrattoImportSviluppo] WITH CHECK ADD CONSTRAINT [FK_xContrattoImportSviluppo_xContrattoImport] FOREIGN KEY([Id_xContrattoImport])
		REFERENCES [dbo].[xContrattoImport] ([Id_xContrattoImport]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xContrattoImportSviluppo] CHECK CONSTRAINT [FK_xContrattoImportSviluppo_xContrattoImport]

		-- porto la versione a 1.75
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 75, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.76
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.75' begin
		select 'Applico aggiornamenti al database: 1.75->1.76'
		-- qui operazioni per l'aggiornamento DB da 1.75 a 1.76

		-- porto la versione a 1.76
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 76, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.77
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.76' begin
		select 'Applico aggiornamenti al database: 1.76->1.77'
		-- qui operazioni per l'aggiornamento DB da 1.76 a 1.77

		-- porto la versione a 1.77
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 77, GETDATE(), 'Nessun aggiornamento al db necessario')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.80
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.77' begin
		select 'Applico aggiornamenti al database: 1.77->1.80'
		-- qui operazioni per l'aggiornamento DB da 1.77 a 1.80

		-- Impostazioni CCA (xImpostazione)
		-- eliminazione campo Noleggio
		EXEC asp_du_DropColumn 'xImpostazione', 'Noleggio'

		-- aggiunta opzioni per gestione noleggi
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'NoleggioNumContatori' , 'tinyint NOT NULL' , '3', 'Numero massimo di contatori gestibili nel noleggio di una matricola o di un impianto'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'NoleggioCd_AR', '[varchar](20) NULL', '', 'Codice articolo di default per i canoni di noleggio'
		EXEC asp_du_DropConstraint 'xImpostazione', 'FK_xImpostazione_NoleggioCd_AR'
		ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [FK_xImpostazione_NoleggioCd_AR] FOREIGN KEY([NoleggioCd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [FK_xImpostazione_NoleggioCd_AR]
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'NoleggioCd_ARMisura', 'char(2) NULL', '', 'Unità di misura per i noleggi'
		EXEC asp_du_DropConstraint 'xImpostazione', 'FK_xImpostazione_NoleggioCd_ARMisura'
		ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [FK_xImpostazione_NoleggioCd_ARMisura] FOREIGN KEY([NoleggioCd_ARMisura])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [FK_xImpostazione_NoleggioCd_ARMisura]
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'NoleggioGiorniAvvisoRinnovo', '[int] NOT NULL', '0', 'Giorni avviso prima della scadenza'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'NoleggioGiorniDisdettaCliente'	, '[int] NOT NULL', '0', 'Giorni disdetta da parte del cliente'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'NoleggioGiorniDisdettaFornitore', '[int] NOT NULL', '0', 'Giorni disdetta da parte del fornitore'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'NoleggioUD_Report1', '[uniqueidentifier] NULL', '', 'Unique identifier Report 1'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'NoleggioTipoSelMatricola', 'tinyint NOT NULL', '1', 'Tipo selezione matricole: 1 - cliente\sede; 2 - tutte le matricole'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'NoleggioGestioneResiduoPlafond', 'tinyint NOT NULL',	'1', 'Modalità di gestione del residuo plafond: 1 - considerato nel periodo successivo; 2 - accantonato in attesa di liquidazione tramite nota di accredito'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'NoleggioInizioFattQFPlafond', 'tinyint NOT NULL',	'1', 'Inizio fatturazione della quota fissa plafond: 1 - appena esaurito un plafond iniziale; 2 - quando tutti i plafond iniziali sono esauriti'

		-- Matricole (xMatricola)
		-- eliminazione campi obsoleti
		EXEC asp_du_DropColumn 'xMatricola', 'Cd_LS_Noleggio'
		EXEC asp_du_DropColumn 'xMatricola', 'C1_Cd_AR'
		EXEC asp_du_DropColumn 'xMatricola', 'C1_Cd_ARMisura'
		EXEC asp_du_DropColumn 'xMatricola', 'C1Prezzo'
		EXEC asp_du_DropColumn 'xMatricola', 'C1Decimali'
		EXEC asp_du_DropColumn 'xMatricola', 'C2_Cd_AR'
		EXEC asp_du_DropColumn 'xMatricola', 'C2_Cd_ARMisura'
		EXEC asp_du_DropColumn 'xMatricola', 'C2Prezzo'
		EXEC asp_du_DropColumn 'xMatricola', 'C2Decimali'
		EXEC asp_du_DropColumn 'xMatricola', 'C3_Cd_AR'
		EXEC asp_du_DropColumn 'xMatricola', 'C3_Cd_ARMisura'
		EXEC asp_du_DropColumn 'xMatricola', 'C3Prezzo'
		EXEC asp_du_DropColumn 'xMatricola', 'C3Decimali'

		-- ex tabella delle Letture per le Matricole
		-- eliminazione tabella
		EXEC asp_du_DropTable		'xMatricolaNoleggio'

		-- Impianti (xImpianto)
		-- aggiunta opzione "impianto a noleggio"
		EXEC asp_du_AddAlterColumn 'xImpianto', 'Noleggio', '[bit] NOT NULL', '0', '0 - nessun noleggio per l''impianto; 1 - impianto dato a noleggio'

		-- Contratti (xContratto)
		-- eliminazione campo Cd_LS_Noleggio
		EXEC asp_du_DropColumn 'xContratto', 'Cd_LS_Noleggio'

		-- Tipi Contatore (xContatoreTipo)
		-- nuova tabella per i Tipi di Contatore
		IF dbo.afn_du_IsTable('xContatoreTipo') = 0
			EXEC asp_du_AddTable 'xContatoreTipo', 3, 'Tabella tipo contatore'
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Descrizione', 'varchar(80) NOT NULL', '', 'Descrizione tipo'
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_AR_C1', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 1'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_AR_C1'
		ALTER TABLE [dbo].[xContatoreTipo] WITH CHECK ADD CONSTRAINT [FK_xContatoreTipo_AR_C1] FOREIGN KEY([Cd_AR_C1])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_AR_C1]
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_ARMisura_C1'	, '[char](2) NULL'	, '', 'Unità di misura contatore 1'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_ARMisura_C1'
		ALTER TABLE [dbo].[xContatoreTipo] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreTipo_ARMisura_C1] FOREIGN KEY([Cd_ARMisura_C1])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_ARMisura_C1]
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_AR_C2', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 2'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_AR_C2'
		ALTER TABLE [dbo].[xContatoreTipo] WITH CHECK ADD CONSTRAINT [FK_xContatoreTipo_AR_C2] FOREIGN KEY([Cd_AR_C2])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_AR_C2]
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_ARMisura_C2'	, '[char](2) NULL'	, '', 'Unità di misura contatore 2'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_ARMisura_C2'
		ALTER TABLE [dbo].[xContatoreTipo] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreTipo_ARMisura_C2] FOREIGN KEY([Cd_ARMisura_C2])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_ARMisura_C2]
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_AR_C3', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 3'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_AR_C3'
		ALTER TABLE [dbo].[xContatoreTipo] WITH CHECK ADD CONSTRAINT [FK_xContatoreTipo_AR_C3] FOREIGN KEY([Cd_AR_C3])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_AR_C3]
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_ARMisura_C3'	, '[char](2) NULL'	, '', 'Unità di misura contatore 3'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_ARMisura_C3'
		ALTER TABLE [dbo].[xContatoreTipo] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreTipo_ARMisura_C3] FOREIGN KEY([Cd_ARMisura_C3])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_ARMisura_C3]
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_AR_C4', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 4'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_AR_C4'
		ALTER TABLE [dbo].[xContatoreTipo] WITH CHECK ADD CONSTRAINT [FK_xContatoreTipo_AR_C4] FOREIGN KEY([Cd_AR_C4])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_AR_C4]
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_ARMisura_C4'	, '[char](2) NULL'	, '', 'Unità di misura contatore 4'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_ARMisura_C4'
		ALTER TABLE [dbo].[xContatoreTipo] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreTipo_ARMisura_C4] FOREIGN KEY([Cd_ARMisura_C4])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_ARMisura_C4]
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_AR_C5', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 5'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_AR_C5'
		ALTER TABLE [dbo].[xContatoreTipo] WITH CHECK ADD CONSTRAINT [FK_xContatoreTipo_AR_C5] FOREIGN KEY([Cd_AR_C5])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_AR_C5]
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_ARMisura_C5'	, '[char](2) NULL'	, '', 'Unità di misura contatore 5'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_ARMisura_C5'
		ALTER TABLE [dbo].[xContatoreTipo] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreTipo_ARMisura_C5] FOREIGN KEY([Cd_ARMisura_C5])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_ARMisura_C5]
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_AR_C6', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 6'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_AR_C6'
		ALTER TABLE [dbo].[xContatoreTipo] WITH CHECK ADD CONSTRAINT [FK_xContatoreTipo_AR_C6] FOREIGN KEY([Cd_AR_C6])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_AR_C6]
		EXEC asp_du_AddAlterColumn 'xContatoreTipo', 'Cd_ARMisura_C6'	, '[char](2) NULL'	, '', 'Unità di misura contatore 6'
		EXEC asp_du_DropConstraint 'xContatoreTipo', 'FK_xContatoreTipo_ARMisura_C6'
		ALTER TABLE [dbo].[xContatoreTipo] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreTipo_ARMisura_C6] FOREIGN KEY([Cd_ARMisura_C6])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContatoreTipo] CHECK CONSTRAINT [FK_xContatoreTipo_ARMisura_C6]

		-- Gruppi e Classi Articolo (ARGruppo1, ARGruppo2, ARGruppo3, ARClasse1, ARClasse2, ARClasse3)
		-- associazione di gruppi e classi articolo con il tipo contatore
		EXEC asp_du_AddAlterColumn 'ARGruppo1', 'xCd_xContatoreTipo', '[char](3) NULL', '', 'Tipo contatore'
		EXEC asp_du_DropConstraint 'ARGruppo1', 'xFK_ARGruppo1_xContatoreTipo'
		ALTER TABLE [dbo].[ARGruppo1] WITH CHECK ADD CONSTRAINT [xFK_ARGruppo1_xContatoreTipo] FOREIGN KEY([xCd_xContatoreTipo])
		REFERENCES [dbo].[xContatoreTipo] ([Cd_xContatoreTipo])
		ALTER TABLE [dbo].[ARGruppo1] CHECK CONSTRAINT [xFK_ARGruppo1_xContatoreTipo]
		EXEC asp_du_AddAlterColumn 'ARGruppo2', 'xCd_xContatoreTipo', '[char](3) NULL', '', 'Tipo contatore'
		EXEC asp_du_DropConstraint 'ARGruppo2', 'xFK_ARGruppo2_xContatoreTipo'
		ALTER TABLE [dbo].[ARGruppo2] WITH CHECK ADD CONSTRAINT [xFK_ARGruppo2_xContatoreTipo] FOREIGN KEY([xCd_xContatoreTipo])
		REFERENCES [dbo].[xContatoreTipo] ([Cd_xContatoreTipo])
		ALTER TABLE [dbo].[ARGruppo2] CHECK CONSTRAINT [xFK_ARGruppo2_xContatoreTipo]
		EXEC asp_du_AddAlterColumn 'ARGruppo3', 'xCd_xContatoreTipo', '[char](3) NULL', '', 'Tipo contatore'
		EXEC asp_du_DropConstraint 'ARGruppo3', 'xFK_ARGruppo3_xContatoreTipo'
		ALTER TABLE [dbo].[ARGruppo3] WITH CHECK ADD CONSTRAINT [xFK_ARGruppo3_xContatoreTipo] FOREIGN KEY([xCd_xContatoreTipo])
		REFERENCES [dbo].[xContatoreTipo] ([Cd_xContatoreTipo])
		ALTER TABLE [dbo].[ARGruppo3] CHECK CONSTRAINT [xFK_ARGruppo3_xContatoreTipo]
		EXEC asp_du_AddAlterColumn 'ARClasse1', 'xCd_xContatoreTipo', '[char](3) NULL', '', 'Tipo contatore'
		EXEC asp_du_DropConstraint 'ARClasse1', 'xFK_ARClasse1_xContatoreTipo'
		ALTER TABLE [dbo].[ARClasse1] WITH CHECK ADD CONSTRAINT [xFK_ARClasse1_xContatoreTipo] FOREIGN KEY([xCd_xContatoreTipo])
		REFERENCES [dbo].[xContatoreTipo] ([Cd_xContatoreTipo])
		ALTER TABLE [dbo].[ARClasse1] CHECK CONSTRAINT [xFK_ARClasse1_xContatoreTipo]
		EXEC asp_du_AddAlterColumn 'ARClasse2', 'xCd_xContatoreTipo', '[char](3) NULL', '', 'Tipo contatore'
		EXEC asp_du_DropConstraint 'ARClasse2', 'xFK_ARClasse2_xContatoreTipo'
		ALTER TABLE [dbo].[ARClasse2] WITH CHECK ADD CONSTRAINT [xFK_ARClasse2_xContatoreTipo] FOREIGN KEY([xCd_xContatoreTipo])
		REFERENCES [dbo].[xContatoreTipo] ([Cd_xContatoreTipo])
		ALTER TABLE [dbo].[ARClasse2] CHECK CONSTRAINT [xFK_ARClasse2_xContatoreTipo]
		EXEC asp_du_AddAlterColumn 'ARClasse3', 'xCd_xContatoreTipo', '[char](3) NULL', '', 'Tipo contatore'
		EXEC asp_du_DropConstraint 'ARClasse3', 'xFK_ARClasse3_xContatoreTipo'
		ALTER TABLE [dbo].[ARClasse3] WITH CHECK ADD CONSTRAINT [xFK_ARClasse3_xContatoreTipo] FOREIGN KEY([xCd_xContatoreTipo])
		REFERENCES [dbo].[xContatoreTipo] ([Cd_xContatoreTipo])
		ALTER TABLE [dbo].[ARClasse3] CHECK CONSTRAINT [xFK_ARClasse3_xContatoreTipo]

		-- Tipi Noleggio (xNoleggioTipo)
		-- nuova tabella per i Tipi di Noleggio
		IF dbo.afn_du_IsTable('xNoleggioTipo') = 0
			EXEC asp_du_AddTable 'xNoleggioTipo', 3, 'Tabella tipo noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggioTipo', 'Descrizione', 'varchar(80) NOT NULL', '', 'Descrizione tipo'

		-- Contratti di Noleggio (xNoleggio)
		-- nuova tabella per l'anagrafica dei Contratti di Noleggio
		IF dbo.afn_du_IsTable('xNoleggio') = 0
			EXEC asp_du_AddTable 'xNoleggio', 10, 'Anagrafica noleggi'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Descrizione'			, 'varchar(230) NOT NULL'	, '''<Descrizione Mancante>''', 'Descrizione Noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cd_CF', '[char](7) NOT NULL', '', 'Codice cliente\fornitore'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_CF'
		ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_CF]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cd_CFDest', '[char](3) NULL', '', 'Destinazione diversa'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_CFDest'
		ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_CFDest]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'PersDaContattare', '[varchar](30) NULL', '', 'Persona da contattare'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cd_xNoleggioTipo'	, '[char](3) NULL'				, ''													, 'Tipo di Noleggio'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_xNoleggioTipo'
		ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_xNoleggioTipo] FOREIGN KEY([Cd_xNoleggioTipo])
		REFERENCES [dbo].[xNoleggioTipo] ([Cd_xNoleggioTipo]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_xNoleggioTipo]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cd_xRinnovoTipo'		, '[char](3) NULL'				, ''													, 'Tipo di rinnovo'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_xRinnovoTipo'
		ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_xRinnovoTipo] FOREIGN KEY([Cd_xRinnovoTipo])
		REFERENCES [dbo].[xRinnovoTipo] ([Cd_xRinnovoTipo]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_xRinnovoTipo]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cd_VL'						, '[char](3) NULL'						, ''						, 'Valuta'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_VL'
		ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_VL] FOREIGN KEY([Cd_VL])
		REFERENCES [dbo].[VL] ([Cd_VL]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_VL]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cd_CFSede', '[char](3) NULL', '', 'Sede amministrativa cliente'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_CFSede'
		ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_CFSede] FOREIGN KEY([Cd_CF], [Cd_CFSede])
		REFERENCES [dbo].[CFSede] ([Cd_CF], [Cd_CFSede]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_CFSede]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cd_CF_Fatt'				, '[char](7) NULL'						, ''						, 'Codice cliente\fornitore al quale va intestata la fattura'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_CF_Fatt'
		ALTER TABLE [dbo].[xNoleggio] WITH CHECK ADD CONSTRAINT [FK_xNoleggio_CF_Fatt] FOREIGN KEY([Cd_CF_Fatt])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_CF_Fatt]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cambio'						, '[numeric](18, 6) NOT NULL' , '1'						, 'Cambio'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cd_AR', '[varchar](20) NULL', '', 'Codice articolo di default per i canoni di manutenzione'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_AR'
		ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_AR]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cd_Agente'				, '[char](3) NULL'						, ''						, 'Codice agente'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_Agente'
		ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_Agente] FOREIGN KEY([Cd_Agente])
		REFERENCES [dbo].[Agente] ([Cd_Agente]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_Agente]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cd_PG'						, '[char](4) NULL'						, ''						, 'Codice pagamento'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_PG'
		ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_PG] FOREIGN KEY([Cd_PG])
		REFERENCES [dbo].[PG] ([Cd_PG]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_PG]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Provvigione', 'varchar(10) NULL', '', 'Provvigione in % da liquidare all agente'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Cd_CFZona', 'char(3) NULL', '', 'Codice zona'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_Cd_CFZona'
		ALTER TABLE xNoleggio WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_Cd_CFZona] FOREIGN KEY([Cd_CFZona])
		REFERENCES [dbo].[CFZona] ([Cd_CFZona]) NOT FOR REPLICATION 
		ALTER TABLE xNoleggio CHECK CONSTRAINT [FK_xNoleggio_Cd_CFZona]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'NoteNoleggio'		, '[text] NULL'								, ''						, 'Note del Noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'RifID_DoTes' , 'INT NULL' ,'' , 'Riferimento testa ordine relativo al Noleggio'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_RifID_DoTes'
		ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_RifID_DoTes] FOREIGN KEY([RifID_DoTes])
		REFERENCES [dbo].[DOTes] ([Id_DoTes])
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_RifID_DoTes]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'RifId_Preventivo' , 'INT NULL' ,'' , 'Riferimento testa sottopreventivo esecutivo'
		EXEC asp_du_DropConstraint 'xNoleggio', 'FK_xNoleggio_RifId_Preventivo'
		ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggio_RifId_Preventivo] FOREIGN KEY([RifId_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Id_Preventivo])
		ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [FK_xNoleggio_RifId_Preventivo]
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'UD_Report1', '[uniqueidentifier] NULL', '', 'Unique identifier Report 1'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'NumeroDocRif'	, '[varchar](20) NULL'	, '', 'Numero documento di riferimento'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'DataDocRif'		, '[smalldatetime] NULL', '', 'Data documento di riferimento'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'DataInizio'				, '[smalldatetime] NOT NULL'	, '''19000101''', 'Inizio validità Noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Esecutivo', '[bit] NOT NULL', '0', '0 - il noleggio non è esecutivo; 1 - il noleggio è esecutivo (si può fatturare, si può rinnovare)'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'DataChiusura', '[smalldatetime] NULL'	, '', 'Data chiusura Noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'DataInizioUltimoRinnovo', '[smalldatetime] NULL'	, '', 'Inizio ultimo rinnovo'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Periodo'					, '[int] NOT NULL'						, '1'						, 'Lunghezza temporale del Noleggio (in anni, mesi o giorni)'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'FattoreMksPeriodo', '[numeric](25, 12) NOT NULL', '12'					, 'Fattore temporale del periodo (anni, mesi o giorni)'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'DataFine'					, '[smalldatetime] NOT NULL'	, '''19000101''', 'Fine validità Noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Rinnovabile'			, '[bit] NOT NULL'						, '0'						, '0 - il Noleggio non si può rinnovare; 1 - il Noleggio è rinnovabile'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'PeriodoStandardRinnovo'	, '[int] NOT NULL'	, '1'	, 'Lunghezza temporale standard e del rinnovo (in anni, mesi o giorni)'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'FattoreMksPeriodoStandardRinnovo', '[numeric](25, 12) NOT NULL', '12'	, 'Fattore temporale del periodo (anni, mesi o giorni)'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'GiorniAvvisoRinnovo', '[int] NOT NULL', '0', 'Giorni avviso prima della scadenza'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'Tacitamente', '[bit] NOT NULL', '0', '0 - il Noleggio non è rinnovabile tacitamente; 1 - il Noleggio è rinnovabile tacitamente'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'GiorniDisdettaCliente', '[int] NOT NULL', '0', 'Giorni disdetta da parte del cliente'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'GiorniDisdettaFornitore', '[int] NOT NULL', '0', 'Giorni disdetta da parte del fornitore'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'FattoreMksQFNoleggio', '[numeric](25, 12) NOT NULL', '1', 'Ciclo di fatturazione quota fissa noleggio (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'FattoreMksQFPlafond', '[numeric](25, 12) NOT NULL', '1', 'Ciclo di fatturazione quota fissa plafond (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'GestioneResiduoPlafond', 'tinyint NOT NULL',	'1', 'Modalità di gestione del residuo plafond: 1 - considerato nel periodo successivo; 2 - accantonato in attesa di liquidazione tramite nota di accredito'
		EXEC asp_du_AddAlterColumn 'xNoleggio', 'InizioFattQFPlafond', 'tinyint NOT NULL',	'1', 'Inizio fatturazione della quota fissa plafond: 1 - appena esaurito un plafond iniziale; 2 - quando tutti i plafond iniziali sono esauriti'
		
		-- ex tabella Matricole a Noleggio
		-- eliminazione tabella
		EXEC asp_du_DropTable		'xContrattoNoleggio'

		-- Matricole a Noleggio (xNoleggioMatricola)
		-- nuova tabella per la gestione delle matricole date in noleggio
		IF dbo.afn_du_IsTable('xNoleggioMatricola') = 0
			EXEC asp_du_AddTable 'xNoleggioMatricola', 0, 'Matricole date in noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Id_xNoleggio', '[int] NOT NULL', '', 'Identificativo contratto di noleggio di appartenenza della matricola'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_Noleggio'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_Noleggio] FOREIGN KEY([Id_xNoleggio])
		REFERENCES [dbo].[xNoleggio] ([Id_xNoleggio]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_Noleggio]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Riga'				, '[smallint] NOT NULL'			, '0'	, 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_AR', '[varchar](20) NOT NULL', '', 'Codice articolo di magazzino'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_AR'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH CHECK ADD CONSTRAINT [FK_xNoleggioMatricola_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Numero matricola'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_Matricola'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH CHECK ADD CONSTRAINT [FK_xNoleggioMatricola_Matricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_Matricola]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_CF'			, 'char(7) NULL'		  , '' , 'Cliente riga'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_CF'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH CHECK ADD CONSTRAINT [FK_xNoleggioMatricola_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_CF]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_CFDest'	, 'char(3) NULL', '', 'Destinazione diversa riga'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_CFDest'
		ALTER TABLE [dbo].[xNoleggioMatricola]  WITH NOCHECK ADD  CONSTRAINT [FK_xNoleggioMatricola_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_CFDest]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'DataInizio'	, '[smalldatetime] NULL', '', 'Data inizio noleggio matricola'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'DataFine'		, '[smalldatetime] NULL', '', 'Data fine noleggio matricola'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Disattiva', '[bit] NOT NULL', '0', '0 - la matricola è sotto contratto di noleggio; 1 - la matricola non è più sotto contratto di noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Rinnovato', '[bit] NOT NULL', '0', '0 - la matricola è ancora valida; 1 - la matricola è stata rinnovata'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'QuotaFissaNoleggio', '[numeric](18, 6) NOT NULL', '0', 'Quota fissa noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksQFNoleggio', '[numeric](25, 12) NOT NULL', '1', 'Ciclo di fatturazione quota fissa noleggio (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'QuotaFissaPlafond', '[numeric](18, 6) NOT NULL', '0', 'Quota fissa plafond'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksQFPlafond', '[numeric](25, 12) NOT NULL', '1', 'Ciclo di fatturazione quota fissa plafond (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_AR_C1', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 1'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C1AR'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C1AR] FOREIGN KEY([Cd_AR_C1])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C1AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_ARMisura_C1', '[char](2) NULL', '', 'Unità di misura associata al contatore 1'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C1ARMisura'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C1ARMisura] FOREIGN KEY([Cd_ARMisura_C1])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C1ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Prezzo_C1', '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 1'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondIniziale_C1', '[int] NOT NULL', '0', 'Plafond iniziale contatore 1'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondPeriodico_C1', '[int] NOT NULL', '0', 'Plafond periodico contatore 1'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksPlafond_C1', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 1 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksFattura_C1', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 1 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'LetturaPartenza_C1', '[int] NOT NULL', '0', 'Lettura di partenza contatore 1'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_AR_C2', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 2'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C2AR'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C2AR] FOREIGN KEY([Cd_AR_C2])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C2AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_ARMisura_C2', '[char](2) NULL', '', 'Unità di misura associata al contatore 2'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C2ARMisura'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C2ARMisura] FOREIGN KEY([Cd_ARMisura_C2])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C2ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Prezzo_C2', '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 2'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondIniziale_C2', '[int] NOT NULL', '0', 'Plafond iniziale contatore 2'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondPeriodico_C2', '[int] NOT NULL', '0', 'Plafond periodico contatore 2'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksPlafond_C2', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 2 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksFattura_C2', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 2 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'LetturaPartenza_C2', '[int] NOT NULL', '0', 'Lettura di partenza contatore 2'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_AR_C3', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 3'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C3AR'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C3AR] FOREIGN KEY([Cd_AR_C3])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C3AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_ARMisura_C3', '[char](2) NULL', '', 'Unità di misura associata al contatore 3'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C3ARMisura'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C3ARMisura] FOREIGN KEY([Cd_ARMisura_C3])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C3ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Prezzo_C3'		, '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 3'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondIniziale_C3', '[int] NOT NULL', '0', 'Plafond iniziale contatore 3'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondPeriodico_C3', '[int] NOT NULL', '0', 'Plafond periodico contatore 3'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksPlafond_C3', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 3 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksFattura_C3', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 3 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'LetturaPartenza_C3', '[int] NOT NULL', '0', 'Lettura di partenza contatore 3'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_AR_C4', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 4'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C4AR'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C4AR] FOREIGN KEY([Cd_AR_C4])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C4AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_ARMisura_C4', '[char](2) NULL', '', 'Unità di misura associata al contatore 4'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C4ARMisura'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C4ARMisura] FOREIGN KEY([Cd_ARMisura_C4])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C4ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Prezzo_C4'		, '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 4'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondIniziale_C4', '[int] NOT NULL', '0', 'Plafond iniziale contatore 4'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondPeriodico_C4', '[int] NOT NULL', '0', 'Plafond periodico contatore 4'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksPlafond_C4', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 4 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksFattura_C4', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 4 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'LetturaPartenza_C4', '[int] NOT NULL', '0', 'Lettura di partenza contatore 4'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_AR_C5', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 5'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C5AR'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C5AR] FOREIGN KEY([Cd_AR_C5])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C5AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_ARMisura_C5', '[char](2) NULL', '', 'Unità di misura associata al contatore 5'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C5ARMisura'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C5ARMisura] FOREIGN KEY([Cd_ARMisura_C5])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C5ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Prezzo_C5'		, '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 5'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondIniziale_C5', '[int] NOT NULL', '0', 'Plafond iniziale contatore 5'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondPeriodico_C5', '[int] NOT NULL', '0', 'Plafond periodico contatore 5'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksPlafond_C5', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 5 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksFattura_C5', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 5 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'LetturaPartenza_C5', '[int] NOT NULL', '0', 'Lettura di partenza contatore 5'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_AR_C6', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 6'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C6AR'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C6AR] FOREIGN KEY([Cd_AR_C6])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C6AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Cd_ARMisura_C6', '[char](2) NULL', '', 'Unità di misura associata al contatore 6'
		EXEC asp_du_DropConstraint 'xNoleggioMatricola', 'FK_xNoleggioMatricola_C6ARMisura'
		ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricola_C6ARMisura] FOREIGN KEY([Cd_ARMisura_C6])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [FK_xNoleggioMatricola_C6ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'Prezzo_C6'		, '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 6'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondIniziale_C6', '[int] NOT NULL', '0', 'Plafond iniziale contatore 6'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'PlafondPeriodico_C6', '[int] NOT NULL', '0', 'Plafond periodico contatore 6'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksPlafond_C6', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 6 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'FattoreMksFattura_C6', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 6 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricola', 'LetturaPartenza_C6', '[int] NOT NULL', '0', 'Lettura di partenza contatore 6'

		-- Impianti a Noleggio (xNoleggioImpianto)
		-- nuova tabella per la gestione degli impianti in noleggio
		IF dbo.afn_du_IsTable('xNoleggioImpianto') = 0
			EXEC asp_du_AddTable 'xNoleggioImpianto', 0, 'Impianti a noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Id_xNoleggio', '[int] NOT NULL', '', 'Identificativo contratto di noleggio di appartenenza dell''impianto'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_Noleggio'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_Noleggio] FOREIGN KEY([Id_xNoleggio])
		REFERENCES [dbo].[xNoleggio] ([Id_xNoleggio]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_Noleggio]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Riga'			, '[smallint] NOT NULL', '0', 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_xImpianto', '[char](10) NOT NULL', '', 'Codice impianto'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_Impianto'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH CHECK ADD CONSTRAINT [FK_xNoleggioImpianto_Impianto] FOREIGN KEY([Cd_xImpianto])
		REFERENCES [dbo].[xImpianto] ([Cd_xImpianto])
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_Impianto]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_CF'			, 'char(7) NULL'		  , '' , 'Cliente riga'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_CF'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH CHECK ADD CONSTRAINT [FK_xNoleggioImpianto_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_CF]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_CFDest'	, 'char(3) NULL', '', 'Destinazione diversa riga'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_CFDest'
		ALTER TABLE [dbo].[xNoleggioImpianto]  WITH NOCHECK ADD  CONSTRAINT [FK_xNoleggioImpianto_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_CFDest]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'DataInizio'	, 'smalldatetime NULL' , '' , 'Data inizio validità riga'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'DataFine'		, 'smalldatetime NULL' , '' , 'Data fine validità riga'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Disattiva', '[bit] NOT NULL', '0', '0 - l''impianto è sotto contratto di noleggio; 1 - l''impianto non è più sotto contratto di noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Rinnovato', '[bit] NOT NULL', '0', '0 - l''impianto è ancora valida; 1 - l''impianto è stato rinnovato'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'QuotaFissaNoleggio', '[numeric](18, 6) NOT NULL', '0', 'Quota fissa noleggio'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksQFNoleggio', '[numeric](25, 12) NOT NULL', '1', 'Ciclo di fatturazione quota fissa noleggio (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'QuotaFissaPlafond', '[numeric](18, 6) NOT NULL', '0', 'Quota fissa plafond'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksQFPlafond', '[numeric](25, 12) NOT NULL', '1', 'Ciclo di fatturazione quota fissa plafond (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_AR_C1', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 1'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C1AR'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C1AR] FOREIGN KEY([Cd_AR_C1])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C1AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_ARMisura_C1', '[char](2) NULL', '', 'Unità di misura associata al contatore 1'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C1ARMisura'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C1ARMisura] FOREIGN KEY([Cd_ARMisura_C1])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C1ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Prezzo_C1', '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 1'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondIniziale_C1', '[int] NOT NULL', '0', 'Plafond iniziale contatore 1'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondPeriodico_C1', '[int] NOT NULL', '0', 'Plafond periodico contatore 1'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksPlafond_C1', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 1 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksFattura_C1', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 1 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'LetturaPartenza_C1', '[int] NOT NULL', '0', 'Lettura di partenza contatore 1'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_AR_C2', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 2'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C2AR'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C2AR] FOREIGN KEY([Cd_AR_C2])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C2AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_ARMisura_C2', '[char](2) NULL', '', 'Unità di misura associata al contatore 2'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C2ARMisura'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C2ARMisura] FOREIGN KEY([Cd_ARMisura_C2])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C2ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Prezzo_C2', '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 2'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondIniziale_C2', '[int] NOT NULL', '0', 'Plafond iniziale contatore 2'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondPeriodico_C2', '[int] NOT NULL', '0', 'Plafond periodico contatore 2'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksPlafond_C2', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 2 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksFattura_C2', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 2 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'LetturaPartenza_C2', '[int] NOT NULL', '0', 'Lettura di partenza contatore 2'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_AR_C3', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 3'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C3AR'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C3AR] FOREIGN KEY([Cd_AR_C3])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C3AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_ARMisura_C3', '[char](2) NULL', '', 'Unità di misura associata al contatore 3'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C3ARMisura'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C3ARMisura] FOREIGN KEY([Cd_ARMisura_C3])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C3ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Prezzo_C3'		, '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 3'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondIniziale_C3', '[int] NOT NULL', '0', 'Plafond iniziale contatore 3'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondPeriodico_C3', '[int] NOT NULL', '0', 'Plafond periodico contatore 3'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksPlafond_C3', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 3 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksFattura_C3', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 3 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'LetturaPartenza_C3', '[int] NOT NULL', '0', 'Lettura di partenza contatore 3'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_AR_C4', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 4'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C4AR'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C4AR] FOREIGN KEY([Cd_AR_C4])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C4AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_ARMisura_C4', '[char](2) NULL', '', 'Unità di misura associata al contatore 4'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C4ARMisura'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C4ARMisura] FOREIGN KEY([Cd_ARMisura_C4])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C4ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Prezzo_C4'		, '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 4'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondIniziale_C4', '[int] NOT NULL', '0', 'Plafond iniziale contatore 4'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondPeriodico_C4', '[int] NOT NULL', '0', 'Plafond periodico contatore 4'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksPlafond_C4', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 4 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksFattura_C4', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 4 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'LetturaPartenza_C4', '[int] NOT NULL', '0', 'Lettura di partenza contatore 4'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_AR_C5', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 5'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C5AR'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C5AR] FOREIGN KEY([Cd_AR_C5])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C5AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_ARMisura_C5', '[char](2) NULL', '', 'Unità di misura associata al contatore 5'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C5ARMisura'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C5ARMisura] FOREIGN KEY([Cd_ARMisura_C5])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C5ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Prezzo_C5'		, '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 5'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondIniziale_C5', '[int] NOT NULL', '0', 'Plafond iniziale contatore 5'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondPeriodico_C5', '[int] NOT NULL', '0', 'Plafond periodico contatore 5'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksPlafond_C5', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 5 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksFattura_C5', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 5 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'LetturaPartenza_C5', '[int] NOT NULL', '0', 'Lettura di partenza contatore 5'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_AR_C6', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 6'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C6AR'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C6AR] FOREIGN KEY([Cd_AR_C6])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C6AR]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Cd_ARMisura_C6', '[char](2) NULL', '', 'Unità di misura associata al contatore 6'
		EXEC asp_du_DropConstraint 'xNoleggioImpianto', 'FK_xNoleggioImpianto_C6ARMisura'
		ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpianto_C6ARMisura] FOREIGN KEY([Cd_ARMisura_C6])
		REFERENCES [dbo].[ARMisura] ([Cd_ARMisura]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [FK_xNoleggioImpianto_C6ARMisura]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'Prezzo_C6'		, '[numeric](18, 6) NOT NULL', '0', 'Prezzo associato al contatore 6'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondIniziale_C6', '[int] NOT NULL', '0', 'Plafond iniziale contatore 6'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'PlafondPeriodico_C6', '[int] NOT NULL', '0', 'Plafond periodico contatore 6'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksPlafond_C6', '[numeric](25, 12) NOT NULL', '1', 'Periodicità plafond contatore 6 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'FattoreMksFattura_C6', '[numeric](25, 12) NOT NULL', '1', 'Periodicità fatturazione contatore 6 (mensile, bimestrale, trimestrale, quadrimestrale, semestrale, annuale)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpianto', 'LetturaPartenza_C6', '[int] NOT NULL', '0', 'Lettura di partenza contatore 6'

		-- Gestione Rinnovi Noleggio (xNoleggioRinnovo)
		-- nuova tabella per la gestione dei rinnovi dei contratti di noleggio
		IF dbo.afn_du_IsTable('xNoleggioRinnovo') = 0
			EXEC asp_du_AddTable 'xNoleggioRinnovo', 0, 'Gestione rinnovi nei contratti'
		EXEC asp_du_AddAlterColumnComment 'xNoleggioRinnovo', 'Id_xNoleggioRinnovo', 'Identificativo rinnovo'
		EXEC asp_du_AddAlterColumn 'xNoleggioRinnovo', 'Id_xNoleggio', '[int] NOT NULL', '', 'Identificativo contratto di noleggio'
		EXEC asp_du_DropConstraint 'xNoleggioRinnovo', 'FK_xNoleggioRinnovo_Noleggio'
		ALTER TABLE [dbo].[xNoleggioRinnovo] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioRinnovo_Noleggio] FOREIGN KEY([Id_xNoleggio])
		REFERENCES [dbo].[xNoleggio] ([Id_xNoleggio]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xNoleggioRinnovo] CHECK CONSTRAINT [FK_xNoleggioRinnovo_Noleggio]
		EXEC asp_du_AddAlterColumn 'xNoleggioRinnovo', 'DataInizio', '[smalldatetime] NULL'	, '', 'Inizio rinnovo'
		EXEC asp_du_AddAlterColumn 'xNoleggioRinnovo', 'DataFine', '[smalldatetime] NULL'	, '', 'Fine rinnovo'
		EXEC asp_du_AddAlterColumn 'xNoleggioRinnovo', 'DataConfermaRinnovo', '[smalldatetime] NULL'	, '', 'Data conferma rinnovo'
		EXEC asp_du_AddAlterColumn 'xNoleggioRinnovo', 'Tacitamente', '[bit] NOT NULL', '0', '0 - il Noleggio non è rinnovabile tacitamente; 1 - il Noleggio è rinnovabile tacitamente'
		EXEC asp_du_AddAlterColumn 'xNoleggioRinnovo', 'Riga', '[smallint] NOT NULL', '0'	, 'Numero di riga'
		EXEC asp_du_AddAlterColumn 'xNoleggioRinnovo', 'DaProcedura', '[bit] NOT NULL', '0', '0 - il rinnovo è stato fatto manualmente; 1 - il rinnovo è stato elaborato dal relativo wizard'

		-- DMS
		Declare @Id_DMSClass1_Noleggi  			As Int
		Declare @Id_DMSClass2_Noleggi_Noleggi	As Int

		-- Tabella DMSClass1
		Insert Into DmsClass1 (Descrizione) Values ('Noleggi')
		set @Id_DMSClass1_Noleggi  = @@Identity

		-- Tabella DMSClass2
		Insert Into DmsClass2 (Id_DmsClass1, Descrizione) Values (@Id_DMSClass1_Noleggi , 'Noleggi')
		set @Id_DMSClass2_Noleggi_Noleggi = @@Identity

		-- Tabella DMSMapExpressions
		Insert Into [DmsMapExpressions] ([EntityTable],[EntityId],[MasterTable],[MasterTableId],[Level1],[Level2])
				Values ('xNoleggio', 'Cd_xNoleggio', Null, Null, Null, Null)
																																																				 
		-- Tabella DMSMapRules
		Insert Into DmsMapRules	([EntityTable],[Level],[Type],[Note],[Id_DmsClass1],[Id_DmsClass2],[DmsClass3],[Cd_DmsType],[EntityDescription])
				Values ('xNoleggio', 0, '', 'Noleggio', @Id_DMSClass1_Noleggi, @Id_DMSClass2_Noleggi_Noleggi, '''''', '00', '''[Noleggio] ''' + ' ' + '+' + ' ' + 'Descrizione')

		-- Letture Contatori (xContatoreLettura)
		-- nuova tabella per le Letture dei Contatori
		IF dbo.afn_du_IsTable('xContatoreLettura') = 0
			EXEC asp_du_AddTable 'xContatoreLettura', 0, 'Letture dei contatori associati ad una matricola o ad un intero impianto in noleggio'

		EXEC asp_du_AddAlterColumnComment 'xContatoreLettura', 'Id_xContatoreLettura', 'Identificativo lettura'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_AR', '[varchar](20) NULL', '', 'Codice articolo di magazzino'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_AR'
		ALTER TABLE [dbo].[xContatoreLettura] WITH CHECK ADD CONSTRAINT [FK_xContatoreLettura_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_AR]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Numero matricola'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_Matricola'
		ALTER TABLE [dbo].[xContatoreLettura] WITH CHECK ADD CONSTRAINT [FK_xContatoreLettura_Matricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_Matricola]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_xImpianto', '[char](10) NULL', '', 'Codice impianto'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_Impianto'
		ALTER TABLE [dbo].[xContatoreLettura] WITH CHECK ADD CONSTRAINT [FK_xContatoreLettura_Impianto] FOREIGN KEY([Cd_xImpianto])
		REFERENCES [dbo].[xImpianto] ([Cd_xImpianto])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_Impianto]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_xNoleggio', '[char](10) NOT NULL', '', 'Codice contratto di noleggio'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_Noleggio'
		ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLettura_Noleggio] FOREIGN KEY([Cd_xNoleggio])
		REFERENCES [dbo].[xNoleggio] ([Cd_xNoleggio]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_Noleggio]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_CF', 'char(7) NOT NULL', '', 'Cliente'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_CF'
		ALTER TABLE [dbo].[xContatoreLettura] WITH CHECK ADD CONSTRAINT [FK_xContatoreLettura_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_CF]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_CFDest', 'char(3) NULL', '', 'Destinazione diversa'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_CFDest'
		ALTER TABLE [dbo].[xContatoreLettura]  WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLettura_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_CFDest]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'DataLettura', '[smalldatetime] NOT NULL', '', 'Data lettura dei contatori'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_AR_C1', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 1'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_C1AR'
		ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLettura_C1AR] FOREIGN KEY([Cd_AR_C1])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_C1AR]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Lettura_C1', '[int] NOT NULL', '0', 'Lettura contatore 1'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'LetturaPrecedente_C1', '[int] NOT NULL', '0', 'Lettura precedente contatore 1'
		EXEC asp_du_DropColumn		 'xContatoreLettura', 'Delta_C1'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Delta_C1', 'AS (Lettura_C1 - LetturaPrecedente_C1)', '', 'Differenza letture contatore 1'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ResiduoPP_C1', '[int] NOT NULL', '0', 'Residuo plafond periodico contatore 1'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ExtraPlafond_C1', '[int] NOT NULL', '0', 'Extra plafond contatore 1'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_AR_C2', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 2'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_C2AR'
		ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLettura_C2AR] FOREIGN KEY([Cd_AR_C2])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_C2AR]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Lettura_C2', '[int] NOT NULL', '0', 'Lettura contatore 2'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'LetturaPrecedente_C2', '[int] NOT NULL', '0', 'Lettura precedente contatore 2'
		EXEC asp_du_DropColumn		 'xContatoreLettura', 'Delta_C2'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Delta_C2', 'AS (Lettura_C2 - LetturaPrecedente_C2)', '', 'Differenza letture contatore 2'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ResiduoPP_C2', '[int] NOT NULL', '0', 'Residuo plafond periodico contatore 2'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ExtraPlafond_C2', '[int] NOT NULL', '0', 'Extra plafond contatore 2'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_AR_C3', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 3'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_C3AR'
		ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLettura_C3AR] FOREIGN KEY([Cd_AR_C3])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_C3AR]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Lettura_C3', '[int] NOT NULL', '0', 'Lettura contatore 3'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'LetturaPrecedente_C3', '[int] NOT NULL', '0', 'Lettura precedente contatore 3'
		EXEC asp_du_DropColumn		 'xContatoreLettura', 'Delta_C3'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Delta_C3', 'AS (Lettura_C3 - LetturaPrecedente_C3)', '', 'Differenza letture contatore 3'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ResiduoPP_C3', '[int] NOT NULL', '0', 'Residuo plafond periodico contatore 3'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ExtraPlafond_C3', '[int] NOT NULL', '0', 'Extra plafond contatore 3'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_AR_C4', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 4'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_C4AR'
		ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLettura_C4AR] FOREIGN KEY([Cd_AR_C4])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_C4AR]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Lettura_C4', '[int] NOT NULL', '0', 'Lettura contatore 4'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'LetturaPrecedente_C4', '[int] NOT NULL', '0', 'Lettura precedente contatore 4'
		EXEC asp_du_DropColumn		 'xContatoreLettura', 'Delta_C4'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Delta_C4', 'AS (Lettura_C4 - LetturaPrecedente_C4)', '', 'Differenza letture contatore 4'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ResiduoPP_C4', '[int] NOT NULL', '0', 'Residuo plafond periodico contatore 4'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ExtraPlafond_C4', '[int] NOT NULL', '0', 'Extra plafond contatore 4'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_AR_C5', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 5'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_C5AR'
		ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLettura_C5AR] FOREIGN KEY([Cd_AR_C5])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_C5AR]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Lettura_C5', '[int] NOT NULL', '0', 'Lettura contatore 5'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'LetturaPrecedente_C5', '[int] NOT NULL', '0', 'Lettura precedente contatore 5'
		EXEC asp_du_DropColumn		 'xContatoreLettura', 'Delta_C5'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Delta_C5', 'AS (Lettura_C5 - LetturaPrecedente_C5)', '', 'Differenza letture contatore 5'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ResiduoPP_C5', '[int] NOT NULL', '0', 'Residuo plafond periodico contatore 5'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ExtraPlafond_C5', '[int] NOT NULL', '0', 'Extra plafond contatore 5'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Cd_AR_C6', '[varchar](20) NULL', '', 'Codice articolo associato al contatore 6'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_C6AR'
		ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLettura_C6AR] FOREIGN KEY([Cd_AR_C6])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_C6AR]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Lettura_C6', '[int] NOT NULL', '0', 'Lettura contatore 6'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'LetturaPrecedente_C6', '[int] NOT NULL', '0', 'Lettura precedente contatore 6'
		EXEC asp_du_DropColumn		 'xContatoreLettura', 'Delta_C6'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Delta_C6', 'AS (Lettura_C6 - LetturaPrecedente_C6)', '', 'Differenza letture contatore 6'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ResiduoPP_C6', '[int] NOT NULL', '0', 'Residuo plafond periodico contatore 6'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ExtraPlafond_C6', '[int] NOT NULL', '0', 'Extra plafond contatore 6'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Id_DOTes'	, '[int] NULL', '', 'Id del documento con il quale è stata evasa la lettura'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_Id_DOTes'
		ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLettura_Id_DOTes] FOREIGN KEY([Id_DOTes])
		REFERENCES [dbo].[DOTes] ([Id_DOTes])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_Id_DOTes]

		-- Tipologie Import Letture Contatori (xContatoreLetturaImportTipo)
		-- nuova tabella per la configurazione dei diversi tipi di import delle letture dei contatori
		IF dbo.afn_du_IsTable('xContatoreLetturaImportTipo') = 0
			EXEC asp_du_AddTable 'xContatoreLetturaImportTipo', 10, 'Anagrafica tipologie import letture contatori'
		EXEC asp_du_AddAlterColumnComment 'xContatoreLetturaImportTipo', 'Id_xContatoreLetturaImportTipo', 'Identificativo tipo import'
		EXEC asp_du_AddAlterColumnComment 'xContatoreLetturaImportTipo', 'Cd_xContatoreLetturaImportTipo', 'Codice tipo import letture contatori'
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImportTipo', 'Descrizione', 'varchar(80)  NULL',	'''<Descrizione Mancante>''', 'Descrizione tipo import letture contatori'
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImportTipo', 'FileProcedura', 'varchar(30)  NULL',	'''<Descrizione Mancante>''', 'Nome del file della procedura di normalizzazione a carico del partner'

		-- Import Letture Contatori (xContatoreLetturaImport)
		-- nuova tabella per le letture dei contatori normalizzate da importare
		IF dbo.afn_du_IsTable('xContatoreLetturaImport') = 0
			EXEC asp_du_AddTable 'xContatoreLetturaImport', 0, 'Letture dei contatori normalizzate da importare'
		EXEC asp_du_AddAlterColumnComment 'xContatoreLetturaImport', 'Id_xContatoreLetturaImport'		, 'Identificativo lettura contatore normalizzata da importare'
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Cd_xContatoreLetturaImportTipo', 'char(10) NOT NULL',	'', 'Codice tipo import letture contatori'
		EXEC asp_du_DropConstraint 'xContatoreLetturaImport', 'FK_xContatoreLetturaImport_xContatoreLetturaImportTipo'
		ALTER TABLE xContatoreLetturaImport WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLetturaImport_xContatoreLetturaImportTipo] FOREIGN KEY([Cd_xContatoreLetturaImportTipo]) REFERENCES [dbo].[xContatoreLetturaImportTipo] ([Cd_xContatoreLetturaImportTipo]) NOT FOR REPLICATION 
		ALTER TABLE xContatoreLetturaImport CHECK CONSTRAINT [FK_xContatoreLetturaImport_xContatoreLetturaImportTipo]
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Cd_AR', '[varchar](20) NULL', '', 'Codice articolo di magazzino'
		EXEC asp_du_DropConstraint 'xContatoreLetturaImport', 'FK_xContatoreLetturaImport_AR'
		ALTER TABLE [dbo].[xContatoreLetturaImport] WITH CHECK ADD CONSTRAINT [FK_xContatoreLetturaImport_AR] FOREIGN KEY([Cd_AR])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xContatoreLetturaImport] CHECK CONSTRAINT [FK_xContatoreLetturaImport_AR]
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Cd_xMatricola', '[varchar](40) NULL', '', 'Numero matricola'
		EXEC asp_du_DropConstraint 'xContatoreLetturaImport', 'FK_xContatoreLetturaImport_Matricola'
		ALTER TABLE [dbo].[xContatoreLetturaImport] WITH CHECK ADD CONSTRAINT [FK_xContatoreLetturaImport_Matricola] FOREIGN KEY([Cd_AR], [Cd_xMatricola])
		REFERENCES [dbo].[xMatricola] ([Cd_AR], [Cd_xMatricola])
		ALTER TABLE [dbo].[xContatoreLetturaImport] CHECK CONSTRAINT [FK_xContatoreLetturaImport_Matricola]
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Cd_xImpianto', '[char](10) NULL', '', 'Codice impianto'
		EXEC asp_du_DropConstraint 'xContatoreLetturaImport', 'FK_xContatoreLetturaImport_Impianto'
		ALTER TABLE [dbo].[xContatoreLetturaImport] WITH CHECK ADD CONSTRAINT [FK_xContatoreLetturaImport_Impianto] FOREIGN KEY([Cd_xImpianto])
		REFERENCES [dbo].[xImpianto] ([Cd_xImpianto])
		ALTER TABLE [dbo].[xContatoreLetturaImport] CHECK CONSTRAINT [FK_xContatoreLetturaImport_Impianto]
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Cd_CF', 'char(7) NULL', '', 'Cliente'
		EXEC asp_du_DropConstraint 'xContatoreLetturaImport', 'FK_xContatoreLetturaImport_CF'
		ALTER TABLE [dbo].[xContatoreLetturaImport] WITH CHECK ADD CONSTRAINT [FK_xContatoreLetturaImport_CF] FOREIGN KEY([Cd_CF])
		REFERENCES [dbo].[CF] ([Cd_CF])
		ALTER TABLE [dbo].[xContatoreLetturaImport] CHECK CONSTRAINT [FK_xContatoreLetturaImport_CF]
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Cd_CFDest', 'char(3) NULL', '', 'Destinazione diversa'
		EXEC asp_du_DropConstraint 'xContatoreLetturaImport', 'FK_xContatoreLetturaImport_CFDest'
		ALTER TABLE [dbo].[xContatoreLetturaImport]  WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLetturaImport_CFDest] FOREIGN KEY([Cd_CF], [Cd_CFDest])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xContatoreLetturaImport] CHECK CONSTRAINT [FK_xContatoreLetturaImport_CFDest]
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'DataLettura', '[smalldatetime] NOT NULL', '', 'Data lettura'
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Lettura_C1', '[int] NOT NULL', '0', 'Lettura contatore 1'
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Lettura_C2', '[int] NOT NULL', '0', 'Lettura contatore 2'
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Lettura_C3', '[int] NOT NULL', '0', 'Lettura contatore 3'
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Lettura_C4', '[int] NOT NULL', '0', 'Lettura contatore 4'
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Lettura_C5', '[int] NOT NULL', '0', 'Lettura contatore 5'
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaImport', 'Lettura_C6', '[int] NOT NULL', '0', 'Lettura contatore 6'

		-- Sviluppo Scadenze per Matricole in Noleggio (xNoleggioMatricolaSviluppo)
		-- nuova tabella per gestire le scadenze delle voci economiche di noleggio di una matricola (quota fissa noleggio, quota fissa plafond, contatori)
		IF dbo.afn_du_IsTable('xNoleggioMatricolaSviluppo') = 0
			EXEC asp_du_AddTable 'xNoleggioMatricolaSviluppo', 0, 'Sviluppo scadenze per matricole in noleggio'
		EXEC asp_du_AddAlterColumnComment 'xNoleggioMatricolaSviluppo', 'Id_xNoleggioMatricolaSviluppo', 'Identificativo scadenza'

		EXEC asp_du_AddAlterColumn 'xNoleggioMatricolaSviluppo', 'Id_xNoleggioMatricola', '[int] NOT NULL', '', 'Identificativo matricola'
		EXEC asp_du_DropConstraint 'xNoleggioMatricolaSviluppo', 'FK_xNoleggioMatricolaSviluppo_Matricola'
		ALTER TABLE [dbo].[xNoleggioMatricolaSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricolaSviluppo_Matricola] FOREIGN KEY([Id_xNoleggioMatricola])
		REFERENCES [dbo].[xNoleggioMatricola] ([Id_xNoleggioMatricola]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xNoleggioMatricolaSviluppo] CHECK CONSTRAINT [FK_xNoleggioMatricolaSviluppo_Matricola]
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricolaSviluppo', 'TipoScadenza', '[char](3) NOT NULL', '', 'Tipo scadenza (QFN - quota fissa noleggio; QFP - quota fissa plafond; EPn - extra plafond contatore n)'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricolaSviluppo', 'DataScadenza', '[smalldatetime] NOT NULL', '''19000101''', 'Data scadenza'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricolaSviluppo', 'RR_DataInizio', '[smalldatetime] NULL', '', 'Inizio Competenza'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricolaSviluppo', 'RR_DataFine'	, '[smalldatetime] NULL', '', 'Fine Competenza'
		EXEC asp_du_AddAlterColumn 'xNoleggioMatricolaSviluppo', 'Id_DOTes', '[int] NULL', '', 'Id del documento fattura con la quale è stata evasa la scadenza'
		EXEC asp_du_DropConstraint 'xNoleggioMatricolaSviluppo', 'FK_xNoleggioMatricolaSviluppo_Id_DOTes'
		ALTER TABLE [dbo].[xNoleggioMatricolaSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricolaSviluppo_Id_DOTes] FOREIGN KEY([Id_DOTes])
		REFERENCES [dbo].[DOTes] ([Id_DOTes]) --ON DELETE CASCADE
		ALTER TABLE [dbo].[xNoleggioMatricolaSviluppo] CHECK CONSTRAINT [FK_xNoleggioMatricolaSviluppo_Id_DOTes]

		-- Sviluppo Scadenze per Impianti in Noleggio (xNoleggioImpiantoSviluppo)
		-- nuova tabella per gestire le scadenze delle voci economiche di noleggio di un impianto (quota fissa noleggio, quota fissa plafond, contatori)
		IF dbo.afn_du_IsTable('xNoleggioImpiantoSviluppo') = 0
			EXEC asp_du_AddTable 'xNoleggioImpiantoSviluppo', 0, 'Sviluppo scadenze per impianti in noleggio'
		EXEC asp_du_AddAlterColumnComment 'xNoleggioImpiantoSviluppo', 'Id_xNoleggioImpiantoSviluppo', 'Identificativo scadenza'

		EXEC asp_du_AddAlterColumn 'xNoleggioImpiantoSviluppo', 'Id_xNoleggioImpianto', '[int] NOT NULL', '', 'Identificativo impianto'
		EXEC asp_du_DropConstraint 'xNoleggioImpiantoSviluppo', 'FK_xNoleggioImpiantoSviluppo_Impianto'
		ALTER TABLE [dbo].[xNoleggioImpiantoSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpiantoSviluppo_Impianto] FOREIGN KEY([Id_xNoleggioImpianto])
		REFERENCES [dbo].[xNoleggioImpianto] ([Id_xNoleggioImpianto]) ON DELETE CASCADE
		ALTER TABLE [dbo].[xNoleggioImpiantoSviluppo] CHECK CONSTRAINT [FK_xNoleggioImpiantoSviluppo_Impianto]
		EXEC asp_du_AddAlterColumn 'xNoleggioImpiantoSviluppo', 'TipoScadenza', '[char](3) NOT NULL', '', 'Tipo scadenza (QFN - quota fissa noleggio; QFP - quota fissa plafond; EPn - extra plafond contatore n)'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpiantoSviluppo', 'DataScadenza', '[smalldatetime] NOT NULL', '''19000101''', 'Data scadenza'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpiantoSviluppo', 'RR_DataInizio', '[smalldatetime] NULL', '', 'Inizio Competenza'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpiantoSviluppo', 'RR_DataFine'	 , '[smalldatetime] NULL', '', 'Fine Competenza'
		EXEC asp_du_AddAlterColumn 'xNoleggioImpiantoSviluppo', 'Id_DOTes', '[int] NULL', '', 'Id del documento fattura con la quale è stata evasa la scadenza'
		EXEC asp_du_DropConstraint 'xNoleggioImpiantoSviluppo', 'FK_xNoleggioImpiantoSviluppo_Id_DOTes'
		ALTER TABLE [dbo].[xNoleggioImpiantoSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpiantoSviluppo_Id_DOTes] FOREIGN KEY([Id_DOTes])
		REFERENCES [dbo].[DOTes] ([Id_DOTes]) --ON DELETE CASCADE
		ALTER TABLE [dbo].[xNoleggioImpiantoSviluppo] CHECK CONSTRAINT [FK_xNoleggioImpiantoSviluppo_Id_DOTes]

		/* 01-07-2016 */
		-- Sottopreventivi - Anagrafica ricarichi generali (xFormula)
		EXEC asp_du_AddAlterColumn 'xFormula', 'TipoCalcolo', 'tinyint NOT NULL', '1', '1 - applicato al valore della riga precedente; 2 - applicato al valore iniziale dell''area di competenza'

		-- porto la versione a 1.80
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 80, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.90
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.80' begin
		select 'Applico aggiornamenti al database: 1.80->1.90'
		-- qui operazioni per l'aggiornamento DB da 1.80 a 1.90

		/* 07-10-2016 */
		-- Preventivo (xPreventivoFamiglia)
		EXEC asp_du_AddAlterColumn 'xPreventivoFamiglia', 'Provvigione', 'varchar(10) NULL', '', 'Provvigione in % da liquidare all''agente'
		-- Sottopreventivo (xPreventivo)
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'PreventiviItem', '[bit] NOT NULL', '0', '0 - gestione item non attiva per il sottopreventivo; 1 - gestione item attiva per il sottopreventivo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ItemProvvigionePrev', '[varchar](10) NULL', '', 'Provvigione prevista sul prezzo previsto scontato'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ItemPrezzoVenditaV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo vendita effettivo in valuta'
		EXEC asp_du_DropColumn	   'xPreventivo', 'ItemPrezzoVenditaE'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ItemPrezzoVenditaE', 'AS (CONVERT([numeric](18,2), round(([ItemPrezzoVenditaV] / [Cambio]),2),(0)))', '', 'Prezzo vendita effettivo in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ItemProvvigioneEff', '[varchar](10) NULL', '', 'Provvigione effettiva sul prezzo di vendita effettivo'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'Provvigione', 'varchar(10) NULL', '', 'Provvigione in % da liquidare all''agente'
		-- Sottopreventivo - Attività (xPreventivoFase)
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'PrezzoUnVenditaV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo unitario di vendita in valuta'
		EXEC asp_du_DropColumn	   'xPreventivoFase', 'PrezzoUnVenditaE'
		EXEC asp_du_AddAlterColumn 'xPreventivoFase', 'PrezzoUnVenditaE', 'AS (CONVERT([numeric](18,2), round(([PrezzoUnVenditaV] / [Cambio]),2),(0)))', '', 'Prezzo unitario di vendita in euro'
		-- Sottopreventivo - Materiale (xPreventivoMateriale)
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Cd_ARItem', '[varchar](20) NULL', '', 'Codice item'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'FK_xPreventivoMateriale_ARItem'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoMateriale_ARItem] FOREIGN KEY([Cd_ARItem])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [FK_xPreventivoMateriale_ARItem]
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'DescrizioneARItem', '[varchar](80) NULL', '', 'Descrizione item'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'PrezzoUnVenditaV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo unitario di vendita in valuta'
		EXEC asp_du_DropColumn	   'xPreventivoMateriale', 'PrezzoUnVenditaE'
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'PrezzoUnVenditaE', 'AS (CONVERT([numeric](18,2), round(([PrezzoUnVenditaV] / [Cambio]),2),(0)))', '', 'Prezzo unitario di vendita in euro'
		-- Sottopreventivo - Spese (xPreventivoSpesa)
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'Cd_ARItem', '[varchar](20) NULL', '', 'Codice item'
		EXEC asp_du_DropConstraint 'xPreventivoSpesa', 'FK_xPreventivoSpesa_ARItem'
		ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoSpesa_ARItem] FOREIGN KEY([Cd_ARItem])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [FK_xPreventivoSpesa_ARItem]
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'DescrizioneARItem', '[varchar](80) NULL', '', 'Descrizione item'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'PrezzoUnVenditaV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo unitario di vendita in valuta'
		EXEC asp_du_DropColumn	   'xPreventivoSpesa', 'PrezzoUnVenditaE'
		EXEC asp_du_AddAlterColumn 'xPreventivoSpesa', 'PrezzoUnVenditaE', 'AS (CONVERT([numeric](18,2), round(([PrezzoUnVenditaV] / [Cambio]),2),(0)))', '', 'Prezzo unitario di vendita in euro'
		-- Sottopreventivo - Nuova tabella di gestione degli Item (xPreventivoItem)
		IF dbo.afn_du_IsTable('xPreventivoItem') = 0
			BEGIN
				CREATE TABLE [dbo].xPreventivoItem(
					[Id_PreventivoItem] [int] IDENTITY(1,1) NOT NULL,
					[UserIns] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoItem_UserIns]  DEFAULT (host_name()),
					[UserUpd] [varchar](48) NOT NULL CONSTRAINT [DF_xPreventivoItem_UserUpd]  DEFAULT (host_name()),
					[TimeIns] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoItem_TimeIns]  DEFAULT (getdate()),
					[TimeUpd] [smalldatetime] NOT NULL CONSTRAINT [DF_xPreventivoItem_TimeUpd]  DEFAULT (getdate()),
					[Ts] [timestamp] NOT NULL,
					CONSTRAINT [PK_xPreventivoItem] PRIMARY KEY NONCLUSTERED 
				(
					[Id_PreventivoItem] ASC
				)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
				) ON [PRIMARY]
			END
		EXEC asp_du_AddAlterTableComment 'xPreventivoItem', 'Sottopreventivi - gestione item'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'Id_Preventivo', '[int] NOT NULL', '', 'Identificativo testa sottopreventivo'
		EXEC asp_du_DropConstraint 'xPreventivoItem', 'FK_xPreventivoItem_Preventivo'
		ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoItem_Preventivo] FOREIGN KEY([Id_Preventivo])
		REFERENCES [dbo].[xPreventivo] ([Id_Preventivo])--ON DELETE CASCADE
		ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [FK_xPreventivoItem_Preventivo]
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'Cd_ARItem', '[varchar](20) NULL', '', 'Codice item'
		EXEC asp_du_DropConstraint 'xPreventivoItem', 'FK_xPreventivoItem_ARItem'
		ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoItem_ARItem] FOREIGN KEY([Cd_ARItem])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [FK_xPreventivoItem_ARItem]
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'DescrizioneARItem', '[varchar](80) NULL', '', 'Descrizione item'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'Sequenza', '[int] NOT NULL', '0', 'Sequenza'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'RigaNoItem', '[bit] NOT NULL', '0', '0 - riga normale con item; 1 - riga speciale per gestione no item'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'Cd_VL', '[char](3) NULL', '', 'Valuta'
		EXEC asp_du_DropConstraint 'xPreventivoItem', 'FK_xPreventivoItem_VL'
		ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoItem_VL] FOREIGN KEY([Cd_VL])
		REFERENCES [dbo].[VL] ([Cd_VL]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [FK_xPreventivoItem_VL]
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'Cambio'			 , '[numeric](18, 6) NOT NULL', '1', 'Cambio'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'Decimali'		 , '[tinyint] NOT NULL'			  , '2', 'Decimali per il prezzo totale'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'DecimaliPrzUn', '[tinyint] NOT NULL'			  , '3', 'Decimali per il prezzo unitario'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'ModelloVal'   , '[char](1) NOT NULL', '''C''', 'C - Item valorizzato "Al Costo"; R - Item valorizzato "Al Ricavo"'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'RicavoTotaleV', '[numeric](18, 6) NOT NULL', '0', 'Ricavo totale in valuta'
		EXEC asp_du_DropColumn	   'xPreventivoItem', 'RicavoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'RicavoTotaleE', 'AS (CONVERT([numeric](18,2), round(([RicavoTotaleV] / [Cambio]),2),(0)))', '', 'Ricavo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'CostoTotaleV', '[numeric](18, 6) NOT NULL', '0', 'Costo totale in valuta'
		EXEC asp_du_DropColumn	   'xPreventivoItem', 'CostoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'CostoTotaleE', 'AS (CONVERT([numeric](18,2), round(([CostoTotaleV] / [Cambio]),2),(0)))', '', 'Costo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'ValoreRRV', 'numeric(18, 0) NOT NULL',	'0', 'Valore ricarichi generali al ricavo in valuta'
		EXEC asp_du_DropColumn		 'xPreventivoItem', 'ValoreRRE'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'ValoreRRE', 'AS (CONVERT([numeric](18,0), round(([ValoreRRV] / [Cambio]),0),(0)))', '', 'Valore ricarichi generali al ricavo in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'ValoreRCV', 'numeric(18, 0) NOT NULL',	'0', 'Valore ricarichi generali al costo in valuta'
		EXEC asp_du_DropColumn		 'xPreventivoItem', 'ValoreRCE'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'ValoreRCE', 'AS (CONVERT([numeric](18,0), round(([ValoreRCV] / [Cambio]),0),(0)))', '', 'Valore ricarichi generali al costo in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'Ricarica', '[varchar](15) NOT NULL', '('''')', 'Ricarico da applicare all''item'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'PrezzoUnRicaricatoV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo unitario ricaricato in valuta'
		EXEC asp_du_DropColumn	   'xPreventivoItem', 'PrezzoUnRicaricatoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'PrezzoUnRicaricatoE', 'AS (CONVERT([numeric](18,2), round(([PrezzoUnRicaricatoV] / [Cambio]),2),(0)))', '', 'Prezzo unitario ricaricato in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'Sconto', '[varchar](20) NOT NULL', '('''')', 'Sconto da applicare all''item'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'PrezzoUnScontatoV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo unitario scontato in valuta'
		EXEC asp_du_DropColumn	   'xPreventivoItem', 'PrezzoUnScontatoE'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'PrezzoUnScontatoE', 'AS (CONVERT([numeric](18,2), round(([PrezzoUnScontatoV] / [Cambio]),2),(0)))', '', 'Prezzo unitario scontato in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'Quantita', '[numeric](18, 8) NOT NULL', '0', 'Quantità'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'PrezzoTotaleV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo totale in valuta'
		EXEC asp_du_DropColumn	   'xPreventivoItem', 'PrezzoTotaleE'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'PrezzoTotaleE', 'AS (CONVERT([numeric](18,2), round(([PrezzoTotaleV] / [Cambio]),2),(0)))', '', 'Prezzo totale in euro'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'PrezzoUnVenditaV', '[numeric](18, 6) NOT NULL', '0', 'Prezzo unitario di vendita in valuta'
		EXEC asp_du_DropColumn	   'xPreventivoItem', 'PrezzoUnVenditaE'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'PrezzoUnVenditaE', 'AS (CONVERT([numeric](18,2), round(([PrezzoUnVenditaV] / [Cambio]),2),(0)))', '', 'Prezzo unitario di vendita in euro'
		-- Ticket - Materiale e Spese (xRDTicketMaterialeSpesaMov)
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'Cd_ARItem', '[varchar](20) NULL', '', 'Codice item'
		EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'FK_xRDTicketMaterialeSpesaMov_ARItem'
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_ARItem] FOREIGN KEY([Cd_ARItem])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] CHECK CONSTRAINT [FK_xRDTicketMaterialeSpesaMov_ARItem]
		EXEC asp_du_AddAlterColumn 'xRDTicketMaterialeSpesaMov', 'DescrizioneARItem', '[varchar](80) NULL', '', 'Descrizione item'
		-- Documenti - Teste (DOTes)
		EXEC asp_du_AddAlterColumn 'DOTes', 'xCd_ARItem', '[varchar](20) NULL', '', 'Codice item'
		EXEC asp_du_DropConstraint 'DOTes', 'xFK_DOTes_ARItem'
		ALTER TABLE [dbo].[DOTes] WITH NOCHECK ADD CONSTRAINT [xFK_DOTes_ARItem] FOREIGN KEY([xCd_ARItem])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[DOTes] CHECK CONSTRAINT [xFK_DOTes_ARItem]
		EXEC asp_du_AddAlterColumn 'DOTes', 'xDescrizioneARItem', '[varchar](80) NULL', '', 'Descrizione item'
		-- Documenti - Righe (DORig)
		EXEC asp_du_AddAlterColumn 'DORig', 'xCd_ARItem', '[varchar](20) NULL', '', 'Codice item'
		EXEC asp_du_DropConstraint 'DORig', 'xFK_DORig_ARItem'
		ALTER TABLE [dbo].[DORig] WITH NOCHECK ADD CONSTRAINT [xFK_DORig_ARItem] FOREIGN KEY([xCd_ARItem])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[DORig] CHECK CONSTRAINT [xFK_DORig_ARItem]
		EXEC asp_du_AddAlterColumn 'DORig', 'xDescrizioneARItem', '[varchar](80) NULL', '', 'Descrizione item'
		-- Documenti - Nuova tabella di raggruppamento dei tipi documento (xDOGruppo)
		IF dbo.afn_du_IsTable('xDOGruppo') = 0
			EXEC asp_du_AddTable 'xDOGruppo', 3, 'Tabella di raggruppamento dei tipi documento'
		EXEC asp_du_AddAlterColumn 'xDOGruppo', 'Descrizione', 'varchar(80) NULL', '', 'Descrizione raggruppamento'
		-- Documenti - Configurazione (DO)
		EXEC asp_du_AddAlterColumn 'DO', 'xCd_DOGruppo', 'char(3) NULL', '', 'Codice raggruppamento tipo documento'
		EXEC asp_du_DropConstraint 'DO', 'xFK_DO_DOGruppo'
		ALTER TABLE DO WITH NOCHECK ADD CONSTRAINT [xFK_DO_DOGruppo] FOREIGN KEY([xCd_DOGruppo])
		REFERENCES [dbo].[xDOGruppo] ([Cd_xDOGruppo]) NOT FOR REPLICATION
		ALTER TABLE DO CHECK CONSTRAINT [xFK_DO_DOGruppo]

		-- porto la versione a 1.90
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 90, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.91
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.90' begin
		select 'Applico aggiornamenti al database: 1.90->1.91'
		-- qui operazioni per l'aggiornamento DB da 1.90 a 1.91

		-- Impostazioni CCA (xImpostazione)
    EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviItem_NoItem', '[bit] NOT NULL', '0', '0 - la riga senza item non è gestita; 1 - la riga senza item è gestita'

		-- Sottopreventivo - Item (xPreventivoItem)
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'Id_DORig'	, '[int] NULL', '', 'Id della riga documento con la quale è stato evaso l''item'
		EXEC asp_du_DropConstraint 'xPreventivoItem', 'FK_xPreventivoItem_Id_DORig'
		ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoItem_Id_DORig] FOREIGN KEY([Id_DORig])
		REFERENCES [dbo].[DORig] ([Id_DORig]) ON DELETE SET NULL -- alla cancellazione della riga nel documento, il campo nella tabella xPreventivoItem diventa = Null
		ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [FK_xPreventivoItem_Id_DORig]
    EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'NotePreventivoItem', '[varchar](max) NULL', '', 'Note item'

		-- porto la versione a 1.91
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 91, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.92
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.91' begin
		select 'Applico aggiornamenti al database: 1.91->1.92'
		-- qui operazioni per l'aggiornamento DB da 1.91 a 1.92

		-- Impostazioni CCA (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'DecimaliOra', '[tinyint] NOT NULL', '2', 'Decimali da gestire per le ore attività'

		-- porto la versione a 1.92
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 92, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.93
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.92' begin
		select 'Applico aggiornamenti al database: 1.92->1.93'
		-- qui operazioni per l'aggiornamento DB da 1.92 a 1.93

		/* Preventivi - Coefficienti per calcolo Quantità */
		/* 20-12-2016 */
		-- Impostazioni (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione'       , 'PreventiviCoeff5UM', '[int] NOT NULL'           , '1', 'Unità di misura di default coefficiente 5'
		EXEC asp_du_AddAlterColumn 'xImpostazione'       , 'EtichettaCoeff5'   , '[varchar](20) NULL'       , '' , 'Etichetta del coefficiente 5 nella maschera dei Preventivi\Materiali'
		-- Tabella Materiali dei Sottopreventivi (xPreventivoMateriale)
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Coeff5'            , '[numeric](18, 8) NOT NULL', '0', 'Coefficiente 5'

		-- porto la versione a 1.93
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 93, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.94
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.93' begin
		select 'Applico aggiornamenti al database: 1.93->1.94'
		-- qui operazioni per l'aggiornamento DB da 1.93 a 1.94

		/* Ticket - Gestione Rilavorazioni */
		--  Eliminazione constraint
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov',		'FK_xRDTicketAttivitaMov_xRDRilOrigine'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov',		'FK_xRDTicketAttivitaMov_xRDRilCausale'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL',	'FK_xRDTicketAttivitaMovRL_xRDRilOrigine'
		EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL',	'FK_xRDTicketAttivitaMovRL_xRDRilCausale'
		--  Tabella Origini Rilavorazione
		IF dbo.afn_du_IsTable('xRDRilOrigine') = 0
			EXEC asp_du_AddTable 'xRDRilOrigine', 3, 'Origini Rilavorazioni'
			EXEC asp_du_AddAlterColumn 'xRDRilOrigine', 'Descrizione', 'varchar(50) NOT NULL', '', 'Descrizione origine rilavorazione'
		--  Tabella Causali Rilavorazione
		IF dbo.afn_du_IsTable('xRDRilCausale') = 0
			EXEC asp_du_AddTable 'xRDRilCausale', 3, 'Causali Rilavorazioni'
			EXEC asp_du_AddAlterColumn 'xRDRilCausale', 'Descrizione', 'varchar(50) NOT NULL', '', 'Descrizione causale rilavorazione'
		-- Aggiunta campo in tabella PRAttivita
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xAttivaRil', 'bit not null'	, '0', '1 Se attivate le rilavorazioni per l''attività'
		-- Aggiunta campi in tabella xRDTicketAttivitaMov
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Cd_xRDRilOrigine', 'char(3) null', '', 'Origine rilavorazione'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMov', 'Cd_xRDRilCausale', 'char(3) null', '', 'Causale rilavorazione'
		--  Aggiunta campi in tabella xRDTicketAttivitaMovRL
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Cd_xRDRilCausale', 'char(3) null', '', 'Causale rilavorazione'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaMovRL', 'Cd_xRDRilOrigine', 'char(3) null', '', 'Origine rilavorazione'
		--  Aggiunta foreign key
		ALTER TABLE xRDTicketAttivitaMov WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_xRDRilOrigine]		
			FOREIGN KEY([Cd_xRDRilOrigine])	REFERENCES xRDRilOrigine ([Cd_xRDRilOrigine])		
			ON DELETE CASCADE	NOT FOR REPLICATION 
		ALTER TABLE xRDTicketAttivitaMov WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMov_xRDRilCausale]		
			FOREIGN KEY([Cd_xRDRilCausale])	REFERENCES xRDRilCausale ([Cd_xRDRilCausale])		
			ON DELETE CASCADE	NOT FOR REPLICATION 
		ALTER TABLE xRDTicketAttivitaMovRL WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDRilOrigine]		
			FOREIGN KEY([Cd_xRDRilOrigine])	REFERENCES xRDRilOrigine ([Cd_xRDRilOrigine])		
			ON DELETE CASCADE	NOT FOR REPLICATION 
		ALTER TABLE xRDTicketAttivitaMovRL WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDRilCausale]		
			FOREIGN KEY([Cd_xRDRilCausale])	REFERENCES xRDRilCausale ([Cd_xRDRilCausale])		
			ON DELETE CASCADE	NOT FOR REPLICATION 
		ALTER TABLE xRDTicketAttivitaMov CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_xRDRilOrigine]
		ALTER TABLE xRDTicketAttivitaMov CHECK CONSTRAINT [FK_xRDTicketAttivitaMov_xRDRilCausale]
		ALTER TABLE xRDTicketAttivitaMovRL CHECK CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDRilOrigine]
		ALTER TABLE xRDTicketAttivitaMovRL CHECK CONSTRAINT [FK_xRDTicketAttivitaMovRL_xRDRilCausale]

		-- porto la versione a 1.94
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 94, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.95
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.94' begin
		select 'Applico aggiornamenti al database: 1.94->1.95'
		-- qui operazioni per l'aggiornamento DB da 1.94 a 1.95

		/* Preventivi - Gestione di 2 decimali nei Ricarichi Generali e negli Item */
		/* 01-02-2017 */
		-- Sottopreventivi (xPreventivo)
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ImportoTotaleV'	, 'numeric(18, 2) NULL'			,	'0', 'Prezzo finale concordato con il cliente in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'MaterialeCostoV'	, 'numeric(18, 2) NOT NULL' ,	'0', 'Costo totale dei materiali in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'MaterialeRicavoV', 'numeric(18, 2) NOT NULL' ,	'0', 'Ricavo totale sui materiali in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FaseCostoV'			, 'numeric(18, 2) NOT NULL' ,	'0', 'Costo totale delle attività in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'FaseRicavoV'			, 'numeric(18, 2) NOT NULL' ,	'0', 'Ricavo totale sulle attività in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'SpesaCostoV'     , 'numeric(18, 2) NOT NULL' ,	'0', 'Costo totale delle spese in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'SpesaRicavoV'		, 'numeric(18, 2) NOT NULL' ,	'0', 'Ricavo totale sulle spese in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'RiepilogoCostoV'	, 'numeric(18, 2) NOT NULL' ,	'0', 'Costo totale riepilogativo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'RiepilogoRicavoV', 'numeric(18, 2) NOT NULL' ,	'0', 'Ricavo totale riepilogativo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC1V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 1 Materiale-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC2V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 2 Materiale-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC3V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 3 Materiale-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC4V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 4 Materiale-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMC5V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 5 Materiale-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR1V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 1 Materiale-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR2V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 2 Materiale-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR3V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 3 Materiale-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR4V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 4 Materiale-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreMR5V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 5 Materiale-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC1V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 1 Attività-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC2V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 2 Attività-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC3V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 3 Attività-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC4V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 4 Attività-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFC5V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 5 Attività-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR1V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 1 Attività-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR2V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 2 Attività-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR3V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 3 Attività-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR4V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 4 Attività-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreFR5V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 5 Attività-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC1V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 1 Spesa-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC2V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 2 Spesa-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC3V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 3 Spesa-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC4V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 4 Spesa-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSC5V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 5 Spesa-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR1V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 1 Spesa-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR2V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 2 Spesa-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR3V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 3 Spesa-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR4V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 4 Spesa-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreSR5V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 5 Spesa-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC1V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 1 Riepilogo-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC2V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 2 Riepilogo-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC3V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 3 Riepilogo-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC4V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 4 Riepilogo-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRC5V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 5 Riepilogo-Costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR1V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 1 Riepilogo-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR2V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 2 Riepilogo-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR3V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 3 Riepilogo-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR4V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 4 Riepilogo-Ricavo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'ValoreRR5V'      , 'numeric(18, 2) NOT NULL'	,	'0', 'Valore 5 Riepilogo-Ricavo in valuta'
		-- Sottopreventivi - Gestione degli Item (xPreventivoItem)
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'ValoreRCV'   , 'numeric(18, 2) NOT NULL',	'0', 'Valore ricarichi generali al costo in valuta'
		EXEC asp_du_AddAlterColumn 'xPreventivoItem', 'ValoreRRV'   , 'numeric(18, 2) NOT NULL',	'0', 'Valore ricarichi generali al ricavo in valuta'

		/* Rileva - Gestione dei riferimenti e degli Item */
		/* 17-02-2017 */
		-- Aggiunta campo in tabella PRAttivita
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xRiferimentoUIMode'         , 'smallint not null', '1', '1 - il riferimento è editabile; 2 - il riferimento è ereditato dall'' attività ma non editabile; 3 - il riferimento è ereditato dall''attività ed è editabile'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xDDRisorsaNoOreEff'         , 'bit not null'     , '0', 'Se 1 il tempo durata Risorsa verrà escluso dal conteggio totale della durata'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xDDOperatoreNoOreEff'       , 'bit not null'     , '0', 'Se 1 il tempo durata Operatore verrà escluso dal conteggio totale della durata'
		EXEC asp_du_AddAlterColumn 'PRAttivita', 'xDDRisorsaOperatoreNoOreEff', 'bit not null'     , '0', 'Se 1 il tempo durata RisorsaOperatore verrà escluso dal conteggio totale della durata'
		-- Aggiunta campo in tabella xImpostazione
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'RilevaItem'       , 'bit not null', '0', 'Se 1 Articolo di fase è visibile in Rileva per le attività'
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'RilevaRiferimento', 'bit not null', '0', 'Se 1 il campo riferimento è visibile in Rileva nelle attività'
		-- Aggiunta campo in tabella xRDTicketAttivita
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivita', 'Riferimento', 'varchar(80)', '', 'Riferimento attività'

		-- porto la versione a 1.95
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 95, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.96
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.95' begin
		select 'Applico aggiornamenti al database: 1.95->1.96'
		-- qui operazioni per l'aggiornamento DB da 1.95 a 1.96

		/* Preventivi - gestione della valuta e del cambio per gli acquisti di materiale [i campi sono visibili solo tramite ditta_ext pers.] */
		/* 31-03-2017 */
		-- Materiali nei Sottopreventivi (xPreventivoMateriale)
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'Cd_VLAcq', '[char](3) NULL', '', 'Valuta acquisto'
		EXEC asp_du_DropConstraint 'xPreventivoMateriale', 'FK_xPreventivoMateriale_VLAcq'
		ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivoMateriale_VLAcq] FOREIGN KEY([Cd_VLAcq])
		REFERENCES [dbo].[VL] ([Cd_VL]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [FK_xPreventivoMateriale_VLAcq]
		EXEC asp_du_AddAlterColumn 'xPreventivoMateriale', 'CambioAcq', '[numeric](18, 6) NOT NULL', '1', 'Cambio acquisto'
    EXEC('Update xPreventivoMateriale Set Cd_VLAcq = Cd_VL, CambioAcq = Cambio')

		/* Preventivi - gestione di una formula fissa come ultima del sottopreventivo */
		/* 26-04-2017 */
		-- Sottopreventivi - Anagrafica ricarichi generali (xFormula)
    EXEC asp_du_AddAlterColumn 'xFormula', 'UIFormulaFix', '[bit] NOT NULL', '0', '1 - è il ricarico finale, fisso e non modificabile da parte dell''utente'

		/* Ticket - Import Attività */
    /* 24-05-2017 */
    -- Tipologie di import (xRDTicketAttivitaImportTipo)
		IF dbo.afn_du_istable('xRDTicketAttivitaImportTipo') = 0 
			EXEC asp_du_addtable 'xRDTicketAttivitaImportTipo', 10, 'Tipo di import per le attività del ticket'
		EXEC asp_du_addaltercolumn 'xRDTicketAttivitaImportTipo', 'Descrizione'  , 'varchar(80) not null', '', 'Descrizione tipo di import'
		EXEC asp_du_addaltercolumn 'xRDTicketAttivitaImportTipo', 'FileProcedura', 'varchar(30) not null', '', 'File per la procedura di import'
		
		-- Tabella di appoggio delle attività importate (xRDTicketAttivitaImport)
		IF dbo.afn_du_istable('xRDTicketAttivitaImport') = 0 
			EXEC asp_du_addtable 'xRDTicketAttivitaImport', 0, ''
		EXEC asp_du_addaltercolumn 'xRDTicketAttivitaImport', 'Cd_xRDTicketAttivitaImportTipo', 'char(10)         null'    , '', 'Tipo di import per le attività del ticket'
    EXEC asp_du_DropConstraint 'xRDTicketAttivitaImport', 'FK_xRDTicketAttivitaImport_xRDTicketAttivitaImportTipo'
		ALTER TABLE [dbo].[xRDTicketAttivitaImport]	WITH NOCHECK ADD CONSTRAINT [FK_xRDTicketAttivitaImport_xRDTicketAttivitaImportTipo] FOREIGN KEY (Cd_xRDTicketAttivitaImportTipo) 
		REFERENCES xRDTicketAttivitaImportTipo (Cd_xRDTicketAttivitaImportTipo) NOT FOR REPLICATION
		ALTER TABLE [dbo].[xRDTicketAttivitaImport] CHECK CONSTRAINT [FK_xRDTicketAttivitaImport_xRDTicketAttivitaImportTipo]		
		EXEC asp_du_addaltercolumn 'xRDTicketAttivitaImport', 'Riga'                          , 'smallint		      not null', '', 'Sequenza'
		EXEC asp_du_addaltercolumn 'xRDTicketAttivitaImport', 'Cd_PRAttivita'                 , 'varchar(20)	    not null', '', 'Attività del ticket'
		EXEC asp_du_addaltercolumn 'xRDTicketAttivitaImport', 'Descrizione'                   , 'varchar(80)	    not null', '', 'Descrizione della attività'
		EXEC asp_du_addaltercolumn 'xRDTicketAttivitaImport', 'Cd_ArItem'                     , 'varchar(20)	    null'    , '', 'Item'
		EXEC asp_du_addaltercolumn 'xRDTicketAttivitaImport', 'DescrizioneARItem'             , 'varchar(80)	    null'    , '', 'Descrizione di Item'
		EXEC asp_du_addaltercolumn 'xRDTicketAttivitaImport', 'TipoVincolo'                   , 'smallint         not null', '', 'Tipo Vincolo Sequenza: 0 - senza vincoli; 1 - vincolata ad una sola attività; > 1 - vincolata a più attività'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaImport', 'NumOrePrev'                    , '[numeric](18, 6) NULL'    , '', 'Numero ore previste'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaImport', 'Riferimento'                   , 'varchar(80)      NULL'    , '', 'Riferimento'
		EXEC asp_du_AddAlterColumn 'xRDTicketAttivitaImport', 'Ordine'		                    , 'int			        NULL'    , '', 'Ordinamento'

		-- Tabella di gestione del tipo vincolo e dei predecessori (xPRAttivitaEP)
		IF dbo.afn_du_istable('xPRAttivitaEP') = 0 
			EXEC asp_du_addtable 'xPRAttivitaEP', 0, ''

		EXEC asp_du_addaltercolumn 'xPRAttivitaEP', 'Cd_PRAttivita'    , 'varchar(20) null'    , '', 'Codice Attivita'
    EXEC asp_du_DropConstraint 'xPRAttivitaEP', 'FK_xPRAttivitaEP_PRAttivita'
    ALTER TABLE [dbo].[xPRAttivitaEP]	WITH NOCHECK ADD CONSTRAINT [FK_xPRAttivitaEP_PRAttivita] FOREIGN KEY (Cd_PRAttivita) 
		REFERENCES PRAttivita (Cd_PRAttivita) NOT FOR REPLICATION
		ALTER TABLE [dbo].[xPRAttivitaEP] CHECK CONSTRAINT [FK_xPRAttivitaEP_PRAttivita]
    EXEC asp_du_addaltercolumn 'xPRAttivitaEP', 'Cd_PRAttivitaPred', 'varchar(20) null'    , '', 'Codice Predecessore della attivita '
		EXEC asp_du_addaltercolumn 'xPRAttivitaEP', 'Descrizione'      , 'varchar(80)	not null', '', 'Descrizione Predecessore'
		EXEC asp_du_addaltercolumn 'xPRAttivitaEP', 'Riga'             , 'smallint    not null', '', 'Riga'

		-- Anagrafica Attività (PRAttivita)
		EXEC asp_du_addaltercolumn 'PRAttivita', 'xVincolo', 'Int not null', '1', 'Vincolo'

		-- porto la versione a 1.96
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 96, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.97
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.96' begin
		select 'Applico aggiornamenti al database: 1.96->1.97'
		-- qui operazioni per l'aggiornamento DB da 1.96 a 1.97

		-- porto la versione a 1.97
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 97, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.98
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.97' begin
		select 'Applico aggiornamenti al database: 1.97->1.98'
		-- qui operazioni per l'aggiornamento DB da 1.97 a 1.98

		-- porto la versione a 1.98
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 98, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 1.99
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.98' begin
		select 'Applico aggiornamenti al database: 1.98->1.99'
		-- qui operazioni per l'aggiornamento DB da 1.98 a 1.99

		-- DO
		exec asp_du_AddAlterColumn 'DO', 'xControlloMatricole', 'bit not null', '0', '1 = controlla se le matricole inserite nel documento esistono in anagrafica matricole'
		-- xInterventoProg
		exec asp_du_AddAlterColumn 'xInterventoProg', 'GiorniCiclo', 'int', '', 'Periodicità dell''intervento programmato in giorni'
		-- xRDTicket
		exec asp_du_AddAlterColumn 'xRDTicket', 'Cd_CFZona', 'char(3)', '', 'Zona del cliente'
		EXEC asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_Cd_CFZona'
		ALTER TABLE xRDTicket WITH NOCHECK ADD CONSTRAINT [FK_xRDTicket_Cd_CFZona] FOREIGN KEY([Cd_CFZona]) 
		REFERENCES [dbo].[CFZona] ([Cd_CFZona]) NOT FOR REPLICATION 
		ALTER TABLE xRDTicket CHECK CONSTRAINT [FK_xRDTicket_Cd_CFZona]

		-- porto la versione a 1.99
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (1, 99, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.00
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '1.99' begin
		select 'Applico aggiornamenti al database: 1.99->2.00'
		-- qui operazioni per l'aggiornamento DB da 1.99 a 2.00

		-- porto la versione a 2.00
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 0, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.10
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.0' begin
		select 'Applico aggiornamenti al database: 2.00->2.10'
		-- qui operazioni per l'aggiornamento DB da 2.00 a 2.10

		-- porto la versione a 2.10
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 10, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.20
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.10' begin
		select 'Applico aggiornamenti al database: 2.10->2.20'
		-- qui operazioni per l'aggiornamento DB da 2.10 a 2.20

		-- porto la versione a 2.20
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 20, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.30
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.20' begin
		select 'Applico aggiornamenti al database: 2.20->2.30'
		-- qui operazioni per l'aggiornamento DB da 2.20 a 2.30

		-- porto la versione a 2.30
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 30, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.40
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.30' begin
		select 'Applico aggiornamenti al database: 2.30->2.40'
		-- qui operazioni per l'aggiornamento DB da 2.30 a 2.40

		-- DOSottoCommessa
		exec asp_du_AddAlterColumn 'DOSottoCommessa', 'xBloccaModifica', 'bit not null', '0', 'Se abilitato blocca la modifica delle righe per la sottocommessa'
		exec asp_du_AddAlterColumn 'DOSottoCommessa', 'xBloccaElimina' , 'bit not null', '0', 'Se abilitato blocca l''eliminazione delle righe per la sottocommessa'
		-- Impostazioni (xImpostazione)
		EXEC asp_du_AddAlterColumn 'xImpostazione', 'PreventiviDBCiclo', 'bit not null', '0', '1 = configuratore ciclo distinta base attivo'
		-- sezione 1: dati di testa (DBCiclo)
		EXEC asp_du_AddAlterColumn 'DBCiclo', 'xRicarica'       , '[varchar](15) NULL'   , '('''')', 'Ricarico da applicare'
		EXEC asp_du_AddAlterColumn 'DBCiclo', 'xQuantita'       , '[numeric](18, 8) NULL', '0'      , 'Quantità da produrre'
		EXEC asp_du_AddAlterColumn 'DBCiclo', 'xPercAzienda'    , '[numeric](18, 6) NULL', '0'		 , 'Percentuale azienda'
		EXEC asp_du_AddAlterColumn 'DBCiclo', 'xPercOperatore'  , '[numeric](18, 6) NULL', '0'		 , 'Percentuale responsabile'
		EXEC asp_du_AddAlterColumn 'DBCiclo', 'xTipoValCosto'	, 'tinyint NOT NULL'     , '1'     , 'Tipo di valorizzazione di default'
		EXEC asp_du_AddAlterColumn 'DBCiclo', 'xCd_LS_Costo'    , 'char(7) NULL'         , ''      , 'Listino costo di default'
		EXEC asp_du_AddAlterColumn 'DBCiclo', 'xPrezzoVenditaUn', '[numeric](18, 6) NULL', '0'     , 'Prezzo di vendita deciso'
		EXEC asp_du_DropColumn	   'DBCiclo', 'xPrezzoVendita'
		EXEC asp_du_AddAlterColumn 'DBCiclo', 'xPrezzoVendita'	, 'AS (CONVERT([numeric](18,6), round(([xPrezzoVenditaUn] * [xQuantita]),6),(0)))', '', 'Prezzo vendita totale'
		-- sezione 2: dati di riga (xDBCicloL1)
		IF dbo.afn_du_IsTable('xDBCicloL1') = 0	EXEC asp_du_AddTable 'xDBCicloL1', 0, 'Ciclo DB - esplosione del primo livello'
		EXEC asp_du_AddAlterColumn 'xDBCicloL1'	, 'Id_DBCiclo'			, '[int] NOT NULL'       , '' , 'Identificativo del ciclo DB'
		EXEC asp_du_AddAlterColumn 'xDBCicloL1'	, 'Cd_PrAttivita'		, '[varchar](20) NULL'   , '' , 'Codice fase'
		EXEC asp_du_AddAlterColumn 'xDBCicloL1'	, 'CD_AR'				, '[varchar](20) NULL'   , '' , 'Codice articolo'
		EXEC asp_du_AddAlterColumn 'xDBCicloL1'	, 'TipoValCosto'		, 'tinyint NOT NULL'     , '1', 'Tipo di valorizzazione di default'
		EXEC asp_du_AddAlterColumn 'xDBCicloL1'	, 'Cd_LS_Costo'			, 'char(7) NULL'         , '' , 'Listino costo di default'
		EXEC asp_du_AddAlterColumn 'xDBCicloL1'	, 'QtaImpegnoUn'		, '[numeric](18, 8) NULL', '0', 'Quantità data dall''esplosione al primo livello'
		EXEC asp_du_AddAlterColumn 'xDBCicloL1'	, 'QtaImpegno'			, '[numeric](18, 8) NULL', '0', 'Quantità data dall''esplosione al primo livello * quantità in produzione indicata nel ciclo'
		EXEC asp_du_AddAlterColumn 'xDBCicloL1'	, 'CostoUn'				, '[numeric](18, 6) NULL', '0', 'Quantità data dall''esplosione al primo livello * costo dato dal tipo di valorizzazione'
		EXEC asp_du_AddAlterColumn 'xDBCicloL1'	, 'Costo'				, '[numeric](18, 6) NULL', '0', 'Costo unitario * quantità in produzione indicata nel ciclo'
		EXEC asp_du_AddAlterColumn 'xDBCicloL1'	, 'CostoRicaricatoUn'	, '[numeric](18, 6) NULL', '0', 'Costo unitario * ricarico'
		EXEC asp_du_AddAlterColumn 'xDBCicloL1'	, 'CostoRicaricato'		, '[numeric](18, 6) NULL', '0', 'Costo totale * ricarico'
		-- foreign keys
		EXEC asp_du_DropConstraint 'DBCiclo'   , 'xFK_DBCiclo_LS_Costo'
		EXEC asp_du_DropConstraint 'xDBCicloL1', 'FK_xDBCicloL1_DBCiclo'
		EXEC asp_du_DropConstraint 'xDBCicloL1', 'FK_xDBCicloL1_PrAttivita'
		EXEC asp_du_DropConstraint 'xDBCicloL1', 'FK_xDBCicloL1_AR'
		EXEC asp_du_DropConstraint 'xDBCicloL1', 'FK_xDBCicloL1_LS_Costo'
		ALTER TABLE [dbo].[DBCiclo]    WITH NOCHECK ADD CONSTRAINT [xFK_DBCiclo_LS_Costo] FOREIGN KEY([xCd_LS_Costo]) REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[DBCiclo]    CHECK CONSTRAINT [xFK_DBCiclo_LS_Costo]
		ALTER TABLE [dbo].[xDBCicloL1] WITH NOCHECK ADD CONSTRAINT [FK_xDBCicloL1_DBCiclo] FOREIGN KEY([Id_DBCiclo]) REFERENCES [dbo].[DBCiclo] ([Id_DBCiclo]) 
		On Update No Action 
		On Delete Cascade 
		ALTER TABLE [dbo].[xDBCicloL1] CHECK CONSTRAINT [FK_xDBCicloL1_DBCiclo]
		ALTER TABLE [dbo].[xDBCicloL1] WITH NOCHECK ADD CONSTRAINT [FK_xDBCicloL1_PrAttivita] FOREIGN KEY([Cd_PrAttivita]) REFERENCES [dbo].[PrAttivita] ([Cd_PrAttivita])
		ALTER TABLE [dbo].[xDBCicloL1] CHECK CONSTRAINT [FK_xDBCicloL1_PrAttivita]
		ALTER TABLE [dbo].[xDBCicloL1] WITH NOCHECK ADD CONSTRAINT [FK_xDBCicloL1_AR] FOREIGN KEY([CD_AR]) REFERENCES [dbo].[AR] ([CD_AR])
		ALTER TABLE [dbo].[xDBCicloL1] CHECK CONSTRAINT [FK_xDBCicloL1_AR]
		ALTER TABLE [dbo].[xDBCicloL1] WITH NOCHECK ADD CONSTRAINT [FK_xDBCicloL1_LS_Costo] FOREIGN KEY([Cd_LS_Costo]) REFERENCES [dbo].[LS] ([Cd_LS]) NOT FOR REPLICATION 
		ALTER TABLE [dbo].[xDBCicloL1] CHECK CONSTRAINT [FK_xDBCicloL1_LS_Costo]

		-- porto la versione a 2.40
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 40, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.50
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.40' begin
		select 'Applico aggiornamenti al database: 2.40->2.50'
		-- qui operazioni per l'aggiornamento DB da 2.40 a 2.50

		-- xContatoreLettura
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_Id_DOTes'
		EXEC asp_du_DropColumn     'xContatoreLettura', 'Id_DOTes'
		-- xContatoreLetturaEvasione
		-- nuova tabella per l'evasione delle letture dei contatori
		-- (una lettura può essere evasa da più documenti, un documento può evadere più letture)
		IF dbo.afn_du_IsTable('xContatoreLetturaEvasione') = 0
			EXEC asp_du_AddTable 'xContatoreLetturaEvasione', 0, 'Evasione letture dei contatori'
		EXEC asp_du_AddAlterColumnComment 'xContatoreLetturaEvasione', 'Id_xContatoreLetturaEvasione', 'Identificativo evasione lettura'
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaEvasione', 'Id_xContatoreLettura'	, '[int] NULL', '', 'Id della lettura'
		EXEC asp_du_DropConstraint 'xContatoreLetturaEvasione', 'FK_xContatoreLetturaEvasione_xContatoreLettura'
		ALTER TABLE [dbo].[xContatoreLetturaEvasione] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLetturaEvasione_xContatoreLettura] FOREIGN KEY([Id_xContatoreLettura])
		REFERENCES [dbo].[xContatoreLettura] ([Id_xContatoreLettura]) On Delete Cascade
		ALTER TABLE [dbo].[xContatoreLetturaEvasione] CHECK CONSTRAINT [FK_xContatoreLetturaEvasione_xContatoreLettura]
		EXEC asp_du_AddAlterColumn 'xContatoreLetturaEvasione', 'Id_DOTes'	, '[int] NULL', '', 'Id del documento con il quale è stata evasa la lettura'
		EXEC asp_du_DropConstraint 'xContatoreLetturaEvasione', 'FK_xContatoreLetturaEvasione_Id_DOTes'
		ALTER TABLE [dbo].[xContatoreLetturaEvasione] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLetturaEvasione_Id_DOTes] FOREIGN KEY([Id_DOTes])
		REFERENCES [dbo].[DOTes] ([Id_DOTes]) On Delete Cascade
		ALTER TABLE [dbo].[xContatoreLetturaEvasione] CHECK CONSTRAINT [FK_xContatoreLetturaEvasione_Id_DOTes]
		-- xNoleggioMatricolaSviluppo
		EXEC asp_du_DropConstraint 'xNoleggioMatricolaSviluppo', 'FK_xNoleggioMatricolaSviluppo_Id_DOTes'
		ALTER TABLE [dbo].[xNoleggioMatricolaSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioMatricolaSviluppo_Id_DOTes] FOREIGN KEY([Id_DOTes])
		REFERENCES [dbo].[DOTes] ([Id_DOTes]) ON DELETE SET NULL
		ALTER TABLE [dbo].[xNoleggioMatricolaSviluppo] CHECK CONSTRAINT [FK_xNoleggioMatricolaSviluppo_Id_DOTes]
		-- xNoleggioImpiantoSviluppo
		EXEC asp_du_DropConstraint 'xNoleggioImpiantoSviluppo', 'FK_xNoleggioImpiantoSviluppo_Id_DOTes'
		ALTER TABLE [dbo].[xNoleggioImpiantoSviluppo] WITH NOCHECK ADD CONSTRAINT [FK_xNoleggioImpiantoSviluppo_Id_DOTes] FOREIGN KEY([Id_DOTes])
		REFERENCES [dbo].[DOTes] ([Id_DOTes]) ON DELETE SET NULL
		ALTER TABLE [dbo].[xNoleggioImpiantoSviluppo] CHECK CONSTRAINT [FK_xNoleggioImpiantoSviluppo_Id_DOTes]
		-- xDBCiclo1
		EXEC asp_du_AddAlterColumn 'xDBCicloL1', 'UM', 'char(7) null', '', 'Unità di misura dell''articolo/tempo'

		-- porto la versione a 2.50
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 50, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.60
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.50' begin
		select 'Applico aggiornamenti al database: 2.50->2.60'
		-- qui operazioni per l'aggiornamento DB da 2.50 a 2.60
		
		-- DBCiclo
		EXEC asp_du_DropColumn	   'DBCiclo', 'xRicarica'
		EXEC asp_du_AddAlterColumn 'DBCiclo', 'xRicarica', '[varchar](15) NOT NULL', '('''')', 'Ricarico da applicare'

		-- porto la versione a 2.60
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 60, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.70
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.60' begin
		select 'Applico aggiornamenti al database: 2.60->2.70'
		-- qui operazioni per l'aggiornamento DB da 2.60 a 2.70

		-- DBCiclo
		EXEC asp_du_DropColumn	   'DBCiclo', 'xPercAzienda'  
		EXEC asp_du_AddAlterColumn 'DBCiclo', 'xPercAzienda'  , '[varchar](15) NOT NULL', '('''')', 'Percentuale azienda'
		EXEC asp_du_DropColumn	   'DBCiclo', 'xPercOperatore'  
		EXEC asp_du_AddAlterColumn 'DBCiclo', 'xPercOperatore', '[varchar](15) NOT NULL', '('''')', 'Percentuale responsabile'
		-- xPreventivo
    EXEC asp_du_AddAlterColumn 'xPreventivo', 'DBCd_AR_P', '[varchar](20) NULL', '', 'Codice articolo padre di distinta che ha originato il sottopreventivo'
		EXEC asp_du_DropConstraint 'xPreventivo', 'FK_xPreventivo_DB_AR_P'
		ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [FK_xPreventivo_DB_AR_P] FOREIGN KEY([DBCd_AR_P])
		REFERENCES [dbo].[AR] ([Cd_AR])
		ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [FK_xPreventivo_DB_AR_P]
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'DBQtaInProd'     , '[numeric](18, 8) NULL', '0', 'Quantità in produzione dell''articolo padre di distinta'
		EXEC asp_du_AddAlterColumn 'xPreventivo', 'DBCostoUnitarioV', '[numeric](18, 6) NULL', '0', 'Costo unitario dell''articolo padre di distinta'

		-- porto la versione a 2.70
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 70, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.80
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.70' begin
		select 'Applico aggiornamenti al database: 2.70->2.80'
		-- qui operazioni per l'aggiornamento DB da 2.70 a 2.80

		-- xImpostazione
    Exec asp_du_AddAlterColumn 'xImpostazione', 'RilevaOrdinamento', 'smallint not null', '0', 'Ordinamento delle attività in Rileva (0 = Articolo di fase, 1 = Priorità)'

		-- xContatoreLettura
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'Id_DOTes_NC', '[int] NULL', '', 'Id dell''eventuale nota di accredito che ha generato la riga con residuo plafond < 0'
		EXEC asp_du_DropConstraint 'xContatoreLettura', 'FK_xContatoreLettura_Id_DOTes_NC'
		ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [FK_xContatoreLettura_Id_DOTes_NC] FOREIGN KEY([Id_DOTes_NC])
		REFERENCES [dbo].[DOTes] ([Id_DOTes])
		ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [FK_xContatoreLettura_Id_DOTes_NC]
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ConsumoPI_C1', '[int] NOT NULL', '0', 'Residuo plafond iniziale contatore 1'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ConsumoPI_C2', '[int] NOT NULL', '0', 'Residuo plafond iniziale contatore 2'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ConsumoPI_C3', '[int] NOT NULL', '0', 'Residuo plafond iniziale contatore 3'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ConsumoPI_C4', '[int] NOT NULL', '0', 'Residuo plafond iniziale contatore 4'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ConsumoPI_C5', '[int] NOT NULL', '0', 'Residuo plafond iniziale contatore 5'
		EXEC asp_du_AddAlterColumn 'xContatoreLettura', 'ConsumoPI_C6', '[int] NOT NULL', '0', 'Residuo plafond iniziale contatore 6'

		-- xContratto
		EXEC asp_du_AddAlterColumn 'xContratto', 'Cd_CFDest_Fatt', 'char(3) null', '', 'Sede del cliente di fatturazione'
		EXEC asp_du_DropConstraint 'xContratto', 'FK_xContratto_CFDest_Fatt'
		ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [FK_xContratto_CFDest_Fatt] FOREIGN KEY([Cd_CF_Fatt], [Cd_CFDest_Fatt])
		REFERENCES [dbo].[CFDest] ([Cd_CF], [Cd_CFDest]) NOT FOR REPLICATION
		ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [FK_xContratto_CFDest_Fatt]

		-- porto la versione a 2.80
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 80, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.90
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.80' begin
		select 'Applico aggiornamenti al database: 2.80->2.90'
		-- qui operazioni per l'aggiornamento DB da 2.80 a 2.90

		-- porto la versione a 2.90
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 90, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.91
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.90' begin
		select 'Applico aggiornamenti al database: 2.90->2.91'
		-- qui operazioni per l'aggiornamento DB da 2.90 a 2.91

		-- porto la versione a 2.91
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 91, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.92
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.91' begin
		select 'Applico aggiornamenti al database: 2.91->2.92'
		-- qui operazioni per l'aggiornamento DB da 2.91 a 2.92

		-- porto la versione a 2.92
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 92, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.93
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.92' begin
		select 'Applico aggiornamenti al database: 2.92->2.93'
		-- qui operazioni per l'aggiornamento DB da 2.92 a 2.93

		-- xDBCicloL1
		exec asp_du_AddAlterColumn 'xDBCicloL1', 'Id_DBEsp', 'int not null', '0', 'Id del materiale/attività quando esplodo la DB'

		-- porto la versione a 2.93
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 93, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.94
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.93' begin
		select 'Applico aggiornamenti al database: 2.93->2.94'
		-- qui operazioni per l'aggiornamento DB da 2.93 a 2.94

		-- xContrattoArticolo (fatturazione di più articoli)
		if dbo.afn_du_IsTable('xContrattoArticolo') = 0
			exec asp_du_AddTable 'xContrattoArticolo', 0, 'Articoli di fatturazione di un contratto'

		exec asp_du_AddAlterColumn 'xContrattoArticolo', 'Id_xContratto'	, 'int not null'		, '', 'Id del contratto'
		exec asp_du_AddAlterColumn 'xContrattoArticolo', 'Cd_AR'			, 'varchar(20) not null', '', 'Codice dell''articolo'
		exec asp_du_AddAlterColumn 'xContrattoArticolo', 'Riga'			, 'int not null'		, '0', 'Numero di riga'
		exec asp_du_AddAlterColumn 'xContrattoArticolo', 'Cd_CF'			, 'char(7) null'		, '', 'Codice del cliente'
		exec asp_du_AddAlterColumn 'xContrattoArticolo', 'Cd_CFDest'		, 'char(3) null'		, '', 'Codice della sede operativa'
		exec asp_du_AddAlterColumn 'xContrattoArticolo', 'ImportoTotale'	, 'numeric(18,6) null'	, '0', 'Importo della riga canone'
		exec asp_du_AddAlterColumn 'xContrattoArticolo', 'Disattiva'		, 'bit not null'		, '0', '0 - l''articolo è valido nel contratto; 1 - l''articolo non è più sotto contratto'
		exec asp_du_AddAlterColumn 'xContrattoArticolo', 'DefaultCanone'	, '[bit] NOT NULL'			, '0', '0 - non è il canone di default; 1 - è il canone di default'
		
		-- Chiavi
		alter table xContrattoArticolo with nocheck add constraint FK_xContrattoArticolo_Contratto foreign key (Id_xContratto)
		references xContratto (Id_xContratto) on delete cascade
		alter table xContrattoArticolo check constraint FK_xContrattoArticolo_Contratto

		alter table xContrattoArticolo with nocheck add constraint FK_xContrattoArticolo_AR foreign key (Cd_AR)
		references AR (Cd_AR) on delete cascade
		alter table xContrattoArticolo check constraint FK_xContrattoArticolo_AR

		alter table xContrattoArticolo with nocheck add constraint FK_xContrattoArticolo_CF foreign key (Cd_CF)
		references CF (Cd_CF) on delete cascade
		alter table xContrattoArticolo check constraint FK_xContrattoArticolo_CF

		alter table xContrattoArticolo with nocheck add constraint FK_xContrattoArticolo_CFDest foreign key (Cd_CF, Cd_CFDest)
		references CFDest (Cd_CF, Cd_CFDest) on delete cascade
		alter table xContrattoArticolo check constraint FK_xContrattoArticolo_CFDest

		exec('
			insert into 
				xContrattoArticolo(Id_xContratto, Cd_AR, Riga, Cd_CF, Cd_CFDest, ImportoTotale, Disattiva, DefaultCanone)
			select 
				Id_xContratto, Cd_AR, 1, Cd_CF, Cd_CFDest, ImportoTotaleContratto, 0, 1
			from 
				xContratto
			where 
				isnull(Cd_AR, '''') <> ''''
				')

		-- porto la versione a 2.94
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 94, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.95
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.94' begin
		select 'Applico aggiornamenti al database: 2.94->2.95'
		-- qui operazioni per l'aggiornamento DB da 2.94 a 2.95

		-- porto la versione a 2.95
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 95, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.96
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.95' begin
		select 'Applico aggiornamenti al database: 2.95->2.96'
		-- qui operazioni per l'aggiornamento DB da 2.95 a 2.96

		-- porto la versione a 2.96
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 96, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.97
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.96' begin
		select 'Applico aggiornamenti al database: 2.96->2.97'
		-- qui operazioni per l'aggiornamento DB da 2.96 a 2.97

		-- xContrattoArticolo (fatturazione di più articoli)
		exec asp_du_AddAlterColumn 'xContrattoArticolo', 'AR_Descrizione', 'varchar(80) NOT NULL', '''<Descrizione Mancante>''', 'Descrizione articolo di fatturazione'

		-- DOSottoCommessa
		exec asp_du_AddAlterColumn 'DOSottoCommessa', 'xRicarica', '[varchar](15) NOT NULL', '('''')', 'Ricarico da applicare'

		-- xImpostazione
		exec asp_du_AddAlterColumn 'xImpostazione', 'ContrattoRipartizioneUguale', '[bit] NOT NULL', '0', '0 - scadenza suddivisa in base al valore di ogni articolo di fatturazione; 1 - scadenza divisa ugualmente tra gli articoli di fatturazione'

		-- porto la versione a 2.97
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 97, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.98
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.97' begin
		select 'Applico aggiornamenti al database: 2.97->2.98'
		-- qui operazioni per l'aggiornamento DB da 2.97 a 2.98

		-- xContratto
		exec asp_du_AddAlterColumn 'xContratto', 'RR_DaDataFatt', 'bit not null', '0', '1 = Le scadenze del contratto verranno generate prendendo come rateo la Data Inizio Fatturazione invece della Data Inizio Contratto'

		-- porto la versione a 2.98
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 98, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 2.99
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.98' begin
		select 'Applico aggiornamenti al database: 2.98->2.99'
		-- qui operazioni per l'aggiornamento DB da 2.98 a 2.99

		-- porto la versione a 2.99
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (2, 99, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 3.0
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '2.99' begin
		select 'Applico aggiornamenti al database: 2.99->3.0'
		-- qui operazioni per l'aggiornamento DB da 2.99 a 3.0

		-- porto la versione a 3.0
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (3, 0, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 3.10
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '3.0' begin
		select 'Applico aggiornamenti al database: 3.0->3.10'
		-- qui operazioni per l'aggiornamento DB da 3.0 a 3.10

		-- porto la versione a 3.10
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (3, 10, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 3.20
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '3.10' begin
		select 'Applico aggiornamenti al database: 3.10->3.20'
		-- qui operazioni per l'aggiornamento DB da 3.10 a 3.20

		-- xRDTicketAttivitaMov_2Imp (Rilevazioni CCAN - Tabella di frontiera per software di terze parti)
		if dbo.afn_du_IsTable('xRDTicketAttivitaMov_2Imp') = 0
			exec asp_du_AddTable 'xRDTicketAttivitaMov_2Imp', 0, 'Rilevazioni CCAN - Tabella di frontiera per software di terze parti'

		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Id_xRDTicketAttivita'    , '[int] not null'           , ''         , 'Identificativo dell attività'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Cd_PrAttivita'           , '[varchar](20) not null'   , ''         , 'Codice attività'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Cd_PrRisorsa'            , '[varchar](20) not null'   , ''         , 'Codice risorsa'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Cd_xOperatore'           , '[varchar](20) not null'   , ''         , 'Codice operatore'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Cd_xRDRilCausale'        , '[char](3) null'           , ''         , 'Causale rilavorazione'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Cd_xRDRilOrigine'        , '[char](3) null'           , ''         , 'Origine rilavorazione'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Cd_xRDTipoValorizzazione', '[char](5) null'           , ''         , 'Tipo di valorizzazione'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'DataOraInizio'		        , '[smalldatetime] not null' , 'GetDate()', 'Data ora inizio della rilevazione'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'DataOraFine' 		        , '[smalldatetime] not null' , 'GetDate()', 'Data ora fine della rilevazione'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Durata'		              , '[numeric](18, 2) not null', ''         , 'Durata (espressa nel fattore MKS)'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'FattoreMks'	            , '[int] not null'           , '3600'     , 'Fattore di conversione della durata lavoro'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Note'                    , '[text] null'              , ''         , 'Note della rilevazione'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Riferimento'             , '[varchar](80) null'       , ''         , 'Riferimento libero della rilevazioni'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Terminale'	              , '[varchar](50) null'       , 'left((host_name()+'';'')+app_name(),(50))', 'Terminale'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'UltimoRL'                , '[bit] not null'           , '0'        , '0 - non è l''ultima rilevazione ; 1 - è l''ultima rilevazione che chiude l''attività'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Id_xRDTicketAttivitaMov' , '[int] null'               ,  ''        , 'Identificativo della rilevazione'
		exec asp_du_DropConstraint 'xRDTicketAttivitaMov_2Imp', 'FK_xRDTicketAttivitaMov_2Imp_xRDTicketAttivitaMov'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Stato'	                  , '[tinyint] not null'       , '0'        , 'Stato del record (0 = da importare; 1 = importato; 2 = errore di import; 3 = errore gestito e valutato dall''operatore)'
		exec asp_du_AddAlterColumn 'xRDTicketAttivitaMov_2Imp', 'Messaggio'               , '[text] null'              , ''         , 'Messaggistica dell''import. Se Stato = 2 contiene il motivo che non ha permesso l''import'
		alter table [dbo].[xRDTicketAttivitaMov_2Imp] with check add constraint [FK_xRDTicketAttivitaMov_2Imp_xRDTicketAttivitaMov] foreign key([Id_xRDTicketAttivitaMov])
		references [dbo].[xRDTicketAttivitaMov] ([Id_xRDTicketAttivitaMov]) on delete set null
		alter table [dbo].[xRDTicketAttivitaMov_2Imp] check constraint [FK_xRDTicketAttivitaMov_2Imp_xRDTicketAttivitaMov]

		--xImpostazione
    exec asp_du_AddAlterColumn 'xImpostazione', 'ContrattoRinnovoAllineaFatt', 'bit not null', '0', '1 se durante la procedura di rinnovo deve essere allineata anche la data di fatturazione al nuovo periodo'
		exec asp_du_AddAlterColumn 'xImpostazione', 'ContrattoCalcolaImporto'	   , 'bit not null', '1', '1=l''importo del contratto viene calcolato automaticamente'

		--xContrattoImport
    exec asp_du_AddAlterColumn 'xContrattoImport', 'Cd_SLA'	, 'char(2) null', '', 'SLA associato al contratto'

		--xContrattoAR
		if dbo.afn_du_IsTable('xContrattoAR') = 0 begin
			exec asp_du_AddTable 'xContrattoAR', 0, 'Articoli in dotazione con un contratto'

			exec asp_du_AddAlterColumn 'xContrattoAR', 'Id_xContratto'	, 'int not null'			, ''		, 'Identificativo contratto di appartenenza dell''articolo'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'Cd_AR'			, 'varchar(20) not null'	, ''		, 'Codice articolo'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'Cd_SLA'			, 'char(2) null'			, ''		, 'SLA associato alla riga'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'Riga'			, 'smallint not null'		, '0'		, 'Numero di riga'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'DataInizio'		, 'smalldatetime null'		, ''		, 'Data inizio validità riga'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'DataFine'		, 'smalldatetime null'		, ''		, 'Data fine validità riga'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'Cd_CF'			, 'char(7) null'			, ''		, 'Cliente riga' -- Nesessario per la FK DD. Sempre = xContratto.Cd_CF. Non presente nell'interfaccia.
			exec asp_du_AddAlterColumn 'xContrattoAR', 'Cd_CFDest'		, 'char(3) null'			, ''		, 'Destinazione diversa riga'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'Quantita'		, 'int not null'			, ''		, 'Quantità articolo'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'PrezzoUnitarioV', 'numeric(18, 6) null'		, '0'		, 'Prezzo unitario riga'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'Disattiva'		, 'bit not null'			, '0'		, '0 - l''articolo è sotto contratto; 1 - l''articolo non è più sotto contratto'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'Rateo'			, 'numeric(18, 6) null'		, '0'		, 'Rateo di riga'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'Rinnovato'		, 'bit not null'			, '0'		, '0 - l''articolo è ancora valida; 1 - l''articolo è stato rinnovato'
			exec asp_du_AddAlterColumn 'xContrattoAR', 'Sconto'			, 'varchar(20) not null'	, '('''')'	, 'Sconto articolo'
		end

		--xContrattoImportAR
		if dbo.afn_du_IsTable('xContrattoImportAR') = 0 begin
			exec asp_du_AddTable 'xContrattoImportAR', 0, 'Articoli normalizzati e associati ai contratti normalizzati'

			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'Id_xContrattoImport'	, 'int not null'			, ''		, 'Identificativo contratto normalizzato'
			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'Cd_AR'				, 'varchar(20) not null'	, ''		, 'Codice articolo'
			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'Cd_SLA'				, 'char(2) null'			, ''		, 'SLA associato alla riga'
			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'Riga'					, 'smallint not null'		, '0'		, 'Numero di riga'
			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'DataInizio'			, 'smalldatetime null'		, ''		, 'Data inizio validità riga'
			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'DataFine'				, 'smalldatetime null'		, ''		, 'Data fine validità riga'
			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'Cd_CF'				, 'char(7) null'			, ''		, 'Cliente riga' -- Nesessario per la FK DD. Sempre = xContratto.Cd_CF. Non presente nell'interfaccia.
			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'Cd_CFDest'			, 'char(3) null'			, ''		, 'Destinazione diversa riga'
			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'Quantita'				, 'int not null'			, ''		, 'Quantità articolo'
			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'PrezzoUnitarioV'		, 'numeric(18, 6) null'		, '0'		, 'Prezzo unitario riga'
			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'Disattiva'			, 'bit not null'			, '0'		, '0 - l''articolo è sotto contratto; 1 - l''articolo non è più sotto contratto'
			exec asp_du_AddAlterColumn 'xContrattoImportAR', 'Sconto'				, 'varchar(20) not null'	, '('''')'	, 'Sconto articolo'
		end

		-- porto la versione a 3.20
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (3, 20, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 3.30
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '3.20' begin
		select 'Applico aggiornamenti al database: 3.20->3.30'
		-- qui operazioni per l'aggiornamento DB da 3.20 a 3.30

		-- porto la versione a 3.30
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (3, 30, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 3.40
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '3.30' begin
		select 'Applico aggiornamenti al database: 3.30->3.40'
		-- qui operazioni per l'aggiornamento DB da 3.30 a 3.40

		--xOperatoreVal
		exec asp_du_AddAlterColumn 'xOperatoreVal', 'NumOrePrev', '[numeric](18, 2) not null', '0', 'Numero ore previste nel periodo'

		--xImpostazione
		exec asp_du_AddAlterColumn 'xImpostazione', 'RDImportConControllo', '[bit] NOT NULL', '0', '0 - import rilevazioni standard; 1 - import rilevazioni con controllo anagrafiche'
		
		-- porto la versione a 3.40
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (3, 40, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 3.50
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '3.40' begin
		select 'Applico aggiornamenti al database: 3.40->3.50'
		-- qui operazioni per l'aggiornamento DB da 3.40 a 3.50

		--xNoleggio
		exec asp_du_AddAlterColumn 'xNoleggio', 'TipoFatt', 'smallint not null', '1', 'Tipo di fatturazione del contratto: 0=anticipata, 1=posticipata'
		
		-- porto la versione a 3.50
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (3, 50, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 3.60
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '3.50' begin
		select 'Applico aggiornamenti al database: 3.50->3.60'
		-- qui operazioni per l'aggiornamento DB da 3.50 a 3.60
		
		-- porto la versione a 3.60
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (3, 60, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 3.70
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '3.60' begin
		select 'Applico aggiornamenti al database: 3.60->3.70'
		-- qui operazioni per l'aggiornamento DB da 3.60 a 3.70
		
		/* Ticket - Aggiunta codice contratto noleggio */
		exec asp_du_AddAlterColumn	'xRDTicket', 'Cd_xNoleggio', 'char(10) NULL', '', 'Codice contratto noleggio'

		exec asp_du_DropConstraint 'xRDTicket', 'FK_xRDTicket_xNoleggio'
		alter table xRDTicket with check add constraint FK_xRDTicket_xNoleggio foreign key(Cd_xNoleggio) references xNoleggio(Cd_xNoleggio)
		alter table xRDTicket check constraint FK_xRDTicket_xNoleggio

		if exists (select * from DOSottoCommessa where xCd_DOSottoCommessaTipo = '') begin
			if not exists (select * from xDOSottoCommessaTipo where Cd_xDOSottoCommessaTipo = 'STD') begin
				insert into xDOSottoCommessaTipo(Cd_xDOSottoCommessaTipo, Descrizione, NoteDOSottoCommessaTipo)
				values ('STD', 'Tipo Standard', 'Generato automaticamente ')
			end

			update DOSottoCommessa set xCd_DOSottoCommessaTipo = 'STD' where xCd_DOSottoCommessaTipo = ''
		end

		-- porto la versione a 3.70
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (3, 70, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 3.80
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '3.70' begin
		select 'Applico aggiornamenti al database: 3.70->3.80'
		-- qui operazioni per l'aggiornamento DB da 3.70 a 3.80
		
		-- xPreventivo
		exec asp_du_AddAlterColumn 'xPreventivo', 'NoteXML', 'xml NULL', '', 'Note xml'

		-- DO
		exec asp_du_AddAlterColumn 'DO', 'xControlloCommessa', 'bit not null', '0', 'Se 1 viene verificata la presenza del campo Commessa nelle righe del documento'

		-- xImpostazione
		exec asp_du_AddAlterColumn 'xImpostazione', 'MatRicalcolaCosto', 'smallint not null', '2', '0=non ricalcola i costi; 1=propone il ricalcolo con default NO; 2=propone il ricalcolo con default SI'

		-- porto la versione a 3.80
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (3, 80, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 3.90
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '3.80' begin
		select 'Applico aggiornamenti al database: 3.80->3.90'
		-- qui operazioni per l'aggiornamento DB da 3.80 a 3.90
		
		

		-- porto la versione a 3.90
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (3, 90, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 4.00
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '3.90' begin
		select 'Applico aggiornamenti al database: 3.90->4.00'
		-- qui operazioni per l'aggiornamento DB da 3.90 a 4.00
		
		

		-- porto la versione a 4.00
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (4, 0, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 4.10
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '4.0' begin
		select 'Applico aggiornamenti al database: 4.0->4.10'
		-- qui operazioni per l'aggiornamento DB da 4.0 a 4.10
		
		-- xContratto
		Exec	asp_du_AddAlterColumn 'xContratto'			, 'CIG'						, 'VarChar(15) Null'	, '', 'Codice Identificativo di Gara'
		Exec	asp_du_AddAlterColumn 'xContratto'			, 'CUP'						, 'VarChar(15) Null'	, '', 'Codice Unico di Progetto'

		-- xContrattoMatricola
		Exec	asp_du_AddAlterColumn 'xContrattoMatricola'	, 'NoteContrattoMatricola'	, 'varchar(max) null'	, '', 'Note della matricola'

		-- porto la versione a 4.10
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (4, 10, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 4.20
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '4.10' begin
		select 'Applico aggiornamenti al database: 4.10->4.20'
		-- qui operazioni per l'aggiornamento DB da 4.10 a 4.20

		-- DOCommessa
		exec asp_du_AddAlterColumn 'DOCommessa'	, 'xPercRicaricoM'		, 'varchar(20) not null'	, '''''', 'Percentuale di ricarico dei materiali'
		exec asp_du_AddAlterColumn 'DOCommessa'	, 'xPercRicaricoL'		, 'varchar(20) not null'	, '''''', 'Percentuale di ricarico delle attività'
		exec asp_du_AddAlterColumn 'DOCommessa'	, 'xPercRicaricoS'		, 'varchar(20) not null'	, '''''', 'Percentuale di ricarico delle spese'
		exec asp_du_AddAlterColumn 'DOCommessa'	, 'xCostoRicaricatoM'	, 'numeric(18,8) not null'	, '0'	, 'Costo ricaricato dei materiali'
		exec asp_du_AddAlterColumn 'DOCommessa'	, 'xCostoRicaricatoL'	, 'numeric(18,8) not null'	, '0'	, 'Costo ricaricato delle attività'
		exec asp_du_AddAlterColumn 'DOCommessa'	, 'xCostoRicaricatoS'	, 'numeric(18,8) not null'	, '0'	, 'Costo ricaricato delle spese'

		-- DOSottoCommessa
		exec asp_du_AddAlterColumn 'DOSottoCommessa'	, 'xPercRicaricoM'		, 'varchar(20) not null'	, '''''', 'Percentuale di ricarico dei materiali'
		exec asp_du_AddAlterColumn 'DOSottoCommessa'	, 'xPercRicaricoL'		, 'varchar(20) not null'	, '''''', 'Percentuale di ricarico delle attività'
		exec asp_du_AddAlterColumn 'DOSottoCommessa'	, 'xPercRicaricoS'		, 'varchar(20) not null'	, '''''', 'Percentuale di ricarico delle spese'
		exec asp_du_AddAlterColumn 'DOSottoCommessa'	, 'xCostoRicaricatoM'	, 'numeric(18,8) not null'	, '0'	, 'Costo ricaricato dei materiali'
		exec asp_du_AddAlterColumn 'DOSottoCommessa'	, 'xCostoRicaricatoL'	, 'numeric(18,8) not null'	, '0'	, 'Costo ricaricato delle attività'
		exec asp_du_AddAlterColumn 'DOSottoCommessa'	, 'xCostoRicaricatoS'	, 'numeric(18,8) not null'	, '0'	, 'Costo ricaricato delle spese'

		-- porto la versione a 4.20
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (4, 20, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 4.30
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '4.20' begin
		select 'Applico aggiornamenti al database: 4.20->4.30'
		-- qui operazioni per l'aggiornamento DB da 4.20 a 4.30

		-- xContratto
		exec asp_du_AddAlterColumn	'xContratto'	, 'RiferimentoAmm'		, 'varchar(20)	null'		, ''	, 'Riferimento Amministrazione'

		-- xMM1
		exec asp_du_AddAlterColumn	'xMM1'			, 'Cd_Template'			, 'varchar(20)	null'		, ''	, 'Modello Sottopreventivo'
		exec asp_du_AddAlterColumn	'xMM1'			, 'Cd_xSpesa'			, 'char(3)		null'		, ''	, 'Codice Spesa'
		exec asp_du_AddAlterColumn	'xMM1'			, 'PrezzoUnRicaricatoV'	, 'varchar(20)	null'		, ''	, 'Item: Prezzo Unitario Ricaricato'
		exec asp_du_AddAlterColumn	'xMM1'			, 'PrezzoUnScontatoV'	, 'varchar(20)	null'		, ''	, 'Item: Prezzo Unitario Scontato'
		exec asp_du_AddAlterColumn	'xMM1'			, 'PrezzoTotaleV'		, 'varchar(20)	null'		, ''	, 'Item: Prezzo Totale'
		exec asp_du_AddAlterColumn	'xMM1'			, 'PrezzoUnVenditaV'	, 'varchar(20)	null'		, ''	, 'Item: Prezzo Unitario Vendita'
		exec asp_du_AddAlterColumn	'xMM1'			, 'PrezzoTotaleE'		, 'varchar(20)	null'		, ''	, 'Item: Prezzo Totale Euro'
		exec asp_du_AddAlterColumn	'xMM1'			, 'PrezzoUnVenditaE'	, 'varchar(20)	null'		, ''	, 'Item: Prezzo Unitario Vendita Euro'

		-- xPreventivo
		exec asp_du_AddAlterColumn	'xPreventivo'	, 'ScontoFinale'		, 'varchar(20)	not null'	, '''''', 'Sconto Finale'

		-- xImpostazione
		exec asp_du_AddAlterColumn	'xImpostazione'	, 'PreventiviPrzUnTipo'	, 'smallint	not null'		, '0'	, '=0: ripartizione a quantità (standard); =1: ripartizione in base al valore (euro)'

		-- porto la versione a 4.30
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (4, 30, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 4.40
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '4.30' begin
		select 'Applico aggiornamenti al database: 4.30->4.40'
		-- qui operazioni per l'aggiornamento DB da 4.30 a 4.40

		-- xContrattoArticolo
		exec asp_du_AddAlterColumn 'xContrattoArticolo'	, 'Quantita'		, 'numeric(18,8)	not null'	, '1'	, 'Quantità articolo da riportare in fattura'
		exec asp_du_AddAlterColumn 'xContrattoArticolo'	, 'PrezzoUnitarioV' , 'numeric(18,6)	null'		, ''	, 'Prezzo Unitario articolo da riportare in fattura'

		exec('update xContrattoArticolo set PrezzoUnitarioV = ImportoTotale')

		-- xTipoAnomalia
		if dbo.afn_du_IsTable('xTipoAnomalia') = 0 begin
			exec asp_du_AddTable 'xTipoAnomalia', 20, 'Tipologie di anomalia'

			exec asp_du_AddAlterColumn 'xTipoAnomalia', 'Descrizione', 'varchar(250) not null', '', 'Descrizione tipo anomalia'
		end

		-- xRDTicket
		exec asp_du_AddAlterColumn 'xRDTicket', 'Cd_xTipoAnomalia', 'varchar(20) null', '', 'Codice tipo anomalia'

		-- DOSottoCommessa
		exec asp_du_AddAlterColumn 'DOSottoCommessa', 'xCd_AR', 'varchar(20) null', '', 'Codice articolo prodotto'

		-- DOTes
		exec asp_du_AddAlterColumn 'DOTes', 'xId_xRDTicket', 'int null', '', 'Ticket che ha generato il documento'

		-- porto la versione a 4.40
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (4, 40, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Versione 4.50
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc
	
	if @currentVersion = '4.40' begin
		select 'Applico aggiornamenti al database: 4.40->4.50'
		-- qui operazioni per l'aggiornamento DB da 4.40 a 4.50

		-- xImpiantoMatricola
		exec asp_du_AddAlterColumn 'xImpiantoMatricola', 'Id_xImpiantoMatricola_Sostituisce', 'int null', '', 'Identificativo matricola sostituita'

		-- porto la versione a 4.50
		insert into xGACVersion (dbversion, dbsubversion, upddate, noteversion) values (4, 50, GETDATE(), 'Il db è stato aggiornato')
	end
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go

-- Da qui viene ripetuto dopo ogni aggiornamento

/* Gestione dei Permessi */
/* 18/01/2012 */
-- Tabelle
Grant Select On xAROtherCodCF                    To Public
Grant Select On xContratto                       To Public
Grant Select On xContrattoFase                   To Public
Grant Select On xContrattoMateriale              To Public
Grant Select On xContrattoMatricola              To Public
Grant Select On xContrattoRinnovo                To Public
Grant Select On xContrattoSpesa                  To Public
Grant Select On xContrattoSviluppo               To Public
Grant Select On xContrattoTipo                   To Public
Grant Select On xDOSottoCommessaCert             To Public
Grant Select On xDOSottoCommessaFeedback         To Public
Grant Select On xDOSottoCommessaOrigine          To Public
Grant Select On xDOSottoCommessaTipo             To Public
Grant Select On xFormula                         To Public
Grant Select On xImpianto                        To Public
Grant Select On xImpiantoMatricola               To Public
Grant Select On xImpostazione                    To Public
Grant Select On xImpostazioneCC                  To Public
Grant Select On xImpostazioneCCTipo              To Public
Grant Select On xImpostazioneCS                  To Public
Grant Select On xImpostazioneCSTipo              To Public
Grant Select On xImpostazionePP                  To Public
Grant Select On xImpostazionePPTipo              To Public
Grant Select On xImpostazionePS                  To Public
Grant Select On xImpostazionePSTipo              To Public
Grant Select On xInterventoProg                  To Public
Grant Select On xInterventoProgAttivita          To Public
Grant Select On xInterventoProgAttivitaOperatore To Public
Grant Select On xInterventoProgMaterialeSpesa    To Public
Grant Select On xInterventoProgScadenza          To Public
Grant Select On xISTAT                           To Public
Grant Select On xLS                              To Public
Grant Select On xLSARGruppo                      To Public
Grant Select On xLSARMisura                      To Public
Grant Select On xLSImport                        To Public
Grant Select On xMatricola                       To Public
Grant Select On xMatricolaModulo                 To Public
Grant Select On xMM1                             To Public
Grant Select On xMMModello						           To Public
Grant Select On xOperatore						           To Public
Grant Select On xOperatorePRRisorsa		      		 To Public
Grant Select On xOperatoreVal					           To Public
Grant Select On xPRAttivitaVal					         To Public
Grant Select On xPreventivo						           To Public
Grant Select On xPreventivoContratto			       To Public
Grant Select On xPreventivoFamiglia				       To Public
Grant Select On xPreventivoFase					         To Public
Grant Select On xPreventivoFaseMateriale		     To Public
Grant Select On xPreventivoGruppo				         To Public
Grant Select On xPreventivoMateriale			       To Public
Grant Select On xRDEsito						             To Public
Grant Select On xRDModalita					          	 To Public
Grant Select On xRDOrigine					          	 To Public
Grant Select On xRDStato						             To Public
Grant Select On xRDStato_SLA					           To Public
Grant Select On xRDTicket					             	 To Public
Grant Select On xRDTicketAttivita				         To Public
Grant Select On xRDTicketAttivitaMov			       To Public
Grant Select On xRDTicketAttivitaOperatore		   To Public
Grant Select On xRDTicketMaterialeSpesaMov		   To Public
Grant Select On xRDTipo							             To Public
Grant Select On xRDTipoValorizzazione			       To Public
Grant Select On xRinnovoTipo					           To Public
Grant Select On xSLA							               To Public
Grant Select On xSpesa							             To Public
Grant Select On xStatoLavoro				          	 To Public
Grant Select On xRDImportTipo				          	 To Public
Grant Select On xRDImport						             To Public
Grant Select On xPreventivoImportTipo		      	 To Public
Grant Select On xPreventivoImport				         To Public
Grant Select On xPreventivoSpesa				         To Public
Grant Select On xRDTicketAttivitaMovRL			     To Public
Grant Select On xContrattoImpianto				       To Public
Grant Select On xContrattoDOSottoCommessa	    	 To Public
Grant Select On xDoSottoCommessaRicambio	    	 To Public
Grant Select On xImpiantoDOSottoCommessa	    	 To Public
Grant Select On xRDReparto						           To Public
Grant Select On xCFZonaAttivita					         To Public
Grant Select On xPRAttivitaMicroAtt				       To Public
Grant Select On xRDTicketAttivitaMicroAtt        To Public
Grant Select On xInterventoProgAttivitaMicroAtt  To Public
Grant Select On xPreventivoGruppoSviluppo		     To Public
Grant Select On xPreventivoFaseSviluppo			     To Public
Grant Select On xRDTicketAttivitaMatricola		   To Public
Grant Select On xRDTicketAttivitaMovMatricola	   To Public
Grant Select On xRDImportMatricola				       To Public
Grant Select On xContrattoImportTipo			       To Public
Grant Select On xContrattoImport				         To Public
Grant Select On xContrattoImportMatricola		     To Public
Grant Select On xContrattoImportSviluppo		     To Public
Grant Select On xContatoreTipo                   To Public
Grant Select On xNoleggioTipo                    To Public
Grant Select On xNoleggio                        To Public
Grant Select On xNoleggioMatricola               To Public
Grant Select On xNoleggioImpianto                To Public
Grant Select On xNoleggioRinnovo                 To Public
Grant Select On xContatoreLettura                To Public
Grant Select On xContatoreLetturaImportTipo      To Public
Grant Select On xContatoreLetturaImport          To Public
Grant Select On xNoleggioMatricolaSviluppo       To Public
Grant Select On xNoleggioImpiantoSviluppo        To Public
Grant Select On xPreventivoItem                  To Public
Grant Select On xDOGruppo                        To Public
Grant Select On xRDTicketAttivitaImportTipo      To Public
Grant Select On xRDTicketAttivitaImport          To Public
Grant Select On xPRAttivitaEP                    To Public
Grant Select On xContrattoArticolo               To Public
Grant Select On xRDTicketAttivitaMov_2Imp        To Public
Grant Select On xContrattoAR                     To Public
Grant Select On xContrattoImportAR               To Public
Grant Select On xTipoAnomalia		             To Public
GO

/* Eliminazione reports e moduli personalizzati per singoli clienti */
/* 18-01-2012 */
-- RiepilogoCosti_Ricavi
DELETE FROM [dbo].[ReportDoc] WHERE UD_ReportDoc = '10EF1C66-2761-4FCF-9E33-7D8830A7D53B'
-- Lettera di Incarico Pitney B.				 
DELETE FROM [dbo].[Report]		WHERE UD_Report	 = '3E6381CF-1570-4D0D-B50A-138BFFBBA8FB'
GO												 
												 
/* Eliminazione reports e moduli obsoleti */	 
/* 11-09-2012 */								 
-- Redditività contratto						 
DELETE FROM [dbo].[Report]		WHERE UD_Report	 = '8A428731-97CC-47D6-9CEF-813F709B8C10'
-- Redditività contratto dett.					 
DELETE FROM [dbo].[Report]		WHERE UD_Report	 = 'AB59A5A6-10A5-433A-81CD-5CC184DC097E'
-- Redditività matricole/contratt				 
DELETE FROM [dbo].[Report]		WHERE UD_Report	 = 'E0AA889D-1463-4E8F-87D7-4830B7708B8F'
-- Consuntivo Ticket							 
Delete From [dbo].[Report]		Where Ud_Report	 = '73BC5FA6-FC9B-4A48-B48E-9E586859E7BC'
/* 30-04-2015 */ 								 
Delete From [dbo].[Report]		Where Ud_Report	 = 'F7370033-7380-4B5C-9CF6-57214FF6D3EB'
Delete From [dbo].[Report]		Where Ud_Report	 = 'FA692381-C667-43D5-A071-FB678A8E873C'

delete from Menu				where Cd_Menu = '95B6FC23-F9A7-4D78-9E43-336B44FAA97C'
GO

/* Contratti - Sviluppo scadenze */
/* 08-11-2011 */
-- Aggiorno il nuovo flag "Evasa" a 1 se è presente l'Id_DOTes del documento con il quale è stata fatturata la scadenza.
Update xContrattoSviluppo Set Evasa = 1 Where ISNULL(Id_DOTes, 0) > 0
GO

/* Ticket - Gestione Plafond */
/* 13-09-2012 */
-- Aggiornamento del numero di ore di plafond per ogni attività di ogni ticket
UPDATE xRDTicketAttivita
	SET NumOrePlafond = (
		SELECT IsNull(Sum(DurataIns - Durata), 0)
		FROM xRDTicketAttivitaMov 
		WHERE TA.Id_xRDTicketAttivita = xRDTicketAttivitaMov.Id_xRDTicketAttivita
	)  
   From xRDTicketAttivita TA Inner Join xRDTicketAttivitaMov TAM On TA.Id_xRDTicketAttivita = TAM.Id_xRDTicketAttivita
GO

/* Operatori - Inizio validità tipo di valorizzazione */
/* 18-03-2013 */
Update xOperatoreVal Set InizioValidita = '20130101' Where InizioValidita Is Null
GO	

/* Interventi Programmati - Evasione manuale Scadenze */
/* 11-04-2013 */
-- Aggiorno il nuovo flag "Evasa" a 1 se è presente l'Id_xRDTicket del ticket con il quale è stata evasa la scadenza.
Update xInterventoProgScadenza Set Evasa = 1 Where IsNull(Id_xRDTicket, 0) > 0
GO

/* Gestione Item */
/* 07-10-2016 */
-- Aggiornamento Sottopreventivi già in essere
Update P
 Set  P.PreventiviItem = 1 
 From xPreventivo P Inner Join xPreventivoFase PF On P.Id_Preventivo = PF.Id_Preventivo 
 Where PF.Cd_ARItem Is Not Null
GO
-- Aggiornamento Materiali e Spese nei Ticket già in essere
Update TMS
 Set  TMS.Cd_ARItem = T.Cd_ARItem, TMS.DescrizioneARItem = T.DescrizioneARItem
 From xRDTicket T Inner Join xRDTicketMaterialeSpesaMov TMS On T.Id_xRDTicket = TMS.Id_xRDTicket
 Where (T.Cd_ARItem Is Not Null) Or (T.DescrizioneARItem Is Not Null)
GO

/* Contratti per Servizi - Articoli di Fatturazione */
/* 03-04-2019 */
-- Allineamento descrizione degli articoli di fatturazione con anagrafica articolo
update C
 set AR_Descrizione = AR.Descrizione 
 from xContrattoArticolo C inner join AR on C.Cd_AR = AR.Cd_AR
 where C.AR_Descrizione like '<Descrizione Mancante>%'
GO

-- Gestione dei defaults su tabelle standard
EXEC asp_du_DropDefault 'DOSottoCommessa', 'DF_DOSottoCommessa_xCD_DoSottoCommessaFeedback'
EXEC asp_du_DropDefault 'DOSottoCommessa', 'DF_DOSottoCommessa_xCD_DoSottoCommessaOrigine'
EXEC asp_du_DropDefault 'DOSottoCommessa', 'DF_DOSottoCommessa_xCD_DoSottoCommessaTipo'
GO

-- Gestione dei constraints su tabelle standard
EXEC asp_du_DropConstraint 'DOTes'				, 'xCK_DOTes_xImportoTotaleV'
EXEC asp_du_DropConstraint 'DOSottoCommessa'	, 'xCK_DOSottoCommessa_ValoreGaranzia'
EXEC asp_du_DropConstraint 'DOSottoCommessa'	, 'xFK_DOSottoCommessa_AR'
EXEC asp_du_DropConstraint 'AR'					, 'xCK_AR_ValoreGaranzia'
EXEC asp_du_DropConstraint 'PRAttivita'			, 'xCK_PRAttivita_xNuovoEvadi'
EXEC asp_du_DropConstraint 'PRAttivita'			, 'xCK_PRAttivita_xTipoDurata'
EXEC asp_du_DropConstraint 'PRAttivita'			, 'xCK_PRAttivita_xDUTipoValCosti'
EXEC asp_du_DropConstraint 'PRAttivita'			, 'xCK_PRAttivita_xDDRisorsaTipoValCosti'
EXEC asp_du_DropConstraint 'PRAttivita'			, 'xCK_PRAttivita_xDDOperatoreTipoValCosti'
EXEC asp_du_DropConstraint 'PRAttivita'			, 'xCK_PRAttivita_xDDRisorsaOperatoreTipoValCosti'
EXEC asp_du_DropConstraint 'PRAttivita'			, 'xCK_PRAttivita_xVincolo'
EXEC asp_du_DropConstraint 'DBCiclo'			, 'xCK_DBCiclo_Quantita'
EXEC asp_du_DropConstraint 'DBCiclo'			, 'xCK_DBCiclo_PercAzienda'
EXEC asp_du_DropConstraint 'DBCiclo'			, 'xCK_DBCiclo_PercOperatore'
EXEC asp_du_DropConstraint 'DBCiclo'			, 'xCK_DBCiclo_TipoValCosto'
EXEC asp_du_DropConstraint 'DBCiclo'			, 'xCK_DBCiclo_PrezzoVenditaUn'
exec asp_du_DropConstraint 'DOTes'				, 'xFK_DOTes_xRDTicket'
GO

-- Gestione dei constraints su tabelle personalizzate
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_CostoUnitarioLordoV'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_ScontoAcquisto'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_RicavoUnitarioScontatoV'
EXEC asp_du_DropConstraint 'xPreventivoGruppo'         , 'CK_xPreventivoGruppo_CostoUnitarioLordoV'
EXEC asp_du_DropConstraint 'xPreventivoGruppo'         , 'CK_xPreventivoGruppo_ScontoAcquisto'
EXEC asp_du_DropConstraint 'xPreventivoGruppo'         , 'CK_xPreventivoGruppo_RicavoUnitarioScontatoV'
EXEC asp_du_DropConstraint 'xPreventivoFase'           , 'CK_xPreventivoFase_CostoUnitarioLordoV'
EXEC asp_du_DropConstraint 'xPreventivoFase'           , 'CK_xPreventivoFase_ScontoAcquisto'
EXEC asp_du_DropConstraint 'xPreventivoFase'           , 'CK_xPreventivoFase_RicavoUnitarioScontatoV'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_MargineCostoPerc'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_MargineRicavoPerc'
EXEC asp_du_DropConstraint 'xPreventivoGruppo'         , 'CK_xPreventivoGruppo_MargineCostoPerc'
EXEC asp_du_DropConstraint 'xPreventivoGruppo'         , 'CK_xPreventivoGruppo_MargineRicavoPerc'
EXEC asp_du_DropConstraint 'xPreventivoFase'           , 'CK_xPreventivoFase_MargineCostoPerc'
EXEC asp_du_DropConstraint 'xPreventivoFase'           , 'CK_xPreventivoFase_MargineRicavoPerc'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ModelloVal'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_ModelloVal'
EXEC asp_du_DropConstraint 'xPreventivoGruppo'         , 'CK_xPreventivoGruppo_ModelloVal'
EXEC asp_du_DropConstraint 'xPreventivoFase'           , 'CK_xPreventivoFase_ModelloVal'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_CostoUnitarioRicaricatoLordoV'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_ScontoCostoRicaricato'
EXEC asp_du_DropConstraint 'xPreventivoGruppo'         , 'CK_xPreventivoGruppo_CostoUnitarioRicaricatoLordoV'
EXEC asp_du_DropConstraint 'xPreventivoGruppo'         , 'CK_xPreventivoGruppo_ScontoCostoRicaricato'
EXEC asp_du_DropConstraint 'xPreventivoFase'           , 'CK_xPreventivoFase_CostoUnitarioRicaricatoLordoV'
EXEC asp_du_DropConstraint 'xPreventivoFase'           , 'CK_xPreventivoFase_ScontoCostoRicaricato'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_FattoreMksPeriodo'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_FattoreMksPeriodoFattura'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_FattoreMksCicloFattura'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_GiornoFattura'
EXEC asp_du_DropConstraint 'xLSImport'                 , 'CK_xLSImport_PrezzoAcquisto'
EXEC asp_du_DropConstraint 'xLSImport'                 , 'CK_xLSImport_PrezzoVendita'
EXEC asp_du_DropConstraint 'xAROtherCodCF'             , 'CK_xAROtherCodCF_AROther'
EXEC asp_du_DropConstraint 'xAROtherCodCF'             , 'CK_xAROtherCodCF_CodiceAlternativo'
EXEC asp_du_DropConstraint 'xAROtherCodCF'             , 'CK_xAROtherCodCF_FornitorePreferenziale'
EXEC asp_du_DropConstraint 'xAROtherCodCF'             , 'CK_xAROtherCodCF_FornitorePreferenziale_2'
EXEC asp_du_DropConstraint 'xAROtherCodCF'             , 'CK_xAROtherCodCF_PrezzoAcquisto'
EXEC asp_du_DropConstraint 'xAROtherCodCF'             , 'CK_xAROtherCodCF_PrezzoVendita'
EXEC asp_du_DropConstraint 'xAROtherCodCF'             , 'CK_xAROtherCodCF_Sconto'
EXEC asp_du_DropConstraint 'xLSARGruppo'               , 'CK_xLSARGruppo_ARGruppo123'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_FattoreMksCicloFattura'
EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'CK_xRDTicketMaterialeSpesaMov_Quantita'
EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'CK_xRDTicketMaterialeSpesaMov_Omaggio'
EXEC asp_du_DropConstraint 'xContrattoSviluppo'        , 'CK_xContrattoSviluppo_ImportoFattura'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_GiorniAvvisoRinnovo'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_GiorniDisdettaCliente'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_GiorniDisdettaFornitore'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_ISTAT'
EXEC asp_du_DropConstraint 'xContrattoFase'            , 'CK_xContrattoFase_PrezzoUnitarioV'
EXEC asp_du_DropConstraint 'xContrattoFase'            , 'CK_xContrattoFase_Sconto'
EXEC asp_du_DropConstraint 'xContrattoFase'            , 'CK_xContrattoFase_PrezzoUnitarioScontatoV'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_TipoFase'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_FasePrezzoUnitarioV'
EXEC asp_du_DropConstraint 'xContrattoRinnovo'         , 'CK_xContrattoRinnovo_ImportoTotaleContratto'
EXEC asp_du_DropConstraint 'xContrattoRinnovo'         , 'CK_xContrattoRinnovo_ImportoTotaleFattura'
EXEC asp_du_DropConstraint 'xContrattoMateriale'       , 'CK_xContrattoMateriale_PrezzoUnitarioV'
EXEC asp_du_DropConstraint 'xContrattoMateriale'       , 'CK_xContrattoMateriale_Sconto'
EXEC asp_du_DropConstraint 'xContrattoMateriale'       , 'CK_xContrattoMateriale_PrezzoUnitarioScontatoV'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_TipoMateriale'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_Rateo'
EXEC asp_du_DropConstraint 'xRDTicketAttivitaMov'      , 'CK_xRDTicketAttivitaMov_FattProvvigione'
EXEC asp_du_DropConstraint 'xRDTicketMaterialeSpesaMov', 'CK_xRDTicketMaterialeSpesaMov_FattProvvigione'
EXEC asp_du_DropConstraint 'xContrattoSpesa'           , 'CK_xContrattoSpesa_PrezzoUnitarioV'
EXEC asp_du_DropConstraint 'xContrattoSpesa'           , 'CK_xContrattoSpesa_Sconto'
EXEC asp_du_DropConstraint 'xContrattoSpesa'           , 'CK_xContrattoSpesa_PrezzoUnitarioScontatoV'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_TipoSpesa'
EXEC asp_du_DropConstraint 'xSpesa'                    , 'CK_xSpesa_TipoCosto'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_Modalita'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_FattoreMksPeriodoStandardRinnovo'
EXEC asp_du_DropConstraint 'xSpesa'                    , 'CK_xSpesa_DefaultQta'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_TipoISTAT'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_ContrattoGiornoFattura'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_ContrattoGiorniAvvisoRinnovo'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_ContrattoGiorniDisdettaCliente'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_ContrattoGiorniDisdettaFornitore'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_ContrattoTipoISTAT'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_ContrattoISTAT'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_ISTATUltimoRinnovo'
EXEC asp_du_DropConstraint 'xInterventoProg'           , 'CK_xInterventoProg_FattoreMksCiclo'
EXEC asp_du_DropConstraint 'xInterventoProg'           , 'CK_xInterventoProg_GiornoSettimana'
EXEC asp_du_DropConstraint 'xInterventoProg'           , 'CK_xInterventoProg_GiornoIntervento'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_InterventoProgFattoreMksCiclo'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_InterventoProgGiornoSettimana'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_InterventoProgGiornoIntervento'
EXEC asp_du_DropConstraint 'xRDImport'                 , 'CK_xRDImport_TempoInizio'
EXEC asp_du_DropConstraint 'xRDImport'                 , 'CK_xRDImport_TempoFine'
EXEC asp_du_DropConstraint 'xRDImport'                 , 'CK_xRDImport_TempoFine_TempoInizio'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_ContrattoTipoSelMatricola'
EXEC asp_du_DropConstraint 'xLSImport'                 , 'CK_xLSImport_ScontoAcquisto'
EXEC asp_du_DropConstraint 'xRDTicket'                 , 'CK_xRDTicket_Cd_Nazione_Cd_Provincia'
EXEC asp_du_DropConstraint 'xPreventivoFamiglia'       , 'CK_xPreventivoFamiglia_Area'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_Area'
EXEC asp_du_DropConstraint 'xContrattoMatricola'       , 'CK_xContrattoMatricola_Sconto'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_CostoUnitarioLordoV'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_ScontoAcquisto'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_RicavoUnitarioScontatoV'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_MargineCostoPerc'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_MargineRicavoPerc'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_ModelloVal'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_CostoUnitarioRicaricatoLordoV'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_ScontoCostoRicaricato'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_Quantita'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_RicavoUnitarioV'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_Sconto'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_RicavoTotaleV'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_CostoUnitarioV'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_CostoUnitarioRicaricatoV'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_CostoTotaleV'
EXEC asp_du_DropConstraint 'xPreventivoSpesa'          , 'CK_xPreventivoSpesa_Sequenza'
EXEC asp_du_DropConstraint 'xRDTicketAttivitaMovRL'    , 'CK_xRDTicketAttivitaMovRL_InizioFine'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_FasePlafondOrePreviste'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_FasePlafondOrePartenza'
EXEC asp_du_DropConstraint 'xContrattoRinnovo'         , 'CK_xContrattoRinnovo_PlafondOrePreviste'
EXEC asp_du_DropConstraint 'xContrattoRinnovo'         , 'CK_xContrattoRinnovo_PlafondOrePartenza'
EXEC asp_du_DropConstraint 'xContrattoRinnovo'         , 'CK_xContrattoRinnovo_PlafondOreResidue'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_PrezziPerQta'
EXEC asp_du_DropConstraint 'xContrattoImpianto'        , 'CK_xContrattoImpianto_Sconto'
EXEC asp_du_DropConstraint 'xContrattoDOSottoCommessa' , 'CK_xContrattoDOSottoCommessa_Sconto'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_SpesaCostoV'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_SpesaRicavoV'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ValoreSC1V'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ValoreSC2V'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ValoreSC3V'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ValoreSC4V'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ValoreSC5V'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ValoreSR1V'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ValoreSR2V'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ValoreSR3V'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ValoreSR4V'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ValoreSR5V'
EXEC asp_du_DropConstraint 'xFormula'                  , 'CK_xFormula_TipoFormula'
EXEC asp_du_DropConstraint 'xDoSottoCommessaRicambio'  , 'CK_xDoSottoCommessaRicambio_Quantita'
EXEC asp_du_DropConstraint 'xDoSottoCommessaRicambio'  , 'CK_xDoSottoCommessaRicambio_CostoUnitarioV'
EXEC asp_du_DropConstraint 'xImpianto'                 , 'CK_xImpianto_ValoreGaranzia'
EXEC asp_du_DropConstraint 'xRDTicket'                 , 'CK_xRDTicket_SGV_Etichetta'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_Stato'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_Probabilita'
EXEC asp_du_DropConstraint 'xMatricola'                , 'CK_xMatricola_ValoreGaranzia'
EXEC asp_du_DropConstraint 'xContrattoRinnovo'         , 'CK_xContrattoRinnovo_Costo'
EXEC asp_du_DropConstraint 'xContrattoRinnovo'         , 'CK_xContrattoRinnovo_MargineFattPerc'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_TipoSviluppoFattura'
EXEC asp_du_DropConstraint 'xContratto'                , 'CK_xContratto_TipoGiornoFattura'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_PreventiviCoeff1UM'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_PreventiviCoeff2UM'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_PreventiviCoeff3UM'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_PreventiviCoeff4UM'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_Coeff1'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_Coeff2'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_Coeff3'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_Coeff4'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_UMDORig'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_RilevaTestRitardoAzione'
EXEC asp_du_DropConstraint 'xInterventoProgAttivita'   , 'CK_xInterventoProgAttivita_NumUnitaProduttive'
EXEC asp_du_DropConstraint 'xRDTicketAttivita'         , 'CK_xRDTicketAttivita_NumUnitaProduttive'
EXEC asp_du_DropConstraint 'xPreventivoGruppoSviluppo' , 'CK_xPreventivoGruppoSviluppo_CostoV'
EXEC asp_du_DropConstraint 'xPreventivoFaseSviluppo'   , 'CK_xPreventivoFaseSviluppo_CostoV'
EXEC asp_du_DropConstraint 'xRDTicket'                 , 'CK_xRDTicket_GestioneMatricola'
EXEC asp_du_DropConstraint 'xRDTicket'                 , 'CK_xRDTicket_xContratto_xNoleggio'
EXEC asp_du_DropConstraint 'xRDTicket'                 , 'FK_xRDTicket_xTipoAnomalia'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_FasePrezzoUnitarioV'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_FattoreMksCicloFattura'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_FattoreMksPeriodo'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_FattoreMksPeriodoFattura'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_FattoreMksPeriodoStandardRinnovo'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_GiorniAvvisoRinnovo'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_GiorniDisdettaCliente'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_GiorniDisdettaFornitore'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_GiornoFattura'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_ImportoTotaleContratto'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_ImportoTotaleFattura'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_ISTAT'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_Modalita'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_TipoFase'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_TipoGiornoFattura'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_TipoISTAT'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_TipoMateriale'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_TipoSpesa'
EXEC asp_du_DropConstraint 'xContrattoImport'          , 'CK_xContrattoImport_TipoSviluppoFattura'
EXEC asp_du_DropConstraint 'xContrattoImportMatricola' , 'CK_xContrattoImportMatricola_Sconto'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_NoleggioNumContatori'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_NoleggioGiorniAvvisoRinnovo'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_NoleggioGiorniDisdettaCliente'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_NoleggioGiorniDisdettaFornitore'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_NoleggioTipoSelMatricola'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_NoleggioGestioneResiduoPlafond'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_NoleggioInizioFattQFPlafond'
EXEC asp_du_DropConstraint 'xNoleggio'                 , 'CK_xNoleggio_FattoreMksPeriodo'
EXEC asp_du_DropConstraint 'xNoleggio'                 , 'CK_xNoleggio_FattoreMksPeriodoStandardRinnovo'
EXEC asp_du_DropConstraint 'xNoleggio'                 , 'CK_xNoleggio_GiorniAvvisoRinnovo'
EXEC asp_du_DropConstraint 'xNoleggio'                 , 'CK_xNoleggio_GiorniDisdettaCliente'
EXEC asp_du_DropConstraint 'xNoleggio'                 , 'CK_xNoleggio_GiorniDisdettaFornitore'
EXEC asp_du_DropConstraint 'xNoleggio'                 , 'CK_xNoleggio_FattoreMksQFNoleggio'
EXEC asp_du_DropConstraint 'xNoleggio'                 , 'CK_xNoleggio_FattoreMksQFPlafond'
EXEC asp_du_DropConstraint 'xNoleggio'                 , 'CK_xNoleggio_GestioneResiduoPlafond'
EXEC asp_du_DropConstraint 'xNoleggio'                 , 'CK_xNoleggio_InizioFattQFPlafond'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_QuotaFissaNoleggio'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksQFNoleggio'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_QuotaFissaPlafond'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksQFPlafond'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_Prezzo_C1'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_Prezzo_C2'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_Prezzo_C3'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_Prezzo_C4'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_Prezzo_C5'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_Prezzo_C6'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondIniziale_C1'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondIniziale_C2'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondIniziale_C3'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondIniziale_C4'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondIniziale_C5'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondIniziale_C6'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondPeriodico_C1'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondPeriodico_C2'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondPeriodico_C3'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondPeriodico_C4'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondPeriodico_C5'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_PlafondPeriodico_C6'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksPlafond_C1'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksPlafond_C2'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksPlafond_C3'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksPlafond_C4'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksPlafond_C5'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksPlafond_C6'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksFattura_C1'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksFattura_C2'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksFattura_C3'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksFattura_C4'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksFattura_C5'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_FattoreMksFattura_C6'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_LetturaPartenza_C1'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_LetturaPartenza_C2'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_LetturaPartenza_C3'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_LetturaPartenza_C4'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_LetturaPartenza_C5'
EXEC asp_du_DropConstraint 'xNoleggioMatricola'        , 'CK_xNoleggioMatricola_LetturaPartenza_C6'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_QuotaFissaNoleggio'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksQFNoleggio'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_QuotaFissaPlafond'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksQFPlafond'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_Prezzo_C1'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_Prezzo_C2'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_Prezzo_C3'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_Prezzo_C4'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_Prezzo_C5'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_Prezzo_C6'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondIniziale_C1'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondIniziale_C2'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondIniziale_C3'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondIniziale_C4'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondIniziale_C5'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondIniziale_C6'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondPeriodico_C1'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondPeriodico_C2'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondPeriodico_C3'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondPeriodico_C4'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondPeriodico_C5'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_PlafondPeriodico_C6'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksPlafond_C1'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksPlafond_C2'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksPlafond_C3'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksPlafond_C4'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksPlafond_C5'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksPlafond_C6'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksFattura_C1'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksFattura_C2'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksFattura_C3'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksFattura_C4'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksFattura_C5'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_FattoreMksFattura_C6'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_LetturaPartenza_C1'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_LetturaPartenza_C2'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_LetturaPartenza_C3'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_LetturaPartenza_C4'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_LetturaPartenza_C5'
EXEC asp_du_DropConstraint 'xNoleggioImpianto'         , 'CK_xNoleggioImpianto_LetturaPartenza_C6'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_Lettura_C1'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_LetturaPrecedente_C1'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ResiduoPP_C1'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ExtraPlafond_C1'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_Lettura_C2'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_LetturaPrecedente_C2'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ResiduoPP_C2'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ExtraPlafond_C2'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_Lettura_C3'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_LetturaPrecedente_C3'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ResiduoPP_C3'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ExtraPlafond_C3'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_Lettura_C4'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_LetturaPrecedente_C4'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ResiduoPP_C4'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ExtraPlafond_C4'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_Lettura_C5'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_LetturaPrecedente_C5'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ResiduoPP_C5'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ExtraPlafond_C5'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_Lettura_C6'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_LetturaPrecedente_C6'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ResiduoPP_C6'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ExtraPlafond_C6'
EXEC asp_du_DropConstraint 'xContatoreLetturaImport'   , 'CK_xContatoreLetturaImport_Lettura_C1'
EXEC asp_du_DropConstraint 'xContatoreLetturaImport'   , 'CK_xContatoreLetturaImport_Lettura_C2'
EXEC asp_du_DropConstraint 'xContatoreLetturaImport'   , 'CK_xContatoreLetturaImport_Lettura_C3'
EXEC asp_du_DropConstraint 'xContatoreLetturaImport'   , 'CK_xContatoreLetturaImport_Lettura_C4'
EXEC asp_du_DropConstraint 'xContatoreLetturaImport'   , 'CK_xContatoreLetturaImport_Lettura_C5'
EXEC asp_du_DropConstraint 'xContatoreLetturaImport'   , 'CK_xContatoreLetturaImport_Lettura_C6'
EXEC asp_du_DropConstraint 'xNoleggioMatricolaSviluppo', 'CK_xNoleggioMatricolaSviluppo_TipoScadenza'
EXEC asp_du_DropConstraint 'xNoleggioImpiantoSviluppo' , 'CK_xNoleggioImpiantoSviluppo_TipoScadenza'
EXEC asp_du_DropConstraint 'xFormula'                  , 'CK_xFormula_TipoCalcolo'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ItemProvvigionePrev'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ItemPrezzoVenditaV'
EXEC asp_du_DropConstraint 'xPreventivo'               , 'CK_xPreventivo_ItemProvvigioneEff'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_Sequenza'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_ModelloVal'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_RicavoTotaleV'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_CostoTotaleV'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_ValoreRRV'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_ValoreRCV'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_PrezzoUnRicaricatoV'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_Sconto'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_PrezzoUnScontatoV'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_Quantita'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_PrezzoTotaleV'
EXEC asp_du_DropConstraint 'xPreventivoItem'           , 'CK_xPreventivoItem_PrezzoUnVenditaV'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_DecimaliOra'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_PreventiviNumCoeff'
EXEC asp_du_DropConstraint 'xImpostazione'             , 'CK_xImpostazione_PreventiviCoeff5UM'
EXEC asp_du_DropConstraint 'xPreventivoMateriale'      , 'CK_xPreventivoMateriale_Coeff5'
EXEC asp_du_DropConstraint 'xDBCicloL1'                , 'CK_xDBCicloL1_TipoValCosto'
EXEC asp_du_DropConstraint 'xDBCicloL1'                , 'CK_xDBCicloL1_QtaImpegnoUn'
EXEC asp_du_DropConstraint 'xDBCicloL1'                , 'CK_xDBCicloL1_QtaImpegno'
EXEC asp_du_DropConstraint 'xDBCicloL1'                , 'CK_xDBCicloL1_CostoUn'
EXEC asp_du_DropConstraint 'xDBCicloL1'                , 'CK_xDBCicloL1_Costo'
EXEC asp_du_DropConstraint 'xDBCicloL1'                , 'CK_xDBCicloL1_CostoRicaricatoUn'
EXEC asp_du_DropConstraint 'xDBCicloL1'                , 'CK_xDBCicloL1_CostoRicaricato'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ConsumoPI_C1'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ConsumoPI_C2'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ConsumoPI_C3'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ConsumoPI_C4'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ConsumoPI_C5'
EXEC asp_du_DropConstraint 'xContatoreLettura'         , 'CK_xContatoreLettura_ConsumoPI_C6'
exec asp_du_DropConstraint 'xContrattoAR'              , 'FK_xContrattoAR_Contratto'
exec asp_du_DropConstraint 'xContrattoAR'              , 'FK_xContrattoAR_AR'
exec asp_du_DropConstraint 'xContrattoAR'              , 'FK_xContrattoAR_SLA'
exec asp_du_DropConstraint 'xContrattoAR'              , 'FK_xContrattoAR_CF'
exec asp_du_DropConstraint 'xContrattoAR'              , 'FK_xContrattoAR_CFDest'
exec asp_du_DropConstraint 'xContrattoAR'              , 'CK_xContrattoAR_Sconto'
exec asp_du_DropConstraint 'xContrattoImportAR'        , 'FK_xContrattoImportAR_ContrattoImport'
exec asp_du_DropConstraint 'xOperatoreVal'             , 'CK_xOperatoreVal_NumOrePrev'
exec asp_du_DropConstraint 'xImpiantoMatricola'        , 'FK_xImpiantoMatricola_Sostituisce'
GO

ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_FattoreMksCicloFattura] CHECK (([FattoreMksCicloFattura] = 12 or [FattoreMksCicloFattura] = 6 or [FattoreMksCicloFattura] = 4 or [FattoreMksCicloFattura] = 3 or [FattoreMksCicloFattura] = 2 or [FattoreMksCicloFattura] = 1))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_FattoreMksCicloFattura]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_CostoUnitarioLordoV] CHECK (([CostoUnitarioLordoV] >= 0))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_CostoUnitarioLordoV]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH CHECK ADD CONSTRAINT [CK_xPreventivoMateriale_ScontoAcquisto] CHECK (([dbo].[afn_PercStrValid]([ScontoAcquisto])=(1)))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_ScontoAcquisto]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_RicavoUnitarioScontatoV] CHECK (([RicavoUnitarioScontatoV] >= 0))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_RicavoUnitarioScontatoV]
ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_CostoUnitarioLordoV] CHECK (([CostoUnitarioLordoV] >= 0))
ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_CostoUnitarioLordoV]
ALTER TABLE [dbo].[xPreventivoGruppo] WITH CHECK ADD CONSTRAINT [CK_xPreventivoGruppo_ScontoAcquisto] CHECK (([dbo].[afn_PercStrValid]([ScontoAcquisto])=(1)))
ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_ScontoAcquisto]
ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_RicavoUnitarioScontatoV] CHECK (([RicavoUnitarioScontatoV] >= 0))
ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_RicavoUnitarioScontatoV]
ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_CostoUnitarioLordoV] CHECK (([CostoUnitarioLordoV] >= 0))
ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_CostoUnitarioLordoV]
ALTER TABLE [dbo].[xPreventivoFase] WITH CHECK ADD CONSTRAINT [CK_xPreventivoFase_ScontoAcquisto] CHECK (([dbo].[afn_PercStrValid]([ScontoAcquisto])=(1)))
ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_ScontoAcquisto]
ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_RicavoUnitarioScontatoV] CHECK (([RicavoUnitarioScontatoV] >= 0))
ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_RicavoUnitarioScontatoV]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH CHECK ADD CONSTRAINT [CK_xPreventivoMateriale_MargineCostoPerc] CHECK (([dbo].[afn_PercStrValid]([MargineCostoPerc])=(1)))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_MargineCostoPerc]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH CHECK ADD CONSTRAINT [CK_xPreventivoMateriale_MargineRicavoPerc] CHECK (([dbo].[afn_PercStrValid]([MargineRicavoPerc])=(1)))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_MargineRicavoPerc]
ALTER TABLE [dbo].[xPreventivoGruppo] WITH CHECK ADD CONSTRAINT [CK_xPreventivoGruppo_MargineCostoPerc] CHECK (([dbo].[afn_PercStrValid]([MargineCostoPerc])=(1)))
ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_MargineCostoPerc]
ALTER TABLE [dbo].[xPreventivoGruppo] WITH CHECK ADD CONSTRAINT [CK_xPreventivoGruppo_MargineRicavoPerc] CHECK (([dbo].[afn_PercStrValid]([MargineRicavoPerc])=(1)))
ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_MargineRicavoPerc]
ALTER TABLE [dbo].[xPreventivoFase] WITH CHECK ADD CONSTRAINT [CK_xPreventivoFase_MargineCostoPerc] CHECK (([dbo].[afn_PercStrValid]([MargineCostoPerc])=(1)))
ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_MargineCostoPerc]
ALTER TABLE [dbo].[xPreventivoFase] WITH CHECK ADD CONSTRAINT [CK_xPreventivoFase_MargineRicavoPerc] CHECK (([dbo].[afn_PercStrValid]([MargineRicavoPerc])=(1)))
ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_MargineRicavoPerc]
ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_ModelloVal] CHECK (([ModelloVal]='C' OR [ModelloVal]='R'))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ModelloVal]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_ModelloVal] CHECK (([ModelloVal]='C' OR [ModelloVal]='R'))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_ModelloVal]
ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_ModelloVal] CHECK (([ModelloVal]='C' OR [ModelloVal]='R'))
ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_ModelloVal]
ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_ModelloVal] CHECK (([ModelloVal]='C' OR [ModelloVal]='R'))
ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_ModelloVal]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_CostoUnitarioRicaricatoLordoV] CHECK (([CostoUnitarioRicaricatoLordoV] >= 0))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_CostoUnitarioRicaricatoLordoV]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH CHECK ADD CONSTRAINT [CK_xPreventivoMateriale_ScontoCostoRicaricato] CHECK (([dbo].[afn_PercStrValid]([ScontoCostoRicaricato])=(1)))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_ScontoCostoRicaricato]
ALTER TABLE [dbo].[xPreventivoGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppo_CostoUnitarioRicaricatoLordoV] CHECK (([CostoUnitarioRicaricatoLordoV] >= 0))
ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_CostoUnitarioRicaricatoLordoV]
ALTER TABLE [dbo].[xPreventivoGruppo] WITH CHECK ADD CONSTRAINT [CK_xPreventivoGruppo_ScontoCostoRicaricato] CHECK (([dbo].[afn_PercStrValid]([ScontoCostoRicaricato])=(1)))
ALTER TABLE [dbo].[xPreventivoGruppo] CHECK CONSTRAINT [CK_xPreventivoGruppo_ScontoCostoRicaricato]
ALTER TABLE [dbo].[xPreventivoFase] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFase_CostoUnitarioRicaricatoLordoV] CHECK (([CostoUnitarioRicaricatoLordoV] >= 0))
ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_CostoUnitarioRicaricatoLordoV]
ALTER TABLE [dbo].[xPreventivoFase] WITH CHECK ADD CONSTRAINT [CK_xPreventivoFase_ScontoCostoRicaricato] CHECK (([dbo].[afn_PercStrValid]([ScontoCostoRicaricato])=(1)))
ALTER TABLE [dbo].[xPreventivoFase] CHECK CONSTRAINT [CK_xPreventivoFase_ScontoCostoRicaricato]
ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_FattoreMksPeriodo] CHECK (([FattoreMksPeriodo] = 12 or [FattoreMksPeriodo] = 1 or [FattoreMksPeriodo] = 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_FattoreMksPeriodo]
ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_FattoreMksPeriodoFattura] CHECK (([FattoreMksPeriodoFattura] = 12 or [FattoreMksPeriodoFattura] = 1 or [FattoreMksPeriodoFattura] = 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_FattoreMksPeriodoFattura]
ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_FattoreMksCicloFattura] CHECK (([FattoreMksCicloFattura] = 12 or [FattoreMksCicloFattura] = 6 or [FattoreMksCicloFattura] = 4 or [FattoreMksCicloFattura] = 3 or [FattoreMksCicloFattura] = 2 or [FattoreMksCicloFattura] = 1))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_FattoreMksCicloFattura]
ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_GiornoFattura] CHECK NOT FOR REPLICATION (([GiornoFattura]>=(1) AND [GiornoFattura]<=(31)))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_GiornoFattura]
ALTER TABLE [dbo].[xLSImport] WITH NOCHECK ADD CONSTRAINT [CK_xLSImport_PrezzoAcquisto] CHECK (([PrezzoAcquisto] >= 0))
ALTER TABLE [dbo].[xLSImport] CHECK CONSTRAINT [CK_xLSImport_PrezzoAcquisto]
ALTER TABLE [dbo].[xLSImport] WITH NOCHECK ADD CONSTRAINT [CK_xLSImport_PrezzoVendita] CHECK (([PrezzoVendita] >= 0))
ALTER TABLE [dbo].[xLSImport] CHECK CONSTRAINT [CK_xLSImport_PrezzoVendita]
ALTER TABLE [dbo].[xAROtherCodCF] WITH CHECK ADD CONSTRAINT [CK_xAROtherCodCF_AROther] CHECK (([Cd_AROther]<>'' AND CONVERT([varbinary](20),[Cd_AROther],0)=CONVERT([varbinary](20),upper([Cd_AROther]),0)))
ALTER TABLE [dbo].[xAROtherCodCF] CHECK CONSTRAINT [CK_xAROtherCodCF_AROther]
ALTER TABLE [dbo].[xAROtherCodCF] WITH CHECK ADD CONSTRAINT [CK_xAROtherCodCF_CodiceAlternativo] CHECK (([CodiceAlternativo] IS NULL OR [CodiceAlternativo]<>''))
ALTER TABLE [dbo].[xAROtherCodCF] CHECK CONSTRAINT [CK_xAROtherCodCF_CodiceAlternativo]
ALTER TABLE [dbo].[xAROtherCodCF] WITH CHECK ADD CONSTRAINT [CK_xAROtherCodCF_FornitorePreferenziale] CHECK (([FornitorePreferenziale]=(0) OR [Cd_CF] like 'F%'))
ALTER TABLE [dbo].[xAROtherCodCF] CHECK CONSTRAINT [CK_xAROtherCodCF_FornitorePreferenziale]
ALTER TABLE [dbo].[xAROtherCodCF] WITH CHECK ADD CONSTRAINT [CK_xAROtherCodCF_FornitorePreferenziale_2] CHECK (([CodiceAlternativo] IS NOT NULL OR [Cd_CF] like 'F%'))
ALTER TABLE [dbo].[xAROtherCodCF] CHECK CONSTRAINT [CK_xAROtherCodCF_FornitorePreferenziale_2]
ALTER TABLE [dbo].[xAROtherCodCF] WITH NOCHECK ADD CONSTRAINT [CK_xAROtherCodCF_PrezzoAcquisto] CHECK (([PrezzoAcquisto] >= 0))
ALTER TABLE [dbo].[xAROtherCodCF] CHECK CONSTRAINT [CK_xAROtherCodCF_PrezzoAcquisto]
ALTER TABLE [dbo].[xAROtherCodCF] WITH NOCHECK ADD CONSTRAINT [CK_xAROtherCodCF_PrezzoVendita] CHECK (([PrezzoVendita] >= 0))
ALTER TABLE [dbo].[xAROtherCodCF] CHECK CONSTRAINT [CK_xAROtherCodCF_PrezzoVendita]
ALTER TABLE [dbo].[xAROtherCodCF] WITH CHECK ADD CONSTRAINT [CK_xAROtherCodCF_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
ALTER TABLE [dbo].[xAROtherCodCF] CHECK CONSTRAINT [CK_xAROtherCodCF_Sconto]
ALTER TABLE [dbo].[xLSARGruppo] WITH NOCHECK ADD CONSTRAINT [CK_xLSARGruppo_ARGruppo123] CHECK (([Cd_ARGruppo1] IS NULL AND [Cd_ARGruppo2] IS NULL AND [Cd_ARGruppo3] IS NULL OR [Cd_ARGruppo1] IS NOT NULL AND [Cd_ARGruppo2] IS NOT NULL AND [Cd_ARGruppo3] IS NOT NULL))
ALTER TABLE [dbo].[xLSARGruppo] CHECK CONSTRAINT [CK_xLSARGruppo_ARGruppo123] 
ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH NOCHECK ADD CONSTRAINT [CK_xRDTicketMaterialeSpesaMov_Quantita] CHECK (([Quantita] >= 0))
ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] CHECK CONSTRAINT [CK_xRDTicketMaterialeSpesaMov_Quantita]
ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH NOCHECK ADD CONSTRAINT [CK_xRDTicketMaterialeSpesaMov_Omaggio] CHECK NOT FOR REPLICATION (([Omaggio]>=(1) AND [Omaggio]<=(3)))
ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] CHECK CONSTRAINT [CK_xRDTicketMaterialeSpesaMov_Omaggio]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_GiorniAvvisoRinnovo] CHECK NOT FOR REPLICATION ([GiorniAvvisoRinnovo]>=(0))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_GiorniAvvisoRinnovo]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_GiorniDisdettaCliente] CHECK NOT FOR REPLICATION ([GiorniDisdettaCliente]>=(0))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_GiorniDisdettaCliente]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_GiorniDisdettaFornitore] CHECK NOT FOR REPLICATION ([GiorniDisdettaFornitore]>=(0))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_GiorniDisdettaFornitore]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_ISTAT] CHECK NOT FOR REPLICATION ([ISTAT]>=(0))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_ISTAT]
ALTER TABLE [dbo].[xContrattoFase] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoFase_PrezzoUnitarioV] CHECK (([PrezzoUnitarioV] >= 0))
ALTER TABLE [dbo].[xContrattoFase] CHECK CONSTRAINT [CK_xContrattoFase_PrezzoUnitarioV]
ALTER TABLE [dbo].[xContrattoFase] WITH CHECK ADD CONSTRAINT [CK_xContrattoFase_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
ALTER TABLE [dbo].[xContrattoFase] CHECK CONSTRAINT [CK_xContrattoFase_Sconto]
ALTER TABLE [dbo].[xContrattoFase] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoFase_PrezzoUnitarioScontatoV] CHECK (([PrezzoUnitarioScontatoV] >= 0))
ALTER TABLE [dbo].[xContrattoFase] CHECK CONSTRAINT [CK_xContrattoFase_PrezzoUnitarioScontatoV]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_TipoFase] CHECK NOT FOR REPLICATION (([TipoFase]>=(1) AND [TipoFase]<=(4)))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_TipoFase]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_FasePrezzoUnitarioV] CHECK (([FasePrezzoUnitarioV] >= 0))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_FasePrezzoUnitarioV]
ALTER TABLE [dbo].[xContrattoRinnovo] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoRinnovo_ImportoTotaleContratto] CHECK (([ImportoTotaleContratto] >= 0))
ALTER TABLE [dbo].[xContrattoRinnovo] CHECK CONSTRAINT [CK_xContrattoRinnovo_ImportoTotaleContratto]
ALTER TABLE [dbo].[xContrattoRinnovo] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoRinnovo_ImportoTotaleFattura] CHECK (([ImportoTotaleFattura] >= 0))
ALTER TABLE [dbo].[xContrattoRinnovo] CHECK CONSTRAINT [CK_xContrattoRinnovo_ImportoTotaleFattura]
ALTER TABLE [dbo].[xContrattoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoMateriale_PrezzoUnitarioV] CHECK (([PrezzoUnitarioV] >= 0))
ALTER TABLE [dbo].[xContrattoMateriale] CHECK CONSTRAINT [CK_xContrattoMateriale_PrezzoUnitarioV]
ALTER TABLE [dbo].[xContrattoMateriale] WITH CHECK ADD CONSTRAINT [CK_xContrattoMateriale_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
ALTER TABLE [dbo].[xContrattoMateriale] CHECK CONSTRAINT [CK_xContrattoMateriale_Sconto]
ALTER TABLE [dbo].[xContrattoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoMateriale_PrezzoUnitarioScontatoV] CHECK (([PrezzoUnitarioScontatoV] >= 0))
ALTER TABLE [dbo].[xContrattoMateriale] CHECK CONSTRAINT [CK_xContrattoMateriale_PrezzoUnitarioScontatoV]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_TipoMateriale] CHECK NOT FOR REPLICATION (([TipoMateriale]>=(1) AND [TipoMateriale]<=(3)))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_TipoMateriale]
ALTER TABLE [dbo].[xRDTicketAttivitaMov] WITH NOCHECK ADD CONSTRAINT [CK_xRDTicketAttivitaMov_FattProvvigione] CHECK (([FattProvvigione]>=(0) AND [FattProvvigione]<=(1)))
ALTER TABLE [dbo].[xRDTicketAttivitaMov] CHECK CONSTRAINT [CK_xRDTicketAttivitaMov_FattProvvigione]
ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] WITH NOCHECK ADD CONSTRAINT [CK_xRDTicketMaterialeSpesaMov_FattProvvigione] CHECK (([FattProvvigione]>=(0) AND [FattProvvigione]<=(1)))
ALTER TABLE [dbo].[xRDTicketMaterialeSpesaMov] CHECK CONSTRAINT [CK_xRDTicketMaterialeSpesaMov_FattProvvigione]
ALTER TABLE [dbo].[xContrattoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoSpesa_PrezzoUnitarioV] CHECK (([PrezzoUnitarioV] >= 0))
ALTER TABLE [dbo].[xContrattoSpesa] CHECK CONSTRAINT [CK_xContrattoSpesa_PrezzoUnitarioV]
ALTER TABLE [dbo].[xContrattoSpesa] WITH CHECK ADD CONSTRAINT [CK_xContrattoSpesa_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
ALTER TABLE [dbo].[xContrattoSpesa] CHECK CONSTRAINT [CK_xContrattoSpesa_Sconto]
ALTER TABLE [dbo].[xContrattoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoSpesa_PrezzoUnitarioScontatoV] CHECK (([PrezzoUnitarioScontatoV] >= 0))
ALTER TABLE [dbo].[xContrattoSpesa] CHECK CONSTRAINT [CK_xContrattoSpesa_PrezzoUnitarioScontatoV]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_TipoSpesa] CHECK NOT FOR REPLICATION (([TipoSpesa]>=(1) AND [TipoSpesa]<=(4)))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_TipoSpesa]
ALTER TABLE [dbo].[xSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xSpesa_TipoCosto] CHECK NOT FOR REPLICATION (([TipoCosto]>=(1) AND [TipoCosto]<=(2)))
ALTER TABLE [dbo].[xSpesa] CHECK CONSTRAINT [CK_xSpesa_TipoCosto]
ALTER TABLE [dbo].[PRAttivita] WITH CHECK ADD CONSTRAINT [xCK_PRAttivita_xNuovoEvadi] CHECK  (([xNuovoEvadi]='N' OR [xNuovoEvadi]='E'))
ALTER TABLE [dbo].[PRAttivita] CHECK CONSTRAINT [xCK_PRAttivita_xNuovoEvadi]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_Modalita] CHECK NOT FOR REPLICATION (([Modalita]>=(1) AND [Modalita]<=(3)))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_Modalita]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_FattoreMksPeriodoStandardRinnovo] CHECK (([FattoreMksPeriodoStandardRinnovo] = 12 or [FattoreMksPeriodoStandardRinnovo] = 1 or [FattoreMksPeriodoStandardRinnovo] = 0))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_FattoreMksPeriodoStandardRinnovo]
ALTER TABLE [dbo].[xSpesa] WITH CHECK ADD CONSTRAINT [CK_xSpesa_DefaultQta] CHECK  (([DefaultQta]='N' OR [DefaultQta]='D' OR [DefaultQta]='T'))
ALTER TABLE [dbo].[xSpesa] CHECK CONSTRAINT [CK_xSpesa_DefaultQta]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_TipoISTAT] CHECK NOT FOR REPLICATION (([TipoISTAT]>=(1) AND [TipoISTAT]<=(3)))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_TipoISTAT]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_ContrattoGiornoFattura] CHECK NOT FOR REPLICATION (([ContrattoGiornoFattura]>=(1) AND [ContrattoGiornoFattura]<=(31)))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_ContrattoGiornoFattura]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_ContrattoGiorniAvvisoRinnovo] CHECK NOT FOR REPLICATION ([ContrattoGiorniAvvisoRinnovo]>=(0))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_ContrattoGiorniAvvisoRinnovo]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_ContrattoGiorniDisdettaCliente] CHECK NOT FOR REPLICATION ([ContrattoGiorniDisdettaCliente]>=(0))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_ContrattoGiorniDisdettaCliente]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_ContrattoGiorniDisdettaFornitore] CHECK NOT FOR REPLICATION ([ContrattoGiorniDisdettaFornitore]>=(0))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_ContrattoGiorniDisdettaFornitore]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_ContrattoTipoISTAT] CHECK NOT FOR REPLICATION (([ContrattoTipoISTAT]>=(1) AND [ContrattoTipoISTAT]<=(3)))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_ContrattoTipoISTAT]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_ContrattoISTAT] CHECK NOT FOR REPLICATION ([ContrattoISTAT]>=(0))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_ContrattoISTAT]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_ISTATUltimoRinnovo] CHECK NOT FOR REPLICATION ([ISTATUltimoRinnovo]>=(0))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_ISTATUltimoRinnovo]
ALTER TABLE [dbo].[xInterventoProg] WITH NOCHECK ADD CONSTRAINT [CK_xInterventoProg_GiornoSettimana] CHECK (([GiornoSettimana] >= (0) And [GiornoSettimana] <= (7)))
ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [CK_xInterventoProg_GiornoSettimana]
ALTER TABLE [dbo].[xInterventoProg] WITH NOCHECK ADD CONSTRAINT [CK_xInterventoProg_GiornoIntervento] CHECK NOT FOR REPLICATION (([GiornoIntervento]>=(0) AND [GiornoIntervento]<=(31)))
ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [CK_xInterventoProg_GiornoIntervento]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_InterventoProgFattoreMksCiclo] CHECK (([InterventoProgFattoreMksCiclo] = 12 or [InterventoProgFattoreMksCiclo] = 6 or [InterventoProgFattoreMksCiclo] = 4 or [InterventoProgFattoreMksCiclo] = 3 or [InterventoProgFattoreMksCiclo] = 2 or [InterventoProgFattoreMksCiclo] = 1))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_InterventoProgFattoreMksCiclo]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_InterventoProgGiornoSettimana] CHECK (([InterventoProgGiornoSettimana] >= (0) And [InterventoProgGiornoSettimana] <= (7)))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_InterventoProgGiornoSettimana]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_InterventoProgGiornoIntervento] CHECK NOT FOR REPLICATION (([InterventoProgGiornoIntervento]>=(0) AND [InterventoProgGiornoIntervento]<=(31)))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_InterventoProgGiornoIntervento]
ALTER TABLE [dbo].[xRDImport] WITH NOCHECK ADD CONSTRAINT [CK_xRDImport_TempoInizio] CHECK NOT FOR REPLICATION (([TempoInizio] is null or [TempoInizio] >= 0))
ALTER TABLE [dbo].[xRDImport] CHECK CONSTRAINT [CK_xRDImport_TempoInizio]
ALTER TABLE [dbo].[xRDImport] WITH NOCHECK ADD CONSTRAINT [CK_xRDImport_TempoFine] CHECK NOT FOR REPLICATION (([TempoFine] is null or [TempoFine] > 0 and [TempoFine] <= 86400))
ALTER TABLE [dbo].[xRDImport] CHECK CONSTRAINT [CK_xRDImport_TempoFine]
ALTER TABLE [dbo].[xRDImport] WITH NOCHECK ADD CONSTRAINT [CK_xRDImport_TempoFine_TempoInizio] CHECK NOT FOR REPLICATION (([TempoFine] is null and [TempoInizio] is null or [TempoFine] is not null and [TempoInizio] is not null and [TempoFine] > [TempoInizio]))
ALTER TABLE [dbo].[xRDImport] CHECK CONSTRAINT [CK_xRDImport_TempoFine_TempoInizio]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_ContrattoTipoSelMatricola] CHECK NOT FOR REPLICATION (([ContrattoTipoSelMatricola]>=(1) AND [ContrattoTipoSelMatricola]<=(2)))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_ContrattoTipoSelMatricola]
ALTER TABLE [dbo].[xLSImport] WITH CHECK ADD CONSTRAINT [CK_xLSImport_ScontoAcquisto] CHECK (([dbo].[afn_PercStrValid]([ScontoAcquisto])=(1)))
ALTER TABLE [dbo].[xLSImport] CHECK CONSTRAINT [CK_xLSImport_ScontoAcquisto]
ALTER TABLE [dbo].[xRDTicket]  WITH NOCHECK ADD  CONSTRAINT [CK_xRDTicket_Cd_Nazione_Cd_Provincia] CHECK  (([Cd_Nazione] is not null and [Cd_Provincia] is not null or [Cd_Nazione] is null and [Cd_Provincia] is null or [Cd_Nazione] <> 'IT' and [Cd_Nazione] is not null))
ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [CK_xRDTicket_Cd_Nazione_Cd_Provincia]
ALTER TABLE [dbo].[xPreventivoFamiglia] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFamiglia_Area] CHECK NOT FOR REPLICATION (([Area]>=(1) AND [Area]<=(3)))
ALTER TABLE [dbo].[xPreventivoFamiglia] CHECK CONSTRAINT [CK_xPreventivoFamiglia_Area]
ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_Area] CHECK NOT FOR REPLICATION (([Area]>=(1) AND [Area]<=(3)))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_Area]
ALTER TABLE [dbo].[xContrattoMatricola] WITH CHECK ADD CONSTRAINT [CK_xContrattoMatricola_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
ALTER TABLE [dbo].[xContrattoMatricola] CHECK CONSTRAINT [CK_xContrattoMatricola_Sconto]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoSpesa_Quantita] CHECK (([Quantita] >= 0))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_Quantita]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoSpesa_CostoUnitarioLordoV] CHECK (([CostoUnitarioLordoV] >= 0))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_CostoUnitarioLordoV]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH CHECK ADD CONSTRAINT [CK_xPreventivoSpesa_ScontoAcquisto] CHECK (([dbo].[afn_PercStrValid]([ScontoAcquisto])=(1)))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_ScontoAcquisto]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoSpesa_RicavoUnitarioScontatoV] CHECK (([RicavoUnitarioScontatoV] >= 0))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_RicavoUnitarioScontatoV]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH CHECK ADD CONSTRAINT [CK_xPreventivoSpesa_MargineCostoPerc] CHECK (([dbo].[afn_PercStrValid]([MargineCostoPerc])=(1)))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_MargineCostoPerc]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH CHECK ADD CONSTRAINT [CK_xPreventivoSpesa_MargineRicavoPerc] CHECK (([dbo].[afn_PercStrValid]([MargineRicavoPerc])=(1)))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_MargineRicavoPerc]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoSpesa_ModelloVal] CHECK (([ModelloVal]='C' OR [ModelloVal]='R'))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_ModelloVal]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoSpesa_CostoUnitarioRicaricatoLordoV] CHECK (([CostoUnitarioRicaricatoLordoV] >= 0))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_CostoUnitarioRicaricatoLordoV]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH CHECK ADD CONSTRAINT [CK_xPreventivoSpesa_ScontoCostoRicaricato] CHECK (([dbo].[afn_PercStrValid]([ScontoCostoRicaricato])=(1)))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_ScontoCostoRicaricato]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoSpesa_RicavoUnitarioV] CHECK (([RicavoUnitarioV] >= 0))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_RicavoUnitarioV]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH CHECK ADD CONSTRAINT [CK_xPreventivoSpesa_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_Sconto]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoSpesa_RicavoTotaleV] CHECK (([RicavoTotaleV] >= 0))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_RicavoTotaleV]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoSpesa_CostoUnitarioV] CHECK (([CostoUnitarioV] >= 0))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_CostoUnitarioV]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoSpesa_CostoUnitarioRicaricatoV] CHECK (([CostoUnitarioRicaricatoV] >= 0))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_CostoUnitarioRicaricatoV]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoSpesa_CostoTotaleV] CHECK (([CostoTotaleV] >= 0))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_CostoTotaleV]
ALTER TABLE [dbo].[xPreventivoSpesa] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoSpesa_Sequenza] CHECK (([Sequenza] >= 0))
ALTER TABLE [dbo].[xPreventivoSpesa] CHECK CONSTRAINT [CK_xPreventivoSpesa_Sequenza]
ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] WITH NOCHECK ADD CONSTRAINT [CK_xRDTicketAttivitaMovRL_InizioFine] CHECK (([InizioFine] = 'I' or ([InizioFine] = 'F')))
ALTER TABLE [dbo].[xRDTicketAttivitaMovRL] CHECK CONSTRAINT [CK_xRDTicketAttivitaMovRL_InizioFine]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_FasePlafondOrePreviste] CHECK (([FasePlafondOrePreviste] >= 0))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_FasePlafondOrePreviste]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_FasePlafondOrePartenza] CHECK (([FasePlafondOrePartenza] >= 0))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_FasePlafondOrePartenza]
ALTER TABLE [dbo].[xContrattoRinnovo] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoRinnovo_PlafondOrePreviste] CHECK (([PlafondOrePreviste] >= 0))
ALTER TABLE [dbo].[xContrattoRinnovo] CHECK CONSTRAINT [CK_xContrattoRinnovo_PlafondOrePreviste]
ALTER TABLE [dbo].[xContrattoRinnovo] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoRinnovo_PlafondOrePartenza] CHECK (([PlafondOrePartenza] >= 0))
ALTER TABLE [dbo].[xContrattoRinnovo] CHECK CONSTRAINT [CK_xContrattoRinnovo_PlafondOrePartenza]
ALTER TABLE [dbo].[xContrattoRinnovo] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoRinnovo_PlafondOreResidue] CHECK (([PlafondOreResidue] >= 0))
ALTER TABLE [dbo].[xContrattoRinnovo] CHECK CONSTRAINT [CK_xContrattoRinnovo_PlafondOreResidue]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_PrezziPerQta] CHECK NOT FOR REPLICATION (([PrezziPerQta]>=(1) AND [PrezziPerQta]<=(3)))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_PrezziPerQta]
ALTER TABLE [dbo].[xContrattoImpianto] WITH CHECK ADD CONSTRAINT [CK_xContrattoImpianto_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
ALTER TABLE [dbo].[xContrattoImpianto] CHECK CONSTRAINT [CK_xContrattoImpianto_Sconto]
ALTER TABLE [dbo].[xContrattoDOSottoCommessa] WITH CHECK ADD CONSTRAINT [CK_xContrattoDOSottoCommessa_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
ALTER TABLE [dbo].[xContrattoDOSottoCommessa] CHECK CONSTRAINT [CK_xContrattoDOSottoCommessa_Sconto]
ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_SpesaCostoV] CHECK (([SpesaCostoV] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_SpesaCostoV]
ALTER TABLE [dbo].[xPreventivo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_SpesaRicavoV] CHECK (([SpesaRicavoV] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_SpesaRicavoV]
ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreSC1V] CHECK  (([ValoreSC1V] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreSC1V]
ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreSC2V] CHECK  (([ValoreSC2V] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreSC2V]
ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreSC3V] CHECK  (([ValoreSC3V] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreSC3V]
ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreSC4V] CHECK  (([ValoreSC4V] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreSC4V]
ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreSC5V] CHECK  (([ValoreSC5V] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreSC5V]
ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreSR1V] CHECK  (([ValoreSR1V] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreSR1V]
ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreSR2V] CHECK  (([ValoreSR2V] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreSR2V]
ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreSR3V] CHECK  (([ValoreSR3V] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreSR3V]
ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreSR4V] CHECK  (([ValoreSR4V] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreSR4V]
ALTER TABLE [dbo].[xPreventivo]  WITH NOCHECK ADD  CONSTRAINT [CK_xPreventivo_ValoreSR5V] CHECK  (([ValoreSR5V] >= 0))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_ValoreSR5V]
ALTER TABLE [dbo].[xFormula] WITH NOCHECK ADD CONSTRAINT [CK_xFormula_TipoFormula] CHECK NOT FOR REPLICATION (([TipoFormula]=(4) OR ([TipoFormula]=(3) OR ([TipoFormula]=(2) OR [TipoFormula]=(1)))))
ALTER TABLE [dbo].[xFormula] CHECK CONSTRAINT [CK_xFormula_TipoFormula]
ALTER TABLE [dbo].[xDoSottoCommessaRicambio] WITH NOCHECK ADD CONSTRAINT [CK_xDoSottoCommessaRicambio_Quantita] CHECK (([Quantita] >= 0))
ALTER TABLE [dbo].[xDoSottoCommessaRicambio] CHECK CONSTRAINT [CK_xDoSottoCommessaRicambio_Quantita]
ALTER TABLE [dbo].[xDoSottoCommessaRicambio] WITH NOCHECK ADD CONSTRAINT [CK_xDoSottoCommessaRicambio_CostoUnitarioV] CHECK (([CostoUnitarioV] >= 0))
ALTER TABLE [dbo].[xDoSottoCommessaRicambio] CHECK CONSTRAINT [CK_xDoSottoCommessaRicambio_CostoUnitarioV]
ALTER TABLE [dbo].[DOSottoCommessa] WITH NOCHECK ADD CONSTRAINT [xCK_DOSottoCommessa_ValoreGaranzia] CHECK (([xValoreGaranzia] >= 0))
ALTER TABLE [dbo].[DOSottoCommessa] CHECK CONSTRAINT [xCK_DOSottoCommessa_ValoreGaranzia]
ALTER TABLE [dbo].[xImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xImpianto_ValoreGaranzia] CHECK (([ValoreGaranzia] >= 0))
ALTER TABLE [dbo].[xImpianto] CHECK CONSTRAINT [CK_xImpianto_ValoreGaranzia]
ALTER TABLE [dbo].[AR] WITH NOCHECK ADD CONSTRAINT [xCK_AR_ValoreGaranzia] CHECK (([xValoreGaranzia] >= 0))
ALTER TABLE [dbo].[AR] CHECK CONSTRAINT [xCK_AR_ValoreGaranzia]
ALTER TABLE [dbo].[xRDTicket] WITH NOCHECK ADD CONSTRAINT [CK_xRDTicket_SGV_Etichetta] CHECK (([SGV_Etichetta]='M' OR [SGV_Etichetta]='S' OR [SGV_Etichetta]='I'))
ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [CK_xRDTicket_SGV_Etichetta]
ALTER TABLE [dbo].[xPreventivo] WITH CHECK ADD CONSTRAINT [CK_xPreventivo_Stato] CHECK (([Stato]='P' OR [Stato]='C' OR [Stato]='S' OR [Stato]='F' OR [Stato]='R' OR [Stato]='A' OR [Stato]='I'))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_Stato]
ALTER TABLE [dbo].[xPreventivo] WITH CHECK ADD CONSTRAINT [CK_xPreventivo_Probabilita] CHECK (([Probabilita]>=(0) AND [Probabilita]<=(100)))
ALTER TABLE [dbo].[xPreventivo] CHECK CONSTRAINT [CK_xPreventivo_Probabilita]
ALTER TABLE [dbo].[xMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xMatricola_ValoreGaranzia] CHECK (([ValoreGaranzia] >= 0))
ALTER TABLE [dbo].[xMatricola] CHECK CONSTRAINT [CK_xMatricola_ValoreGaranzia]
ALTER TABLE [dbo].[xContrattoRinnovo] WITH NOCHECK ADD CONSTRAINT [CK_xContrattoRinnovo_Costo] CHECK (([Costo] >= 0))
ALTER TABLE [dbo].[xContrattoRinnovo] CHECK CONSTRAINT [CK_xContrattoRinnovo_Costo]
ALTER TABLE [dbo].[xContrattoRinnovo] WITH CHECK ADD CONSTRAINT [CK_xContrattoRinnovo_MargineFattPerc] CHECK (([dbo].[afn_PercStrValid]([MargineFattPerc])=(1)))
ALTER TABLE [dbo].[xContrattoRinnovo] CHECK CONSTRAINT [CK_xContrattoRinnovo_MargineFattPerc]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_TipoSviluppoFattura] CHECK NOT FOR REPLICATION (([TipoSviluppoFattura]>=(1) AND [TipoSviluppoFattura]<=(5)))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_TipoSviluppoFattura]
ALTER TABLE [dbo].[xContratto] WITH NOCHECK ADD CONSTRAINT [CK_xContratto_TipoGiornoFattura] CHECK NOT FOR REPLICATION (([TipoGiornoFattura]>=(1) AND [TipoGiornoFattura]<=(2)))
ALTER TABLE [dbo].[xContratto] CHECK CONSTRAINT [CK_xContratto_TipoGiornoFattura]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_PreventiviCoeff1UM] CHECK (([PreventiviCoeff1UM] = 1 or [PreventiviCoeff1UM] = 2))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_PreventiviCoeff1UM]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_PreventiviCoeff2UM] CHECK (([PreventiviCoeff2UM] = 1 or [PreventiviCoeff2UM] = 2))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_PreventiviCoeff2UM]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_PreventiviCoeff3UM] CHECK (([PreventiviCoeff3UM] = 1 or [PreventiviCoeff3UM] = 2))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_PreventiviCoeff3UM]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_PreventiviCoeff4UM] CHECK (([PreventiviCoeff4UM] = 1 or [PreventiviCoeff4UM] = 2))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_PreventiviCoeff4UM]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_Coeff1]  CHECK (([Coeff1] >= 0))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_Coeff1]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_Coeff2]  CHECK (([Coeff2] >= 0))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_Coeff2]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_Coeff3]  CHECK (([Coeff3] >= 0))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_Coeff3]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_Coeff4]  CHECK (([Coeff4] >= 0))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_Coeff4]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_UMDORig] CHECK (([UMDORig] = 1 or [UMDORig] = 2))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_UMDORig]
ALTER TABLE [dbo].[PRAttivita] WITH NOCHECK ADD CONSTRAINT [xCK_PRAttivita_xTipoDurata] CHECK NOT FOR REPLICATION (([xTipoDurata]>=(1) AND [xTipoDurata]<=(2)))
ALTER TABLE [dbo].[PRAttivita] CHECK CONSTRAINT [xCK_PRAttivita_xTipoDurata]
ALTER TABLE [dbo].[PRAttivita] WITH NOCHECK ADD CONSTRAINT [xCK_PRAttivita_xDUTipoValCosti] CHECK (([xDUTipoValCosti]>=(1) AND [xDUTipoValCosti]<=(4)))
ALTER TABLE [dbo].[PRAttivita] CHECK CONSTRAINT [xCK_PRAttivita_xDUTipoValCosti]
ALTER TABLE [dbo].[PRAttivita] WITH NOCHECK ADD CONSTRAINT [xCK_PRAttivita_xDDRisorsaTipoValCosti] CHECK (([xDDRisorsaTipoValCosti]>=(1) AND [xDDRisorsaTipoValCosti]<=(4)))
ALTER TABLE [dbo].[PRAttivita] CHECK CONSTRAINT [xCK_PRAttivita_xDDRisorsaTipoValCosti]
ALTER TABLE [dbo].[PRAttivita] WITH NOCHECK ADD CONSTRAINT [xCK_PRAttivita_xDDOperatoreTipoValCosti] CHECK (([xDDOperatoreTipoValCosti]>=(1) AND [xDDOperatoreTipoValCosti]<=(4)))
ALTER TABLE [dbo].[PRAttivita] CHECK CONSTRAINT [xCK_PRAttivita_xDDOperatoreTipoValCosti]
ALTER TABLE [dbo].[PRAttivita] WITH NOCHECK ADD CONSTRAINT [xCK_PRAttivita_xDDRisorsaOperatoreTipoValCosti] CHECK (([xDDRisorsaOperatoreTipoValCosti]>=(1) AND [xDDRisorsaOperatoreTipoValCosti]<=(4)))
ALTER TABLE [dbo].[PRAttivita] CHECK CONSTRAINT [xCK_PRAttivita_xDDRisorsaOperatoreTipoValCosti]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_RilevaTestRitardoAzione] CHECK NOT FOR REPLICATION (([RilevaTestRitardoAzione]>=(1) AND [RilevaTestRitardoAzione]<=(3)))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_RilevaTestRitardoAzione]
ALTER TABLE [dbo].[xInterventoProgAttivita] WITH CHECK ADD CONSTRAINT [CK_xInterventoProgAttivita_NumUnitaProduttive] CHECK ([NumUnitaProduttive]>(0) AND [NumUnitaProduttive]<(151))
ALTER TABLE [dbo].[xInterventoProgAttivita] CHECK CONSTRAINT [CK_xInterventoProgAttivita_NumUnitaProduttive]
ALTER TABLE [dbo].[xRDTicketAttivita] WITH CHECK ADD CONSTRAINT [CK_xRDTicketAttivita_NumUnitaProduttive] CHECK ([NumUnitaProduttive]>(0) AND [NumUnitaProduttive]<(151))
ALTER TABLE [dbo].[xRDTicketAttivita] CHECK CONSTRAINT [CK_xRDTicketAttivita_NumUnitaProduttive]
ALTER TABLE [dbo].[xPreventivoGruppoSviluppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoGruppoSviluppo_CostoV] CHECK (([CostoV] >= 0))
ALTER TABLE [dbo].[xPreventivoGruppoSviluppo] CHECK CONSTRAINT [CK_xPreventivoGruppoSviluppo_CostoV]
ALTER TABLE [dbo].[xPreventivoFaseSviluppo] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoFaseSviluppo_CostoV] CHECK (([CostoV] >= 0))
ALTER TABLE [dbo].[xPreventivoFaseSviluppo] CHECK CONSTRAINT [CK_xPreventivoFaseSviluppo_CostoV]
ALTER TABLE [dbo].[xRDTicket] WITH CHECK ADD CONSTRAINT [CK_xRDTicket_GestioneMatricola] CHECK  (([GestioneMatricola]=Null OR [GestioneMatricola]='M' OR [GestioneMatricola]='U' OR [GestioneMatricola]='D'))
ALTER TABLE [dbo].[xRDTicket] CHECK CONSTRAINT [CK_xRDTicket_GestioneMatricola]
alter table xRDTicket with check add constraint CK_xRDTicket_xContratto_xNoleggio check (
		(Cd_xContratto is null and Cd_xNoleggio is null) or (Cd_xContratto is not null and Cd_xNoleggio is null)
		or (Cd_xContratto is null and Cd_xNoleggio is not null))
alter table xRDTicket check constraint CK_xRDTicket_xContratto_xNoleggio
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_FasePrezzoUnitarioV] CHECK  (([FasePrezzoUnitarioV]>=(0)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_FasePrezzoUnitarioV]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_FattoreMksCicloFattura] CHECK  (([FattoreMksCicloFattura]=(12) OR [FattoreMksCicloFattura]=(6) OR [FattoreMksCicloFattura]=(4) OR [FattoreMksCicloFattura]=(3) OR [FattoreMksCicloFattura]=(2) OR [FattoreMksCicloFattura]=(1)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_FattoreMksCicloFattura]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_FattoreMksPeriodo] CHECK  (([FattoreMksPeriodo]=(12) OR [FattoreMksPeriodo]=(1) OR [FattoreMksPeriodo]=(0)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_FattoreMksPeriodo]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_FattoreMksPeriodoFattura] CHECK  (([FattoreMksPeriodoFattura]=(12) OR [FattoreMksPeriodoFattura]=(1) OR [FattoreMksPeriodoFattura]=(0)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_FattoreMksPeriodoFattura]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_FattoreMksPeriodoStandardRinnovo] CHECK  (([FattoreMksPeriodoStandardRinnovo]=(12) OR [FattoreMksPeriodoStandardRinnovo]=(1) OR [FattoreMksPeriodoStandardRinnovo]=(0)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_FattoreMksPeriodoStandardRinnovo]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_GiorniAvvisoRinnovo] CHECK NOT FOR REPLICATION (([GiorniAvvisoRinnovo]>=(0)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_GiorniAvvisoRinnovo]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_GiorniDisdettaCliente] CHECK NOT FOR REPLICATION (([GiorniDisdettaCliente]>=(0)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_GiorniDisdettaCliente]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_GiorniDisdettaFornitore] CHECK NOT FOR REPLICATION (([GiorniDisdettaFornitore]>=(0)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_GiorniDisdettaFornitore]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_GiornoFattura] CHECK NOT FOR REPLICATION (([GiornoFattura]>=(1) AND [GiornoFattura]<=(31)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_GiornoFattura]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_ImportoTotaleContratto] CHECK  (([ImportoTotaleContratto]>=(0)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_ImportoTotaleContratto]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_ImportoTotaleFattura] CHECK  (([ImportoTotaleFattura]>=(0)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_ImportoTotaleFattura]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_ISTAT] CHECK NOT FOR REPLICATION (([ISTAT]>=(0)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_ISTAT]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_Modalita] CHECK NOT FOR REPLICATION (([Modalita]>=(1) AND [Modalita]<=(3)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_Modalita]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_TipoFase] CHECK NOT FOR REPLICATION (([TipoFase]>=(1) AND [TipoFase]<=(4)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_TipoFase]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_TipoGiornoFattura] CHECK NOT FOR REPLICATION (([TipoGiornoFattura]>=(1) AND [TipoGiornoFattura]<=(2)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_TipoGiornoFattura]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_TipoISTAT] CHECK NOT FOR REPLICATION (([TipoISTAT]>=(1) AND [TipoISTAT]<=(3)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_TipoISTAT]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_TipoMateriale] CHECK NOT FOR REPLICATION (([TipoMateriale]>=(1) AND [TipoMateriale]<=(3)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_TipoMateriale]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_TipoSpesa] CHECK NOT FOR REPLICATION (([TipoSpesa]>=(1) AND [TipoSpesa]<=(4)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_TipoSpesa]
ALTER TABLE [dbo].[xContrattoImport]  WITH NOCHECK ADD  CONSTRAINT [CK_xContrattoImport_TipoSviluppoFattura] CHECK NOT FOR REPLICATION (([TipoSviluppoFattura]>=(1) AND [TipoSviluppoFattura]<=(5)))
ALTER TABLE [dbo].[xContrattoImport] CHECK CONSTRAINT [CK_xContrattoImport_TipoSviluppoFattura]
ALTER TABLE [dbo].[xContrattoImportMatricola]  WITH CHECK ADD  CONSTRAINT [CK_xContrattoImportMatricola_Sconto] CHECK  (([dbo].[afn_PercStrValid]([Sconto])=(1)))
ALTER TABLE [dbo].[xContrattoImportMatricola] CHECK CONSTRAINT [CK_xContrattoImportMatricola_Sconto]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_NoleggioNumContatori] CHECK NOT FOR REPLICATION (([NoleggioNumContatori]>=(0) AND [NoleggioNumContatori]<=(6)))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_NoleggioNumContatori]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_NoleggioGiorniAvvisoRinnovo] CHECK NOT FOR REPLICATION ([NoleggioGiorniAvvisoRinnovo]>=(0))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_NoleggioGiorniAvvisoRinnovo]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_NoleggioGiorniDisdettaCliente] CHECK NOT FOR REPLICATION ([NoleggioGiorniDisdettaCliente]>=(0))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_NoleggioGiorniDisdettaCliente]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_NoleggioGiorniDisdettaFornitore] CHECK NOT FOR REPLICATION ([NoleggioGiorniDisdettaFornitore]>=(0))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_NoleggioGiorniDisdettaFornitore]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_NoleggioTipoSelMatricola] CHECK NOT FOR REPLICATION (([NoleggioTipoSelMatricola]>=(1) AND [NoleggioTipoSelMatricola]<=(2)))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_NoleggioTipoSelMatricola]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_NoleggioGestioneResiduoPlafond] CHECK NOT FOR REPLICATION (([NoleggioGestioneResiduoPlafond]>=(1) AND [NoleggioGestioneResiduoPlafond]<=(2)))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_NoleggioGestioneResiduoPlafond]
ALTER TABLE [dbo].[xImpostazione] WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_NoleggioInizioFattQFPlafond] CHECK NOT FOR REPLICATION (([NoleggioInizioFattQFPlafond]>=(1) AND [NoleggioInizioFattQFPlafond]<=(2)))
ALTER TABLE [dbo].[xImpostazione] CHECK CONSTRAINT [CK_xImpostazione_NoleggioInizioFattQFPlafond]
ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggio_FattoreMksPeriodo] CHECK (([FattoreMksPeriodo] = 12 or [FattoreMksPeriodo] = 1 or [FattoreMksPeriodo] = 0))
ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [CK_xNoleggio_FattoreMksPeriodo]
ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggio_FattoreMksPeriodoStandardRinnovo] CHECK (([FattoreMksPeriodoStandardRinnovo] = 12 or [FattoreMksPeriodoStandardRinnovo] = 1 or [FattoreMksPeriodoStandardRinnovo] = 0))
ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [CK_xNoleggio_FattoreMksPeriodoStandardRinnovo]
ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggio_GiorniAvvisoRinnovo] CHECK NOT FOR REPLICATION ([GiorniAvvisoRinnovo]>=(0))
ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [CK_xNoleggio_GiorniAvvisoRinnovo]
ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggio_GiorniDisdettaCliente] CHECK NOT FOR REPLICATION ([GiorniDisdettaCliente]>=(0))
ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [CK_xNoleggio_GiorniDisdettaCliente]
ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggio_GiorniDisdettaFornitore] CHECK NOT FOR REPLICATION ([GiorniDisdettaFornitore]>=(0))
ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [CK_xNoleggio_GiorniDisdettaFornitore]
ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggio_FattoreMksQFNoleggio] CHECK (([FattoreMksQFNoleggio] = 12 or [FattoreMksQFNoleggio] = 6 or [FattoreMksQFNoleggio] = 4 or [FattoreMksQFNoleggio] = 3 or [FattoreMksQFNoleggio] = 2 or [FattoreMksQFNoleggio] = 1 or [FattoreMksQFNoleggio] = 0))
ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [CK_xNoleggio_FattoreMksQFNoleggio]
ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggio_FattoreMksQFPlafond] CHECK (([FattoreMksQFPlafond] = 12 or [FattoreMksQFPlafond] = 6 or [FattoreMksQFPlafond] = 4 or [FattoreMksQFPlafond] = 3 or [FattoreMksQFPlafond] = 2 or [FattoreMksQFPlafond] = 1 or [FattoreMksQFPlafond] = 0))
ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [CK_xNoleggio_FattoreMksQFPlafond]
ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggio_GestioneResiduoPlafond] CHECK NOT FOR REPLICATION (([GestioneResiduoPlafond]>=(1) AND [GestioneResiduoPlafond]<=(2)))
ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [CK_xNoleggio_GestioneResiduoPlafond]
ALTER TABLE [dbo].[xNoleggio] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggio_InizioFattQFPlafond] CHECK NOT FOR REPLICATION (([InizioFattQFPlafond]>=(1) AND [InizioFattQFPlafond]<=(2)))
ALTER TABLE [dbo].[xNoleggio] CHECK CONSTRAINT [CK_xNoleggio_InizioFattQFPlafond]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_QuotaFissaNoleggio] CHECK NOT FOR REPLICATION ([QuotaFissaNoleggio]>=(0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_QuotaFissaNoleggio]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksQFNoleggio] CHECK (([FattoreMksQFNoleggio] = 12 or [FattoreMksQFNoleggio] = 6 or [FattoreMksQFNoleggio] = 4 or [FattoreMksQFNoleggio] = 3 or [FattoreMksQFNoleggio] = 2 or [FattoreMksQFNoleggio] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksQFNoleggio]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_QuotaFissaPlafond] CHECK NOT FOR REPLICATION ([QuotaFissaPlafond]>=(0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_QuotaFissaPlafond]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksQFPlafond] CHECK (([FattoreMksQFPlafond] = 12 or [FattoreMksQFPlafond] = 6 or [FattoreMksQFPlafond] = 4 or [FattoreMksQFPlafond] = 3 or [FattoreMksQFPlafond] = 2 or [FattoreMksQFPlafond] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksQFPlafond]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C1] CHECK NOT FOR REPLICATION ([Prezzo_C1]>=(0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C1]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C2] CHECK NOT FOR REPLICATION ([Prezzo_C2]>=(0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C2]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C3] CHECK NOT FOR REPLICATION ([Prezzo_C3]>=(0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C3]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C4] CHECK NOT FOR REPLICATION ([Prezzo_C4]>=(0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C4]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C5] CHECK NOT FOR REPLICATION ([Prezzo_C5]>=(0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C5]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C6] CHECK NOT FOR REPLICATION ([Prezzo_C6]>=(0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_Prezzo_C6]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C1] CHECK (([PlafondIniziale_C1] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C1]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C2] CHECK (([PlafondIniziale_C2] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C2]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C3] CHECK (([PlafondIniziale_C3] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C3]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C4] CHECK (([PlafondIniziale_C4] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C4]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C5] CHECK (([PlafondIniziale_C5] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C5]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C6] CHECK (([PlafondIniziale_C6] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondIniziale_C6]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C1] CHECK (([PlafondPeriodico_C1] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C1]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C2] CHECK (([PlafondPeriodico_C2] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C2]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C3] CHECK (([PlafondPeriodico_C3] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C3]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C4] CHECK (([PlafondPeriodico_C4] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C4]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C5] CHECK (([PlafondPeriodico_C5] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C5]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C6] CHECK (([PlafondPeriodico_C6] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_PlafondPeriodico_C6]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C1] CHECK (([FattoreMksPlafond_C1] = 12 or [FattoreMksPlafond_C1] = 6 or [FattoreMksPlafond_C1] = 4 or [FattoreMksPlafond_C1] = 3 or [FattoreMksPlafond_C1] = 2 or [FattoreMksPlafond_C1] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C1]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C2] CHECK (([FattoreMksPlafond_C2] = 12 or [FattoreMksPlafond_C2] = 6 or [FattoreMksPlafond_C2] = 4 or [FattoreMksPlafond_C2] = 3 or [FattoreMksPlafond_C2] = 2 or [FattoreMksPlafond_C2] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C2]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C3] CHECK (([FattoreMksPlafond_C3] = 12 or [FattoreMksPlafond_C3] = 6 or [FattoreMksPlafond_C3] = 4 or [FattoreMksPlafond_C3] = 3 or [FattoreMksPlafond_C3] = 2 or [FattoreMksPlafond_C3] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C3]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C4] CHECK (([FattoreMksPlafond_C4] = 12 or [FattoreMksPlafond_C4] = 6 or [FattoreMksPlafond_C4] = 4 or [FattoreMksPlafond_C4] = 3 or [FattoreMksPlafond_C4] = 2 or [FattoreMksPlafond_C4] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C4]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C5] CHECK (([FattoreMksPlafond_C5] = 12 or [FattoreMksPlafond_C5] = 6 or [FattoreMksPlafond_C5] = 4 or [FattoreMksPlafond_C5] = 3 or [FattoreMksPlafond_C5] = 2 or [FattoreMksPlafond_C5] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C5]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C6] CHECK (([FattoreMksPlafond_C6] = 12 or [FattoreMksPlafond_C6] = 6 or [FattoreMksPlafond_C6] = 4 or [FattoreMksPlafond_C6] = 3 or [FattoreMksPlafond_C6] = 2 or [FattoreMksPlafond_C6] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksPlafond_C6]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C1] CHECK (([FattoreMksFattura_C1] = 12 or [FattoreMksFattura_C1] = 6 or [FattoreMksFattura_C1] = 4 or [FattoreMksFattura_C1] = 3 or [FattoreMksFattura_C1] = 2 or [FattoreMksFattura_C1] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C1]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C2] CHECK (([FattoreMksFattura_C2] = 12 or [FattoreMksFattura_C2] = 6 or [FattoreMksFattura_C2] = 4 or [FattoreMksFattura_C2] = 3 or [FattoreMksFattura_C2] = 2 or [FattoreMksFattura_C2] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C2]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C3] CHECK (([FattoreMksFattura_C3] = 12 or [FattoreMksFattura_C3] = 6 or [FattoreMksFattura_C3] = 4 or [FattoreMksFattura_C3] = 3 or [FattoreMksFattura_C3] = 2 or [FattoreMksFattura_C3] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C3]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C4] CHECK (([FattoreMksFattura_C4] = 12 or [FattoreMksFattura_C4] = 6 or [FattoreMksFattura_C4] = 4 or [FattoreMksFattura_C4] = 3 or [FattoreMksFattura_C4] = 2 or [FattoreMksFattura_C4] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C4]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C5] CHECK (([FattoreMksFattura_C5] = 12 or [FattoreMksFattura_C5] = 6 or [FattoreMksFattura_C5] = 4 or [FattoreMksFattura_C5] = 3 or [FattoreMksFattura_C5] = 2 or [FattoreMksFattura_C5] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C5]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C6] CHECK (([FattoreMksFattura_C6] = 12 or [FattoreMksFattura_C6] = 6 or [FattoreMksFattura_C6] = 4 or [FattoreMksFattura_C6] = 3 or [FattoreMksFattura_C6] = 2 or [FattoreMksFattura_C6] = 1))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_FattoreMksFattura_C6]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C1] CHECK (([LetturaPartenza_C1] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C1]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C2] CHECK (([LetturaPartenza_C2] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C2]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C3] CHECK (([LetturaPartenza_C3] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C3]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C4] CHECK (([LetturaPartenza_C4] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C4]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C5] CHECK (([LetturaPartenza_C5] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C5]
ALTER TABLE [dbo].[xNoleggioMatricola] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C6] CHECK (([LetturaPartenza_C6] >= 0))
ALTER TABLE [dbo].[xNoleggioMatricola] CHECK CONSTRAINT [CK_xNoleggioMatricola_LetturaPartenza_C6]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_QuotaFissaNoleggio] CHECK NOT FOR REPLICATION ([QuotaFissaNoleggio]>=(0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_QuotaFissaNoleggio]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksQFNoleggio] CHECK (([FattoreMksQFNoleggio] = 12 or [FattoreMksQFNoleggio] = 6 or [FattoreMksQFNoleggio] = 4 or [FattoreMksQFNoleggio] = 3 or [FattoreMksQFNoleggio] = 2 or [FattoreMksQFNoleggio] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksQFNoleggio]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_QuotaFissaPlafond] CHECK NOT FOR REPLICATION ([QuotaFissaPlafond]>=(0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_QuotaFissaPlafond]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksQFPlafond] CHECK (([FattoreMksQFPlafond] = 12 or [FattoreMksQFPlafond] = 6 or [FattoreMksQFPlafond] = 4 or [FattoreMksQFPlafond] = 3 or [FattoreMksQFPlafond] = 2 or [FattoreMksQFPlafond] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksQFPlafond]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C1] CHECK NOT FOR REPLICATION ([Prezzo_C1]>=(0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C1]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C2] CHECK NOT FOR REPLICATION ([Prezzo_C2]>=(0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C2]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C3] CHECK NOT FOR REPLICATION ([Prezzo_C3]>=(0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C3]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C4] CHECK NOT FOR REPLICATION ([Prezzo_C4]>=(0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C4]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C5] CHECK NOT FOR REPLICATION ([Prezzo_C5]>=(0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C5]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C6] CHECK NOT FOR REPLICATION ([Prezzo_C6]>=(0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_Prezzo_C6]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C1] CHECK (([PlafondIniziale_C1] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C1]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C2] CHECK (([PlafondIniziale_C2] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C2]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C3] CHECK (([PlafondIniziale_C3] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C3]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C4] CHECK (([PlafondIniziale_C4] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C4]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C5] CHECK (([PlafondIniziale_C5] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C5]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C6] CHECK (([PlafondIniziale_C6] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondIniziale_C6]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C1] CHECK (([PlafondPeriodico_C1] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C1]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C2] CHECK (([PlafondPeriodico_C2] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C2]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C3] CHECK (([PlafondPeriodico_C3] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C3]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C4] CHECK (([PlafondPeriodico_C4] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C4]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C5] CHECK (([PlafondPeriodico_C5] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C5]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C6] CHECK (([PlafondPeriodico_C6] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_PlafondPeriodico_C6]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C1] CHECK (([FattoreMksPlafond_C1] = 12 or [FattoreMksPlafond_C1] = 6 or [FattoreMksPlafond_C1] = 4 or [FattoreMksPlafond_C1] = 3 or [FattoreMksPlafond_C1] = 2 or [FattoreMksPlafond_C1] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C1]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C2] CHECK (([FattoreMksPlafond_C2] = 12 or [FattoreMksPlafond_C2] = 6 or [FattoreMksPlafond_C2] = 4 or [FattoreMksPlafond_C2] = 3 or [FattoreMksPlafond_C2] = 2 or [FattoreMksPlafond_C2] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C2]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C3] CHECK (([FattoreMksPlafond_C3] = 12 or [FattoreMksPlafond_C3] = 6 or [FattoreMksPlafond_C3] = 4 or [FattoreMksPlafond_C3] = 3 or [FattoreMksPlafond_C3] = 2 or [FattoreMksPlafond_C3] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C3]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C4] CHECK (([FattoreMksPlafond_C4] = 12 or [FattoreMksPlafond_C4] = 6 or [FattoreMksPlafond_C4] = 4 or [FattoreMksPlafond_C4] = 3 or [FattoreMksPlafond_C4] = 2 or [FattoreMksPlafond_C4] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C4]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C5] CHECK (([FattoreMksPlafond_C5] = 12 or [FattoreMksPlafond_C5] = 6 or [FattoreMksPlafond_C5] = 4 or [FattoreMksPlafond_C5] = 3 or [FattoreMksPlafond_C5] = 2 or [FattoreMksPlafond_C5] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C5]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C6] CHECK (([FattoreMksPlafond_C6] = 12 or [FattoreMksPlafond_C6] = 6 or [FattoreMksPlafond_C6] = 4 or [FattoreMksPlafond_C6] = 3 or [FattoreMksPlafond_C6] = 2 or [FattoreMksPlafond_C6] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksPlafond_C6]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C1] CHECK (([FattoreMksFattura_C1] = 12 or [FattoreMksFattura_C1] = 6 or [FattoreMksFattura_C1] = 4 or [FattoreMksFattura_C1] = 3 or [FattoreMksFattura_C1] = 2 or [FattoreMksFattura_C1] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C1]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C2] CHECK (([FattoreMksFattura_C2] = 12 or [FattoreMksFattura_C2] = 6 or [FattoreMksFattura_C2] = 4 or [FattoreMksFattura_C2] = 3 or [FattoreMksFattura_C2] = 2 or [FattoreMksFattura_C2] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C2]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C3] CHECK (([FattoreMksFattura_C3] = 12 or [FattoreMksFattura_C3] = 6 or [FattoreMksFattura_C3] = 4 or [FattoreMksFattura_C3] = 3 or [FattoreMksFattura_C3] = 2 or [FattoreMksFattura_C3] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C3]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C4] CHECK (([FattoreMksFattura_C4] = 12 or [FattoreMksFattura_C4] = 6 or [FattoreMksFattura_C4] = 4 or [FattoreMksFattura_C4] = 3 or [FattoreMksFattura_C4] = 2 or [FattoreMksFattura_C4] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C4]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C5] CHECK (([FattoreMksFattura_C5] = 12 or [FattoreMksFattura_C5] = 6 or [FattoreMksFattura_C5] = 4 or [FattoreMksFattura_C5] = 3 or [FattoreMksFattura_C5] = 2 or [FattoreMksFattura_C5] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C5]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C6] CHECK (([FattoreMksFattura_C6] = 12 or [FattoreMksFattura_C6] = 6 or [FattoreMksFattura_C6] = 4 or [FattoreMksFattura_C6] = 3 or [FattoreMksFattura_C6] = 2 or [FattoreMksFattura_C6] = 1))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_FattoreMksFattura_C6]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C1] CHECK (([LetturaPartenza_C1] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C1]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C2] CHECK (([LetturaPartenza_C2] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C2]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C3] CHECK (([LetturaPartenza_C3] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C3]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C4] CHECK (([LetturaPartenza_C4] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C4]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C5] CHECK (([LetturaPartenza_C5] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C5]
ALTER TABLE [dbo].[xNoleggioImpianto] WITH NOCHECK ADD CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C6] CHECK (([LetturaPartenza_C6] >= 0))
ALTER TABLE [dbo].[xNoleggioImpianto] CHECK CONSTRAINT [CK_xNoleggioImpianto_LetturaPartenza_C6]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_Lettura_C1] CHECK NOT FOR REPLICATION ([Lettura_C1]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_Lettura_C1]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C1] CHECK NOT FOR REPLICATION ([LetturaPrecedente_C1]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C1]
--ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C1] CHECK NOT FOR REPLICATION ([ResiduoPP_C1]>=(0))
--ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C1]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C1] CHECK NOT FOR REPLICATION ([ExtraPlafond_C1]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C1]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_Lettura_C2] CHECK NOT FOR REPLICATION ([Lettura_C2]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_Lettura_C2]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C2] CHECK NOT FOR REPLICATION ([LetturaPrecedente_C2]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C2]
--ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C2] CHECK NOT FOR REPLICATION ([ResiduoPP_C2]>=(0))
--ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C2]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C2] CHECK NOT FOR REPLICATION ([ExtraPlafond_C2]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C2]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_Lettura_C3] CHECK NOT FOR REPLICATION ([Lettura_C3]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_Lettura_C3]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C3] CHECK NOT FOR REPLICATION ([LetturaPrecedente_C3]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C3]
--ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C3] CHECK NOT FOR REPLICATION ([ResiduoPP_C3]>=(0))
--ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C3]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C3] CHECK NOT FOR REPLICATION ([ExtraPlafond_C3]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C3]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_Lettura_C4] CHECK NOT FOR REPLICATION ([Lettura_C4]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_Lettura_C4]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C4] CHECK NOT FOR REPLICATION ([LetturaPrecedente_C4]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C4]
--ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C4] CHECK NOT FOR REPLICATION ([ResiduoPP_C4]>=(0))
--ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C4]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C4] CHECK NOT FOR REPLICATION ([ExtraPlafond_C4]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C4]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_Lettura_C5] CHECK NOT FOR REPLICATION ([Lettura_C5]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_Lettura_C5]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C5] CHECK NOT FOR REPLICATION ([LetturaPrecedente_C5]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C5]
--ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C5] CHECK NOT FOR REPLICATION ([ResiduoPP_C5]>=(0))
--ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C5]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C5] CHECK NOT FOR REPLICATION ([ExtraPlafond_C5]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C5]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_Lettura_C6] CHECK NOT FOR REPLICATION ([Lettura_C6]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_Lettura_C6]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C6] CHECK NOT FOR REPLICATION ([LetturaPrecedente_C6]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_LetturaPrecedente_C6]
--ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C6] CHECK NOT FOR REPLICATION ([ResiduoPP_C6]>=(0))
--ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ResiduoPP_C6]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C6] CHECK NOT FOR REPLICATION ([ExtraPlafond_C6]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ExtraPlafond_C6]
ALTER TABLE [dbo].[xContatoreLetturaImport] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C1] CHECK NOT FOR REPLICATION ([Lettura_C1]>=(0))
ALTER TABLE [dbo].[xContatoreLetturaImport] CHECK CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C1]
ALTER TABLE [dbo].[xContatoreLetturaImport] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C2] CHECK NOT FOR REPLICATION ([Lettura_C2]>=(0))
ALTER TABLE [dbo].[xContatoreLetturaImport] CHECK CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C2]
ALTER TABLE [dbo].[xContatoreLetturaImport] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C3] CHECK NOT FOR REPLICATION ([Lettura_C3]>=(0))
ALTER TABLE [dbo].[xContatoreLetturaImport] CHECK CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C3]
ALTER TABLE [dbo].[xContatoreLetturaImport] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C4] CHECK NOT FOR REPLICATION ([Lettura_C4]>=(0))
ALTER TABLE [dbo].[xContatoreLetturaImport] CHECK CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C4]
ALTER TABLE [dbo].[xContatoreLetturaImport] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C5] CHECK NOT FOR REPLICATION ([Lettura_C5]>=(0))
ALTER TABLE [dbo].[xContatoreLetturaImport] CHECK CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C5]
ALTER TABLE [dbo].[xContatoreLetturaImport] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C6] CHECK NOT FOR REPLICATION ([Lettura_C6]>=(0))
ALTER TABLE [dbo].[xContatoreLetturaImport] CHECK CONSTRAINT [CK_xContatoreLetturaImport_Lettura_C6]
ALTER TABLE [dbo].[xNoleggioMatricolaSviluppo] WITH CHECK ADD CONSTRAINT [CK_xNoleggioMatricolaSviluppo_TipoScadenza] CHECK  (([TipoScadenza]='QFN' OR [TipoScadenza]='QFP' OR [TipoScadenza]='EP1' OR [TipoScadenza]='EP2' OR [TipoScadenza]='EP3' OR [TipoScadenza]='EP4' OR [TipoScadenza]='EP5' OR [TipoScadenza]='EP6'))
ALTER TABLE [dbo].[xNoleggioMatricolaSviluppo] CHECK CONSTRAINT [CK_xNoleggioMatricolaSviluppo_TipoScadenza]
ALTER TABLE [dbo].[xNoleggioImpiantoSviluppo] WITH CHECK ADD CONSTRAINT [CK_xNoleggioImpiantoSviluppo_TipoScadenza] CHECK  (([TipoScadenza]='QFN' OR [TipoScadenza]='QFP' OR [TipoScadenza]='EP1' OR [TipoScadenza]='EP2' OR [TipoScadenza]='EP3' OR [TipoScadenza]='EP4' OR [TipoScadenza]='EP5' OR [TipoScadenza]='EP6'))
ALTER TABLE [dbo].[xNoleggioImpiantoSviluppo] CHECK CONSTRAINT [CK_xNoleggioImpiantoSviluppo_TipoScadenza]
ALTER TABLE [dbo].[xFormula] WITH NOCHECK ADD CONSTRAINT [CK_xFormula_TipoCalcolo] CHECK NOT FOR REPLICATION (TipoCalcolo=1 OR TipoCalcolo=2 OR TipoCalcolo=3)
ALTER TABLE [dbo].[xFormula] CHECK CONSTRAINT [CK_xFormula_TipoCalcolo]
ALTER TABLE [dbo].[xPreventivo]     WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_ItemProvvigionePrev] CHECK (([dbo].[afn_PercStrValid]([ItemProvvigionePrev])=(1)))
ALTER TABLE [dbo].[xPreventivo]     CHECK CONSTRAINT [CK_xPreventivo_ItemProvvigionePrev]
ALTER TABLE [dbo].[xPreventivo]     WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_ItemPrezzoVenditaV] CHECK (([ItemPrezzoVenditaV] >= 0))
ALTER TABLE [dbo].[xPreventivo]     CHECK CONSTRAINT [CK_xPreventivo_ItemPrezzoVenditaV]
ALTER TABLE [dbo].[xPreventivo]     WITH NOCHECK ADD CONSTRAINT [CK_xPreventivo_ItemProvvigioneEff] CHECK (([dbo].[afn_PercStrValid]([ItemProvvigioneEff])=(1)))
ALTER TABLE [dbo].[xPreventivo]     CHECK CONSTRAINT [CK_xPreventivo_ItemProvvigioneEff]
ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoItem_Sequenza] CHECK (([Sequenza] >= 0))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_Sequenza]
ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoItem_ModelloVal] CHECK (([ModelloVal]='C' OR [ModelloVal]='R'))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_ModelloVal]
ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoItem_RicavoTotaleV] CHECK (([RicavoTotaleV] >= 0))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_RicavoTotaleV]
ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoItem_CostoTotaleV] CHECK (([CostoTotaleV] >= 0))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_CostoTotaleV]
ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoItem_ValoreRRV] CHECK (([ValoreRRV] >= 0))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_ValoreRRV]
ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoItem_ValoreRCV] CHECK (([ValoreRCV] >= 0))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_ValoreRCV]
ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoItem_PrezzoUnRicaricatoV] CHECK (([PrezzoUnRicaricatoV] >= 0))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_PrezzoUnRicaricatoV]
ALTER TABLE [dbo].[xPreventivoItem] WITH CHECK   ADD CONSTRAINT [CK_xPreventivoItem_Sconto] CHECK (([dbo].[afn_PercStrValid]([Sconto])=(1)))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_Sconto]
ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoItem_PrezzoUnScontatoV] CHECK (([PrezzoUnScontatoV] >= 0))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_PrezzoUnScontatoV]
ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoItem_Quantita] CHECK (([Quantita] >= 0))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_Quantita]
ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoItem_PrezzoTotaleV] CHECK (([PrezzoTotaleV] >= 0))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_PrezzoTotaleV]
ALTER TABLE [dbo].[xPreventivoItem] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoItem_PrezzoUnVenditaV] CHECK (([PrezzoUnVenditaV] >= 0))
ALTER TABLE [dbo].[xPreventivoItem] CHECK CONSTRAINT [CK_xPreventivoItem_PrezzoUnVenditaV]
ALTER TABLE [dbo].[xImpostazione]   WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_DecimaliOra] CHECK (([DecimaliOra]<=(8)))
ALTER TABLE [dbo].[xImpostazione]   CHECK CONSTRAINT [CK_xImpostazione_DecimaliOra]
ALTER TABLE [dbo].[xImpostazione]   WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_PreventiviNumCoeff] CHECK NOT FOR REPLICATION (([PreventiviNumCoeff]>=(1) AND [PreventiviNumCoeff]<=(6)))
ALTER TABLE [dbo].[xImpostazione]   CHECK CONSTRAINT [CK_xImpostazione_PreventiviNumCoeff]
ALTER TABLE [dbo].[xImpostazione]   WITH NOCHECK ADD CONSTRAINT [CK_xImpostazione_PreventiviCoeff5UM] CHECK (([PreventiviCoeff5UM] = 1 or [PreventiviCoeff5UM] = 2))
ALTER TABLE [dbo].[xImpostazione]   CHECK CONSTRAINT [CK_xImpostazione_PreventiviCoeff5UM]
ALTER TABLE [dbo].[xPreventivoMateriale] WITH NOCHECK ADD CONSTRAINT [CK_xPreventivoMateriale_Coeff5]  CHECK (([Coeff5] >= 0))
ALTER TABLE [dbo].[xPreventivoMateriale] CHECK CONSTRAINT [CK_xPreventivoMateriale_Coeff5]
ALTER TABLE [dbo].[PRAttivita]      WITH NOCHECK ADD CONSTRAINT [xCK_PRAttivita_xVincolo] CHECK NOT FOR REPLICATION (([xVincolo]>=(1) AND [xVincolo]<=(2)))
ALTER TABLE [dbo].[PRAttivita]      CHECK CONSTRAINT [xCK_PRAttivita_xVincolo]
ALTER TABLE [dbo].[xInterventoProg] WITH NOCHECK ADD CONSTRAINT [CK_xInterventoProg_FattoreMksCiclo] CHECK (([FattoreMksCiclo] = 12 or [FattoreMksCiclo] = 6 or [FattoreMksCiclo] = 4 or [FattoreMksCiclo] = 3 or [FattoreMksCiclo] = 2 or [FattoreMksCiclo] = 1 or [FattoreMksCiclo] = 0))
ALTER TABLE [dbo].[xInterventoProg] CHECK CONSTRAINT [CK_xInterventoProg_FattoreMksCiclo]
ALTER TABLE [dbo].[DBCiclo] WITH NOCHECK ADD CONSTRAINT [xCK_DBCiclo_Quantita] CHECK (([xQuantita] >= 0))
ALTER TABLE [dbo].[DBCiclo] CHECK CONSTRAINT [xCK_DBCiclo_Quantita]
--ALTER TABLE [dbo].[DBCiclo] WITH CHECK ADD CONSTRAINT [xCK_DBCiclo_PercAzienda] CHECK (([xPercAzienda]>=(0) AND [xPercAzienda]<=(100)))
--ALTER TABLE [dbo].[DBCiclo] CHECK CONSTRAINT [xCK_DBCiclo_PercAzienda]
--ALTER TABLE [dbo].[DBCiclo] WITH CHECK ADD CONSTRAINT [xCK_DBCiclo_PercOperatore] CHECK (([xPercOperatore]>=(0) AND [xPercOperatore]<=(100)))
--ALTER TABLE [dbo].[DBCiclo] CHECK CONSTRAINT [xCK_DBCiclo_PercOperatore]
ALTER TABLE [dbo].[DBCiclo] WITH NOCHECK ADD CONSTRAINT [xCK_DBCiclo_TipoValCosto] CHECK NOT FOR REPLICATION (([xTipoValCosto]>=(1) AND [xTipoValCosto]<=(8)))
ALTER TABLE [dbo].[DBCiclo] CHECK CONSTRAINT [xCK_DBCiclo_TipoValCosto]
ALTER TABLE [dbo].[DBCiclo] WITH NOCHECK ADD CONSTRAINT [xCK_DBCiclo_PrezzoVenditaUn] CHECK (([xPrezzoVenditaUn] >= 0))
ALTER TABLE [dbo].[DBCiclo] CHECK CONSTRAINT [xCK_DBCiclo_PrezzoVenditaUn]
ALTER TABLE [dbo].[xDBCicloL1] WITH NOCHECK ADD CONSTRAINT [CK_xDBCicloL1_TipoValCosto] CHECK NOT FOR REPLICATION (([TipoValCosto]>=(1) AND [TipoValCosto]<=(8)))
ALTER TABLE [dbo].[xDBCicloL1] CHECK CONSTRAINT [CK_xDBCicloL1_TipoValCosto]
ALTER TABLE [dbo].[xDBCicloL1] WITH NOCHECK ADD CONSTRAINT [CK_xDBCicloL1_QtaImpegnoUn] CHECK (([QtaImpegnoUn] >= 0))
ALTER TABLE [dbo].[xDBCicloL1] CHECK CONSTRAINT [CK_xDBCicloL1_QtaImpegnoUn]
ALTER TABLE [dbo].[xDBCicloL1] WITH NOCHECK ADD CONSTRAINT [CK_xDBCicloL1_QtaImpegno] CHECK (([QtaImpegno] >= 0))
ALTER TABLE [dbo].[xDBCicloL1] CHECK CONSTRAINT [CK_xDBCicloL1_QtaImpegno]
ALTER TABLE [dbo].[xDBCicloL1] WITH NOCHECK ADD CONSTRAINT [CK_xDBCicloL1_CostoUn] CHECK (([CostoUn] >= 0))
ALTER TABLE [dbo].[xDBCicloL1] CHECK CONSTRAINT [CK_xDBCicloL1_CostoUn]
ALTER TABLE [dbo].[xDBCicloL1] WITH NOCHECK ADD CONSTRAINT [CK_xDBCicloL1_Costo] CHECK (([Costo] >= 0))
ALTER TABLE [dbo].[xDBCicloL1] CHECK CONSTRAINT [CK_xDBCicloL1_Costo]
ALTER TABLE [dbo].[xDBCicloL1] WITH NOCHECK ADD CONSTRAINT [CK_xDBCicloL1_CostoRicaricatoUn] CHECK (([CostoRicaricatoUn] >= 0))
ALTER TABLE [dbo].[xDBCicloL1] CHECK CONSTRAINT [CK_xDBCicloL1_CostoRicaricatoUn]
ALTER TABLE [dbo].[xDBCicloL1] WITH NOCHECK ADD CONSTRAINT [CK_xDBCicloL1_CostoRicaricato] CHECK (([CostoRicaricato] >= 0))
ALTER TABLE [dbo].[xDBCicloL1] CHECK CONSTRAINT [CK_xDBCicloL1_CostoRicaricato]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C1] CHECK NOT FOR REPLICATION ([ConsumoPI_C1]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C1]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C2] CHECK NOT FOR REPLICATION ([ConsumoPI_C2]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C2]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C3] CHECK NOT FOR REPLICATION ([ConsumoPI_C3]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C3]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C4] CHECK NOT FOR REPLICATION ([ConsumoPI_C4]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C4]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C5] CHECK NOT FOR REPLICATION ([ConsumoPI_C5]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C5]
ALTER TABLE [dbo].[xContatoreLettura] WITH NOCHECK ADD CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C6] CHECK NOT FOR REPLICATION ([ConsumoPI_C6]>=(0))
ALTER TABLE [dbo].[xContatoreLettura] CHECK CONSTRAINT [CK_xContatoreLettura_ConsumoPI_C6]
alter table xContrattoAR with nocheck add constraint FK_xContrattoAR_Contratto foreign key(Id_xContratto) references xContratto(Id_xContratto) on delete cascade
alter table xContrattoAR check constraint FK_xContrattoAR_Contratto
alter table xContrattoAR with check add constraint FK_xContrattoAR_AR foreign key(Cd_AR) references AR(Cd_AR)
alter table xContrattoAR check constraint FK_xContrattoAR_AR
alter table xContrattoAR with nocheck add constraint FK_xContrattoAR_SLA foreign key(Cd_SLA) references xSLA(Cd_xSLA) not for replication
alter table xContrattoAR check constraint FK_xContrattoAR_SLA
alter table xContrattoAR with check add constraint FK_xContrattoAR_CF foreign key(Cd_CF) references CF(Cd_CF)
alter table xContrattoAR check constraint FK_xContrattoAR_CF
alter table xContrattoAR with nocheck add constraint FK_xContrattoAR_CFDest foreign key(Cd_CF, Cd_CFDest) references CFDest(Cd_CF, Cd_CFDest) not for replication
alter table xContrattoAR check constraint FK_xContrattoAR_CFDest
alter table xContrattoAR with check add constraint CK_xContrattoAR_Sconto check ((dbo.afn_PercStrValid(Sconto)=(1)))
alter table xContrattoAR check constraint CK_xContrattoAR_Sconto
alter table xContrattoImportAR with nocheck add constraint FK_xContrattoImportAR_ContrattoImport foreign key(Id_xContrattoImport) references xContrattoImport(Id_xContrattoImport) on delete cascade
alter table xContrattoImportAR check constraint FK_xContrattoImportAR_ContrattoImport
alter table [dbo].[xOperatoreVal] with nocheck add constraint [CK_xOperatoreVal_NumOrePrev] CHECK (([NumOrePrev] >= 0))
alter table [dbo].[xOperatoreVal] check constraint [CK_xOperatoreVal_NumOrePrev]
alter table xRDTicket with nocheck add constraint FK_xRDTicket_xTipoAnomalia foreign key (Cd_xTipoAnomalia) references xTipoAnomalia(Cd_xTipoAnomalia)
alter table xRDTicket check constraint FK_xRDTicket_xTipoAnomalia
alter table DOSottoCommessa with nocheck add constraint xFK_DOSottoCommessa_AR foreign key (xCd_AR) references AR(Cd_AR)
alter table DOSottoCommessa check constraint xFK_DOSottoCommessa_AR
alter table DOTes with nocheck add constraint xFK_DOTes_xRDTicket foreign key(xId_xRDTicket) references xRDTicket(Id_xRDTicket)	not for replication
alter table DOTes check constraint xFK_DOTes_xRDTicket
alter table xImpiantoMatricola with nocheck add constraint FK_xImpiantoMatricola_Sostituisce foreign key(Id_xImpiantoMatricola_Sostituisce) references xImpiantoMatricola(Id_xImpiantoMatricola)	not for replication
alter table xImpiantoMatricola check constraint FK_xImpiantoMatricola_Sostituisce
GO

-- Eliminazione delle Unique Keys obsolete
EXEC asp_du_DropIndex 'xContrattoImpianto', 'UK_xContrattoImpianto'
EXEC asp_du_DropIndex 'xContrattoDOSottoCommessa', 'UK_xContrattoDOSottoCommessa'
GO

-- Gestione delle Unique Keys come constraints e non come semplici indici; aggiunta messaggi personalizzati di violazione della Unique Keys.
-- xPRAttivitaVal --> UK_xPRAttivitaVal_AR
EXEC asp_du_DropConstraint 'xPRAttivitaVal', 'UK_xPRAttivitaVal_AR'
GO
EXEC asp_du_DropIndex	'xPRAttivitaVal', 'UK_xPRAttivitaVal_AR'
GO
ALTER TABLE [dbo].[xPRAttivitaVal] ADD CONSTRAINT [UK_xPRAttivitaVal_AR] UNIQUE NONCLUSTERED 
(
	[Id_PRAttivita] ASC, 
	[Cd_AR] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
asp_du_AddAlterErrMsgUK 'xPRAttivitaVal', 'UK_xPRAttivitaVal_AR', 'L''articolo deve essere univoco per l''attività !'
GO

-- xPRAttivitaVal --> UK_xPRAttivitaVal_xRDTipoValorizzazione
EXEC asp_du_DropConstraint 'xPRAttivitaVal', 'UK_xPRAttivitaVal_xRDTipoValorizzazione'
GO
EXEC asp_du_DropIndex	'xPRAttivitaVal', 'UK_xPRAttivitaVal_xRDTipoValorizzazione'
GO
ALTER TABLE [dbo].[xPRAttivitaVal] ADD CONSTRAINT [UK_xPRAttivitaVal_xRDTipoValorizzazione] UNIQUE NONCLUSTERED 
(
	[Id_PRAttivita] ASC, 
	[Cd_xRDTipoValorizzazione] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
asp_du_AddAlterErrMsgUK 'xPRAttivitaVal', 'UK_xPRAttivitaVal_xRDTipoValorizzazione', 'Il tipo di valorizzazione deve essere univoco per l''attività !'
GO

-- xISTAT --> UK_xISTAT_Anno
EXEC asp_du_DropConstraint 'xISTAT', 'UK_xISTAT_Anno'
GO
EXEC asp_du_DropIndex	'xISTAT', 'UK_UK_xISTAT_Anno'
GO
ALTER TABLE [dbo].[xISTAT] ADD CONSTRAINT [UK_xISTAT_Anno] UNIQUE NONCLUSTERED 
(
	[Anno] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
asp_du_AddAlterErrMsgUK 'xISTAT', 'UK_xISTAT_Anno', 'Adeguamento ISTAT già presente per l''anno selezionato !'
GO

-- xCFZonaAttivita --> UK_xCFZonaAttivita_Attivita_Risorsa
EXEC asp_du_DropConstraint 'xCFZonaAttivita', 'UK_xCFZonaAttivita_Attivita_Risorsa'
GO
ALTER TABLE [dbo].[xCFZonaAttivita] ADD CONSTRAINT [UK_xCFZonaAttivita_Attivita_Risorsa] UNIQUE NONCLUSTERED 
(
	[Cd_CFZona] ASC, 
	[Cd_PRAttivita] ASC, 
	[Cd_PRRisorsa] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
asp_du_AddAlterErrMsgUK 'xCFZonaAttivita', 'UK_xCFZonaAttivita_Attivita_Risorsa', 'L''associazione Attività \ Risorsa Prevista deve essere univoca per la Zona !'
GO

-- xContatoreLetturaEvasione --> UK_xContatoreLetturaEvasione_Lettura_Id_DOTes
EXEC asp_du_DropConstraint 'xContatoreLetturaEvasione', 'UK_xContatoreLetturaEvasione_Lettura_Id_DOTes'
GO
ALTER TABLE [dbo].[xContatoreLetturaEvasione] ADD CONSTRAINT [UK_xContatoreLetturaEvasione_Lettura_Id_DOTes] UNIQUE NONCLUSTERED 
(
	[Id_xContatoreLettura] ASC, 
	[Id_DOTes] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
asp_du_AddAlterErrMsgUK 'xContatoreLetturaEvasione', 'UK_xContatoreLetturaEvasione_Lettura_Id_DOTes', 'L''identificativo documento deve essere univoco per la lettura !'
GO

-- Inserimento di valori nelle tabelle
-- Impostazioni
IF dbo.afn_du_IsTable('xImpostazione') = 1
	BEGIN
		DECLARE @RowCount AS Int

		SELECT @RowCount = COUNT(*) FROM xImpostazione

		IF @RowCount = 0 BEGIN
			INSERT INTO [xImpostazione] ([BloccaCd_DOCommessa],[BloccaCd_DOSottoCommessa],[Separatore],[ContrattoGiornoFattura])
					 VALUES (0,0,'.',30)
		END
	END
GO

-- Anagrafica dei listini
IF dbo.afn_du_IsTable('xLS') = 1
	BEGIN
		DECLARE @RowCount AS Int

		SELECT @RowCount = COUNT(*) FROM xLS

		IF @RowCount = 0 BEGIN
			INSERT INTO [xLS] ([Cd_xLS],[Descrizione],[FileProcedura])
					 VALUES ('COMET','Listino COMET','LSN_COMET.FXP')
		END
	END
GO

-- Anagrafica Modalità Ticket
IF dbo.afn_du_IsTable('xRDModalita') = 1
	BEGIN
		DECLARE @RowCount AS Int

		SELECT @RowCount = COUNT(*) FROM xRDModalita

		IF @RowCount = 0 BEGIN
			INSERT INTO [xRDModalita] ([Cd_xRDModalita],[Descrizione])
					 VALUES	('1','A pagamento')
			INSERT INTO [xRDModalita] ([Cd_xRDModalita],[Descrizione])
					 VALUES	('2','Garanzia')
			INSERT INTO [xRDModalita] ([Cd_xRDModalita],[Descrizione])
					 VALUES	('3','Contratto')
			INSERT INTO [xRDModalita] ([Cd_xRDModalita],[Descrizione])
					 VALUES	('4','Estensione Garanzia')
		END
	END
GO

-- Anagrafica tipologie import rilevazione tempi (tabella xRDImportTipo)
IF dbo.afn_du_IsTable('xRDImportTipo') = 1
	BEGIN
		DECLARE @RowCount AS Int

		SELECT @RowCount = COUNT(*) FROM xRDImportTipo

		IF @RowCount = 0 BEGIN
			INSERT INTO [xRDImportTipo] ([Cd_xRDImportTipo],[Descrizione],[FileProcedura])
					 VALUES ('CSV-BASE','Import da file CSV','RDN_CSVBASE.FXP')
		END
	END
GO

-- Anagrafica tipologie import righe preventivo (tabella xPreventivoImportTipo)
IF dbo.afn_du_IsTable('xPreventivoImportTipo') = 1
	BEGIN
		DECLARE @RowCount AS Int

		SELECT @RowCount = COUNT(*) FROM xPreventivoImportTipo

		IF @RowCount = 0 BEGIN
			INSERT INTO [xPreventivoImportTipo] ([Cd_xPreventivoImportTipo],[Descrizione],[FileProcedura])
					 VALUES ('CSV-BASE','Import da file CSV','PRN_CSVBASE.FXP')
		END
	END
GO

-- Anagrafica Modalità Ticket
IF dbo.afn_du_IsTable('xRDModalita') = 1
	BEGIN
		DECLARE @RowCount AS Int

		SELECT @RowCount = COUNT(*) FROM xRDModalita

		IF @RowCount = 4 BEGIN
			INSERT INTO [xRDModalita] ([Cd_xRDModalita],[Descrizione])
					 VALUES	('5','A forfait')
		END
	END
GO

-- Anagrafica tipologie import letture contatori (tabella xContatoreLetturaImportTipo)
IF dbo.afn_du_IsTable('xContatoreLetturaImportTipo') = 1
	BEGIN
		DECLARE @RowCount AS Int

		SELECT @RowCount = COUNT(*) FROM xContatoreLetturaImportTipo

		IF @RowCount = 0 BEGIN
			INSERT INTO [xContatoreLetturaImportTipo] ([Cd_xContatoreLetturaImportTipo],[Descrizione],[FileProcedura])
						VALUES ('XLS-BASE','Import da file XLS','CLN_XLSBASE.FXP')
		END
	END
GO

-- Inserimento Item già presenti nelle Attività
If dbo.afn_du_IsTable('xPreventivoItem') = 1
	Begin
		Declare @RowCount As Int

		Select @RowCount = COUNT(*) From xPreventivoItem

		If @RowCount = 0 Begin
			Select P.Id_Preventivo
				   , PF.Cd_ARItem
				   , PF.DescrizioneARItem
				   , P.Cd_VL
				   , P.Cambio
				   , P.Decimali
				   , P.DecimaliPrzUn
				   , P.ModelloVal
				   , Identity(Int,1,1) As SequenzaNew
			 Into #xPreventivoItem
			 From xPreventivo P Inner Join xPreventivoFase PF On P.Id_Preventivo = PF.Id_Preventivo 
			 Where PF.Cd_ARItem Is Not Null
			 Group By P.Id_Preventivo, PF.Cd_ARItem, PF.DescrizioneARItem, P.Cd_VL, P.Cambio, P.Decimali, P.DecimaliPrzUn, P.ModelloVal
			 Order By SequenzaNew

			Insert Into [dbo].[xPreventivoItem]
			 ([Id_Preventivo],[Cd_ARItem],[DescrizioneARItem],[Sequenza],[Cd_VL],[Cambio],[Decimali],[DecimaliPrzUn],[ModelloVal])
			Select 
				[Id_Preventivo],[Cd_ARItem],[DescrizioneARItem],[SequenzaNew],[Cd_VL],[Cambio],[Decimali],[DecimaliPrzUn],[ModelloVal] 
			 From #xPreventivoItem

			Drop Table #xPreventivoItem
		End
	End
GO

-- Formule fisse di ricarico per generazione sottopreventivo da db (tabella xFormula)
if not exists (select * from xFormula where Cd_xFormula = 'XPR')
	insert into xFormula (Cd_xFormula, Descrizione, TipoFormula, TipoCalcolo)
	values ('XPR', 'Percentuale responsabile progetto', 3, 3)

if not exists (select * from xFormula where Cd_xFormula = 'XPA')
	insert into xFormula (Cd_xFormula, Descrizione, TipoFormula, TipoCalcolo)
	values ('XPA', 'Percentuale azienda', 3, 1)

-- Aggiornamento di valori nelle tabelle
declare @curVer varchar(10)
select top 1 @curVer = ltrim(dbfullversion) from xGACVersion order by dbversion desc, dbsubversion desc

IF @curVer = '1.2'
	BEGIN
		-- Preventivo\Materiali
		UPDATE xPreventivoMateriale
			 SET [MargineCostoV]			= CostoTotaleV - (CostoUnitarioV * Quantita)
					,[MargineCostoPerc]		= CASE (CostoTotaleV - (CostoUnitarioV * Quantita)) WHEN 0 THEN ''
																	ELSE CONVERT([varchar](15), ((CostoTotaleV - (CostoUnitarioV * Quantita)) / CostoTotaleV) * 100) END
					,[MargineRicavoV]			= RicavoTotaleV - (CostoUnitarioV * Quantita)
					,[MargineRicavoPerc]	= CASE (RicavoTotaleV - (CostoUnitarioV * Quantita)) WHEN 0 THEN ''
																	ELSE CONVERT([varchar](15), ((RicavoTotaleV - (CostoUnitarioV * Quantita)) / RicavoTotaleV) * 100) END
			 WHERE CostoTotaleV <> 0 AND RicavoTotaleV <> 0 -- Altrimenti possibile errore dovuto a divisione per 0 (zero)														
		-- Preventivo\Gruppi di Materiale
		UPDATE xPreventivoGruppo
			 SET [MargineCostoV]			= CostoTotaleV - (CostoUnitarioV * Quantita)
					,[MargineCostoPerc]		= CASE (CostoTotaleV - (CostoUnitarioV * Quantita)) WHEN 0 THEN ''
																	ELSE CONVERT([varchar](15), ((CostoTotaleV - (CostoUnitarioV * Quantita)) / CostoTotaleV) * 100) END
					,[MargineRicavoV]			= RicavoTotaleV - (CostoUnitarioV * Quantita)
					,[MargineRicavoPerc]	= CASE (RicavoTotaleV - (CostoUnitarioV * Quantita)) WHEN 0 THEN ''
																	ELSE CONVERT([varchar](15), ((RicavoTotaleV - (CostoUnitarioV * Quantita)) / RicavoTotaleV) * 100) END
			 WHERE CostoTotaleV <> 0 AND RicavoTotaleV <> 0 -- Altrimenti possibile errore dovuto a divisione per 0 (zero)														
		-- Preventivo\Attività
		UPDATE xPreventivoFase
			 SET [MargineCostoV]			= CostoTotaleV - (CostoUnitarioV * Ore)
					,[MargineCostoPerc]		= CASE (CostoTotaleV - (CostoUnitarioV * Ore)) WHEN 0 THEN ''
																	ELSE CONVERT([varchar](15), ((CostoTotaleV - (CostoUnitarioV * Ore)) / CostoTotaleV) * 100) END
					,[MargineRicavoV]			= RicavoTotaleV - (CostoUnitarioV * Ore)
					,[MargineRicavoPerc]	= CASE (RicavoTotaleV - (CostoUnitarioV * Ore)) WHEN 0 THEN ''
																	ELSE CONVERT([varchar](15), ((RicavoTotaleV - (CostoUnitarioV * Ore)) / RicavoTotaleV) * 100) END
			 WHERE CostoTotaleV <> 0 AND RicavoTotaleV <> 0 -- Altrimenti possibile errore dovuto a divisione per 0 (zero)														
	END

IF @curVer = '1.7'
	BEGIN
		IF dbo.afn_du_IsTable('xCometARMisura') = 1
			BEGIN
				-- Passaggio dei dati dalla vecchia tabella Comet alla nuova tabella 
				Insert Into xLSARMisura (Cd_xLSARMisura, Descrizione, Cd_ARMisura, UserIns, UserUpd, TimeIns, TimeUpd)
				Select Cd_xCometARMisura, Descrizione, Cd_ARMisura, UserIns, UserUpd, TimeIns, TimeUpd From xCometARMisura
				-- Eliminazione vecchia tabella Comet
				EXEC asp_du_DropTable 'xCometARMisura'
			END
		IF dbo.afn_du_IsTable('xCometARGruppo') = 1
			BEGIN
				-- Passaggio dei dati dalla vecchia tabella Comet alla nuova tabella 
				Insert Into xLSARGruppo (Famiglia, Gruppo, Sottogruppo, Descrizione, Cd_ARGruppo1, Cd_ARGruppo2, Cd_ARGruppo3, UserIns, UserUpd, TimeIns, TimeUpd)
				Select Cd_xCometARGruppo, Cd_xCometFamigliaMetel, '', Descrizione, Cd_ARGruppo1, Cd_ARGruppo2, Cd_ARGruppo3, UserIns, UserUpd, TimeIns, TimeUpd From xCometARGruppo
				-- Eliminazione vecchia tabella Comet
				EXEC asp_du_DropTable 'xCometARGruppo'
			END
	END

IF @curVer = '1.8'
	BEGIN
		-- Preventivi: inserimento della descrizione articolo (AR.Descrizione) 
		--             nella descrizione dei materiali (xPreventivoMateriale.Descrizione)
		Update X
				Set X.Descrizione = Q.Descrizione
		From
				(Select Cd_AR, Descrizione From AR) Q
		Inner Join xPreventivoMateriale X On X.Cd_AR = Q.Cd_AR		
	END

IF @curVer = '1.10'
	BEGIN
		/* Documenti - Aggiornamento dei costi totali non calcolati */
		/* 08-03-2011 */
		Update 
			DORig 
		Set 
			xCostoTotaleV = xCostoUnitarioV * FattoreToUM1 * Qta
		Where
			xCostoUnitarioV > 0 And xCostoTotaleV = 0

		/* Sottocommesse - Aggiornamento del nuovo campo standard Provvigione con i dati del campo personalizzato xProvvigione */
		/* 08-03-2011 */
		EXEC('
		Update 
			DOSottoCommessa
		Set 
			Provvigione = xProvvigione
		Where
			xProvvigione Is Not Null')
	END

IF @curVer = '1.11'
	BEGIN
		/* Aggiornamento costi unitari e costi totali in euro */
		/* 15-03-2011 */
		Select 
			Id_DORig
			, ((PrezzoUnitarioScontatoV / Cambio) / FattoreToUM1)	As xCostoUnitarioV
			, ((PrezzoTotaleV / Cambio) / FattoreToUM1)						As xCostoTotaleV
		Into #CP
		From
			DORig
		Where
			Id_DORig In (
										Select Distinct xId_DORig_CP
										From DORig
										Where xId_DORig_CP Is Not Null
									)
			
		Update DORig
		Set		DORig.xCostoUnitarioV = ((#CP.xCostoUnitarioV	* DORig.Cambio) * DORig.FattoreToUM1)
				,	DORig.xCostoTotaleV		= ((#CP.xCostoTotaleV		* DORig.Cambio) * DORig.FattoreToUM1)
		From DORig
			Inner Join #CP On DORig.xId_DORig_CP = #CP.Id_DORig

		Drop Table #CP

		/* Aggiornamento valori */
		/* 19-04-2011 */
		Update 
			xContratto 
		Set 
			DataInizioUltimoRinnovo = DataInizio
			
	END
	
IF @curVer = '1.20'
	BEGIN
		/* Contratti - Rinnovi */
		/* 21-11-2011 */
		Update xContratto
			Set Esecutivo = 1 
			Where Id_xContratto In 
				(
				Select Distinct Id_xContratto 
					From xContrattoSviluppo 
					Where (ISNULL(Id_DOTes, 0) > 0) Or (Evasa = 1)
				)
	END	

IF @curVer = '1.24'
	BEGIN
		/* Gestione Ticket Iniziati */
		/* 28-12-2011 */
		-- Aggiornamento Ticket presenti
		Update xRDTicket 
			Set Iniziato = 1 
			Where Id_xRDTicket In 
				(Select Distinct Id_xRDTicket 
					From xRDTicketAttivita
					Where Id_xRDTicketAttivita In 
					(Select Distinct Id_xRDTicketAttivita
						From xRDTicketAttivitaMov))
	END

IF @curVer = '1.28'
	BEGIN
		/* Aggiornamento Matricole su documenti emessi a partire dal ticket */
		/* 27-03-2012 */
		Update DORig 
			Set Matricole = '<rows><row matricola="' + RTRIM(LTRIM(xRDTicket.Cd_xMatricola)) + '" /></rows>'
			From DORig Inner Join xRDTicket On DORig.xId_RDTicket = xRDTicket.Id_xRDTicket
			Where DORig.Matricole Is Null And xRDTicket.Cd_xMatricola Is Not Null
	END

IF @curVer = '2.40'
	BEGIN
		/* Aggiornamento sottocommesse chiuse */
		/* 04-06-2018 */
		update DOSottoCommessa set xBloccaElimina = 1, xBloccaModifica = 1 where DataFineReale Is Not Null
	END

-- Eliminazione triggers
EXEC asp_du_DropTrigger 'xPreventivo_trg'
EXEC asp_du_DropTrigger 'xPreventivoFase_trg'
EXEC asp_du_DropTrigger 'xPreventivoMateriale_trg'
EXEC asp_du_DropTrigger 'xPreventivoFaseMateriale_trg'
EXEC asp_du_DropTrigger 'xPreventivoGruppo_trg'
EXEC asp_du_DropTrigger 'xPreventivoContratto_trg'
EXEC asp_du_DropTrigger 'xLSImport_trg'
EXEC asp_du_DropTrigger 'xAROtherCodCF_trg'
EXEC asp_du_DropTrigger 'xRDImport_trg'
EXEC asp_du_DropTrigger 'xPreventivoImport_trg'
EXEC asp_du_DropTrigger 'xPreventivoItem_trg'
EXEC asp_du_DropTrigger 'xPreventivo_atrg_iod'
EXEC asp_du_DropTrigger 'xDORig_GAC'
EXEC asp_du_DropTrigger 'xRDTicketAttivitaMov_atrg_iud'
EXEC asp_du_DropTrigger 'xPreventivoSpesa_trg'
EXEC asp_du_DropTrigger	'xDOTes_GAC'
EXEC asp_du_DropTrigger	'xMatricola_trg'
EXEC asp_du_DropTrigger 'xNoleggioMatricola_cca_trg'
EXEC asp_du_DropTrigger 'xNoleggioImpianto_cca_trg'
EXEC asp_du_DropTrigger 'xNoleggio_cca_trg'
EXEC asp_du_DropTrigger 'xContratto_cca_trg'
GO

-- Creazione Triggers di insert\update user e time per tabelle NON generate con asp_du_AddTable
-- Sottopreventivo - testa
Create Trigger [dbo].[xPreventivo_trg] On [dbo].[xPreventivo] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xPreventivo Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xPreventivo Join Inserted On xPreventivo.Id_Preventivo = Inserted.Id_Preventivo
		Else
			-- Update
			Update xPreventivo Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xPreventivo Join Inserted On xPreventivo.Id_Preventivo = Inserted.Id_Preventivo
	End
GO	
-- Sottopreventivo - attività
Create Trigger [dbo].[xPreventivoFase_trg] On [dbo].[xPreventivoFase] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xPreventivoFase Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xPreventivoFase Join Inserted On xPreventivoFase.Id_PreventivoFase = Inserted.Id_PreventivoFase
		Else
			-- Update
			Update xPreventivoFase Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xPreventivoFase Join Inserted On xPreventivoFase.Id_PreventivoFase = Inserted.Id_PreventivoFase
	End
GO
-- Sottopreventivo - materiale
Create Trigger [dbo].[xPreventivoMateriale_trg] On [dbo].[xPreventivoMateriale] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xPreventivoMateriale Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xPreventivoMateriale Join Inserted On xPreventivoMateriale.Id_PreventivoMateriale = Inserted.Id_PreventivoMateriale
		Else
			-- Update
			Update xPreventivoMateriale Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xPreventivoMateriale Join Inserted On xPreventivoMateriale.Id_PreventivoMateriale = Inserted.Id_PreventivoMateriale
	End
GO
-- Sottopreventivo - legame attività \ materiale
Create Trigger [dbo].[xPreventivoFaseMateriale_trg] On [dbo].[xPreventivoFaseMateriale] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xPreventivoFaseMateriale Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xPreventivoFaseMateriale Join Inserted On xPreventivoFaseMateriale.Id_PreventivoFaseMateriale = Inserted.Id_PreventivoFaseMateriale
		Else
			-- Update
			Update xPreventivoFaseMateriale Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xPreventivoFaseMateriale Join Inserted On xPreventivoFaseMateriale.Id_PreventivoFaseMateriale = Inserted.Id_PreventivoFaseMateriale
	End
GO	
-- Sottopreventivo - gruppi di materiale
Create Trigger [dbo].[xPreventivoGruppo_trg] On [dbo].[xPreventivoGruppo] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xPreventivoGruppo Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xPreventivoGruppo Join Inserted On xPreventivoGruppo.Id_PreventivoGruppo = Inserted.Id_PreventivoGruppo
		Else
			-- Update
			Update xPreventivoGruppo Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xPreventivoGruppo Join Inserted On xPreventivoGruppo.Id_PreventivoGruppo = Inserted.Id_PreventivoGruppo
	End
GO
-- Sottopreventivo - contratto
Create Trigger [dbo].[xPreventivoContratto_trg] On [dbo].[xPreventivoContratto] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xPreventivoContratto Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xPreventivoContratto Join Inserted On xPreventivoContratto.Id_PreventivoContratto = Inserted.Id_PreventivoContratto
		Else
			-- Update
			Update xPreventivoContratto Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xPreventivoContratto Join Inserted On xPreventivoContratto.Id_PreventivoContratto = Inserted.Id_PreventivoContratto
	End
GO
-- Listini normalizzati
Create Trigger [dbo].[xLSImport_trg] On [dbo].[xLSImport] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xLSImport Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xLSImport Join Inserted On xLSImport.Id_xLSImport = Inserted.Id_xLSImport
		Else
			-- Update
			Update xLSImport Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xLSImport Join Inserted On xLSImport.Id_xLSImport = Inserted.Id_xLSImport
	End
GO
-- Fornitori preferenziali degli articoli potenziali
Create Trigger [dbo].[xAROtherCodCF_trg] On [dbo].[xAROtherCodCF] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xAROtherCodCF Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xAROtherCodCF Join Inserted On xAROtherCodCF.Id_xAROtherCodCF = Inserted.Id_xAROtherCodCF
		Else
			-- Update
			Update xAROtherCodCF Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xAROtherCodCF Join Inserted On xAROtherCodCF.Id_xAROtherCodCF = Inserted.Id_xAROtherCodCF
	End
GO
-- Righe di rilevazione tempi normalizzate (tabella xRDImport)
Create Trigger [dbo].[xRDImport_trg] On [dbo].[xRDImport] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xRDImport Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xRDImport Join Inserted On xRDImport.Id_xRDImport = Inserted.Id_xRDImport
		Else
			-- Update
			Update xRDImport Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xRDImport Join Inserted On xRDImport.Id_xRDImport = Inserted.Id_xRDImport
	End
GO
-- Righe preventivo normalizzate (tabella xPreventivoImport)
Create Trigger [dbo].[xPreventivoImport_trg] On [dbo].[xPreventivoImport] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xPreventivoImport Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xPreventivoImport Join Inserted On xPreventivoImport.Id_xPreventivoImport = Inserted.Id_xPreventivoImport
		Else
			-- Update
			Update xPreventivoImport Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xPreventivoImport Join Inserted On xPreventivoImport.Id_xPreventivoImport = Inserted.Id_xPreventivoImport
	End
GO
-- Sottopreventivo - spese
Create Trigger [dbo].[xPreventivoSpesa_trg] On [dbo].[xPreventivoSpesa] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xPreventivoSpesa Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xPreventivoSpesa Join Inserted On xPreventivoSpesa.Id_PreventivoSpesa = Inserted.Id_PreventivoSpesa
		Else
			-- Update
			Update xPreventivoSpesa Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xPreventivoSpesa Join Inserted On xPreventivoSpesa.Id_PreventivoSpesa = Inserted.Id_PreventivoSpesa
	End
GO
Create Trigger [dbo].[xPreventivoItem_trg] On [dbo].[xPreventivoItem] For Insert, Update As
	Begin
		If (Select Count(*) From Deleted) = 0
			-- Insert
			Update xPreventivoItem Set 
				UserIns	= dbo.afn_GetUserInfo(),
				UserUpd	= dbo.afn_GetUserInfo(),
				TimeIns	= Getdate(),
				TimeUpd	= Getdate()
			From xPreventivoItem Join Inserted On xPreventivoItem.Id_PreventivoItem = Inserted.Id_PreventivoItem
		Else
			-- Update
			Update xPreventivoItem Set 
				UserUpd = dbo.afn_GetUserInfo(),
				TimeUpd = Getdate()
			From xPreventivoItem Join Inserted On xPreventivoItem.Id_PreventivoItem = Inserted.Id_PreventivoItem
	End
GO

-- Creazione Triggers di insert\update personalizzato per tabelle generate con asp_du_AddTable (previa cancellazione del trigger creato)
-- Matricole - Aggiornamento data fine matricola in un impianto
Create Trigger [dbo].[xMatricola_trg] On [dbo].[xMatricola] For Insert, Update As
Begin
	If (Select Count(*) From Deleted) = 0
		-- Insert
		Update xMatricola Set 
		  --DataMov = dbo.afn_Datetime2Date    (Inserted.DataMov),
		  --Sconto	= dbo.afn_PercStrNormalize (Inserted.Sconto ),
			UserIns	= dbo.afn_GetUserInfo(),
			UserUpd	= dbo.afn_GetUserInfo(),
			TimeIns	= Getdate(),
			TimeUpd	= Getdate()
		From xMatricola Join Inserted On xMatricola.Id_xMatricola = Inserted.Id_xMatricola
	Else
		-- Update
		Update xMatricola Set 
		  --DataMov = dbo.afn_Datetime2Date    (Inserted.DataMov),
		  --Sconto	= dbo.afn_PercStrNormalize (Inserted.Sconto ),
			UserUpd = dbo.afn_GetUserInfo(),
			TimeUpd = Getdate()
		From xMatricola Join Inserted On xMatricola.Id_xMatricola = Inserted.Id_xMatricola
		----------------------------------------------------------------------------------
		Declare	@Id_xImpiantoMatricola 	Integer
		Declare	@Cd_CF 						Char(7)
		Declare	@Cd_CFDest 					Char(3)
		Declare	@Cd_CF_Inserted			Char(7)
		Declare	@Cd_CFDest_Inserted		Char(3)
		
		Select	@Cd_CF_Inserted			= Inserted.Cd_CF, @Cd_CFDest_Inserted = Inserted.Cd_CFDest From Inserted

		Select	@Id_xImpiantoMatricola	= IM.Id_xImpiantoMatricola, @Cd_CF= I.Cd_CF, @Cd_CFDest = I.Cd_CFDest
		 From		xImpianto I Inner Join xImpiantoMatricola IM On I.Id_xImpianto = IM.Id_xImpianto
									Inner Join Inserted					On (IM.Cd_AR = Inserted.Cd_AR) And (IM.Cd_xMatricola = Inserted.Cd_xMatricola)
		 Where	IM.Cd_AR = Inserted.Cd_AR
				And IM.Cd_xMatricola = Inserted.Cd_xMatricola
				And GetDate() Between IM.DataInizio And IM.DataFine
		
		If (Not (IsNull(@Cd_CF, '') = @Cd_CF_Inserted)) Or (Not (IsNull(@Cd_CFDest, '') = IsNull(@Cd_CFDest_Inserted, '')))
		 Begin
		  If IsNull(@Id_xImpiantoMatricola, 0) > 0
			Begin
			 Update	xImpiantoMatricola
			  Set		DataFine = DateAdd(D, -1, GetDate())
			  Where	Id_xImpiantoMatricola = @Id_xImpiantoMatricola
			End
		 End		
		----------------------------------------------------------------------------------
End
GO

-- Creazione altri Triggers
-- Sottopreventivo - Cancellazione
CREATE TRIGGER xPreventivo_atrg_iod On xPreventivo Instead Of Delete As 
	Begin

		Declare @IODContexStatus Bit									-- Salva lo stato di afn_IsIODContext

		Select  @IODContexStatus = dbo.afn_IsIODContext()
		If      @IODContexStatus = 0 Exec asp_IODContextOn		-- Non serve impostare lo stato di IODContext se è già True


		-- On Parent Delete [xPreventivo(Id_Preventivo)], 
		-- delete children [xPreventivoSpesa(Id_Preventivo)]
		Delete c From xPreventivoMateriale	c Join Deleted d On (c.Id_Preventivo = d.Id_Preventivo)
		Delete c From xPreventivoSpesa		  c Join Deleted d On (c.Id_Preventivo = d.Id_Preventivo)
		Delete c From xPreventivoItem		    c Join Deleted d On (c.Id_Preventivo = d.Id_Preventivo)

		If @IODContexStatus = 0 Or   -- Non bisogna resettare lo stato di IODContext se quanto il trigger è iniziato era già True
			 @@NestLevel      = 1      -- però se il NestLevel=1 allora vuol dire che è rimasto impostato per errore: correggo il problema
			Exec asp_IODContextOff	

		-- Standard Action code --
		Delete xPreventivo From xPreventivo p Join Deleted d On (p.Id_Preventivo = d.Id_Preventivo)

	End
GO
-- Righe documento - Inserimento, modifica e cancellazione
CREATE TRIGGER [dbo].[xDORig_GAC] On [dbo].[DORig] For Insert, Update, Delete As
BEGIN
	DECLARE @RecsDeleted Integer, @RecsInserted Integer
	DECLARE @RC 		Int
	DECLARE @Id_DORig Int
	DECLARE @Cd_AR 	VarChar(20)
	DECLARE @TipoDocumento Char(1)
	DECLARE @Cd_DOSottoCommessa VarChar(20)
	DECLARE @Msg VarChar(max)
	DECLARE @Riga Int
	DECLARE @TipoRigaRif Char(1)
	DECLARE @nReturn 	Int

	IF @@NESTLEVEL = 1 -- solo con interventi diretti in DORig
		BEGIN
			SELECT @RecsDeleted  = COUNT(*) FROM deleted 
			SELECT @RecsInserted = COUNT(*) FROM inserted

			IF @RecsDeleted > 0 BEGIN

			   IF @RecsInserted = @RecsDeleted BEGIN -- UPDATE
					
					declare updDORig cursor for
						Select
							  Cd_DOSottoCommessa
							  , Riga
							  , TipoRigaRif
						From inserted

					open updDORig
					fetch next from updDORig into @Cd_DOSottoCommessa, @Riga, @TipoRigaRif
					while @@FETCH_STATUS = 0
					begin
						if isnull(@TipoRigaRif, ' ') = ' ' begin
							exec xasp_DORig_CheckSottoCommessa 1, @Cd_DOSottoCommessa, @nReturn output

							If Not (@nReturn > 0) begin
								if @nReturn = -3 set @Msg = 'Attenzione: commessa mancante alla riga ' + ltrim(rtrim(str(@Riga))) +  '!'
								else set @Msg = 'Attenzione: modifica alla riga ' +  ltrim(rtrim(str(@Riga))) +  ' non consentita in quanto la sottocommessa ' + @Cd_DOSottoCommessa + ' risulta chiusa!'
								RAISERROR(@Msg, 16, -1)
								rollback;
							end
						end
						fetch next from updDORig into @Cd_DOSottoCommessa, @Riga, @TipoRigaRif
					end
					close updDORig
					deallocate updDORig

			   END ELSE BEGIN -- DELETE

					declare delDORig cursor for
						select
							Riga
							, Cd_DOSottoCommessa
						from
							deleted

					open delDORig
					fetch next from delDORig into @Riga, @Cd_DOSottoCommessa
					while @@FETCH_STATUS = 0
					begin
						exec xasp_DORig_CheckSottoCommessa 2, @Cd_DOSottoCommessa, @nReturn output

						If Not (@nReturn > 0) begin
							set @Msg = 'Attenzione: cancellazione della riga ' +  ltrim(rtrim(str(@Riga))) +  ' non consentita in quanto la sottocommessa ' + @Cd_DOSottoCommessa + ' risulta chiusa!'
							RAISERROR(@Msg, 16, -1)
							rollback;
						end
						fetch next from delDORig into @Riga, @Cd_DOSottoCommessa
					end
					close delDORig
					deallocate delDORig

			   END

			END ELSE BEGIN

			   IF @RecsInserted > 0 BEGIN -- INSERT

					declare insDORig cursor for
						Select
							  Cd_DOSottoCommessa
							  , Riga
							  , TipoRigaRif
						From Inserted

					open insDORig
					fetch next from insDORig into @Cd_DOSottoCommessa, @Riga, @TipoRigaRif
					while @@FETCH_STATUS = 0
					begin
						if isnull(@TipoRigaRif, ' ') = ' ' begin
							exec xasp_DORig_CheckSottoCommessa 1, @Cd_DOSottoCommessa, @nReturn output

							If Not (@nReturn > 0) begin
								if @nReturn = -3 set @Msg = 'Attenzione: commessa mancante alla riga ' +  ltrim(rtrim(str(@Riga))) +  '!'
								else set @Msg = 'Attenzione: inserimento della riga ' +  ltrim(rtrim(str(@Riga))) +  ' non consentita in quanto la sottocommessa ' + @Cd_DOSottoCommessa + ' risulta chiusa!'
								RAISERROR(@Msg, 16, -1)
								rollback;
							end
						end
						fetch next from insDORig into @Cd_DOSottoCommessa, @Riga, @TipoRigaRif
					end
					close insDORig
					deallocate insDORig

			   END

			END
		END --nestlevel

	IF @@NESTLEVEL > 1 -- cancellazione/update della testa del documento
		BEGIN
			SELECT @RecsDeleted  = COUNT(*) FROM deleted 
			SELECT @RecsInserted = COUNT(*) FROM inserted

			IF @RecsDeleted > 0 BEGIN
				
				IF @RecsInserted = @RecsDeleted BEGIN -- UPDATE
					
					declare updDORig cursor for
						Select
							  Cd_DOSottoCommessa
							  , Riga
							  , TipoRigaRif
						From inserted

					open updDORig
					fetch next from updDORig into @Cd_DOSottoCommessa, @Riga, @TipoRigaRif
					while @@FETCH_STATUS = 0
					begin
						if isnull(@TipoRigaRif, ' ') = ' ' begin
							exec xasp_DORig_CheckSottoCommessa 1, @Cd_DOSottoCommessa, @nReturn output

							If Not (@nReturn > 0) begin
								if @nReturn = -3 set @Msg = 'Attenzione: commessa mancante alla riga ' + ltrim(rtrim(str(@Riga))) +  '!'
								else set @Msg = 'Attenzione: modifica alla riga ' +  ltrim(rtrim(str(@Riga))) +  ' non consentita in quanto la sottocommessa ' + @Cd_DOSottoCommessa + ' risulta chiusa!'
								RAISERROR(@Msg, 16, -1)
								rollback;
							end
						end
						fetch next from updDORig into @Cd_DOSottoCommessa, @Riga, @TipoRigaRif
					end
					close updDORig
					deallocate updDORig

			   END ELSE BEGIN -- DELETE

					declare delDORig cursor for
						select
							Riga
							, Cd_DOSottoCommessa
						from
							deleted

					open delDORig
					fetch next from delDORig into @Riga, @Cd_DOSottoCommessa
					while @@FETCH_STATUS = 0
					begin
						exec xasp_DORig_CheckSottoCommessa 2, @Cd_DOSottoCommessa, @nReturn output

						If Not (@nReturn > 0) begin
							set @Msg = 'Attenzione: cancellazione della riga ' +  ltrim(rtrim(str(@Riga))) +  ' non consentita in quanto la sottocommessa ' + @Cd_DOSottoCommessa + ' risulta chiusa!'
							RAISERROR(@Msg, 16, -1)
							rollback;
						end
						fetch next from delDORig into @Riga, @Cd_DOSottoCommessa
					end
					close delDORig
					deallocate delDORig

			   END

			END
		END

	SELECT @RecsDeleted  = COUNT(*) FROM deleted 
	SELECT @RecsInserted = COUNT(*) FROM inserted

	IF @RecsDeleted > 0 BEGIN
	
		 IF @RecsInserted = @RecsDeleted BEGIN

				Select @Id_DORig			= Id_DORig
					  , @Cd_AR				= Cd_AR
				From Inserted

				Select @TipoDocumento = TipoDocumento From DORig Where @Id_DORig = Id_DORig
				
				EXECUTE @RC = [dbo].[xasp_DORig_CreaMatricola]
						   @Id_DORig
							, @Cd_AR
							, @TipoDocumento
							, @nReturn OUTPUT
				
				If Not (@nReturn > 0) RAISERROR('Problemi con la creazione delle matricole !', 15, -1)

		 END ELSE BEGIN

				DECLARE @WorkType int
				DECLARE @Id_xContratto int
				DECLARE @DataDoc smalldatetime
				DECLARE @PrezzoTotaleV numeric(18,6)
				DECLARE @Id_DOTes int
				DECLARE @Id_xContrattoSviluppo int
				
				SET @WorkType = 2
				SET @DataDoc = CAST('' As SmallDateTime)
				SET @Id_xContrattoSviluppo = 0

				DECLARE curDORig CURSOR FAST_FORWARD FOR
					Select
						Deleted.Id_DORig
					From
						Deleted
					Where
						Not ISNULL(xCd_xContratto, '') = ''
				
				OPEN curDORig
				FETCH NEXT FROM curDORig INTO @Id_DORig
				WHILE @@FETCH_STATUS = 0 BEGIN
					-- TODO: impostare qui i valori dei parametri.
					Select @Id_xContratto = Id_xContratto From xContratto Where Cd_xContratto In (Select xCd_xContratto From deleted Where Id_DORig = @Id_DORig)
					Select @PrezzoTotaleV = Sum(PrezzoTotaleV) From Deleted Where Id_DORig = @Id_DORig
					Select @Id_DOTes = Id_DOTes From Deleted Where Id_DORig = @Id_DORig

					Select Top 1 @Id_xContrattoSviluppo = Id_xContrattoSviluppo 
						From xContrattoSviluppo
						Where Id_xContratto = @Id_xContratto
								And RR_DataInizio In (Select RR_DataInizio From deleted Where Id_DORig = @Id_DORig)
								And RR_DataFine   In (Select RR_DataFine   From deleted Where Id_DORig = @Id_DORig)

					EXECUTE @RC = xasp_gac_contratto
						 @WorkType
						,@Id_xContratto
						,@DataDoc
						,@PrezzoTotaleV
						,@Id_DOTes
						,@Id_xContrattoSviluppo
						,@nReturn OUTPUT

					FETCH NEXT FROM curDORig INTO @Id_DORig
				END -- curDORig FETCH
				CLOSE curDORig
				DEALLOCATE curDORig

		 END
	END ELSE BEGIN
	
		 IF @RecsInserted > 0 BEGIN
				
				Select @Id_DORig = Id_DORig
				     , @Cd_AR    = Cd_AR 
				From Inserted

				Select @TipoDocumento = TipoDocumento From DORig Where @Id_DORig = Id_DORig
				
				EXECUTE @RC = [dbo].[xasp_DORig_CreaMatricola]
						   @Id_DORig
							, @Cd_AR
							, @TipoDocumento
							, @nReturn OUTPUT
				
				If Not (@nReturn > 0) RAISERROR('Problemi con la creazione delle matricole !', 15, -1)
		 END
	END
END
GO

exec sp_settriggerorder 'xDORig_GAC', 'NONE', 'INSERT'
exec sp_settriggerorder 'xDORig_GAC', 'NONE', 'UPDATE'
exec sp_settriggerorder 'xDORig_GAC', 'NONE', 'DELETE'
GO

-- Operatori delle attività del ticket - Inserimento e cancellazione
CREATE TRIGGER [dbo].[xRDTicketAttivitaMov_atrg_iud] On [dbo].[xRDTicketAttivitaMov] For Insert, Delete As
BEGIN
	DECLARE @RecsDeleted Integer, @RecsInserted Integer
	DECLARE @RC 			Int
	DECLARE @nReturn 	Int
	DECLARE @WorkType Int
	DECLARE @Id_xRDTicketAttivita Int
	DECLARE @Id_xRDTicketAttivitaMov Int
	DECLARE @Cd_xOperatore varchar(20)
	DECLARE @Id_xRDTicket Int
	DECLARE @Righe Int

	SELECT @RecsDeleted  = COUNT(*) FROM deleted 
	SELECT @RecsInserted = COUNT(*) FROM Inserted

	IF @RecsDeleted > 0 BEGIN
		 IF @RecsInserted <> @RecsDeleted BEGIN
				-- Delete
				-- TODO: impostare qui i valori dei parametri.
				Set @WorkType = 2
				Select	@Id_xRDTicketAttivita = Id_xRDTicketAttivita
								, @Id_xRDTicketAttivitaMov = Id_xRDTicketAttivitaMov
								, @Cd_xOperatore = Cd_xOperatore
					From deleted
					
				EXECUTE @RC = [dbo].[xasp_xrdticketattivitamov_operatore]
					 @WorkType
					,@Id_xRDTicketAttivita
					,@Id_xRDTicketAttivitaMov
					,@Cd_xOperatore
					,@nReturn OUTPUT

				-- Impostare il ticket come da iniziare se non ci sono rilevazioni
				Select @Id_xRDTicket = Id_xRDTicket -- Verifico di quale ticket si tratta
					From xRDTicketAttivita
					Where Id_xRDTicketAttivita = @Id_xRDTicketAttivita
				
				Select @Righe = COUNT(*) -- Verifico se per il ticket esistono altre rilevazioni di attività
				From xRDTicketAttivitaMov
				Where Id_xRDTicketAttivitaMov <> @Id_xRDTicketAttivitaMov
					And Id_xRDTicketAttivita In 
					(Select Distinct Id_xRDTicketAttivita 
						From xRDTicketAttivita 
						Where Id_xRDTicket = @Id_xRDTicket)
				
				If @Righe = 0
					Begin
						Update xRDTicket Set Iniziato = 0 Where Id_xRDTicket = @Id_xRDTicket
					End	
		 END
	END ELSE BEGIN
		 IF @RecsInserted > 0 BEGIN
				-- Insert
				-- TODO: impostare qui i valori dei parametri.
				Set @WorkType = 1
				Select	@Id_xRDTicketAttivita = Id_xRDTicketAttivita
								, @Id_xRDTicketAttivitaMov = Id_xRDTicketAttivitaMov
								, @Cd_xOperatore = Cd_xOperatore
					From inserted
					
				EXECUTE @RC = [dbo].[xasp_xrdticketattivitamov_operatore]
					 @WorkType
					,@Id_xRDTicketAttivita
					,@Id_xRDTicketAttivitaMov
					,@Cd_xOperatore
					,@nReturn OUTPUT
					
				-- Impostare il ticket come iniziato
				Update xRDTicket 
					Set Iniziato = 1 
					Where Id_xRDTicket In 
						(Select Id_xRDTicket 
							From xRDTicketAttivita
							Where Id_xRDTicketAttivita = @Id_xRDTicketAttivita)					
		 END
	END
END
GO

exec sp_settriggerorder 'xRDTicketAttivitaMov_atrg_iud', 'NONE', 'INSERT'
exec sp_settriggerorder 'xRDTicketAttivitaMov_atrg_iud', 'NONE', 'DELETE'
GO

-- Testa documento - modifica \ cancellazione
CREATE TRIGGER [dbo].[xDOTes_GAC] On [dbo].[DOTes] For Update As
BEGIN
	DECLARE @RecsDeleted Integer, @RecsInserted Integer
	DECLARE @RC 			Int
	DECLARE @Id_DOTes Int
	DECLARE @TipoDocumento Char(1)
	DECLARE @CliFor Char(1)
	DECLARE @nReturn 	Int

	SELECT @RecsDeleted  = COUNT(*) FROM deleted 
	SELECT @RecsInserted = COUNT(*) FROM Inserted

	IF @RecsDeleted > 0 BEGIN
		 IF @RecsInserted = @RecsDeleted BEGIN
				Select	@Id_DOTes = Id_DOTes From Inserted

				Select @TipoDocumento = TipoDocumento, @CliFor = CliFor From DOTes Where @Id_DOTes = Id_DOTes
				
				EXECUTE @RC = [dbo].[xasp_DOTes_UpdateMatricola]
						   @Id_DOTes
							, @TipoDocumento
							, @CliFor
							, @nReturn OUTPUT
				
				If Not (@nReturn > 0) RAISERROR('Problemi con l''aggiornamento delle matricole !', 15, -1)
		 END 
	END
END
GO

ALTER TABLE [dbo].[DOTes] ENABLE TRIGGER [xDOTes_GAC]
GO

exec sp_settriggerorder 'xDOTes_GAC', 'NONE', 'UPDATE'
GO

-- Trigger di insert/update personalizzato per matricole in noleggio (tabella xNoleggioMatricola)
Create Trigger [dbo].[xNoleggioMatricola_cca_trg] On [dbo].[xNoleggioMatricola] For Insert, Update As
	Begin
		Declare @RecDel Int, @RecIns Int, @ExecSP Bit, @ExecDel Bit
			, @Id_xNoleggioMatricola Int, @Disattiva Bit, @Rinnovato Bit, @TipoFatt Smallint
			, @RC Int, @nReturn Int

		Set @RecDel = (Select Count(*) From deleted)
		Set @RecIns = (Select Count(*) From inserted)
		Set @Id_xNoleggioMatricola = 0; Set @ExecDel = 0
			
		Set @ExecSP = Case	When (@RecDel = 0) And (@RecIns > 0) Then 1 --insert
												When (@RecDel > 0) And (@RecIns = @RecDel) Then 1	--update
												Else 0 End
		If (@ExecSP = 1)
			Begin
				Select @Id_xNoleggioMatricola = inserted.Id_xNoleggioMatricola
					    , @Disattiva = inserted.Disattiva
					    , @Rinnovato = inserted.Rinnovato
						, @TipoFatt = xNoleggio.TipoFatt
					From inserted
						inner join xNoleggio on inserted.Id_xNoleggio = xNoleggio.Id_xNoleggio

				Set @ExecSP = Case	When (@Id_xNoleggioMatricola > 0) And (@Disattiva = 0) And (@Rinnovato = 0) Then 1
														Else 0 End
				Set @ExecDel = Case	When (@Id_xNoleggioMatricola > 0) And (@Disattiva = 1 Or @Rinnovato = 1) Then 1
														Else 0 End
			End

		If (@ExecDel = 1) Delete From xNoleggioMatricolaSviluppo Where Id_xNoleggioMatricola = @Id_xNoleggioMatricola And IsNull(Id_DOTes, 0) = 0

		If (@ExecSP = 1)
			Begin
				Exec @RC = [dbo].[xasp_cca_noleggiosviluppo] 0, @Id_xNoleggioMatricola, @TipoFatt, @nReturn Output
				If (@nReturn < 0) Raiserror('Problemi con lo sviluppo scadenze delle matricole in noleggio !!', 15, -1)
			End
	End
GO

exec sp_settriggerorder 'xNoleggioMatricola_cca_trg', 'NONE', 'INSERT'
exec sp_settriggerorder 'xNoleggioMatricola_cca_trg', 'NONE', 'UPDATE'
GO

-- Trigger di insert/update personalizzato per impianti in noleggio (tabella xNoleggioImpianto)
Create Trigger [dbo].[xNoleggioImpianto_cca_trg] On [dbo].[xNoleggioImpianto] For Insert, Update As
	Begin
		Declare @RecDel Int, @RecIns Int, @ExecSP Bit, @ExecDel Bit
			, @Id_xNoleggioImpianto Int, @Disattiva Bit, @Rinnovato Bit, @TipoFatt Smallint
			, @RC Int, @nReturn Int

		Set @RecDel = (Select Count(*) From deleted)
		Set @RecIns = (Select Count(*) From inserted)
		Set @Id_xNoleggioImpianto = 0; Set @ExecDel = 0
			
		Set @ExecSP = Case	When (@RecDel = 0) And (@RecIns > 0) Then 1 --insert
												When (@RecDel > 0) And (@RecIns = @RecDel) Then 1	--update
												Else 0 End
		If (@ExecSP = 1)
			Begin
				Select @Id_xNoleggioImpianto = Id_xNoleggioImpianto
					    , @Disattiva = Disattiva
					    , @Rinnovato = Rinnovato
						, @TipoFatt	= xNoleggio.TipoFatt
					From inserted
						inner join xNoleggio on inserted.Id_xNoleggio = xNoleggio.Id_xNoleggio

				Set @ExecSP = Case	When (@Id_xNoleggioImpianto > 0) And (@Disattiva = 0) And (@Rinnovato = 0) Then 1
														Else 0 End
				Set @ExecDel = Case	When (@Id_xNoleggioImpianto > 0) And (@Disattiva = 1 Or @Rinnovato = 1) Then 1
														Else 0 End
			End

		If (@ExecDel = 1) Delete From xNoleggioImpiantoSviluppo Where Id_xNoleggioImpianto = @Id_xNoleggioImpianto And IsNull(Id_DOTes, 0) = 0

		If (@ExecSP = 1)
			Begin
				Exec @RC = [dbo].[xasp_cca_noleggiosviluppo] 1, @Id_xNoleggioImpianto, @TipoFatt, @nReturn Output
				If (@nReturn < 0) Raiserror('Problemi con lo sviluppo scadenze degli impianti in noleggio !!', 15, -1)
			End
	End
GO

exec sp_settriggerorder 'xNoleggioImpianto_cca_trg', 'NONE', 'INSERT'
exec sp_settriggerorder 'xNoleggioImpianto_cca_trg', 'NONE', 'UPDATE'
GO

-- Trigger di insert personalizzato contratti di noleggio (tabella xNoleggio)
Create Trigger [dbo].[xNoleggio_cca_trg] On [dbo].[xNoleggio] For Insert As
	Begin
		Declare @RecDel Int, @RecIns Int, @Count Int
		Declare @Cd_xNoleggio Char(10)

		Set @RecDel = (Select Count(*) From deleted)
		Set @RecIns = (Select Count(*) From inserted)
			
		If (@RecDel = 0) And (@RecIns > 0)
			Begin
			  Select @Cd_xNoleggio = LTrim(RTrim(Cd_xNoleggio)) From inserted
				Select @Count = Count(*) From xContratto Where Cd_xContratto = @Cd_xNoleggio
				If (@Count > 0) 
					Begin
						Raiserror('Esiste già un Contratto per Servizi con il codice %s !!', 16, 1, @Cd_xNoleggio)
						Rollback;
					End
			End
	End
GO

exec sp_settriggerorder 'xNoleggio_cca_trg', 'NONE', 'INSERT'
GO

-- Trigger di insert personalizzato contratti per servizi (tabella xContratto)
Create Trigger [dbo].[xContratto_cca_trg] On [dbo].[xContratto] For Insert As
	Begin
		Declare @RecDel Int, @RecIns Int, @Count Int
		Declare @Cd_xContratto Char(10)

		Set @RecDel = (Select Count(*) From deleted)
		Set @RecIns = (Select Count(*) From inserted)
			
		If (@RecDel = 0) And (@RecIns > 0)
			Begin
			  Select @Cd_xContratto = LTrim(RTrim(Cd_xContratto)) From inserted
				Select @Count = Count(*) From xNoleggio Where Cd_xNoleggio = @Cd_xContratto
				If (@Count > 0) 
					Begin
						Raiserror('Esiste già un Contratto di Noleggio con il codice %s !!', 16, 1, @Cd_xContratto)
						Rollback;
					End
			End
	End
GO

exec sp_settriggerorder 'xContratto_cca_trg', 'NONE', 'INSERT'
GO

-- Eliminazione funzioni e stored procedure
EXEC asp_du_DropFunction	'xafn_GAC_GetPrimoOrdineBySottoCommessa'
EXEC asp_du_DropProcedure	'xasp_gac_contratto'
EXEC asp_du_DropFunction	'xafn_GAC_GetSconto'
EXEC asp_du_DropFunction	'xGAC_GetSconto'
EXEC asp_du_DropProcedure	'xasp_gac_getnextnum'
EXEC asp_du_DropProcedure	'xasp_gac_xmm1_fill'
EXEC asp_du_DropProcedure	'xasp_gac_getnextnum_temp'
EXEC asp_du_DropFunction	'xGAC_GetPeriodoContratto'
EXEC asp_du_DropProcedure	'xasp_gac_getnextnum_preventivo'
EXEC asp_du_DropFunction	'xGAC_RDTicket_Valorizzazione'
EXEC asp_du_DropFunction	'xGAC_RDTicket_Valorizzazione_Attivita'
EXEC asp_du_DropFunction	'xGAC_RDTicket_Valorizzazione_Attivita_DD'
EXEC asp_du_DropFunction	'xGAC_RDTicket_Valorizzazione_Materiale'
EXEC asp_du_DropFunction	'xGAC_RDTicket_Valorizzazione_Spesa'
Exec asp_du_DropProcedure	'xasp_Ticket_GeneraDoc'
Exec asp_du_DropProcedure	'xasp_DORig_CreaMatricola'
Exec asp_du_DropProcedure	'xasp_DORig_CreaMatricola_Ext'
EXEC asp_du_DropProcedure	'xasp_xRDTicketAttivitaMov_Operatore'
Exec asp_du_DropProcedure	'xasp_DOTes_UpdateMatricola'
Exec asp_du_DropProcedure	'xasp_DOTes_UpdateMatricola_Ext'
EXEC asp_du_DropProcedure	'xasp_cca_rlelabora'
EXEC asp_du_DropProcedure	'xasp_cca_rlvalorizza'
EXEC asp_du_DropFunction	'xGAC_GetPlafondResiduo'
EXEC asp_du_DropFunction	'xGAC_MGDispEx'
EXEC asp_du_DropFunction	'xGAC_MGDispEx_AR'
EXEC asp_du_DropFunction	'xGAC_PROrdImp'
EXEC asp_du_DropFunction	'xGAC_MGDispEx_Commessa_Full'
EXEC asp_du_DropFunction	'xGAC_MGDispEx_Sottocommessa_Full'
Exec asp_du_DropProcedure	'xasp_xRDTicketAttivita_Operatore_Disp'
EXEC asp_du_DropFunction	'xGAC_RDTicketAttivita_Operatore_Imp'
EXEC asp_du_DropFunction	'xGAC_RDTicketAttivita_Operatore_Imp_Risorsa'
EXEC asp_du_DropFunction	'xGAC_RDTicketAttivita_Operatore_All'
EXEC asp_du_DropFunction	'xGAC_RDTicketAttivita_Operatore_All_Risorsa'
EXEC asp_du_DropFunction	'xafn_GAC_RDTicketAttivita_GetStmt4ClientData'
EXEC asp_du_DropProcedure 'xasp_xRDTicketAttivita_UpdateMatricola'
EXEC asp_du_DropProcedure 'xasp_xRDTicketAttivita_UpdateContratto'
EXEC asp_du_DropProcedure 'xasp_xRDTicketAttivita_UpdateContratto_Dismissione'
EXEC asp_du_DropProcedure 'xasp_xRDTicketAttivita_UpdateMatricola_Ext'
EXEC asp_du_DropProcedure 'xasp_xRDTicketAttivita_UpdateContratto_Ext'
EXEC asp_du_DropProcedure 'xasp_xRDTicketAttivita_UpdateImpianto'
EXEC asp_du_DropProcedure	'xasp_cca_noleggiosviluppo'
EXEC asp_du_DropProcedure	'xasp_cca_noleggiosviluppo_p2'
EXEC asp_du_DropFunction  'xafn_cca_noleggiofattura_get_ds_scadenza'
EXEC asp_du_DropFunction  'xafn_cca_noleggiofattura_get_importo'
EXEC asp_du_DropFunction  'xGAC_RDTicketAttivita_RisorsaOperatore'
EXEC asp_du_DropFunction  'xafn_GetDataChiusuraDaUltimoTicket'
EXEC asp_du_DropProcedure 'xasp_xRDTicketAttivita_UpdateInterventoProg'
EXEC asp_du_DropProcedure 'xasp_DORig_CheckSottoCommessa'
EXEC asp_du_DropFunction  'xafn_cca_noleggiofattura_check_qfp'
EXEC asp_du_DropFunction  'xafn_cca_contatore_get_ul'
EXEC asp_du_DropFunction  'xafn_cca_noleggiofattura_get_evasione'
EXEC asp_du_DropProcedure 'xasp_cca_RLSalva'
exec asp_du_DropProcedure	'xasp_cca_2impelabora'
exec asp_du_DropProcedure	'xasp_cca_2impvalorizza'
exec asp_du_DropFunction	'xafn_ccan_GetImportoContratto'
GO

-- Creazione funzioni e stored procedure
/* ticket - elaborazione ed import da tabella di frontiera per software di terze parti */
create procedure [dbo].[xasp_cca_2impvalorizza](
	@Id_xRDTicketAttivitaMov	int = null -- required		
)	
    /*ENCRYPTED*/         
as

	set nocount on

	declare @Return	int

	-- parametri restituiti per la valorizzazione
	declare
    @CostoUn       numeric(18,6),
    @Prezzo        numeric(18,6),
    @Sconto        varchar(20),
    @Provvigione_1 varchar(20),
    @PrezzoTotaleV numeric(18, 6)

	-- parametri da passare alla funzione tabellare per la valorizzazione dell'attività
	declare
		@Cd_xContratto						char(10),
		@CD_PrAttivita						varchar(20),
		@CD_xRDTipoValorizzazione	char(5),
		@Cd_CF										char(7),
		@CD_xOperatore						varchar(20),
		@Cd_Agente								char(3),
		@DataInizio								smalldatetime,
		@CD_CFDest								nchar(3),
		@Durata										numeric(18,6),
		@Cd_xRDModalita						char(1),
		@Assistenza								bit,
		@Cd_PrRisorsa							varchar(20),
		@Id_xRDTicket							int,
		@Previsti									bit,
		@SGV_Etichetta						Char(1),
		@Cd_AR_Ticket						  Varchar(20),
		@Cd_xImpianto						  Char(10),
		@Cd_DOSottoCommessaInst		Varchar(20),
		@Cd_xMatricola						Varchar(40)

	-- inizializza a 0 la variabile di ritorno
	set	@Return = 0
	-- inizializza i parametri fissi	
	set	@Previsti = 0	-- solo consuntivo

	-----------------------------------------------------------------------------------------------------------
	-- verifico i parametri passati
	-----------------------------------------------------------------------------------------------------------
	if (@Id_xRDTicketAttivitaMov Is Null) begin set @Return = -300; goto endofproc; end -- id movimento obbligatorio

	-----------------------------------------------------------------------------------------------------------
	-- Carico i parametri necessari per la valorizzazione dal movimento specificato
	-----------------------------------------------------------------------------------------------------------
	select 
		 @Cd_xContratto			       = TIC.Cd_xContratto
		,@CD_PrAttivita				     = ATT.Cd_PrAttivita
		,@Cd_xRDTipoValorizzazione = MOV.Cd_xRDTipoValorizzazione
		,@Cd_CF							       = TIC.Cd_CF
		,@CD_xOperatore				     = MOV.Cd_xOperatore
		,@Cd_Agente						     = TIC.CD_Agente
		,@DataInizio					     = MOV.DataInizio
		,@Cd_CFDest						     = isnull(ATT.Cd_CFDest, TIC.Cd_CFDest)
		,@Durata							     = MOV.Durata
		,@Cd_xRDModalita			     = TIC.Cd_xRDModalita
		,@Assistenza					     = TIC.GestisciTicket
		,@CD_PrRisorsa				     = MOV.CD_PrRisorsa
		,@Id_xRDTicket				     = TIC.Id_xRDTicket
		,@SGV_Etichetta				     = TIC.SGV_Etichetta
		,@Cd_AR_Ticket				     = TIC.CD_AR
		,@Cd_xImpianto				     = TIC.CD_xImpianto
		,@Cd_DOSottoCommessaInst   = TIC.Cd_DOSottoCommessaInst
		,@Cd_xMatricola				     = TIC.Cd_xMatricola
	from 
		xRDTicketAttivitaMov		      MOV
		inner join xRDTicketAttivita	ATT on MOV.Id_xRDTicketAttivita	=	ATT.Id_xRDTicketAttivita
		inner join xRDTicket				  TIC on ATT.Id_xRDTicket				  =	TIC.Id_xRDTicket
	where 
		Id_xRDTicketAttivitaMov = @Id_xRDTicketAttivitaMov

	if (@@rowcount = 0) begin set @Return = -301; goto endofproc; end -- id inesistente		

	-----------------------------------------------------------------------------------------------------------
	-- richiamo la funzione tabellare di valorizzazione delle righe ticket
	-----------------------------------------------------------------------------------------------------------
	select  
		@CostoUn			 = CostoUn,
		@Prezzo        = Prezzo,
		@Sconto        = Sconto,
		@Provvigione_1 = Provvigione_1
	from	
		xGAC_RDTicket_Valorizzazione(
			1,                --valorizzazione attività
			@Cd_xContratto,
			@Cd_PRAttivita,
			@Cd_xRDTipoValorizzazione,
			@Cd_CF,
			@CD_xOperatore,
			@Cd_Agente,
			@DataInizio,
			@CD_CFDest,
			Null,							--Cd_AR
			@Durata,
			Null,							--Quantita
			Null,							--CD_ARMisura
			Null,							--FattoreToUM1
			Null,							--CD_xSpesa
			@Cd_xRDModalita,
			@Assistenza,
			@Cd_PRRisorsa,
			@Id_xRDTicket,
			@Previsti,
			Null,							--CD_Preventivo_IP
			@SGV_Etichetta,
			@Cd_AR_Ticket,
			@Cd_xImpianto,
			@Cd_DOSottoCommessaInst,
			@Cd_xMatricola
		)

  if (@@rowcount = 0) begin set @Return = -302; goto endofproc; end -- Non è stato possibile recuperare la valorizzazione attività

	-----------------------------------------------------------------------------------------------------------
	-- applico la valorizzazione
	-----------------------------------------------------------------------------------------------------------
	set @PrezzoTotaleV = round(isnull(@Prezzo, 0) * [dbo].[afn_PercStrEvalCD] ([dbo].[afn_PercStrNormalize] (isnull(@Sconto, ''))) * isnull(@Durata, 0), 2)

	update 
		xRDTicketAttivitaMov
	set	
		CostoUn				          =	@CostoUn,
		PrezzoUnitarioV         =	@Prezzo,
		Scontoriga			        =	@Sconto,
		Provvigione			        =	@Provvigione_1,
		PrezzoTotaleV						= @PrezzoTotaleV,
		Valorizzato			        = 1	
	where 
		Id_xRDTicketAttivitaMov = @Id_xRDTicketAttivitaMov

	-----------------------------------------------------------------------------------------------------------
	-- uscita
	-----------------------------------------------------------------------------------------------------------
endofproc:
	return @Return
go

/* ticket - elaborazione ed import da tabella di frontiera per software di terze parti */
create procedure [dbo].[xasp_cca_2impelabora](
	@Id_xRDTicketAttivitaMov_2Imp	int = null,		-- required		
	@Id_xRDTicketAttivitaMov		  int = null out
)	
    /*ENCRYPTED*/         
as

	set nocount on

	declare @Return	int
	declare @Stato tinyint
	declare @DataOraInizio smalldatetime
	declare @DataOraFine smalldatetime
	declare @Id_xRDTicketAttivita int
	declare @UltimoRL bit
	declare @Riga	smallint
	declare @RigaPadre smallint

	-- inizializza a 0 la variabile di ritorno
	set	@Return = 0

	-----------------------------------------------------------------------------------------------------------
	-- verifico i parametri
	-----------------------------------------------------------------------------------------------------------
	if (@Id_xRDTicketAttivitaMov_2Imp is null) begin set @Return = -100; goto endofproc; end -- @Id_xRDTicketAttivitaMov_2Imp obbligatorio

	-----------------------------------------------------------------------------------------------------------
	-- verifico la rilevazione
	-----------------------------------------------------------------------------------------------------------
	select 
		@Stato = Stato
		, @Id_xRDTicketAttivitaMov = Id_xRDTicketAttivitaMov
		, @DataOraInizio = DataOraInizio
		, @DataOraFine = DataOraFine
		, @Id_xRDTicketAttivita = Id_xRDTicketAttivita
		, @UltimoRL = UltimoRL
	from 
		xRDTicketAttivitaMov_2Imp 
	where 
		Id_xRDTicketAttivitaMov_2Imp = @Id_xRDTicketAttivitaMov_2Imp
		
	if (@@rowcount = 0) begin set @Return = -101; goto endofproc; end -- rilevazione non esistente		
	if (@Stato = 1) and (@Id_xRDTicketAttivitaMov is not null) begin set @Return = -102; goto endofproc; end -- rilevazione già importata

	--assegna riga al movimento, recuperando l'ultimo movimento per l'attività
	select 
		@Riga= isnull(max(Riga),0) + 1 
	from 
		xRDTicketAttivitaMov 
	where 
		ID_xRDTicketAttivita = @Id_xRDTicketAttivita

	--assegna riga padre al movimento, recuperando la riga dell'attività
	select 
		@RigaPadre = isnull(max(Riga),0)
	from 
		xRDTicketAttivita
	where 
		ID_xRDTicketAttivita = @Id_xRDTicketAttivita

	-----------------------------------------------------------------------------------------------------------
	-- 1) inserisce la riga di xRDTickeAttivitaMov e recupero l'identity
	-----------------------------------------------------------------------------------------------------------
	begin tran

		--Inserisce il nuovo movimento
		insert into xRDTicketAttivitaMov(
		  Id_xRDTicketAttivita
		  ,Cd_PrRisorsa
		  ,Cd_xOperatore
		  ,Cd_xRDRilCausale
		  ,Cd_xRDRilOrigine
		  ,Cd_xRDTipoValorizzazione
		  ,DataInizio
		  ,DataFine
		  ,DurataIns
		  ,Durata
		  ,NoteAttivitaMov
		  ,Riferimento
		  ,ChiusuraAttivita
		  ,Riga
		  ,RigaPadre
		) 
		select 
			@Id_xRDTicketAttivita
			,[Cd_PrRisorsa]
			,[Cd_xOperatore]
			,[Cd_xRDRilCausale]
			,[Cd_xRDRilOrigine]
			,[Cd_xRDTipoValorizzazione]
			,@DataOraInizio
			,@DataOraFine
			,[Durata] * [FattoreMks] / 3600
			,[Durata] * [FattoreMks] / 3600
			,[Note]
			,[Riferimento]
			,@UltimoRL
			,@Riga
			,@RigaPadre
		from
			[dbo].[xRDTicketAttivitaMov_2Imp]
		where
			Id_xRDTicketAttivitaMov_2Imp = @Id_xRDTicketAttivitaMov_2Imp 

		select @Id_xRDTicketAttivitaMov = scope_identity()

		--aggiornamento della data apertura dell'attività se si tratta della prima rilevazione per essa
		if (@Riga = 1) 
			update
				xRDTicketAttivita
			set
				DataApertura = convert(datetime, @DataOraInizio)
			where
				Id_xRDTicketAttivita = @Id_xRDTicketAttivita 
		
		update
			xRDTicketAttivita 
		set 
			NumOreEff = 
				(
				select 
					sum(case when PRAttivita.xDDRisorsaNoOreEff = 0 then isnull(DurataIns, 0) else 0 end) as Ore
				from
					xRDTicketAttivitaMov 
					inner join xRDTicketAttivita on xRDTicketAttivitaMov.Id_xRDTicketAttivita	= xRDTicketAttivita.Id_xRDTicketAttivita
					inner join PRAttivita			   on xRDTicketAttivita.Cd_PrAttivita				    = PRAttivita.Cd_PrAttivita
				where 
					xRDTicketAttivitaMov.Id_xRDTicketAttivita = @Id_xRDTicketAttivita
				)
		where 
			Id_xRDTicketAttivita = @Id_xRDTicketAttivita
		
		--chiude l'attività se il flag "Chiudi Att." della rilevazione è stato contrassegnato.
		if (@UltimoRL = 1)
			update 
				xRDTicketAttivita
			set 
				Chiuso = 1
				,DataChiusura = convert(datetime, @DataOraFine)
			where 
				Id_xRDTicketAttivita = @Id_xRDTicketAttivita

	-----------------------------------------------------------------------------------------------------------
	-- uscita
	-----------------------------------------------------------------------------------------------------------

endofproc_wr:			-- endofproc with rollback

	if (@Return >= 0) and (@Id_xRDTicketAttivitaMov > 0) 
		begin
			update 
				xRDTicketAttivitaMov_2Imp
			set	 
				Id_xRDTicketAttivitaMov = @Id_xRDTicketAttivitaMov
				, Stato                 = 1
				, Messaggio             = null
			where  
				Id_xRDTicketAttivitaMov_2Imp = @Id_xRDTicketAttivitaMov_2Imp
		
			if @@trancount > 0 commit transaction
		end 
	else begin
		if @@trancount > 0 rollback transaction
	end
	
endofproc:
	return @Return
go

-- Restituisce l'ordine cliente più vecchio per la sottocommessa passata come parametro
CREATE FUNCTION [dbo].[xafn_GAC_GetPrimoOrdineBySottoCommessa](
	@Cd_DOSottoCommessa as Varchar(20)
) 
Returns int 
AS 
	Begin

	 DECLARE @Id_DOTes AS int

	 SELECT TOP 1 @Id_DOTes = DORig.Id_DOTes 
		FROM DORig 
			INNER JOIN DO
				ON DORig.Cd_DO = DO.Cd_DO
		WHERE DORig.Cd_DOSottoCommessa = @Cd_DOSottoCommessa AND
					DORig.TipoDocumento = 'O' AND
					DO.CliFor = 'C'
		ORDER BY DataDoc, Id_DOTes

	 RETURN @Id_DOTes

	End
GO

CREATE FUNCTION [dbo].[xafn_GetDataChiusuraDaUltimoTicket](
	@Id_xInterventoProg int
)
returns datetime
as
	begin
		declare @ret datetime

		select top 1
			@ret = xRDTicket.DataChiusura
		from
			xInterventoProgScadenza
				left join xRDTicket on xInterventoProgScadenza.Id_xRDTicket = xRDTicket.Id_xRDTicket
		where
			xInterventoProgScadenza.Id_xInterventoProg = @Id_xInterventoProg
		order by
			xInterventoProgScadenza.DataScadenza desc

		return @ret
	end
GO

-- Aggiorna i dati di fatturazione del contratto
CREATE PROCEDURE [dbo].[xasp_gac_contratto] 
	@WorkType					Int, 
	@Id_xContratto				Int,
	@DataDoc						SmalldateTime,
	@PrezzoTotaleV				Numeric(18, 6),
	@Id_DOTes					Integer,
	@Id_xContrattoSviluppo	Integer,
	@nReturn						Integer = 0 Output
As
	-- Return:
	--		1: End OK 
	--	 < 0: End Failed
	--			-1: Tipo di lavoro non valido
	--			-2: Contratto non valido
	--			-3: Contratto non trovato
	--			-4: Importo fatturato non valido

	--			-NO-5: Contratto chiuso (24-09-2012: ora si possono fatturare anche scadenze appartenenti a contratti chiusi.)

	--			-6: Data ultima fattura non compresa tra inizio e fine fatturazione
	--			-7: Importo fatturato supera importo contratto

	/* Test validità parametri passati */
	-- @WorkType = 1 - Insert; 2 - Delete; 3 - Update
	IF ISNULL(@WorkType, 0) = 0 BEGIN
		--RAISERROR('Tipo di lavoro non valido : %d', 15, -1, @WorkType)
		SET @nReturn = -1
		RETURN @nReturn 
	END

	IF ISNULL(@Id_xContratto, 0) = 0 BEGIN
		--RAISERROR('Contratto non valido : %d', 15, -1, @Id_xContratto)
		SET @nReturn = -2
		RETURN @nReturn 
	END

	DECLARE @TestCount INT
	SELECT @TestCount = COUNT(*)
		FROM xContratto AS xContratto
		WHERE xContratto.Id_xContratto = @Id_xContratto

	IF @TestCount = 0 BEGIN
		--RAISERROR('Contratto non trovato: %d', 15, -1, @Id_xContratto)
		SET @nReturn = -3
		RETURN @nReturn
	END
	
	-- Eliminazione dati contratto
	IF @WorkType = 2
		BEGIN
			Declare @DataFatturaNext_New As SmallDateTime
			Declare @ImportoTotaleFattura_New As Numeric(18, 6)
			
			Select 
					@DataFatturaNext_New = A.DataFattura
				From (
					Select
							 Row_Number() Over(Partition By Id_xContratto Order By DataFattura) As Posizione
							 , Id_xContratto
							 , DataFattura
					From xContrattoSviluppo
					Where IsNull(Id_DOTes, 0) = 0 And (Evasa = 0)
					) A
				Where 
					A.Id_xContratto = @Id_xContratto And A.Posizione = 1
				Order By
					Id_xContratto
			
			-- Aggiornamento scadenza fattura		
			Update xContrattoSviluppo 
				Set Id_DOTes = NULL, Evasa = 0 
				Where Id_DOTes = @Id_DOTes 
						And Id_xContratto = @Id_xContratto
						And Id_xContrattoSviluppo = @Id_xContrattoSviluppo

			-- Calcolo importo totale fatturato
			Select	@ImportoTotaleFattura_New = Sum(ImportoFattura) 
				From xContrattoSviluppo Inner Join xContratto On xContrattoSviluppo.Id_xContratto = xContratto.Id_xContratto
				Where xContrattoSviluppo.Id_xContratto = @Id_xContratto 
							And Evasa = 1 
							And RR_DataInizio >= xContratto.DataInizioUltimoRinnovo
							And RR_DataFine 	<= xContratto.DataFine
			Set			@ImportoTotaleFattura_New = Round(@ImportoTotaleFattura_New, 2)

			-- Aggiornamento dati contratto
			Update xContratto 
				Set DataFatturaNext			= @DataFatturaNext_New,
					 ImportoTotaleFattura	= @ImportoTotaleFattura_New
				Where Id_xContratto = @Id_xContratto
			
			Set @nReturn = 1
			GoTo Fine_Funzione
		END
		
	-- Aggiornamento dati contratto
	IF @WorkType = 3
		BEGIN
		
			IF ISNULL(@PrezzoTotaleV, -1) = -1 BEGIN
				--RAISERROR('Importo fatturato non valido : %d', 15, -1, @PrezzoTotaleV)
				SET @nReturn = -4
				RETURN @nReturn
			END

			IF @PrezzoTotaleV < 0 BEGIN
				--RAISERROR('Importo fatturato non valido : %d', 15, -1, @PrezzoTotaleV)
				SET @nReturn = -4
				RETURN @nReturn
			END
			
			/* Dichiarazione variabili contratto */
			DECLARE	@DataChiusura			SMALLDATETIME,
					@DataInizioFattura		SMALLDATETIME, 
					@DataFineFattura			SMALLDATETIME, 
					@FattoreMksCicloFattura	NUMERIC(25, 12),
					@GiornoFattura				INT,
					@FatturaFineMese			BIT,
					@Anticipo					BIT,
					@Successivo					BIT,
					@TipoSviluppoFattura		INT,
					@DataFatturaNext			SMALLDATETIME,
					@ImportoTotaleFattura	NUMERIC(18, 6),
					@ImportoTotaleContratto	NUMERIC(18, 6),
					@Rinnovabile 				BIT
					
			/* Dichiarazione variabili per salvataggio dati */
			DECLARE	
					@ImportoTotaleFattura_Upd	NUMERIC(18, 6),
					@DataFatturaNext_Upd			SMALLDATETIME
					
			/* Dichiarazione variabili per calcoli intermedi */
			DECLARE	@DataFatturaNext_Day	INT,
					@DataFatturaNext_Month	INT,
					@DataFatturaNext_Year	INT
					
			/* Selezione dati contratto */
			SELECT
				@DataChiusura					=	C.DataChiusura,
				@DataInizioFattura 			= 	C.DataInizioFattura,
				@DataFineFattura 				=	C.DataFineFattura,
				@FattoreMksCicloFattura		= 	C.FattoreMksCicloFattura,
				@GiornoFattura 				= 	C.GiornoFattura,
				@FatturaFineMese 				= 	Case C.TipoGiornoFattura When 2 Then 1 Else 0 End,
				@Anticipo 						= 	Case C.TipoSviluppoFattura When 4 Then 1 Else 0 End,
				@Successivo						= 	Case C.TipoSviluppoFattura When 5 Then 1 Else 0 End,
				@TipoSviluppoFattura			=	C.TipoSviluppoFattura,
				@ImportoTotaleContratto = 	C.ImportoTotaleContratto
			FROM xContratto C
			WHERE C.Id_xContratto = @Id_xContratto
			
			/* Preparazione dati per aggiornamento */
			IF ((@DataDoc < @DataInizioFattura) AND (@Anticipo = 0)) --OR @DataDoc > @DataFineFattura (31-01-2012: in rem perchè è possibile superare la fine fatturazione)
				BEGIN
					--RAISERROR('Data ultima fattura non compresa tra inizio e fine fatturazione : %d', 15, -1, @Id_xContratto)
					SET @nReturn = -6
					RETURN @nReturn 	
				END
			ELSE
				-- Ok se data ultima fattura compresa tra inizio e fine fatturazione
				BEGIN
					-- Aggiornamento scadenza fattura
					Update xContrattoSviluppo
						Set Id_DOTes	= @Id_DOTes
							 , Evasa		= 1
						Where Id_xContrattoSviluppo = @Id_xContrattoSviluppo	
					
					-- Calcolo importo totale fatturato e
					-- recupero la data dell'ultima fattura evasa, che sarà la base di calcolo per la data di prossima fatturazione.
					Select @ImportoTotaleFattura_Upd = Sum(CS.ImportoFattura) 
							 , @DataFatturaNext = Max(CS.DataFattura)
						From xContrattoSviluppo CS Inner Join xContratto C On CS.Id_xContratto = C.Id_xContratto
						Where CS.Id_xContratto = @Id_xContratto 
									And CS.Evasa = 1 
									And CS.RR_DataInizio >= C.DataInizioUltimoRinnovo
									And CS.RR_DataFine 	<= C.DataFine
									
					Set @ImportoTotaleFattura_Upd = Round(@ImportoTotaleFattura_Upd, 2)
					
					IF @ImportoTotaleFattura_Upd > @ImportoTotaleContratto
						BEGIN
							--RAISERROR('Importo fatturato supera importo contratto : %d', 15, -1, @Id_xContratto)
							SET @nReturn = -7
							RETURN @nReturn 	
						END
					ELSE
						BEGIN
							IF @ImportoTotaleFattura_Upd = @ImportoTotaleContratto -- Contratto completamente fatturato
								BEGIN
									SET @DataFatturaNext_Upd = NULL
								END
							ELSE
								-- C'è un successivo ciclo di fatturazione
								BEGIN
									
									-- Data Prossima Fattura
									SET @DataFatturaNext_Month	= 	MONTH(@DataFatturaNext) + @FattoreMksCicloFattura
									SET @DataFatturaNext_Year	= 	YEAR(@DataFatturaNext) 

									IF @DataFatturaNext_Month > 12 -- Anno successivo
										BEGIN
											SET @DataFatturaNext_Year	= 	@DataFatturaNext_Year + 1
											SET @DataFatturaNext_Month	= 	@DataFatturaNext_Month - 12
										END	

									SET @DataFatturaNext_Day =	Case @TipoSviluppoFattura	When 1 Then DAY(@DataInizioFattura)
																											When 2 Then DAY(@DataFineFattura) 
																											Else        @GiornoFattura End

									IF (@TipoSviluppoFattura Between 3 And 5) And (@FatturaFineMese = 1)
										-- Il giorno di fatturazione è l'ultimo giorno del mese
										BEGIN
											SET @DataFatturaNext_Day =
												CASE @DataFatturaNext_Month
													WHEN 2	THEN 28
													WHEN 4	THEN 30
													WHEN 6	THEN 30
													WHEN 9	THEN 30
													WHEN 11	THEN 30
													ELSE 31
												END	 
										END
										
									-- Costruzione finale della data di prossima fattura
									IF ISDATE(STR(@DataFatturaNext_Day) + ' - ' + STR(@DataFatturaNext_Month) + ' - ' + STR(@DataFatturaNext_Year)) = 0
										BEGIN
											-- Potrebbe trattarsi di un giorno non esistente
											SET @DataFatturaNext_Day = DAY(dbo.afn_dt_lastdayofmonth('01 - ' + STR(@DataFatturaNext_Month) + ' - ' + STR(@DataFatturaNext_Year)))
										END
										 
									SET @DataFatturaNext_Upd = CONVERT(smalldatetime, STR(@DataFatturaNext_Day) + ' - ' + STR(@DataFatturaNext_Month) + ' - ' + STR(@DataFatturaNext_Year), 105)
									
									-- La data di prossima fattura deve essere maggiore o uguale alla data di inizio fatturazione
									-- a meno che non si tratti di fatturazione anticipata.
									IF (@DataFatturaNext_Upd < @DataInizioFattura) And (@Anticipo = 0)
										BEGIN
											SET @DataFatturaNext_Upd = @DataInizioFattura
										END	 

									-- La data di prossima fattura deve essere minore o uguale alla data di fine fatturazione
									-- a meno che non si tratti di fatturazione successiva alla periodicità di fatturazione.
									IF (@DataFatturaNext_Upd > @DataFineFattura) And (@Successivo = 0)
										BEGIN
											SET @DataFatturaNext_Upd = @DataFineFattura
										END
								END  
								
							-- Esegue l'aggiornamento
							UPDATE xContratto
								SET	ImportoTotaleFattura	= @ImportoTotaleFattura_Upd,
										DataFatturaNext		= @DataFatturaNext_Upd,
										StatoFattura			= Case StatoFattura When 'N' Then 'B' Else StatoFattura End
								WHERE Id_xContratto = @Id_xContratto
							
							-- Un contratto può essere chiuso se:
							--		Non è già chiuso (24-09-2012);
							--		Importo fatturato = Importo Contratto;
							--		Stato Rinnovabile	= 0.
							SELECT
									@ImportoTotaleFattura 	= 	C.ImportoTotaleFattura,
									@ImportoTotaleContratto = 	C.ImportoTotaleContratto,
									@Rinnovabile 				= 	C.Rinnovabile
								FROM xContratto C
								WHERE C.Id_xContratto = @Id_xContratto
								
							-- Aggiornamento stato chiuso
							IF ISNULL(@DataChiusura, '') = '' BEGIN
								SET @DataChiusura = CASE WHEN (@ImportoTotaleFattura = @ImportoTotaleContratto) 
																		AND (@Rinnovabile = 0) THEN GETDATE()
																 ELSE Null END
								
								UPDATE xContratto
									SET	DataChiusura = @DataChiusura,
											StatoFattura = CASE WHEN ISNULL(@DataChiusura, '') = ''	THEN StatoFattura
																														Else 'X'		  END
									WHERE Id_xContratto = @Id_xContratto
							END
								
							SET @nReturn = 1
						END
				END
		END

Fine_Funzione:
	RETURN @nReturn
GO

-- Ritorna lo sconto
CREATE FUNCTION [dbo].[xafn_GAC_GetSconto](
	@Cd_Preventivo	Varchar(10),
	@Cd_CF					Char(7),
	@DataDoc					DateTime,
	@Cd_LS_1					Char(7),
	@Cd_AR					Varchar(20),
	@Qta						Numeric(18,8),
	@Prezzo					Numeric(18,6),
	@Id_LSArticolo	   	Integer,
	@Id_LSScaglione		Integer,
	@Formula		Varchar(1000)
)
Returns Varchar(20)				
AS
	Begin
		-- Stringa Stmt
		Declare @Stmt as nvarchar(max)
		Declare @ParmDefinition nvarchar(500)

		-- valori di ritorno
		Declare	
			@DataPro				Datetime,
			--@Formula				Varchar(1000),
			@ValFormula			Varchar(20),
			@Sconto					Varchar(20)

		-------------------------------------------------------------------------
		-- data promozioni (@DataPro potrà dipendere da @DataDoc)
		-------------------------------------------------------------------------

		If @DataDoc Is Null
			Select @DataPro = GETDATE()
		Else
			Select @DataPro = @DataDoc

		----------------------------------------------------------------
		-- inizializzazione parametri output
		----------------------------------------------------------------

		Select 
			@ValFormula			= ''
		
		----------------------------------------------------------------

		Declare	@Cd_ARGruppo1 			Varchar(3),
					@Cd_ARGruppo2 			Varchar(3),
					@Cd_ARGruppo3 			Varchar(3),
					@Cd_CFGruppo1 			Varchar(3),
					@Cd_CFGruppo2 			Varchar(3),
					@Cd_CFGruppo3 			Varchar(3),
					@ARGruppoInitialized	Bit,
					@CFGruppoInitialized	Bit	

		Select @Formula = Rtrim(IsNull(@Formula, '')) + ' '

		If @Formula Is Null Or Len(@Formula) = 0 Goto Fine_Funzione  

		Select 
			@ARGruppoInitialized	= 0,
			@CFGruppoInitialized	= 0
		
		--------------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------------

		Declare @Val_Cliente												Varchar(10)
		Declare @Val_ClienteFamiglia									Varchar(10)
		Declare @Val_ClienteGruppo										Varchar(10)
		Declare @Val_ClienteSottogruppo								Varchar(10)
		Declare @Val_ClienteCategoria									Varchar(10)
		Declare @Val_ClienteClasse										Varchar(10)
		Declare @Val_ClienteSottoclasse								Varchar(10)
		Declare @Val_Articolo											Varchar(10)
		Declare @Val_ArticoloFamiglia									Varchar(10)
		Declare @Val_ArticoloGruppo									Varchar(10)
		Declare @Val_ArticoloSottogruppo								Varchar(10)
		Declare @Val_ArticoloCategoria								Varchar(10)
		Declare @Val_ArticoloClasse									Varchar(10)
		Declare @Val_ArticoloSottoclasse								Varchar(10)
		Declare @Val_Listino												Varchar(10)
		Declare @Val_ListinoRevisione									Varchar(10)
		Declare @Val_ListinoArticolo									Varchar(10)
		Declare @Val_ListinoScaglione									Varchar(10)

		Declare @Val_Cliente_ArticoloFamiglia 						Varchar(10)
		Declare @Val_Cliente_ArticoloGruppo							Varchar(10)
		Declare @Val_Cliente_ArticoloSottogruppo					Varchar(10)
		Declare @Val_Articolo_ClienteTutti							Varchar(10)
		Declare @Val_Articolo_ClienteFamiglia						Varchar(10)
		Declare @Val_Articolo_ClienteGruppo							Varchar(10)
		Declare @Val_Articolo_ClienteSottogruppo					Varchar(10)
		Declare @Val_Articolo_Cliente								Varchar(10)
		Declare @Val_ArticoloFamiglia_ClienteTutti				Varchar(10)
		Declare @Val_ArticoloFamiglia_ClienteFamiglia			Varchar(10)
		Declare @Val_ArticoloFamiglia_ClienteGruppo				Varchar(10)
		Declare @Val_ArticoloFamiglia_ClienteSottogruppo		Varchar(10)
		Declare @Val_ArticoloGruppo_ClienteTutti					Varchar(10)
		Declare @Val_ArticoloGruppo_ClienteFamiglia				Varchar(10)
		Declare @Val_ArticoloGruppo_ClienteGruppo					Varchar(10)
		Declare @Val_ArticoloGruppo_ClienteSottogruppo			Varchar(10)
		Declare @Val_ArticoloSottogruppo_ClienteTutti			Varchar(10)
		Declare @Val_ArticoloSottogruppo_ClienteFamiglia		Varchar(10)
		Declare @Val_ArticoloSottogruppo_ClienteGruppo			Varchar(10)
		Declare @Val_ArticoloSottogruppo_ClienteSottogruppo	Varchar(10)

		--------------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------------
		-- Sconti legati al cliente

		If Patindex('%CLIENTE[^_]%', @Formula) > 0 And 
			@Cd_CF Is Not Null
			Select 
				@CFGruppoInitialized 	= 1,
				@Cd_CFGruppo1				= CF.Cd_CFGruppo1,
				@Cd_CFGruppo2				= CF.Cd_CFGruppo2,
				@Cd_CFGruppo3				= CF.Cd_CFGruppo3,
				@Val_Cliente				= CF.Sconto,
				@Val_ClienteFamiglia		= G1.Sconto,
				@Val_ClienteGruppo		= G2.Sconto,
				@Val_ClienteSottogruppo	= G3.Sconto,
				@Val_ClienteCategoria	= C1.Sconto,
				@Val_ClienteClasse		= C2.Sconto,
				@Val_ClienteSottoclasse	= C3.Sconto
			From CF
				Left Outer Join CFGruppo3 G3 On CF.Cd_CFGruppo1 = G3.Cd_CFGruppo1 And CF.Cd_CFGruppo2 = G3.Cd_CFGruppo2 And CF.Cd_CFGruppo3 = G3.Cd_CFGruppo3
				Left Outer Join CFGruppo2 G2 On CF.Cd_CFGruppo1 = G2.Cd_CFGruppo1 And CF.Cd_CFGruppo2 = G2.Cd_CFGruppo2
				Left Outer Join CFGruppo1 G1 On CF.Cd_CFGruppo1 = G1.Cd_CFGruppo1
				Left Outer Join CFClasse3 C3 On CF.Cd_CFClasse1 = C3.Cd_CFClasse1 And CF.Cd_CFClasse2 = C3.Cd_CFClasse2 And CF.Cd_CFClasse3 = C3.Cd_CFClasse3
				Left Outer Join CFClasse2 C2 On CF.Cd_CFClasse1 = C2.Cd_CFClasse1 And CF.Cd_CFClasse2 = C2.Cd_CFClasse2
				Left Outer Join CFClasse1 C1 On CF.Cd_CFClasse1 = C1.Cd_CFClasse1
			Where Cd_CF = @Cd_CF

		--------------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------------
		-- Sconti legati all'articolo

		If Patindex('%ARTICOLO[^_]%', @Formula) > 0 And 
			@Cd_AR Is Not Null
			Select 
				@ARGruppoInitialized 		= 1,
				@Cd_ARGruppo1					= AR.Cd_ARGruppo1,
				@Cd_ARGruppo2					= AR.Cd_ARGruppo2,
				@Cd_ARGruppo3					= AR.Cd_ARGruppo3,
				@Val_Articolo					= AR.Sconto,
				@Val_ArticoloFamiglia		= G1.Sconto,
				@Val_ArticoloGruppo			= G2.Sconto,
				@Val_ArticoloSottogruppo	= G3.Sconto,
				@Val_ArticoloCategoria		= C1.Sconto,
				@Val_ArticoloClasse			= C2.Sconto,
				@Val_ArticoloSottoclasse	= C3.Sconto
			From AR
				Left Outer Join ARGruppo3 G3 On AR.Cd_ARGruppo1 = G3.Cd_ARGruppo1 And AR.Cd_ARGruppo2 = G3.Cd_ARGruppo2 And AR.Cd_ARGruppo3 = G3.Cd_ARGruppo3
				Left Outer Join ARGruppo2 G2 On AR.Cd_ARGruppo1 = G2.Cd_ARGruppo1 And AR.Cd_ARGruppo2 = G2.Cd_ARGruppo2
				Left Outer Join ARGruppo1 G1 On AR.Cd_ARGruppo1 = G1.Cd_ARGruppo1
				Left Outer Join ARClasse3 C3 On AR.Cd_ARClasse1 = C3.Cd_ARClasse1 And AR.Cd_ARClasse2 = C3.Cd_ARClasse2 And AR.Cd_ARClasse3 = C3.Cd_ARClasse3
				Left Outer Join ARClasse2 C2 On AR.Cd_ARClasse1 = C2.Cd_ARClasse1 And AR.Cd_ARClasse2 = C2.Cd_ARClasse2
				Left Outer Join ARClasse1 C1 On AR.Cd_ARClasse1 = C1.Cd_ARClasse1
			Where Cd_AR = @Cd_AR
			
		--------------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------------
		-- Sconti legati al listino

		If Patindex('%LISTINO%', @Formula) > 0 And 
			(@Id_LSArticolo > 0 Or @Id_LSScaglione > 0) 
		Begin
			--	'Listino'
			--	'ListinoRevisione'
			--	'ListinoArticolo'
			--	'ListinoScaglione'

			If Patindex('%LISTINOSCAGLIONE%', @Formula) > 0 And @Id_LSScaglione > 0
				Select
					@Id_LSArticolo        = Id_LSArticolo,
					@Val_ListinoScaglione = Sconto  
				From LSScaglione
				Where Id_LSScaglione = @Id_LSScaglione

			If @Id_LSArticolo Is Null And @Id_LSScaglione Is Not Null 
				Select 
					@Id_LSArticolo = Id_LSArticolo 
				From LSScaglione 
				Where @Id_LSArticolo = Id_LSArticolo

			Select
				@Val_Listino				= L.Sconto,
				@Val_ListinoRevisione 	= R.Sconto,
				@Val_ListinoArticolo  	= A.Sconto
			From		     LSArticolo  A 
				Inner Join LSRevisione R On A.Id_LSRevisione = R.Id_LSRevisione
				Inner Join LS          L On R.Cd_LS = L.Cd_LS
			Where A.Id_LSArticolo = @Id_LSArticolo
		End

		--------------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------------
		-- Prima di ricercare gli sconti nelle tabelle di combianazioni LSScXXXX, valorizzo le variabili
		-- relative ai codice Famiglia, Gruppo, Sottogruppo qualora servano e non siano già state inizializzate

		If Patindex('%Articolo[FGS]%', @Formula) > 0 And 
			@ARGruppoInitialized = 0 And 
			@Cd_AR Is Not Null
			Select
				@Cd_ARGruppo1 = Cd_ARGruppo1,
				@Cd_ARGruppo2 = Cd_ARGruppo2,
				@Cd_ARGruppo3 = Cd_ARGruppo3
			From AR
			Where Cd_AR = @Cd_AR

		If Patindex('%Cliente[FGS]%', @Formula) > 0 And 
			@CFGruppoInitialized = 0 And 
			@Cd_CF Is Not Null
			Select
				@Cd_CFGruppo1 = Cd_CFGruppo1,
				@Cd_CFGruppo2 = Cd_CFGruppo2,
				@Cd_CFGruppo3 = Cd_CFGruppo3
			From CF
			Where Cd_CF = @Cd_CF

		--------------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------------
		-- Sconti	legati a Cliente/ArticoloFamiglia
		--										 Cliente/ArticoloGruppo
		--										 Cliente/ArticoloSottogruppo

		If Patindex('%Cliente_ArticoloFamiglia%', @Formula) > 0 And 
			@Cd_CF 			Is Not Null And 
			@Cd_ARGruppo1 	Is Not Null
			Select Top 1
				@Val_Cliente_ArticoloFamiglia	= Sconto  
			From LSScCFARGruppo
			Where 
				Cd_CF 		 = @Cd_CF			And
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
				Cd_ARGruppo2 Is Null				And
				Cd_ARGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%Cliente_ArticoloGruppo%', @Formula) > 0 And 
			@Cd_CF 			Is Not Null And 
			@Cd_ARGruppo1 	Is Not Null And 
			@Cd_ARGruppo2 	Is Not Null
			Select Top 1
				@Val_Cliente_ArticoloGruppo = Sconto  
			From LSScCFARGruppo
			Where 
				Cd_CF 		 = @Cd_CF 			And
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
				Cd_ARGruppo2 = @Cd_ARGruppo2  And
				Cd_ARGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%Cliente_ArticoloSottogruppo%', @Formula) > 0 And 
			@Cd_CF 			Is Not Null And 
			@Cd_ARGruppo1 	Is Not Null And 
			@Cd_ARGruppo2 	Is Not Null And 
			@Cd_ARGruppo3 	Is Not Null
			Select Top 1
				@Val_Cliente_ArticoloSottogruppo	= Sconto  
			From LSScCFARGruppo
			Where 
				Cd_CF 		 = @Cd_CF			And
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
				Cd_ARGruppo2 = @Cd_ARGruppo2	And
				Cd_ARGruppo3 = @Cd_ARGruppo3  And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		--------------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------------
		-- Sconti legati a Articolo/ClienteTutti
		--										 Articolo/ClienteFamiglia
		--										 Articolo/ClienteGruppo
		--										 Articolo/ClienteSottogruppo
		--										 Articolo/Cliente

		If Patindex('%Articolo_ClienteTutti%', @Formula) > 0 And 
			@Cd_AR 		  Is Not Null
			Select Top 1
				@Val_Articolo_ClienteTutti	= Sconto  
			From LSScARCFGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_AR 		 = @Cd_AR			And
				Cd_CFGruppo1 Is Null				And
				Cd_CFGruppo2 Is Null				And
				Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%Articolo_ClienteFamiglia%', @Formula) > 0 And 
			@Cd_AR 		  Is Not Null And 
			@Cd_CFGruppo1 Is Not Null
			Select Top 1
				@Val_Articolo_ClienteFamiglia	= Sconto  
			From LSScARCFGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_AR 		 = @Cd_AR			And
				Cd_CFGruppo1 = @Cd_CFGruppo1	And
				Cd_CFGruppo2 Is Null				And
				Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%Articolo_ClienteGruppo%', @Formula) > 0 And 
			@Cd_AR 		  Is Not Null And 
			@Cd_CFGruppo1 Is Not Null And 
			@Cd_CFGruppo2 Is Not Null
			Select Top 1
				@Val_Articolo_ClienteGruppo	= Sconto  
			From LSScARCFGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_AR 		 = @Cd_AR 			And
				Cd_CFGruppo1 = @Cd_CFGruppo1	And
				Cd_CFGruppo2 = @Cd_CFGruppo2  And
				Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%Articolo_ClienteSottogruppo%', @Formula) > 0 And 
			@Cd_AR 		  Is Not Null And 
			@Cd_CFGruppo1 Is Not Null And 
			@Cd_CFGruppo2 Is Not Null And 
			@Cd_CFGruppo3 Is Not Null
			Select Top 1
				@Val_Articolo_ClienteSottogruppo	= Sconto  
			From LSScARCFGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_AR 		 = @Cd_AR 			And
				Cd_CFGruppo1 = @Cd_CFGruppo1	And
				Cd_CFGruppo2 = @Cd_CFGruppo2  And
				Cd_CFGruppo3 = @Cd_CFGruppo3	And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%Articolo_Cliente%', @Formula) > 0  And 
            @Cd_AR	Is Not Null And 
            @Cd_CF	Is Not Null
            Select Top 1
				@Val_Articolo_Cliente = Sconto
            From LSScARCFGruppo
            Where
				Tipo & 1 <> 0						And
				Cd_AR = @Cd_AR						And
				Cd_CF = @Cd_CF						And
				Cd_CFGruppo1 Is Null				And
				Cd_CFGruppo2 Is Null				And
				Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
            Order By
				DateDiff(day, DaData, AData)

		--------------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------------
		-- Sconti legati a ArticoloFamiglia/ClienteTutti
		--										 ArticoloFamiglia/ClienteFamiglia
		--										 ArticoloFamiglia/ClienteGruppo
		--										 ArticoloFamiglia/ClienteSottogruppo

		If Patindex('%ArticoloFamiglia_ClienteTutti%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null
			Select Top 1
				@Val_ArticoloFamiglia_ClienteTutti = Sconto  
			From LSScCFGruppoARGruppo
			Where
				Tipo & 1 <> 0						And 
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
					 Cd_ARGruppo2 Is Null				And
					 Cd_ARGruppo3 Is Null				And
				Cd_CFGruppo1 Is Null				And
					 Cd_CFGruppo2 Is Null				And
					 Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%ArticoloFamiglia_ClienteFamiglia%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null And 
			@Cd_CFGruppo1 Is Not Null
			Select Top 1
				@Val_ArticoloFamiglia_ClienteFamiglia	= Sconto  
			From LSScCFGruppoARGruppo
			Where
				Tipo & 1 <> 0						And 
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
					 Cd_ARGruppo2 Is Null				And
					 Cd_ARGruppo3 Is Null				And
				Cd_CFGruppo1 = @Cd_CFGruppo1	And
					 Cd_CFGruppo2 Is Null				And
					 Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%ArticoloFamiglia_ClienteGruppo%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null And 
			@Cd_CFGruppo1 Is Not Null And 
			@Cd_CFGruppo2 Is Not Null
			Select Top 1
				@Val_ArticoloFamiglia_ClienteGruppo	= Sconto  
			From LSScCFGruppoARGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
					 Cd_ARGruppo2 Is Null				And
					 Cd_ARGruppo3 Is Null				And
				Cd_CFGruppo1 = @Cd_CFGruppo1	And
				Cd_CFGruppo2 = @Cd_CFGruppo2	And
				Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%ArticoloFamiglia_ClienteSottogruppo%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null And 
			@Cd_CFGruppo1 Is Not Null And 
			@Cd_CFGruppo2 Is Not Null And 
			@Cd_CFGruppo3 Is Not Null
			Select Top 1
				@Val_ArticoloFamiglia_ClienteSottogruppo	= Sconto  
			From LSScCFGruppoARGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
					 Cd_ARGruppo2 Is Null				And
					 Cd_ARGruppo3 Is Null				And
				Cd_CFGruppo1 = @Cd_CFGruppo1	And
				Cd_CFGruppo2 = @Cd_CFGruppo2	And
				Cd_CFGruppo3 = @Cd_CFGruppo3  And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		--------------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------------
		-- Sconti legati a ArticoloGruppo/ClienteTutti
		--										 ArticoloGruppo/ClienteFamiglia
		--										 ArticoloGruppo/ClienteGruppo
		--										 ArticoloGruppo/ClienteSottogruppo

		If Patindex('%ArticoloGruppo_ClienteTutti%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null And 
			@Cd_ARGruppo2 Is Not Null
			Select Top 1
				@Val_ArticoloGruppo_ClienteTutti	= Sconto  
			From LSScCFGruppoARGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
				Cd_ARGruppo2 = @Cd_ARGruppo2	And
					 Cd_ARGruppo3 Is Null				And
				Cd_CFGruppo1 Is Null				And
				Cd_CFGruppo2 Is Null				And
				Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%ArticoloGruppo_ClienteFamiglia%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null And 
			@Cd_ARGruppo2 Is Not Null And 
			@Cd_CFGruppo1 Is Not Null
			Select Top 1
				@Val_ArticoloGruppo_ClienteFamiglia	= Sconto  
			From LSScCFGruppoARGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
				Cd_ARGruppo2 = @Cd_ARGruppo2	And
					 Cd_ARGruppo3 Is Null				And
				Cd_CFGruppo1 = @Cd_CFGruppo1	And
				Cd_CFGruppo2 Is Null				And
				Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%ArticoloGruppo_ClienteGruppo%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null And 
			@Cd_ARGruppo2 Is Not Null And 
			@Cd_CFGruppo1 Is Not Null And 
			@Cd_CFGruppo2 Is Not Null
			Select Top 1
				@Val_ArticoloGruppo_ClienteGruppo	= Sconto  
			From LSScCFGruppoARGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_ARGruppo1 = @Cd_ARGruppo1  And
				Cd_ARGruppo2 = @Cd_ARGruppo2  And
					 Cd_ARGruppo3 Is Null				And
				Cd_CFGruppo1 = @Cd_CFGruppo1  And
				Cd_CFGruppo2 = @Cd_CFGruppo2  And
				Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%ArticoloGruppo_ClienteSottogruppo%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null And 
			@Cd_ARGruppo2 Is Not Null And 
			@Cd_CFGruppo1 Is Not Null And 
			@Cd_CFGruppo2 Is Not Null And 
			@Cd_CFGruppo3 Is Not Null
			Select Top 1
				@Val_ArticoloGruppo_ClienteSottogruppo	= Sconto  
			From LSScCFGruppoARGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_ARGruppo1 = @Cd_ARGruppo1  And
				Cd_ARGruppo2 = @Cd_ARGruppo2  And
					 Cd_ARGruppo3 Is Null				And
				Cd_CFGruppo1 = @Cd_CFGruppo1  And
				Cd_CFGruppo2 = @Cd_CFGruppo2  And
				Cd_CFGruppo3 = @Cd_CFGruppo3	And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		--------------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------------
		-- Sconti legati a ArticoloSottogruppo/ClienteTutti
		--										 ArticoloSottogruppo/ClienteFamiglia
		--										 ArticoloSottogruppo/ClienteGruppo
		--										 ArticoloSottogruppo/ClienteSottogruppo

		If Patindex('%ArticoloSottogruppo_ClienteTutti%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null And 
			@Cd_ARGruppo2 Is Not Null And 
			@Cd_ARGruppo3 Is Not Null
			Select Top 1
				@Val_ArticoloSottogruppo_ClienteTutti = Sconto  
			From LSScCFGruppoARGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
				Cd_ARGruppo2 = @Cd_ARGruppo2	And
				Cd_ARGruppo3 = @Cd_ARGruppo3	And
				Cd_CFGruppo1 Is Null				And
				Cd_CFGruppo2 Is Null				And
				Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%ArticoloSottogruppo_ClienteFamiglia%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null And 
			@Cd_ARGruppo2 Is Not Null And 
			@Cd_ARGruppo3 Is Not Null And 
			@Cd_CFGruppo1 Is Not Null
			Select Top 1
				@Val_ArticoloSottogruppo_ClienteFamiglia	= Sconto  
			From LSScCFGruppoARGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
				Cd_ARGruppo2 = @Cd_ARGruppo2	And
				Cd_ARGruppo3 = @Cd_ARGruppo3	And
				Cd_CFGruppo1 = @Cd_CFGruppo1	And
				Cd_CFGruppo2 Is Null				And
				Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%ArticoloSottogruppo_ClienteGruppo%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null And 
			@Cd_ARGruppo2 Is Not Null And 
			@Cd_ARGruppo3 Is Not Null And 
			@Cd_CFGruppo1 Is Not Null And 
			@Cd_CFGruppo2 Is Not Null
			Select Top 1
				@Val_ArticoloSottogruppo_ClienteGruppo	= Sconto  
			From LSScCFGruppoARGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
				Cd_ARGruppo2 = @Cd_ARGruppo2	And
				Cd_ARGruppo3 = @Cd_ARGruppo3	And
				Cd_CFGruppo1 = @Cd_CFGruppo1	And
				Cd_CFGruppo2 = @Cd_CFGruppo2	And
				Cd_CFGruppo3 Is Null				And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		If Patindex('%ArticoloSottogruppo_ClienteSottogruppo%', @Formula) > 0 And 
			@Cd_ARGruppo1 Is Not Null And 
			@Cd_ARGruppo2 Is Not Null And 
			@Cd_ARGruppo3 Is Not Null And 
			@Cd_CFGruppo1 Is Not Null And 
			@Cd_CFGruppo2 Is Not Null And 
			@Cd_CFGruppo3 Is Not Null
			Select Top 1
				@Val_ArticoloSottogruppo_ClienteSottogruppo	= Sconto  
			From LSScCFGruppoARGruppo
			Where 
				Tipo & 1 <> 0						And
				Cd_ARGruppo1 = @Cd_ARGruppo1	And
				Cd_ARGruppo2 = @Cd_ARGruppo2	And
				Cd_ARGruppo3 = @Cd_ARGruppo3	And
				Cd_CFGruppo1 = @Cd_CFGruppo1	And
				Cd_CFGruppo2 = @Cd_CFGruppo2	And
				Cd_CFGruppo3 = @Cd_CFGruppo3	And
				@DataPro Between DaData And AData
			Order By 
				DateDiff(day, DaData, AData)

		--------------------------------------------------------------------------------------------------
		--------------------------------------------------------------------------------------------------

		-- Valutazione formula (protetta da criticalsection perché le axp coinvolte non sono thread-safe)

		Declare @nRetVal 	Integer
		Execute @nRetVal = Master..axp_PercStrSymb_GetMutex 500 		-- timeout di 500 ms

		If @nRetVal = 0 Begin

			Select @ValFormula = ''
			--	Raiserror('Timeout in PercStrSymb_Sync', 15, -1)	-- 443: Invalid use of 'RAISEERROR' within a function.
			--	If @@TranCount > 0 Rollback Tran							-- 443: Invalid use of 'ROLLBACK TRANSACTION' within a function.

		End Else	Begin

			Exec Master..axp_PercStrSymb_Init 1 -- cumulativo
			
			Exec Master..axp_PercStrSymb_SetVar 'Cliente', 																@Val_Cliente
			Exec Master..axp_PercStrSymb_SetVar 'ClienteFamiglia', 												@Val_ClienteFamiglia
			Exec Master..axp_PercStrSymb_SetVar 'ClienteGruppo', 													@Val_ClienteGruppo
			Exec Master..axp_PercStrSymb_SetVar 'ClienteSottogruppo', 										@Val_ClienteSottogruppo
			Exec Master..axp_PercStrSymb_SetVar 'ClienteCategoria', 											@Val_ClienteCategoria
			Exec Master..axp_PercStrSymb_SetVar 'ClienteClasse', 													@Val_ClienteClasse
			Exec Master..axp_PercStrSymb_SetVar 'ClienteSottoclasse',											@Val_ClienteSottoclasse
			Exec Master..axp_PercStrSymb_SetVar 'Articolo', 															@Val_Articolo
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloFamiglia',												@Val_ArticoloFamiglia
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloGruppo', 												@Val_ArticoloGruppo
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloSottogruppo', 										@Val_ArticoloSottogruppo
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloCategoria', 											@Val_ArticoloCategoria
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloClasse', 												@Val_ArticoloClasse
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloSottoclasse',										@Val_ArticoloSottoclasse
			Exec Master..axp_PercStrSymb_SetVar 'Listino', 																@Val_Listino
			Exec Master..axp_PercStrSymb_SetVar 'ListinoRevisione',												@Val_ListinoRevisione
			Exec Master..axp_PercStrSymb_SetVar 'ListinoArticolo', 												@Val_ListinoArticolo
			Exec Master..axp_PercStrSymb_SetVar 'ListinoScaglione',												@Val_ListinoScaglione
			Exec Master..axp_PercStrSymb_SetVar 'Cliente_ArticoloFamiglia',								@Val_Cliente_ArticoloFamiglia
			Exec Master..axp_PercStrSymb_SetVar 'Cliente_ArticoloGruppo',									@Val_Cliente_ArticoloGruppo
			Exec Master..axp_PercStrSymb_SetVar 'Cliente_ArticoloSottogruppo',						@Val_Cliente_ArticoloSottogruppo
			Exec Master..axp_PercStrSymb_SetVar 'Articolo_ClienteTutti',									@Val_Articolo_ClienteTutti
			Exec Master..axp_PercStrSymb_SetVar 'Articolo_ClienteFamiglia',								@Val_Articolo_ClienteFamiglia
			Exec Master..axp_PercStrSymb_SetVar 'Articolo_ClienteGruppo',									@Val_Articolo_ClienteGruppo
			Exec Master..axp_PercStrSymb_SetVar 'Articolo_ClienteSottogruppo',						@Val_Articolo_ClienteSottogruppo
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloFamiglia_ClienteTutti',					@Val_ArticoloFamiglia_ClienteTutti
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloFamiglia_ClienteFamiglia',				@Val_ArticoloFamiglia_ClienteFamiglia
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloFamiglia_ClienteGruppo',					@Val_ArticoloFamiglia_ClienteGruppo
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloFamiglia_ClienteSottogruppo',		@Val_ArticoloFamiglia_ClienteSottogruppo
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloGruppo_ClienteTutti',						@Val_ArticoloGruppo_ClienteTutti
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloGruppo_ClienteFamiglia',					@Val_ArticoloGruppo_ClienteFamiglia
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloGruppo_ClienteGruppo',						@Val_ArticoloGruppo_ClienteGruppo
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloGruppo_ClienteSottogruppo',			@Val_ArticoloGruppo_ClienteSottogruppo
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloSottogruppo_ClienteTutti',				@Val_ArticoloSottogruppo_ClienteTutti
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloSottogruppo_ClienteFamiglia',		@Val_ArticoloSottogruppo_ClienteFamiglia
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloSottogruppo_ClienteGruppo',			@Val_ArticoloSottogruppo_ClienteGruppo
			Exec Master..axp_PercStrSymb_SetVar 'ArticoloSottogruppo_ClienteSottogruppo',	@Val_ArticoloSottogruppo_ClienteSottogruppo
		
			Exec Master..axp_PercStrSymb_Eval @Formula,    @ValFormula Output
			Exec Master..axp_PercStrNormalize @ValFormula, @ValFormula Output	-- Normalizzo per togliere eventuale segno + davanti
		
			Exec @nRetVal = Master..axp_PercStrSymb_ReleaseMutex
		End

		Select @Sconto 		 	= @ValFormula

	----------------------------------------------------------------
	Fine_Funzione:

		Return @ValFormula

	End
GO
-- Ritorna lo sconto sotto forma di tabella
CREATE FUNCTION [dbo].[xGAC_GetSconto] (
	@Cd_Preventivo	Varchar(10),
	@Cd_CF					Char(7),
	@DataDoc					DateTime,
	@Cd_LS_1					Char(7),
	@Cd_AR					Varchar(20),
	@Qta						Numeric(18,8),
	@Prezzo					Numeric(18,6),
	@Id_LSArticolo	   	Integer,
	@Id_LSScaglione		Integer,
	@Formula		Varchar(1000)
)
Returns @RetTbl Table (
      Sconto    Varchar(20)
)
AS
	Begin
				-- dichiarazione variabili per valori di ritorno
				Declare     
							@Sconto      Varchar(20)
	 
				Select @Sconto = dbo.xafn_GAC_GetSconto(
					@Cd_Preventivo,
					@Cd_CF,
					@DataDoc,
					@Cd_LS_1,
					@Cd_AR,
					@Qta,
					@Prezzo,
					@Id_LSArticolo,
					@Id_LSScaglione,
					@Formula
				)
	----------------------------------------------------------------
	Fine_Funzione:
				Insert @RetTbl
				Values (@Sconto)
				Return
	End
GO
-- Ritorna un progressivo (in base al tipo codice passato come parametro) per la codifica di commesse e sottocommesse
CREATE PROCEDURE [dbo].[xasp_gac_getnextnum] 
	@TipoCodice			Char(1),
	@Cd_DOCommessa		Char(10), 
	@Tipo				Char(3),
	@Anno				Varchar(4),
	@nReturn			Integer = 0 Output
As
	-- Return:
	--		> 0: Progressivo 
	--		< 0: End Failed
	--		-1: Tipo codice non specificato
	--		-2: Tipo codice non valido

	/* Test validità parametri */
	-- @@TipoCodice =	'P' - Progressivo Annuo						(solo commessa); 
	--					'Q' - Progressivo Assoluto					(solo commessa); 
	--					'V' - Progressivo per Tipo Commessa			(solo commessa);
	--					'R' - Progressivo per Tipo Sottocommessa	(solo sottocommessa);
	--					'C' - Progressivo per Commessa				(solo sottocommessa)
	IF ISNULL(@TipoCodice, '') = '' BEGIN
		SET @nReturn = -1
		RETURN @nReturn 
	END
	IF NOT (@TipoCodice = 'P' OR @TipoCodice = 'Q' OR @TipoCodice = 'V' OR @TipoCodice = 'R' OR @TipoCodice = 'C') BEGIN
		SET @nReturn = -2
		RETURN @nReturn 
	END
	--DECLARE @Anno					As Varchar(4)
	DECLARE @Prog					As Int
	DECLARE @Prog_Lunghezza			As Smallint
	DECLARE @Prog_Sequenza			As Smallint
	DECLARE @Prog_Start				As Smallint
	DECLARE @Filtro_Lunghezza		As Smallint
	DECLARE @Filtro_Sequenza		As Smallint
	DECLARE @Filtro_Start			As Smallint
	DECLARE @DOSC_Lunghezza			As Smallint
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'P' OR @TipoCodice = 'Q' OR @TipoCodice = 'V' -- Commessa
		Begin
			-- Recupera la lunghezza e la sequenza del progressivo all'interno del codificatore commessa
			Select	@Prog_Lunghezza	= Lunghezza,
					@Prog_Sequenza	= Sequenza
				From	xImpostazioneCC
				Where	TipoCodice	= @TipoCodice
			-- Recupera la posizione del primo carattere del progressivo all'interno del codificatore commessa
			If @Prog_Sequenza = 1 
				Set	@Prog_Start = 1
			Else
				Begin
					Select	@Prog_Start = SUM(Lunghezza)
						From	xImpostazioneCC
						Where	Sequenza < @Prog_Sequenza
					
					Set @Prog_Start = @Prog_Start + 1 	
				End
		End
	Else	-- SottoCommessa
		Begin
			-- Recupera la lunghezza totale del codificatore sottocommessa
			Select	@DOSC_Lunghezza = SUM(Lunghezza)
				From	xImpostazioneCS
			-- Recupera la lunghezza e la sequenza del progressivo all'interno del codificatore sottocommessa
			Select	@Prog_Lunghezza	= Lunghezza,
					@Prog_Sequenza	= Sequenza
				From	xImpostazioneCS
				Where	TipoCodice	= @TipoCodice
			-- Recupera la posizione del primo carattere del progressivo all'interno del codificatore sottocommessa
			If @Prog_Sequenza = 1 
				Set	@Prog_Start = 1
			Else
				Begin
					Select	@Prog_Start = SUM(Lunghezza)
						From	xImpostazioneCS
						Where	Sequenza < @Prog_Sequenza
					
					Set @Prog_Start = @Prog_Start + 1 	
				End	
		End	
	---------------------------------------------------------------------------------------------------------
	-- Annuo
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'P'
		Begin
			-- Recupera la lunghezza e la sequenza dell'anno all'interno del codificatore
			Select	@Filtro_Lunghezza	= Lunghezza,
					@Filtro_Sequenza	= Sequenza
				From	xImpostazioneCC
				Where	TipoCodice	= 'A'
			-- Formatta l'anno in base alla lunghezza configurata	
			Set @Anno = RIGHT(@Anno, @Filtro_Lunghezza)
			-- Recupera la posizione del primo carattere dell'anno all'interno del codificatore
			If @Filtro_Sequenza = 1 
				Set	@Filtro_Start = 1
			Else
				Begin
					Select	@Filtro_Start = SUM(Lunghezza)
						From	xImpostazioneCC
						Where	Sequenza < @Filtro_Sequenza
					
					Set @Filtro_Start = @Filtro_Start + 1 	
				End	
			-- Recupera il valore max raggiunto dal progressivo annuo
			Select	@Prog = ISNULL(MAX(CONVERT(Int, REPLACE(SUBSTRING(Cd_DOCommessa, @Prog_Start, @Prog_Lunghezza), '.', ''))), 0)
				From	DOCommessa
				Where	ISNUMERIC(SUBSTRING(Cd_DOCommessa, @Prog_Start, @Prog_Lunghezza)) = 1 And SUBSTRING(Cd_DOCommessa, @Filtro_Start, @Filtro_Lunghezza) = @Anno
		End
	---------------------------------------------------------------------------------------------------------
	-- Assoluto
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'Q'
		Begin
			-- Recupera il valore max raggiunto dal progressivo assoluto
			Select	@Prog = ISNULL(MAX(CONVERT(Int, REPLACE(SUBSTRING(Cd_DOCommessa, @Prog_Start, @Prog_Lunghezza), '.', ''))), 0)
				From	DOCommessa
				Where	ISNUMERIC(SUBSTRING(Cd_DOCommessa, @Prog_Start, @Prog_Lunghezza)) = 1
		End
	---------------------------------------------------------------------------------------------------------
	-- Per Tipo Commessa
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'V'
		Begin
			-- Recupera la lunghezza e la sequenza del tipo all'interno del codificatore
			Select	@Filtro_Lunghezza	= Lunghezza,
					@Filtro_Sequenza	= Sequenza
				From	xImpostazioneCC
				Where	TipoCodice	= 'S'
			-- Recupera la posizione del primo carattere del tipo all'interno del codificatore
			If @Filtro_Sequenza = 1 
				Set	@Filtro_Start = 1
			Else
				Begin
					Select	@Filtro_Start = SUM(Lunghezza)
						From	xImpostazioneCC
						Where	Sequenza < @Filtro_Sequenza
					
					Set @Filtro_Start = @Filtro_Start + 1 	
				End	
			-- Recupera il valore max raggiunto dal progressivo per tipo
			Select	@Prog = ISNULL(MAX(CONVERT(Int, REPLACE(SUBSTRING(Cd_DOCommessa, @Prog_Start, @Prog_Lunghezza), '.', ''))), 0)
				From	DOCommessa
				Where	ISNUMERIC(SUBSTRING(Cd_DOCommessa, @Prog_Start, @Prog_Lunghezza)) = 1 And SUBSTRING(Cd_DOCommessa, @Filtro_Start, @Filtro_Lunghezza) = @Tipo
		End
	---------------------------------------------------------------------------------------------------------
	-- Per Tipo Sottocommessa
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'R'
		Begin
			-- Recupera la lunghezza e la sequenza del tipo all'interno del codificatore
			Select	@Filtro_Lunghezza	= Lunghezza,
					@Filtro_Sequenza	= Sequenza
				From	xImpostazioneCS
				Where	TipoCodice	= 'T'
			-- Recupera la posizione del primo carattere del tipo all'interno del codificatore
			If @Filtro_Sequenza = 1 
				Set	@Filtro_Start = 1
			Else
				Begin
					Select	@Filtro_Start = SUM(Lunghezza)
						From	xImpostazioneCS
						Where	Sequenza < @Filtro_Sequenza
					
					Set @Filtro_Start = @Filtro_Start + 1 	
				End	
			-- Recupera il valore max raggiunto dal progressivo per tipo
			Select	@Prog = ISNULL(MAX(CONVERT(Int, REPLACE(SUBSTRING(RIGHT(RTRIM(LTRIM(Cd_DOSottocommessa)), @DOSC_Lunghezza), @Prog_Start, @Prog_Lunghezza), '.', ''))), 0)
				From	DOSottoCommessa
				Where	ISNUMERIC(SUBSTRING(RIGHT(RTRIM(LTRIM(Cd_DOSottocommessa)), @DOSC_Lunghezza), @Prog_Start, @Prog_Lunghezza)) = 1
							And SUBSTRING(RIGHT(RTRIM(LTRIM(Cd_DOSottocommessa)), @DOSC_Lunghezza), @Filtro_Start, @Filtro_Lunghezza) = @Tipo
		End
	---------------------------------------------------------------------------------------------------------
	-- Per Commessa
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'C'
		Begin
			-- Recupera il valore max raggiunto dal progressivo per commessa
			Select	@Prog = ISNULL(MAX(CONVERT(Int, REPLACE(SUBSTRING(RIGHT(RTRIM(LTRIM(Cd_DOSottocommessa)), @DOSC_Lunghezza), @Prog_Start, @Prog_Lunghezza), '.', ''))), 0)
				From	DOSottoCommessa
				Where	ISNUMERIC(SUBSTRING(RIGHT(RTRIM(LTRIM(Cd_DOSottocommessa)), @DOSC_Lunghezza), @Prog_Start, @Prog_Lunghezza)) = 1
							And SUBSTRING(Cd_DOSottocommessa, 1, LEN(@Cd_DOCommessa)) = @Cd_DOCommessa
		End
	---------------------------------------------------------------------------------------------------------
	-- Fine
	---------------------------------------------------------------------------------------------------------
	Set @nReturn = @Prog + 1
	Return @nReturn
	---------------------------------------------------------------------------------------------------------
GO
-- Aggiornamento tabella di appoggio xMM1
CREATE PROCEDURE [dbo].[xasp_gac_xmm1_fill] 
	@Id_Preventivo	Integer, 
	@UserName				Varchar(48), 
	@Decimali				Integer, 
	@DecimaliPrzUn	Integer, 
	@PersDirectory	Varchar(255), 
	@nReturn				Integer = 0 Output
As
	-- Dichiarazione variabili
	DECLARE @ImgBlank		as Varchar(255)
	DECLARE @RowsCount	as Int

	-- Settaggio variabili 
	SET @ImgBlank = RTRIM(LTRIM(@PersDirectory)) + '\MMImages\Blank.jpg' -- Nome file da utilizzare sempre come immagine vuota
	
  -- Pulizia tabella per utente corrente
	Delete From xMM1 Where UserName = @UserName

	-- Inserimento dati testa + materiali
	EXECUTE('INSERT INTO [xMM1]
           ([UserName],[TipoRiga],[Id_Preventivo],[Cd_Preventivo],[DescrizionePreventivo]
           ,[Cd_PreventivoFamiglia],[DescrizioneFamiglia]
           ,[TipoPreventivo],[Cd_CF],[DescrizioneCF],[Cd_VL],[DescrizioneVL]
           ,[InizioValidita],[Cambio],[ImportoTotaleV]
           ,[Template],[Cd_Template],[NotePreventivo]
           ,[Cd_ARGruppo1],[Cd_ARGruppo2],[Cd_ARGruppo3]
           ,[Cd_AR],[Descrizione],[Cd_ARMisura],[Quantita]
           ,[Picture1OriginalFile]
           ,[Cd_PrAttivita],[Ore],[ModelloVal]
           ,[CostoUnitarioLordoV],[ScontoAcquisto]
           ,[CostoUnitarioV],[Ricarica]
           ,[CostoUnitarioRicaricatoLordoV],[ScontoCostoRicaricato]
           ,[CostoUnitarioRicaricatoV]
           ,[CostoTotaleV]
           ,[MargineCostoV],[MargineCostoPerc]
           ,[RicavoUnitarioV],[Sconto]
           ,[RicavoUnitarioScontatoV]
           ,[RicavoTotaleV]
           ,[MargineRicavoV],[MargineRicavoPerc]
					 ,[Indirizzo],[Localita],[Cap],[Cd_Provincia],[Cd_Nazione],[PartitaIva]
           ,[CodiceFiscale],[Telefono],[Telefono2],[Cellulare],[Cellulare2]
           ,[Fax],[Fax2],[Email],[URL],[PersDaContattare],[PersDaContattare2]
					 ,[ImportoTotaleE]
           ,[CostoTotaleE]
           ,[MargineCostoE]
           ,[RicavoTotaleE]
           ,[MargineRicavoE])
	SELECT  ''' + @UserName + ''', 1, xPreventivo.Id_Preventivo, xPreventivo.Cd_Preventivo, xPreventivo.Descrizione AS DescrizionePreventivo, 
					xPreventivo.Cd_PreventivoFamiglia, xPreventivoFamiglia.Descrizione AS DescrizioneFamiglia,
					xPreventivo.TipoPreventivo, xPreventivo.Cd_CF, CF.Descrizione AS DescrizioneCF, xPreventivo.Cd_VL, VL.Descrizione AS DescrizioneVL,
					xPreventivo.InizioValidita, xPreventivo.Cambio, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivo.ImportoTotaleV)), 
					xPreventivo.Template, xPreventivo.Cd_Template, xPreventivo.NotePreventivo, 
					xPreventivoMateriale.Cd_ARGruppo1, xPreventivoMateriale.Cd_ARGruppo2, xPreventivoMateriale.Cd_ARGruppo3, 
					xPreventivoMateriale.Cd_AR, AR.Descrizione, xPreventivoMateriale.Cd_ARMisura, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoMateriale.Quantita)), 
					Picture1OriginalFile = CASE WHEN LEN(CONVERT(Varchar(255),Picture1OriginalFile)) > 3 THEN RIGHT(CONVERT(Varchar(255), Picture1OriginalFile), (LEN(CONVERT(Varchar(255),Picture1OriginalFile))) - (CHARINDEX('']'', Picture1OriginalFile) + 3)) ELSE ''' + @ImgBlank + ''' END,
					NULL, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), 0)), xPreventivoMateriale.ModelloVal, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoMateriale.CostoUnitarioLordoV)), xPreventivoMateriale.ScontoAcquisto, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoMateriale.CostoUnitarioV)), xPreventivoMateriale.Ricarica, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoMateriale.CostoUnitarioRicaricatoLordoV)), xPreventivoMateriale.ScontoCostoRicaricato, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoMateriale.CostoUnitarioRicaricatoV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoMateriale.CostoTotaleV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoMateriale.MargineCostoV)), xPreventivoMateriale.MargineCostoPerc, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoMateriale.RicavoUnitarioV)), xPreventivoMateriale.Sconto, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoMateriale.RicavoUnitarioScontatoV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoMateriale.RicavoTotaleV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoMateriale.MargineRicavoV)), xPreventivoMateriale.MargineRicavoPerc,
					CF.Indirizzo, CF.Localita, CF.Cap, CF.Cd_Provincia, CF.Cd_Nazione, CF.PartitaIva,
          CF.CodiceFiscale, CF.Telefono, CF.Telefono2, CF.Cellulare, CF.Cellulare2,
          CF.Fax, CF.Fax2, CF.Email, CF.URL, CF.PersDaContattare, CF.PersDaContattare2,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivo.ImportoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoMateriale.CostoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoMateriale.MargineCostoE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoMateriale.RicavoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoMateriale.MargineRicavoE))
	FROM    xPreventivoMateriale 
					INNER JOIN xPreventivo ON xPreventivoMateriale.Id_Preventivo = xPreventivo.Id_Preventivo
					INNER JOIN xPreventivoFamiglia ON xPreventivo.Cd_PreventivoFamiglia = xPreventivoFamiglia.Cd_PreventivoFamiglia
					INNER JOIN CFEx CF ON xPreventivo.Cd_CF = CF.Cd_CF
					INNER JOIN VL ON xPreventivo.Cd_VL = VL.Cd_VL
					INNER JOIN AR ON xPreventivoMateriale.Cd_AR = AR.Cd_AR
					LEFT	JOIN ARGruppo1 ON AR.Cd_ARGruppo1 = ARGruppo1.Cd_ARGruppo1
					LEFT  JOIN ARImg ON AR.Cd_AR = ARImg.Cd_AR And ARImg.Riga = 1
	WHERE		xPreventivo.Id_Preventivo = ' + @Id_Preventivo + ' ' +
	'ORDER BY ARGruppo1.xOrdinamentoStampa, xPreventivoMateriale.Sequenza')

	-- Inserimento di una riga con i totali materiali
	EXECUTE('INSERT INTO [xMM1]
						 ([UserName],[TipoRiga],[Id_Preventivo]
						 ,[Quantita],[CostoTotaleV],[RicavoTotaleV])
	SELECT  ''' + @UserName + ''', 2, xPreventivo.Id_Preventivo,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoMateriale.Quantita))) AS Quantita, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoMateriale.CostoTotaleV))) AS CostoTotaleV, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoMateriale.RicavoTotaleV))) AS RicavoTotaleV
	FROM    xPreventivoMateriale 
					INNER JOIN xPreventivo ON xPreventivoMateriale.Id_Preventivo = xPreventivo.Id_Preventivo
	WHERE		xPreventivo.Id_Preventivo = ' + @Id_Preventivo + 
	' GROUP BY xPreventivo.Id_Preventivo')
	
	-- Inserimento dati testa + attività
	EXECUTE('INSERT INTO [xMM1]
           ([UserName],[TipoRiga],[Id_Preventivo],[Cd_Preventivo],[DescrizionePreventivo]
           ,[Cd_PreventivoFamiglia],[DescrizioneFamiglia]
           ,[TipoPreventivo],[Cd_CF],[DescrizioneCF],[Cd_VL],[DescrizioneVL]
           ,[InizioValidita],[Cambio],[ImportoTotaleV]
           ,[Template],[Cd_Template],[NotePreventivo]
           ,[Cd_ARGruppo1],[Cd_ARGruppo2],[Cd_ARGruppo3]
           ,[Cd_AR],[Descrizione],[Cd_ARMisura],[Quantita]
           ,[Picture1OriginalFile]
           ,[Cd_PrAttivita],[Ore],[ModelloVal]
           ,[CostoUnitarioLordoV],[ScontoAcquisto]
           ,[CostoUnitarioV],[Ricarica]
           ,[CostoUnitarioRicaricatoLordoV],[ScontoCostoRicaricato]
           ,[CostoUnitarioRicaricatoV]
           ,[CostoTotaleV]
           ,[MargineCostoV],[MargineCostoPerc]
           ,[RicavoUnitarioV],[Sconto]
           ,[RicavoUnitarioScontatoV]
           ,[RicavoTotaleV]
           ,[MargineRicavoV],[MargineRicavoPerc]
					 ,[Indirizzo],[Localita],[Cap],[Cd_Provincia],[Cd_Nazione],[PartitaIva]
           ,[CodiceFiscale],[Telefono],[Telefono2],[Cellulare],[Cellulare2]
           ,[Fax],[Fax2],[Email],[URL],[PersDaContattare],[PersDaContattare2]
					 ,[ImportoTotaleE]
           ,[CostoTotaleE]
           ,[MargineCostoE]
           ,[RicavoTotaleE]
           ,[MargineRicavoE])
	SELECT  ''' + @UserName + ''', 3, xPreventivo.Id_Preventivo, xPreventivo.Cd_Preventivo, xPreventivo.Descrizione AS DescrizionePreventivo, 
					xPreventivo.Cd_PreventivoFamiglia, xPreventivoFamiglia.Descrizione AS DescrizioneFamiglia,
					xPreventivo.TipoPreventivo, xPreventivo.Cd_CF, CF.Descrizione AS DescrizioneCF, xPreventivo.Cd_VL, VL.Descrizione AS DescrizioneVL,
					xPreventivo.InizioValidita, xPreventivo.Cambio, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivo.ImportoTotaleV)), 
					xPreventivo.Template, xPreventivo.Cd_Template, xPreventivo.NotePreventivo, 
					NULL, NULL, NULL, 
					NULL, xPreventivoFase.Descrizione, NULL, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), 0)), 
					'''',
					xPreventivoFase.Cd_PrAttivita, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoFase.Ore)), xPreventivoFase.ModelloVal, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoFase.CostoUnitarioLordoV)), xPreventivoFase.ScontoAcquisto, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoFase.CostoUnitarioV)), xPreventivoFase.Ricarica, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoFase.CostoUnitarioRicaricatoLordoV)), xPreventivoFase.ScontoCostoRicaricato, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoFase.CostoUnitarioRicaricatoV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoFase.CostoTotaleV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoFase.MargineCostoV)), xPreventivoFase.MargineCostoPerc, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoFase.RicavoUnitarioV)), xPreventivoFase.Sconto, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoFase.RicavoUnitarioScontatoV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoFase.RicavoTotaleV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoFase.MargineRicavoV)), xPreventivoFase.MargineRicavoPerc,
					CF.Indirizzo, CF.Localita, CF.Cap, CF.Cd_Provincia, CF.Cd_Nazione, CF.PartitaIva,
          CF.CodiceFiscale, CF.Telefono, CF.Telefono2, CF.Cellulare, CF.Cellulare2,
          CF.Fax, CF.Fax2, CF.Email, CF.URL, CF.PersDaContattare, CF.PersDaContattare2,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivo.ImportoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoFase.CostoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoFase.MargineCostoE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoFase.RicavoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoFase.MargineRicavoE))
	FROM    xPreventivoFase 
					INNER JOIN xPreventivo ON xPreventivoFase.Id_Preventivo = xPreventivo.Id_Preventivo
					INNER JOIN xPreventivoFamiglia ON xPreventivo.Cd_PreventivoFamiglia = xPreventivoFamiglia.Cd_PreventivoFamiglia
					INNER JOIN CFEx CF ON xPreventivo.Cd_CF = CF.Cd_CF
					INNER JOIN VL ON xPreventivo.Cd_VL = VL.Cd_VL
					INNER	JOIN PRAttivita ON xPreventivoFase.Cd_PrAttivita = PRAttivita.Cd_PrAttivita
					LEFT	JOIN xPRAttivitaVal ON PRAttivita.Id_PRAttivita = xPRAttivitaVal.Id_PRAttivita And DefaultTipoVal = 1
					LEFT	JOIN AR ON xPRAttivitaVal.Cd_AR = AR.Cd_AR
					LEFT	JOIN ARGruppo1 ON AR.Cd_ARGruppo1 = ARGruppo1.Cd_ARGruppo1
	WHERE		xPreventivo.Id_Preventivo = ' + @Id_Preventivo + ' ' +
	'ORDER BY ARGruppo1.xOrdinamentoStampa, xPreventivoFase.Sequenza')

	-- Inserimento di una riga con i totali attività
	EXECUTE('INSERT INTO [xMM1]
						 ([UserName],[TipoRiga],[Id_Preventivo]
						 ,[Ore],[CostoTotaleV],[RicavoTotaleV])
	SELECT  ''' + @UserName + ''', 4, xPreventivo.Id_Preventivo,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoFase.Ore))) AS Ore, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoFase.CostoTotaleV))) AS CostoTotaleV, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoFase.RicavoTotaleV))) AS RicavoTotaleV
	FROM    xPreventivoFase 
					INNER JOIN xPreventivo ON xPreventivoFase.Id_Preventivo = xPreventivo.Id_Preventivo
	WHERE		xPreventivo.Id_Preventivo = ' + @Id_Preventivo +
	' GROUP BY xPreventivo.Id_Preventivo')
	
	-- Inserimento di una riga con il totale sottopreventivo
	EXECUTE('INSERT INTO [xMM1]
						 ([UserName],[TipoRiga],[Id_Preventivo], [ImportoTotaleV])
	SELECT  ''' + @UserName + ''', 5, xPreventivo.Id_Preventivo, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivo.ImportoTotaleV))
	FROM    xPreventivo
	WHERE		xPreventivo.Id_Preventivo = ' + @Id_Preventivo)

	-- Inserimento dati testa + spese
	EXECUTE('INSERT INTO [xMM1]
           ([UserName],[TipoRiga],[Id_Preventivo],[Cd_Preventivo],[DescrizionePreventivo]
           ,[Cd_PreventivoFamiglia],[DescrizioneFamiglia]
           ,[TipoPreventivo],[Cd_CF],[DescrizioneCF],[Cd_VL],[DescrizioneVL]
           ,[InizioValidita],[Cambio],[ImportoTotaleV]
           ,[Template],[Cd_Template],[NotePreventivo]
           ,[Cd_ARGruppo1],[Cd_ARGruppo2],[Cd_ARGruppo3]
           ,[Cd_AR],[Descrizione],[Cd_ARMisura],[Quantita]
           ,[Picture1OriginalFile]
           ,[Cd_PrAttivita],[Ore],[ModelloVal]
           ,[CostoUnitarioLordoV],[ScontoAcquisto]
           ,[CostoUnitarioV],[Ricarica]
           ,[CostoUnitarioRicaricatoLordoV],[ScontoCostoRicaricato]
           ,[CostoUnitarioRicaricatoV]
           ,[CostoTotaleV]
           ,[MargineCostoV],[MargineCostoPerc]
           ,[RicavoUnitarioV],[Sconto]
           ,[RicavoUnitarioScontatoV]
           ,[RicavoTotaleV]
           ,[MargineRicavoV],[MargineRicavoPerc]
					 ,[Indirizzo],[Localita],[Cap],[Cd_Provincia],[Cd_Nazione],[PartitaIva]
           ,[CodiceFiscale],[Telefono],[Telefono2],[Cellulare],[Cellulare2]
           ,[Fax],[Fax2],[Email],[URL],[PersDaContattare],[PersDaContattare2]
					 ,[ImportoTotaleE]
           ,[CostoTotaleE]
           ,[MargineCostoE]
           ,[RicavoTotaleE]
           ,[MargineRicavoE]
		   ,[Cd_xSpesa])
	SELECT  ''' + @UserName + ''', 6, xPreventivo.Id_Preventivo, xPreventivo.Cd_Preventivo, xPreventivo.Descrizione AS DescrizionePreventivo, 
					xPreventivo.Cd_PreventivoFamiglia, xPreventivoFamiglia.Descrizione AS DescrizioneFamiglia,
					xPreventivo.TipoPreventivo, xPreventivo.Cd_CF, CF.Descrizione AS DescrizioneCF, xPreventivo.Cd_VL, VL.Descrizione AS DescrizioneVL,
					xPreventivo.InizioValidita, xPreventivo.Cambio, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivo.ImportoTotaleV)), 
					xPreventivo.Template, xPreventivo.Cd_Template, xPreventivo.NotePreventivo,
					AR.Cd_ARGruppo1, AR.Cd_ARGruppo2, AR.Cd_ARGruppo3, 
					xPreventivoSpesa.Cd_AR, AR.Descrizione, xPreventivoSpesa.Cd_ARMisura, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoSpesa.Quantita)), 
					Picture1OriginalFile = CASE WHEN LEN(CONVERT(Varchar(255),Picture1OriginalFile)) > 3 THEN RIGHT(CONVERT(Varchar(255), Picture1OriginalFile), (LEN(CONVERT(Varchar(255),Picture1OriginalFile))) - (CHARINDEX('']'', Picture1OriginalFile) + 3)) ELSE ''' + @ImgBlank + ''' END,
					NULL, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), 0)), xPreventivoSpesa.ModelloVal, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoSpesa.CostoUnitarioLordoV)), xPreventivoSpesa.ScontoAcquisto, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoSpesa.CostoUnitarioV)), xPreventivoSpesa.Ricarica, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoSpesa.CostoUnitarioRicaricatoLordoV)), xPreventivoSpesa.ScontoCostoRicaricato, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoSpesa.CostoUnitarioRicaricatoV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoSpesa.CostoTotaleV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoSpesa.MargineCostoV)), xPreventivoSpesa.MargineCostoPerc, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoSpesa.RicavoUnitarioV)), xPreventivoSpesa.Sconto, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoSpesa.RicavoUnitarioScontatoV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoSpesa.RicavoTotaleV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoSpesa.MargineRicavoV)), xPreventivoSpesa.MargineRicavoPerc,
					CF.Indirizzo, CF.Localita, CF.Cap, CF.Cd_Provincia, CF.Cd_Nazione, CF.PartitaIva,
          CF.CodiceFiscale, CF.Telefono, CF.Telefono2, CF.Cellulare, CF.Cellulare2,
          CF.Fax, CF.Fax2, CF.Email, CF.URL, CF.PersDaContattare, CF.PersDaContattare2,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivo.ImportoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoSpesa.CostoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoSpesa.MargineCostoE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoSpesa.RicavoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoSpesa.MargineRicavoE)),
					xPreventivoSpesa.Cd_xSpesa
	FROM    xPreventivoSpesa 
					INNER JOIN xPreventivo ON xPreventivoSpesa.Id_Preventivo = xPreventivo.Id_Preventivo
					INNER JOIN xPreventivoFamiglia ON xPreventivo.Cd_PreventivoFamiglia = xPreventivoFamiglia.Cd_PreventivoFamiglia
					INNER JOIN CFEx CF ON xPreventivo.Cd_CF = CF.Cd_CF
					INNER JOIN VL ON xPreventivo.Cd_VL = VL.Cd_VL
					INNER JOIN AR ON xPreventivoSpesa.Cd_AR = AR.Cd_AR
					LEFT JOIN ARGruppo1 ON AR.Cd_ARGruppo1 = ARGruppo1.Cd_ARGruppo1
					LEFT JOIN ARImg ON AR.Cd_AR = ARImg.Cd_AR And ARImg.Riga = 1
	WHERE		xPreventivo.Id_Preventivo = ' + @Id_Preventivo + ' ' +
	'ORDER BY ARGruppo1.xOrdinamentoStampa, xPreventivoSpesa.Sequenza')

	-- Inserimento di una riga con i totali spese
	EXECUTE('INSERT INTO [xMM1]
						 ([UserName],[TipoRiga],[Id_Preventivo]
						 ,[Quantita],[CostoTotaleV],[RicavoTotaleV])
	SELECT  ''' + @UserName + ''', 7, xPreventivo.Id_Preventivo,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoSpesa.Quantita))) AS Quantita, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoSpesa.CostoTotaleV))) AS CostoTotaleV, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoSpesa.RicavoTotaleV))) AS RicavoTotaleV
	FROM    xPreventivoSpesa 
					INNER JOIN xPreventivo ON xPreventivoSpesa.Id_Preventivo = xPreventivo.Id_Preventivo
	WHERE		xPreventivo.Id_Preventivo = ' + @Id_Preventivo + 
	' GROUP BY xPreventivo.Id_Preventivo')

	-- Inserimento dati testa + Item
	EXECUTE('INSERT INTO [xMM1]
           ([UserName],[TipoRiga],[Id_Preventivo],[Cd_Preventivo],[DescrizionePreventivo]
           ,[Cd_PreventivoFamiglia],[DescrizioneFamiglia]
           ,[TipoPreventivo],[Cd_CF],[DescrizioneCF],[Cd_VL],[DescrizioneVL]
           ,[InizioValidita],[Cambio],[ImportoTotaleV]
           ,[Template],[Cd_Template],[NotePreventivo]
           ,[Cd_ARGruppo1],[Cd_ARGruppo2],[Cd_ARGruppo3]
           ,[Cd_AR],[Descrizione],[Cd_ARMisura],[Quantita]
           ,[Picture1OriginalFile]
           ,[Cd_PrAttivita],[Ore],[ModelloVal]
           ,[CostoUnitarioLordoV],[ScontoAcquisto]
           ,[CostoUnitarioV],[Ricarica]
           ,[CostoUnitarioRicaricatoLordoV],[ScontoCostoRicaricato]
           ,[CostoUnitarioRicaricatoV]
           ,[CostoTotaleV]
           ,[MargineCostoV],[MargineCostoPerc]
           ,[PrezzoUnRicaricatoV],[Sconto]
           ,[PrezzoUnScontatoV]
           ,[RicavoTotaleV]
           ,[PrezzoTotaleV]
		   ,[PrezzoUnVenditaV]
					 ,[Indirizzo],[Localita],[Cap],[Cd_Provincia],[Cd_Nazione],[PartitaIva]
           ,[CodiceFiscale],[Telefono],[Telefono2],[Cellulare],[Cellulare2]
           ,[Fax],[Fax2],[Email],[URL],[PersDaContattare],[PersDaContattare2]
					 ,[ImportoTotaleE]
           ,[CostoTotaleE]
           ,[RicavoTotaleE]
           ,[PrezzoTotaleE]
           ,[PrezzoUnVenditaE])
	SELECT  ''' + @UserName + ''', 8, xPreventivo.Id_Preventivo, xPreventivo.Cd_Preventivo, xPreventivo.Descrizione AS DescrizionePreventivo, 
					xPreventivo.Cd_PreventivoFamiglia, xPreventivoFamiglia.Descrizione AS DescrizioneFamiglia,
					xPreventivo.TipoPreventivo, xPreventivo.Cd_CF, CF.Descrizione AS DescrizioneCF, xPreventivo.Cd_VL, VL.Descrizione AS DescrizioneVL,
					xPreventivo.InizioValidita, xPreventivo.Cambio, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivo.ImportoTotaleV)), 
					xPreventivo.Template, xPreventivo.Cd_Template, xPreventivo.NotePreventivo,
					AR.Cd_ARGruppo1, AR.Cd_ARGruppo2, AR.Cd_ARGruppo3, 
					xPreventivoItem.Cd_ARItem, xPreventivoItem.DescrizioneARItem, null, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoItem.Quantita)), 
					Picture1OriginalFile = CASE WHEN LEN(CONVERT(Varchar(255),Picture1OriginalFile)) > 3 THEN RIGHT(CONVERT(Varchar(255), Picture1OriginalFile), (LEN(CONVERT(Varchar(255),Picture1OriginalFile))) - (CHARINDEX('']'', Picture1OriginalFile) + 3)) ELSE ''' + @ImgBlank + ''' END,
					NULL, CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), 0)), xPreventivoItem.ModelloVal, 
					null, null,
					null, null,
					null, null,
					null,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoItem.CostoTotaleV)), 
					null, null,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoItem.PrezzoUnRicaricatoV)), xPreventivoItem.Sconto,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoItem.PrezzoUnScontatoV)),
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoItem.RicavoTotaleV)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoItem.PrezzoTotaleV)),
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @DecimaliPrzUn + '), xPreventivoItem.PrezzoUnVenditaV)),
					CF.Indirizzo, CF.Localita, CF.Cap, CF.Cd_Provincia, CF.Cd_Nazione, CF.PartitaIva,
          CF.CodiceFiscale, CF.Telefono, CF.Telefono2, CF.Cellulare, CF.Cellulare2,
          CF.Fax, CF.Fax2, CF.Email, CF.URL, CF.PersDaContattare, CF.PersDaContattare2,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivo.ImportoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoItem.CostoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoItem.RicavoTotaleE)), 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoItem.PrezzoTotaleE)),
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), xPreventivoItem.PrezzoUnVenditaE))
	FROM    xPreventivoItem
					INNER JOIN xPreventivo ON xPreventivoItem.Id_Preventivo = xPreventivo.Id_Preventivo
					INNER JOIN xPreventivoFamiglia ON xPreventivo.Cd_PreventivoFamiglia = xPreventivoFamiglia.Cd_PreventivoFamiglia
					INNER JOIN CFEx CF ON xPreventivo.Cd_CF = CF.Cd_CF
					INNER JOIN VL ON xPreventivo.Cd_VL = VL.Cd_VL
					INNER JOIN AR ON xPreventivoItem.Cd_ARItem = AR.Cd_AR
					LEFT JOIN ARGruppo1 ON AR.Cd_ARGruppo1 = ARGruppo1.Cd_ARGruppo1
					LEFT JOIN ARImg ON AR.Cd_AR = ARImg.Cd_AR And ARImg.Riga = 1
	WHERE		xPreventivo.Id_Preventivo = ' + @Id_Preventivo + ' ' +
	'ORDER BY ARGruppo1.xOrdinamentoStampa, xPreventivoItem.Sequenza')

	-- Inserimento di una riga con i totali Item
	EXECUTE('INSERT INTO [xMM1]
						 ([UserName],[TipoRiga],[Id_Preventivo]
						 ,[Quantita],[CostoTotaleV],[RicavoTotaleV], [PrezzoTotaleV])
	SELECT  ''' + @UserName + ''', 9, xPreventivo.Id_Preventivo,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoItem.Quantita))) AS Quantita, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoItem.CostoTotaleV))) AS CostoTotaleV, 
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoItem.RicavoTotaleV))) AS RicavoTotaleV,
					CONVERT([varchar](20), CONVERT(Numeric(18,' + @Decimali + '), SUM(xPreventivoItem.PrezzoTotaleV))) AS PrezzoTotaleV
	FROM    xPreventivoItem
					INNER JOIN xPreventivo ON xPreventivoItem.Id_Preventivo = xPreventivo.Id_Preventivo
	WHERE		xPreventivo.Id_Preventivo = ' + @Id_Preventivo + 
	' GROUP BY xPreventivo.Id_Preventivo')
	
	-- Aggiornamento numero di records inseriti nella colonna [RowsCount]
	SELECT @RowsCount = ISNULL(COUNT(*), 0)
	FROM xMM1
	WHERE UserName = @UserName And Id_Preventivo = @Id_Preventivo
	
	UPDATE xMM1 SET RowsCount = @RowsCount
	WHERE UserName = @UserName And Id_Preventivo = @Id_Preventivo

	Set @nReturn = 1
	Return @nReturn
GO
-- Ritorna un progressivo (in base al tipo codice passato come parametro) per la codifica di preventivi e sottopreventivi
CREATE PROCEDURE [dbo].[xasp_gac_getnextnum_preventivo] 
	@TipoCodice			Char(1),
	@Cd_PreventivoFamiglia	Char(10), 
	@Tipo				Char(3),
	@Anno				Varchar(4),
	@nReturn			Integer = 0 Output
As
	-- Return:
	--		> 0: Progressivo 
	--		< 0: End Failed
	--		-1: Tipo codice non specificato
	--		-2: Tipo codice non valido

	/* Test validità parametri */
	-- @@TipoCodice =	'P' - Progressivo Annuo						(solo preventivo); 
	--					'Q' - Progressivo Assoluto					(solo preventivo); 
	--					'K' - Progressivo per Tipo Preventivo		(solo preventivo);
	--					'Y' - Progressivo per Tipo Sottopreventivo	(solo sottopreventivo);
	--					'Z' - Progressivo per Preventivo			(solo sottopreventivo)
	IF ISNULL(@TipoCodice, '') = '' BEGIN
		SET @nReturn = -1
		RETURN @nReturn 
	END
	IF NOT (@TipoCodice = 'P' OR @TipoCodice = 'Q' OR @TipoCodice = 'K' OR @TipoCodice = 'Y' OR @TipoCodice = 'Z') BEGIN
		SET @nReturn = -2
		RETURN @nReturn 
	END
	--DECLARE @Anno					As Varchar(4)
	DECLARE @Prog					As Int
	DECLARE @Prog_Lunghezza			As Smallint
	DECLARE @Prog_Sequenza			As Smallint
	DECLARE @Prog_Start				As Smallint
	DECLARE @Filtro_Lunghezza		As Smallint
	DECLARE @Filtro_Sequenza		As Smallint
	DECLARE @Filtro_Start			As Smallint
	DECLARE @DOSC_Lunghezza			As Smallint
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'P' OR @TipoCodice = 'Q' OR @TipoCodice = 'K' -- Preventivo
		Begin
			-- Recupera la lunghezza e la sequenza del progressivo all'interno del codificatore preventivo
			Select	@Prog_Lunghezza	= Lunghezza,
					@Prog_Sequenza	= Sequenza
			From	xImpostazionePP
			Where	TipoCodice	= @TipoCodice
			-- Recupera la posizione del primo carattere del progressivo all'interno del codificatore preventivo
			If @Prog_Sequenza = 1 
				Set	@Prog_Start = 1
			Else
				Begin
					Select	@Prog_Start = SUM(Lunghezza)
						From	xImpostazionePP
						Where	Sequenza < @Prog_Sequenza
					
					Set @Prog_Start = @Prog_Start + 1 	
				End
		End
	Else	-- SottoPreventivo
		Begin
			-- Recupera la lunghezza totale del codificatore sottopreventivo
			Select	@DOSC_Lunghezza = SUM(Lunghezza)
				From	xImpostazionePS
			-- Recupera la lunghezza e la sequenza del progressivo all'interno del codificatore sottopreventivo
			Select	@Prog_Lunghezza	= Lunghezza,
					@Prog_Sequenza	= Sequenza
			From	xImpostazionePS
			Where	TipoCodice	= @TipoCodice
			-- Recupera la posizione del primo carattere del progressivo all'interno del codificatore sottopreventivo
			If @Prog_Sequenza = 1 
				Set	@Prog_Start = 1
			Else
				Begin
					Select	@Prog_Start = SUM(Lunghezza)
					From	xImpostazionePS
					Where	Sequenza < @Prog_Sequenza
					Set @Prog_Start = @Prog_Start + 1 	
				End	
		End	
	---------------------------------------------------------------------------------------------------------
	-- Annuo
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'P'
		Begin
			-- Recupera la lunghezza e la sequenza dell'anno all'interno del codificatore
			Select	@Filtro_Lunghezza	= Lunghezza,
					@Filtro_Sequenza	= Sequenza
				From	xImpostazionePP
				Where	TipoCodice	= 'A'
			-- Formatta l'anno in base alla lunghezza configurata	
			Set @Anno = RIGHT(@Anno, @Filtro_Lunghezza)
			-- Recupera la posizione del primo carattere dell'anno all'interno del codificatore
			If @Filtro_Sequenza = 1 
				Set	@Filtro_Start = 1
			Else
				Begin
					Select	@Filtro_Start = SUM(Lunghezza)
						From	xImpostazionePP
						Where	Sequenza < @Filtro_Sequenza
					Set @Filtro_Start = @Filtro_Start + 1 	
				End	
			-- Recupera il valore max raggiunto dal progressivo annuo
			Select	@Prog = ISNULL(MAX(CONVERT(Int, REPLACE(SUBSTRING(Cd_PreventivoFamiglia, @Prog_Start, @Prog_Lunghezza), '.', ''))), 0)
				From	xPreventivoFamiglia
				Where	ISNUMERIC(SUBSTRING(Cd_PreventivoFamiglia, @Prog_Start, @Prog_Lunghezza)) = 1 And SUBSTRING(Cd_PreventivoFamiglia, @Filtro_Start, @Filtro_Lunghezza) = @Anno
		End
	---------------------------------------------------------------------------------------------------------
	-- Assoluto
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'Q'
		Begin
			-- Recupera il valore max raggiunto dal progressivo assoluto
			Select	@Prog = ISNULL(MAX(CONVERT(Int, REPLACE(SUBSTRING(Cd_PreventivoFamiglia, @Prog_Start, @Prog_Lunghezza), '.', ''))), 0)
				From	xPreventivoFamiglia
				Where	ISNUMERIC(SUBSTRING(Cd_PreventivoFamiglia, @Prog_Start, @Prog_Lunghezza)) = 1
		End
	---------------------------------------------------------------------------------------------------------
	-- Per Tipo Preventivo
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'K'
		Begin
			-- Recupera la lunghezza e la sequenza del tipo all'interno del codificatore
			Select	@Filtro_Lunghezza	= Lunghezza,
					@Filtro_Sequenza	= Sequenza
				From	xImpostazionePP
				Where	TipoCodice	= 'J'
			-- Recupera la posizione del primo carattere del tipo all'interno del codificatore
			If @Filtro_Sequenza = 1 
				Set	@Filtro_Start = 1
			Else
				Begin
					Select	@Filtro_Start = SUM(Lunghezza)
						From	xImpostazionePP
						Where	Sequenza < @Filtro_Sequenza
					
					Set @Filtro_Start = @Filtro_Start + 1 	
				End	
			-- Recupera il valore max raggiunto dal progressivo per tipo
			Select	@Prog = ISNULL(MAX(CONVERT(Int, REPLACE(SUBSTRING(Cd_PreventivoFamiglia, @Prog_Start, @Prog_Lunghezza), '.', ''))), 0)
				From	xPreventivoFamiglia
				Where	ISNUMERIC(SUBSTRING(Cd_PreventivoFamiglia, @Prog_Start, @Prog_Lunghezza)) = 1 And SUBSTRING(Cd_PreventivoFamiglia, @Filtro_Start, @Filtro_Lunghezza) = @Tipo
		End
	---------------------------------------------------------------------------------------------------------
	-- Per Tipo Sottopreventivo
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'Y'
		Begin
			-- Recupera la lunghezza e la sequenza del tipo all'interno del codificatore
			Select	@Filtro_Lunghezza	= Lunghezza,
					@Filtro_Sequenza	= Sequenza
				From	xImpostazionePS
				Where	TipoCodice	= 'X'
			-- Recupera la posizione del primo carattere del tipo all'interno del codificatore
			If @Filtro_Sequenza = 1 
				Set	@Filtro_Start = 1
			Else
				Begin
					Select	@Filtro_Start = SUM(Lunghezza)
						From	xImpostazionePS
						Where	Sequenza < @Filtro_Sequenza
					
					Set @Filtro_Start = @Filtro_Start + 1 	
				End	
			-- Recupera il valore max raggiunto dal progressivo per tipo
			Select	@Prog = ISNULL(MAX(CONVERT(Int, REPLACE(SUBSTRING(RIGHT(RTRIM(LTRIM(Cd_Preventivo)), @DOSC_Lunghezza), @Prog_Start, @Prog_Lunghezza), '.', ''))), 0)
				From	xPreventivo
				Where	ISNUMERIC(SUBSTRING(RIGHT(RTRIM(LTRIM(Cd_Preventivo)), @DOSC_Lunghezza), @Prog_Start, @Prog_Lunghezza)) = 1
							And SUBSTRING(RIGHT(RTRIM(LTRIM(Cd_Preventivo)), @DOSC_Lunghezza), @Filtro_Start, @Filtro_Lunghezza) = @Tipo
		End
	---------------------------------------------------------------------------------------------------------
	-- Per Preventivo
	---------------------------------------------------------------------------------------------------------
	If @TipoCodice = 'Z'
		Begin
			-- Recupera il valore max raggiunto dal progressivo per commessa
			Select	@Prog = ISNULL(MAX(CONVERT(Int, REPLACE(SUBSTRING(RIGHT(RTRIM(LTRIM(Cd_Preventivo)), @DOSC_Lunghezza), @Prog_Start, @Prog_Lunghezza), '.', ''))), 0)
				From	xPreventivo
				Where	ISNUMERIC(SUBSTRING(RIGHT(RTRIM(LTRIM(Cd_Preventivo)), @DOSC_Lunghezza), @Prog_Start, @Prog_Lunghezza)) = 1
							And SUBSTRING(Cd_Preventivo, 1, LEN(@Cd_PreventivoFamiglia)) = @Cd_PreventivoFamiglia
		End
	---------------------------------------------------------------------------------------------------------
	-- Fine
	---------------------------------------------------------------------------------------------------------
	Set @nReturn = @Prog + 1
	Return @nReturn
	---------------------------------------------------------------------------------------------------------
GO

/****** Object:  UserDefinedFunction [dbo].[xGAC_RDTicket_Valorizzazione_Attivita]    Script Date: 12/05/2016 10:45:32 ******/
-- Valorizza una riga attività per la gestione dei ticket
CREATE FUNCTION [dbo].[xGAC_RDTicket_Valorizzazione_Attivita] (
	@Cd_xContratto				    Char(10),
	@CD_PrAttivita				    Varchar(20),
	@CD_xRDTipoValorizzazione	Char(5),
	@Cd_CF						        Char(7),
	@CD_xOperatore				    Varchar(20),
	@Cd_Agente					      Char(3),
	@DataInizio					      SmallDateTime,
	@CD_CFDest					      NChar(3),
	@Durata						        Numeric(18,6),
	@Cd_xRDModalita				    Char(1),
	@Cd_PrRisorsa				      Varchar(20),
	@Assistenza					      Bit,
	@Cd_Preventivo				    Varchar(20),
	@Id_xRDTicket				      Integer,
	@Previsti					        Integer, -- 0 = rilevazioni; 1 = previsti nel ticket; 2 = previsti negli interventi programmati.
	-- dati garanzia
	@SGV_Etichetta				    Char(1),
	@Cd_AR_Ticket				      Varchar(20),
	@Cd_xImpianto				      Char(10),
	@Cd_DOSottoCommessaInst   Varchar(20),
	@Cd_xMatricola				    Varchar(40)
)

Returns @RetTbl Table (
	CostoUn				Numeric(18,6),
	Prezzo				Numeric(18,6),
	Sconto				Varchar(20),
	Provvigione_1	Varchar(20)
)
AS
Begin
			-- dichiarazione variabili per valori di ritorno
			Declare	@CostoUn		Numeric(18,6),
					@Prezzo			    Numeric(18,6),
					@Sconto			    Varchar(20),
					@Provvigione_1	Varchar(20)

			-- dichiarazione variabili per valori dai preventivi
			Declare @NumRighe_Preventivo	Integer
			Declare @FaseUsaCostoV				Bit

			-- dichiarazione variabili di appoggio
			Declare @TipoValCosti			SmallInt,
					@Cd_DoAttivita			  Char(3),
					@xCd_ARMisuraAttivita	Char(2),
					@Cd_Agente_1			    Char(3),
					@Cd_Agente_2			    Char(3),
					@Cd_PG					      Char(4),
					@Cd_LS_1				      Char(7),
					@Cd_LS_2				      Char(7),
					@Provvigione_Ag			  Varchar(10),
					@Cd_AR					      Varchar(20),
					@PrezzoAddizionale		Numeric(18,6),
					@Id_LSArticolo	   		Integer,
					@Id_LSScaglione			  Integer,
					@ScontoAddizionale		Varchar(20),
					@DefaultTipoVal		    Bit,
					@Cd_CF_For				    Char(7),
					@CostoUnFase			    Numeric(18,6),
					@CostoUnOperatore		  Numeric(18,6),
					-- dati contratto
					@TipoFase				      TinyInt,
					@FasePrezzoUnitarioV	Numeric(18,6),
					@Cd_LS_Fase				    Char(7),
					@Cd_LS_Contratto		  Char(7),
					@FaseScontoRiga			  VarChar(1000),
					@Id_xContrattoFase		Integer,
					@Gruppo					      Bit,
					-- dati garanzia
					@AttivitaInGaranzia	  Bit,
					-- dati del previsto
					@PrezzoPrevisto		    Numeric(18,6),
					@ScontoPrevisto       Varchar(20)
					
			-- Se durata = 0, processa con durata = 1		
			If IsNull(@Durata, 0) = 0 Set @Durata = 1
			
			-- impostazioni G.A.C.
			Select @Cd_DoAttivita = Cd_DOAttivita,
					 @xCd_ARMisuraAttivita = Cd_ARMisuraAttivita
			From	 xImpostazione
			
			-- dati attività
			If @Previsti = 0
				Select @Cd_AR = Cd_AR, @DefaultTipoVal = DefaultTipoVal
				       , @TipoValCosti = Case When xTipoDurata = 1 Then xDUTipoValCosti Else xDDRisorsaTipoValCosti End
				From	 xPRAttivitaVal Inner Join PRAttivita On xPRAttivitaVal.Id_PRAttivita = PRAttivita.Id_PrAttivita
				Where	 PRAttivita.Cd_PrAttivita = @CD_PrAttivita
						 And xPRAttivitaVal.Cd_xRDTipoValorizzazione = @CD_xRDTipoValorizzazione
			Else					
				Select @Cd_AR = Cd_AR
				       , @TipoValCosti = Case When xTipoDurata = 1 Then xDUTipoValCosti Else xDDRisorsaTipoValCosti End
				From	 xPRAttivitaVal Inner Join PRAttivita On xPRAttivitaVal.Id_PRAttivita = PRAttivita.Id_PrAttivita
				Where	 PRAttivita.Cd_PrAttivita = @CD_PrAttivita
						 And DefaultTipoVal = 1

			If @Previsti > 0 Set @TipoValCosti = 1 -- Il costo per i previsti, come per i preventivi, può essere dato solo dalla risorsa

			-- costo
			If @TipoValCosti In(1, 3)
				Begin 
					If @Previsti > 0 And IsNull(@Cd_PrRisorsa, '') = '' -- allora di sicuro @TipoValCosti = 1
						Begin
							-- Per i previsti, devo ricavarmi la risorsa dall'attività
							Select	@Cd_PrRisorsa = A.Cd_PrRisorsa, @Gruppo = R.Gruppo
							From	PRAttivita A Inner Join PRRisorsa R On A.Cd_PrRisorsa = R.Cd_PrRisorsa
							Where	Cd_PrAttivita = @CD_PrAttivita
							
							If @Gruppo = 1 -- All'attività è associato un gruppo di risorse
								Select	@Cd_PrRisorsa = Cd_PrRisorsa_C
								From	PRRisorsaLink 
								Where	Cd_PrRisorsa_P = @Cd_PrRisorsa And Sequenza = 1
						End

					SELECT @Cd_CF_For = CASE WHEN Esterno = 1 THEN CD_CF ELSE xCD_CF END
						  FROM PRRisorsa
						  WHERE Cd_PrRisorsa = @Cd_PrRisorsa

					-- dati fornitore
					Select	
							@Cd_LS_1	= Cd_LS_1, 
							@Cd_LS_2	= Cd_LS_2
					From	CF 
					Where	Cd_CF = @Cd_CF_For
			
					Select
						@CostoUnFase = IsNull(Prezzo, 0)
					From DoRig_Defaults_PrezzoLS(
								@Cd_LS_1,
								@Cd_AR,
								@DataInizio,
								@Durata,
								@Cd_CF_For)
					
					If IsNull(@CostoUnFase, 0) = 0
						Begin
							Select
								@CostoUnFase = IsNull(Prezzo, 0)
							From DoRig_Defaults_PrezzoLS(
										@Cd_LS_2,
										@Cd_AR,
										@DataInizio,
										@Durata,
										@Cd_CF_For)
						End			
				End
				
			If @TipoValCosti In(2, 3)
				Begin 
					SELECT 
						TOP 1 @CostoUnOperatore = ISNULL(xOperatoreVal.Costo,0)
					FROM xOperatore LEFT JOIN xOperatoreVal ON xOperatore.Id_xOperatore	= xOperatoreVal.Id_xOperatore
					WHERE xOperatore.CD_xOperatore = @CD_xOperatore
							AND xOperatoreVal.CD_xRDTipoValorizzazione = @CD_xRDTipoValorizzazione
							AND xOperatoreVal.InizioValidita <=  @DataInizio
					ORDER BY xOperatoreVal.InizioValidita DESC
				End
		
			Set @CostoUn = Case @TipoValCosti	When 1 Then IsNull(@CostoUnFase, 0)
															When 2 Then IsNull(@CostoUnOperatore, 0)
															When 3 Then IsNull(@CostoUnFase, 0) + IsNull(@CostoUnOperatore, 0)
															When 4 Then 0 End
		
			-- prezzo
			-- dati cliente	
			Select	@Cd_Agente_1	= Cd_Agente_1, 
					@Cd_Agente_2	= Cd_Agente_2, 
					@Cd_PG			= Cd_PG, 
					@Cd_LS_1		= Cd_LS_1, 
					@Cd_LS_2		= Cd_LS_2
			From	CF 
			Where	Cd_CF = @Cd_CF
			
			-- dati agente
			Select	@Provvigione_Ag = Provvigione 
			From	Agente 
			Where	Cd_Agente = IsNull(@Cd_Agente, 'xxxxxxx')

			-- dati contratto
			Set @Id_xContrattoFase = 0
			
			-- I Ticket A Forfait non vengono valorizzati
			If @Cd_xRDModalita = 5
				Begin
					Select @Prezzo = 0, @Sconto = '', @Provvigione_1 = ''
					GoTo Fine_Funzione
				End
			
			If @Cd_xContratto Is Null And @Cd_xRDModalita = 2 --@Previsti = 0 And 
				Begin
					If IsNull(@SGV_Etichetta, '') = '' Set @AttivitaInGaranzia = 1
					If @SGV_Etichetta = 'M' Select @AttivitaInGaranzia = AttivitaInGaranzia		From xMatricola		Where Cd_AR = @Cd_AR_Ticket And Cd_xMatricola = @Cd_xMatricola
					If @SGV_Etichetta = 'S' Select @AttivitaInGaranzia = xAttivitaInGaranzia	From DOSottoCommessa Where Cd_DOSottoCommessa = @Cd_DOSottoCommessaInst
					If @SGV_Etichetta = 'I' Select @AttivitaInGaranzia = AttivitaInGaranzia		From xImpianto			Where Cd_xImpianto = @Cd_xImpianto

					If @AttivitaInGaranzia = 1
						Begin
							Select @Prezzo = 0, @Sconto = '', @Provvigione_1 = ''
							GoTo Fine_Funzione
						End
				End
			
			If (@Cd_xContratto Is Not Null) And ((@Cd_xRDModalita = 3)  Or (@Previsti = 2))
				-- prezzo e sconto dal contratto
				Begin
					Select	@TipoFase = TipoFase,
							@FasePrezzoUnitarioV = FasePrezzoUnitarioV,
							@Cd_LS_Fase = Cd_LS_Fase,
							@Cd_LS_Contratto = Cd_LS_Contratto,
							@FaseScontoRiga = FaseScontoRiga
					From	xContratto
					Where	Cd_xContratto = @Cd_xContratto
					
					If @TipoFase = 1 Select @Prezzo = 0, @Sconto = '', @Provvigione_1 = '', @Provvigione_Ag = ''
					
					If @TipoFase = 2 Select @Prezzo = @FasePrezzoUnitarioV, @Sconto = '', @Provvigione_1 = ''
					
					If @TipoFase = 3
						Begin
							Select
								@Prezzo 			= Prezzo,
								@PrezzoAddizionale 	= PrezzoAddizionale,
								@Id_LSArticolo	   	= Id_LSArticolo,
								@Id_LSScaglione		= Id_LSScaglione
							From DoRig_Defaults_Prezzo(
								NullIf(@Cd_DoAttivita, ''),
								NullIf(@Cd_CF, ''),
								@DataInizio,
								Null,
								NullIf(@CD_CFDest, ''),
								NullIf(@Cd_Agente_1, ''),
								NullIf(@Cd_Agente_2, ''),
								NullIf(@Cd_PG, ''),
								NullIf(IsNull(@Cd_LS_Fase, @Cd_LS_Contratto), ''),
								NullIf(@Cd_LS_Contratto, ''),
								'EUR',
								1,
								NullIf(@Cd_AR, ''),
								@Durata,
								NullIf(@xCd_ARMisuraAttivita, ''),
								1,
								0)
										
							Select 
								@Sconto = IsNull(Sconto, '')
							From 
								xGAC_GetSconto(
									'',
									@Cd_CF,
									@DataInizio,
									IsNull(@Cd_LS_Fase, @Cd_LS_Contratto),
									@Cd_AR,
									@Durata,
									@Prezzo,
									@Id_LSArticolo,
									@Id_LSScaglione,
									@FaseScontoRiga)			
						End
						
					If @TipoFase = 4
						Begin
							Select
								@Id_xContrattoFase	= Id_xContrattoFase,
								@Prezzo				= PrezzoUnitarioV,
				  			@Sconto				= Sconto
							From 
								xContrattoFase Inner Join xContratto 
								On xContrattoFase.Id_xContratto = xContratto.Id_xContratto
							Where
								xContratto.Cd_xContratto = @Cd_xContratto 
								And xContrattoFase.Cd_PrAttivita = @CD_PrAttivita
								And ((xContrattoFase.DataFine Is Not Null And @DataInizio Between xContrattoFase.DataInizio And xContrattoFase.DataFine)
										Or (xContrattoFase.DataFine Is Null And @DataInizio >= xContrattoFase.DataInizio))
						End
						
					If @TipoFase < 4 Or @Id_xContrattoFase > 0 GoTo Fine_Funzione
				End

			-- prezzo, sconto e provvigione (ticket senza contratto)
			If (@Cd_xContratto Is Null) Or (@Cd_xRDModalita = 1)
				Begin
					Select
						@Prezzo 			= Prezzo,
						@PrezzoAddizionale 	= PrezzoAddizionale,
						@Id_LSArticolo	   	= Id_LSArticolo,
						@Id_LSScaglione		= Id_LSScaglione
					From DoRig_Defaults_Prezzo(
						NullIf(@Cd_DoAttivita, ''),
						NullIf(@Cd_CF, ''),
						@DataInizio,
						Null,
						NullIf(@CD_CFDest, ''),
						NullIf(@Cd_Agente_1, ''),
						NullIf(@Cd_Agente_2, ''),
						NullIf(@Cd_PG, ''),
						NullIf(@Cd_LS_1, ''),
						NullIf(@Cd_LS_2, ''),
						'EUR',
						1,
						NullIf(@Cd_AR, ''),
						@Durata,
						NullIf(@xCd_ARMisuraAttivita, ''),
						1,
						0)
				End

			If	(@Cd_xContratto Is Not Null) And (@TipoFase = 4) And (@Id_xContrattoFase = 0) And ((@Cd_xRDModalita = 3) Or (@Previsti = 2))
				Begin
					Set @Prezzo = 0

					Select
						@Prezzo 			= Prezzo,
						@PrezzoAddizionale 	= PrezzoAddizionale,
						@Id_LSArticolo	   	= Id_LSArticolo,
						@Id_LSScaglione		= Id_LSScaglione
					From DoRig_Defaults_Prezzo(
						NullIf(@Cd_DoAttivita, ''),
						NullIf(@Cd_CF, ''),
						@DataInizio,
						Null,
						NullIf(@CD_CFDest, ''),
						NullIf(@Cd_Agente_1, ''),
						NullIf(@Cd_Agente_2, ''),
						NullIf(@Cd_PG, ''),
						NullIf(IsNull(@Cd_LS_Contratto, @Cd_LS_1), ''),
						NullIf(@Cd_LS_1, ''),
						'EUR',
						1,
						NullIf(@Cd_AR, ''),
						@Durata,
						NullIf(@xCd_ARMisuraAttivita, ''),
						1,
						0)
								
					If @Prezzo = 0
						Begin
							Select
								@Prezzo 			= Prezzo,
								@PrezzoAddizionale 	= PrezzoAddizionale,
								@Id_LSArticolo	   	= Id_LSArticolo,
								@Id_LSScaglione		= Id_LSScaglione
							From DoRig_Defaults_Prezzo(
								NullIf(@Cd_DoAttivita, ''),
								NullIf(@Cd_CF, ''),
								@DataInizio,
								Null,
								NullIf(@CD_CFDest, ''),
								NullIf(@Cd_Agente_1, ''),
								NullIf(@Cd_Agente_2, ''),
								NullIf(@Cd_PG, ''),
								NullIf(IsNull(@Cd_LS_1, ''), ''),
								Null,
								'EUR',
								1,
								NullIf(@Cd_AR, ''),
								@Durata,
								NullIf(@xCd_ARMisuraAttivita, ''),
								1,
								0)
						End					
						
					If Not IsNull(@FaseScontoRiga, '') = ''
						Begin
							Select 
								@Sconto = IsNull(Sconto, '')
							From 
								xGAC_GetSconto(
									'',
									@Cd_CF,
									@DataInizio,
									IsNull(@Cd_LS_Contratto, @Cd_LS_1),
									@Cd_AR,
									@Durata,
									@Prezzo,
									@Id_LSArticolo,
									@Id_LSScaglione,
									@FaseScontoRiga)
						End
				End

			If IsNull(@Sconto, '') = ''
				Begin
					Select
						@Sconto 			= Sconto,
						@ScontoAddizionale	= ScontoAddizionale
					From DoRig_Defaults_Sconto(
						NullIf(@Cd_DoAttivita, ''),
						NullIf(@Cd_CF, ''),
						@DataInizio,
						Null,
						@CD_CFDest,
						NullIf(@Cd_Agente_1, ''),
						NullIf(@Cd_Agente_2, ''),
						NullIf(@Cd_PG, ''),
						NullIf(@Cd_LS_1, ''),
						NullIf(@Cd_LS_2, ''),
						'EUR',
						1,
						NullIf(@Cd_AR, ''),
						@Durata,
						NullIf(@xCd_ARMisuraAttivita, ''),
						1,
						@Prezzo,
						@PrezzoAddizionale,
						@Id_LSArticolo,
						@Id_LSScaglione,
						'')
				End

			Select
				@Provvigione_1 = Provvigione_1
			From DoRig_Defaults_Provvigione1(
				NullIf(@Cd_DoAttivita, ''),
				NullIf(@Cd_CF, ''),
				@DataInizio,
				Null,
				@CD_CFDest,
				NullIf(@Cd_Agente_1, ''),
				NullIf(@Cd_Agente_2, ''),
				NullIf(@Cd_PG, ''),
				NullIf(@Cd_LS_1, ''),
				NullIf(@Cd_LS_2, ''),
				'EUR',
				1,
				NullIf(@Cd_AR, ''),
				@Durata,
				NullIf(@xCd_ARMisuraAttivita, ''),
				1,
				@Prezzo,
				@PrezzoAddizionale,
				@Id_LSArticolo,
				@Id_LSScaglione,
				@Sconto,
				@ScontoAddizionale,
				'')
----------------------------------------------------------------
Fine_Funzione:
		If @Assistenza = 1 And @Previsti = 0 And @DefaultTipoVal = 1 And @Cd_xRDModalita <> 5
			Begin
				-- Verifico la presenza di valori previsti per l'attività
				-- I valori previsti entrano in gioco:
				--  a) solo per i ticket di assistenza;
				--  b) solo per le rilevazioni consuntive (non quindi per la valorizzazione dei previsti stessi);
				--  c) solo nel caso che il tipo di valorizzazione selezionato sia quello di default (utilizzato nei previsti stessi);
				--  d) con una precedenza superiore a tutte le altre casistiche e seconda solo ai valori di un eventuale preventivo
				--     (per questo i valori dal preventivo sono gestiti in seguito).
				Declare @Id_xRDTicketAttivita Int

				Set @Id_xRDTicketAttivita = (Select Top 1 Id_xRDTicketAttivita From xRDTicketAttivita Where Cd_PrAttivita = @CD_PrAttivita And Id_xRDTicket = @Id_xRDTicket And Chiuso = 0 Order By Id_xRDTicketAttivita Desc)

				Select @PrezzoPrevisto = IsNull(PrezzoUnPrev, 0)
						 , @ScontoPrevisto = IsNull(ScontoRigaPrev, '')
					From xRDTicketAttivita
					Where Id_xRDTicketAttivita = @Id_xRDTicketAttivita
				
				If IsNull(@PrezzoPrevisto, 0) > 0         Set @Prezzo = @PrezzoPrevisto
				If Not (IsNull(@ScontoPrevisto, '') = '') Set @Sconto = @ScontoPrevisto
			End
			
		If (@Cd_Preventivo Is Not Null) And IsNull(@Cd_xRDModalita, 0) <> 5
			Begin
				-- I preventivi hanno sempre la precedenza sul resto
				Select @FaseUsaCostoV = P.FaseUsaCostoV, @NumRighe_Preventivo = ISNULL(Count(*), 0)
					From xPreventivoFase PF Inner Join xPreventivo P On PF.Id_Preventivo = P.Id_Preventivo
					Where PF.Cd_PrAttivita = @CD_PrAttivita And P.Cd_Preventivo = @Cd_Preventivo
					Group By P.FaseUsaCostoV
				
				If @NumRighe_Preventivo > 0
					Begin
						If @FaseUsaCostoV = 0
							Select Top 1 @Prezzo = Case P.ModelloVal When 'C' Then ISNULL(PF.CostoUnitarioRicaricatoLordoV, 0)/PF.Cambio Else ISNULL(PF.RicavoUnitarioV, 0)/PF.Cambio End
									,@Sconto = Case P.ModelloVal When 'C' Then ISNULL(PF.ScontoCostoRicaricato, '') Else ISNULL(PF.Sconto, '') End
								From xPreventivoFase PF Inner Join xPreventivo P On PF.Id_Preventivo = P.Id_Preventivo
								Where PF.Cd_PrAttivita = @CD_PrAttivita And P.Cd_Preventivo = @Cd_Preventivo
						Else
							Select Top 1 @CostoUn = PF.CostoUnitarioV
									,@Prezzo = Case P.ModelloVal When 'C' Then ISNULL(PF.CostoUnitarioRicaricatoLordoV, 0)/PF.Cambio Else ISNULL(PF.RicavoUnitarioV, 0)/PF.Cambio End
									,@Sconto = Case P.ModelloVal When 'C' Then ISNULL(PF.ScontoCostoRicaricato, '') Else ISNULL(PF.Sconto, '') End
								From xPreventivoFase PF Inner Join xPreventivo P On PF.Id_Preventivo = P.Id_Preventivo
								Where PF.Cd_PrAttivita = @CD_PrAttivita And P.Cd_Preventivo = @Cd_Preventivo
					End	
			End

      Insert @RetTbl
      Values (@CostoUn, @Prezzo, @Sconto, IsNull(IsNull(@Provvigione_Ag, @Provvigione_1), ''))
      Return
End
GO

/****** Object:  UserDefinedFunction [dbo].[xxGAC_RDTicket_Valorizzazione_Attivita_DD]    Script Date: 16/01/2014 12:32:08 ******/
-- Valorizza una riga attività per la gestione dei ticket
CREATE FUNCTION [dbo].[xGAC_RDTicket_Valorizzazione_Attivita_DD] (
	@DDTipo						SmallInt,
	@CD_PrAttivita				Varchar(20),
	@CD_xRDTipoValorizzazione	Char(5),
	@CD_xOperatore				Varchar(20),
	@DataInizio					SmallDateTime,
	@Durata						Numeric(18,6),
	@Cd_PrRisorsa				Varchar(20),
	@Cd_Preventivo				Varchar(20),
	@Id_xRDTicket				Integer
)

Returns @RetTbl Table (
	CostoUn				Numeric(18,6)
)
AS
Begin
			-- dichiarazione variabili per valori di ritorno
			Declare @CostoUn Numeric(18,6)

			-- dichiarazione variabili per valori dai preventivi
			Declare @NumRighe_Preventivo		Integer
			Declare @FaseUsaCostoV				Bit

			-- dichiarazione variabili di appoggio
			Declare @TipoValCosti			SmallInt,
					@Cd_LS_1				Char(7),
					@Cd_LS_2				Char(7),
					@Cd_AR					Varchar(20),
					@Cd_CF_For				Char(7),
					@CostoUnFase			Numeric(18,6),
					@CostoUnOperatore		Numeric(18,6)
					
			-- Se durata = 0, processa con durata = 1		
			If IsNull(@Durata, 0) = 0 Set @Durata = 1
			
			-- dati attività
			Select	@Cd_AR = Cd_AR
			From	xPRAttivitaVal Inner Join PRAttivita On xPRAttivitaVal.Id_PRAttivita = PRAttivita.Id_PrAttivita
			Where	PRAttivita.Cd_PrAttivita = @CD_PrAttivita
					And xPRAttivitaVal.Cd_xRDTipoValorizzazione = @CD_xRDTipoValorizzazione
			
			If @DDTipo = 2 -- Dettaglio Durata Operatore
				Select	@TipoValCosti = xDDOperatoreTipoValCosti
				From	PRAttivita
				Where	PRAttivita.Cd_PrAttivita = @CD_PrAttivita

			If @DDTipo = 3 -- Dettaglio Durata Risorsa + Operatore
				Select	@TipoValCosti = xDDRisorsaOperatoreTipoValCosti
				From	PRAttivita
				Where	PRAttivita.Cd_PrAttivita = @CD_PrAttivita

			-- costo
			If @TipoValCosti In(1, 3)
				Begin 
					Select @Cd_CF_For = Case When Esterno = 1 Then CD_CF Else xCD_CF End
				   From PRRisorsa
					Where Cd_PrRisorsa = @Cd_PrRisorsa

					-- dati fornitore
					Select @Cd_LS_1 = Cd_LS_1, @Cd_LS_2	= Cd_LS_2
					From	CF 
					Where	Cd_CF = @Cd_CF_For
			
					Select @CostoUnFase = IsNull(Prezzo, 0)
					From DoRig_Defaults_PrezzoLS(
								@Cd_LS_1,
								@Cd_AR,
								@DataInizio,
								@Durata,
								@Cd_CF_For)
					
					If IsNull(@CostoUnFase, 0) = 0
						Begin
							Select @CostoUnFase = IsNull(Prezzo, 0)
							From DoRig_Defaults_PrezzoLS(
										@Cd_LS_2,
										@Cd_AR,
										@DataInizio,
										@Durata,
										@Cd_CF_For)
						End			

					If (@Cd_Preventivo Is Not Null)
						Begin
							-- I preventivi hanno sempre la precedenza sul resto
							Select @FaseUsaCostoV = P.FaseUsaCostoV, @NumRighe_Preventivo = ISNULL(Count(*), 0)
							From xPreventivoFase PF Inner Join xPreventivo P On PF.Id_Preventivo = P.Id_Preventivo
							Where PF.Cd_PrAttivita = @CD_PrAttivita And P.Cd_Preventivo = @Cd_Preventivo
							Group By P.FaseUsaCostoV
							
							If @NumRighe_Preventivo > 0
								Begin
									If @FaseUsaCostoV = 1
										Select Top 1 @CostoUnFase = PF.CostoUnitarioV
										From xPreventivoFase PF Inner Join xPreventivo P On PF.Id_Preventivo = P.Id_Preventivo
										Where PF.Cd_PrAttivita = @CD_PrAttivita And P.Cd_Preventivo = @Cd_Preventivo
								End	
						End
				End
				
			If @TipoValCosti In(2, 3)
				Begin 
					Select Top 1 @CostoUnOperatore = IsNull(xOperatoreVal.Costo,0)
					From xOperatore Left Join xOperatoreVal On xOperatore.Id_xOperatore = xOperatoreVal.Id_xOperatore
					Where xOperatore.CD_xOperatore = @CD_xOperatore
							And xOperatoreVal.CD_xRDTipoValorizzazione = @CD_xRDTipoValorizzazione
							And xOperatoreVal.InizioValidita <=  @DataInizio
					Order By xOperatoreVal.InizioValidita Desc
				End
		
			Set @CostoUn = Case @TipoValCosti	When 1 Then IsNull(@CostoUnFase, 0)
															When 2 Then IsNull(@CostoUnOperatore, 0)
															When 3 Then IsNull(@CostoUnFase, 0) + IsNull(@CostoUnOperatore, 0)
															When 4 Then 0 End
		
----------------------------------------------------------------
Fine_Funzione:
      Insert @RetTbl Values (@CostoUn)
      Return
End

GO

/****** Object:  UserDefinedFunction [dbo].[xGAC_RDTicket_Valorizzazione_Materiale]    Script Date: 10/02/2012 10:25:32 ******/
create function [dbo].[xGAC_RDTicket_Valorizzazione_Materiale] (
	@Cd_xContratto	Char(10),
	@Cd_CF					Char(7),
	@CD_xOperatore	Varchar(20),
	@Cd_Agente			Char(3),
	@CD_CFDest			NChar(3),
	@Cd_AR					Varchar(20),
	@Quantita				Numeric(18,8),
	@FattoreToUM1		Numeric(18,8),
	@Cd_ARMisura		Char(2),
	@Cd_xRDModalita Char(1),
	@DataInizio			SmallDateTime,
	@Assistenza			Bit,
	@Cd_Preventivo		Varchar(20),
	@Id_xRDTicket		Integer,
	@Previsti			Integer, -- 0 = rilevazioni; 1 = previsti nel ticket; 2 = previsti negli interventi programmati.
	-- dati garanzia
	@SGV_Etichetta				Char(1),
	@Cd_AR_Ticket				Varchar(20),
	@Cd_xImpianto				Char(10),
	@Cd_DOSottoCommessaInst Varchar(20),
	@Cd_xMatricola				Varchar(40)
)

Returns @RetTbl Table (
	CostoUn				Numeric(18,6),
	Prezzo				Numeric(18,6),
	Sconto				Varchar(20),
	Provvigione_1	Varchar(20)
)
AS
Begin
      -- dichiarazione variabili per valori di ritorno
      Declare	@CostoUn				Numeric(18,6),
				@Prezzo					Numeric(18,6),
				@Sconto					Varchar(20),
				@Provvigione_1			Varchar(20)

      -- dichiarazione variabili per valori dai preventivi
      Declare	@NumRighe_Preventivo	Integer
		Declare	@MaterialeUsaCostoV	Bit

			-- dichiarazione variabili di appoggio
			Declare @TipoValCosto			TinyInt,
					@Cd_DoAttivita			Char(3),
					@Cd_LS_Costo			Char(7),
					@TipoCosto				Char(1),
					@Cd_Agente_1			Char(3),
					@Cd_Agente_2			Char(3),
					@Cd_PG					Char(4),
					@Cd_LS_1				Char(7),
					@Cd_LS_2				Char(7),
					@Provvigione_Ag			Varchar(10),
					@PrezzoAddizionale		Numeric(18,6),
					@Id_LSArticolo	   		Integer,
					@Id_LSScaglione			Integer,
					@ScontoAddizionale		Varchar(20),
					-- dati contratto
					@TipoMateriale			TinyInt,
					@Cd_LS_Materiale		Char(7),
					@Cd_LS_Contratto		Char(7),
					@MaterialeScontoRiga	VarChar(1000),
					@Id_xContrattoMateriale	Integer,
					-- dati garanzia
					@MaterialeInGaranzia	Bit
			
			-- impostazioni G.A.C.
			Select	@TipoValCosto = Case @Assistenza When 1 Then AssistenzaTipoValCosto Else TipoValorizzazioneCosto End,
					@Cd_DoAttivita = Cd_DOAttivita,
					@Cd_LS_Costo = Case @Assistenza When 1 Then Cd_LS_CostoAssistenza Else Cd_LS_Costo End
			From	xImpostazione

			-- costo
			If @TipoValCosto = 8
				Begin 
					If Not IsNull(@Cd_LS_Costo, '') = ''
						Begin
							Select
								@CostoUn = Prezzo * @FattoreToUM1
							From DoRig_Defaults_PrezzoLS(
										@Cd_LS_Costo,
										@Cd_AR,
										@DataInizio,
										@Quantita * @FattoreToUM1,
										@Cd_CF)
						End
				End
			Else
				Begin
					Select @TipoCosto = Case @TipoValCosto	When 1 Then 'U'
															When 2 Then 'S'
															When 3 Then 'M'
															When 4 Then 'B'
															When 5 Then 'P'
															When 6 Then 'L'
															When 7 Then 'F'
															Else ''		End
					
					Select
						@CostoUn = IsNull(CI.Costo, 0) * @FattoreToUM1
					From ARCostoItem CI
						Inner Join (
							Select X.*
							From ARCosto X
								Inner Join (
									Select
										TipoCosto,
										Max(DataVal) As DataVal
									From ARCosto
									Where Cd_MGEsercizio = Year(@DataInizio)
											And TipoCosto = @TipoCosto
									Group By TipoCosto
								) Y On 	Y.TipoCosto = X.TipoCosto And
											Y.DataVal = X.DataVal
						) CS On CS.Cd_MGEsercizio = CI.Cd_MGEsercizio And CS.TipoCosto = CI.TipoCosto
					Where
						Cd_AR = @Cd_AR
				End
			
			-- dati cliente
			Select	@Cd_Agente_1	= Cd_Agente_1, 
					@Cd_Agente_2	= Cd_Agente_2, 
					@Cd_PG			= Cd_PG, 
					@Cd_LS_1		= Cd_LS_1, 
					@Cd_LS_2		= Cd_LS_2
			From	CF 
			Where	Cd_CF = @Cd_CF
			
			-- dati agente
			Select	@Provvigione_Ag = Provvigione 
			From	Agente 
			Where	Cd_Agente = IsNull(@Cd_Agente, 'xxxxxxx')
			
			-- dati contratto
			Set @Id_xContrattoMateriale = 0
			
			-- I Ticket A Forfait non vengono valorizzati
			If @Cd_xRDModalita = 5
				Begin
					Select @Prezzo = 0, @Sconto = '', @Provvigione_1 = ''
					GoTo Fine_Funzione
				End
			
			If @Cd_xContratto Is Null And @Cd_xRDModalita = 2 --@Previsti = 0 And 
				Begin
					If IsNull(@SGV_Etichetta, '') = '' Set @MaterialeInGaranzia = 1
					If @SGV_Etichetta = 'M' Select @MaterialeInGaranzia = MaterialeInGaranzia	From xMatricola		Where Cd_AR = @Cd_AR_Ticket And Cd_xMatricola = @Cd_xMatricola
					If @SGV_Etichetta = 'S' Select @MaterialeInGaranzia = xMaterialeInGaranzia	From DOSottoCommessa Where Cd_DOSottoCommessa = @Cd_DOSottoCommessaInst
					If @SGV_Etichetta = 'I' Select @MaterialeInGaranzia = MaterialeInGaranzia	From xImpianto			Where Cd_xImpianto = @Cd_xImpianto

					If @MaterialeInGaranzia = 1
						Begin
							Select @Prezzo = 0, @Sconto = '', @Provvigione_1 = ''
							GoTo Fine_Funzione
						End
				End
			
			If (@Cd_xContratto Is Not Null) And ((@Cd_xRDModalita = 3) Or (@Previsti = 2))
				-- prezzo e sconto dal contratto
				Begin
					Select	@TipoMateriale = TipoMateriale,
							@Cd_LS_Materiale = Cd_LS_Materiale,
							@Cd_LS_Contratto = Cd_LS_Contratto,
							@MaterialeScontoRiga = MaterialeScontoRiga
					From	xContratto
					Where	Cd_xContratto = @Cd_xContratto
					
					If @TipoMateriale = 1 Select @Prezzo = 0, @Sconto = '', @Provvigione_1 = '', @Provvigione_Ag = ''
					
					If @TipoMateriale = 2
						Begin
							Select
								@Prezzo 			= Prezzo,
								@PrezzoAddizionale 	= PrezzoAddizionale,
								@Id_LSArticolo	   	= Id_LSArticolo,
								@Id_LSScaglione		= Id_LSScaglione
							From DoRig_Defaults_Prezzo(
								NullIf(@Cd_DoAttivita, ''),
								NullIf(@Cd_CF, ''),
								@DataInizio,
								Null,
								NullIf(@CD_CFDest, ''),
								NullIf(@Cd_Agente_1, ''),
								NullIf(@Cd_Agente_2, ''),
								NullIf(@Cd_PG, ''),
								NullIf(IsNull(@Cd_LS_Materiale, @Cd_LS_Contratto), ''),
								NullIf(@Cd_LS_Contratto, ''),
								'EUR',
								1,
								NullIf(@Cd_AR, ''),
								@Quantita,
								NullIf(@Cd_ARMisura, ''),
								@FattoreToUM1,
								0)
										
							Select 
								@Sconto = IsNull(Sconto, '')
							From 
								xGAC_GetSconto(
									'',
									@Cd_CF,
									@DataInizio,
									IsNull(@Cd_LS_Materiale, @Cd_LS_Contratto),
									@Cd_AR,
									@Quantita,
									@Prezzo,
									@Id_LSArticolo,
									@Id_LSScaglione,
									@MaterialeScontoRiga)			
						End
						
					If @TipoMateriale = 3
						Begin
							Select
								@Id_xContrattoMateriale	= Id_xContrattoMateriale,
								@Prezzo							= PrezzoUnitarioV * @FattoreToUM1,
				  			@Sconto							= Sconto
							From 
								xContrattoMateriale Inner Join xContratto 
								On xContrattoMateriale.Id_xContratto = xContratto.Id_xContratto
							Where
								xContratto.Cd_xContratto = @Cd_xContratto 
								And xContrattoMateriale.Cd_AR = @Cd_AR
								And ((xContrattoMateriale.DataFine Is Not Null And @DataInizio Between xContrattoMateriale.DataInizio And xContrattoMateriale.DataFine)
										Or (xContrattoMateriale.DataFine Is Null And @DataInizio >= xContrattoMateriale.DataInizio))
						End
						
					If @TipoMateriale < 3 Or @Id_xContrattoMateriale > 0 GoTo Fine_Funzione
				End
					
			-- prezzo, sconto e provvigione (ticket senza contratto)
			If	(@Cd_xContratto Is Null) Or (@Cd_xRDModalita = 1)
				Begin
					Select
						@Prezzo 						= Prezzo,
						@PrezzoAddizionale 	= PrezzoAddizionale,
						@Id_LSArticolo	   	= Id_LSArticolo,
						@Id_LSScaglione			= Id_LSScaglione
					From DoRig_Defaults_Prezzo(
						NullIf(@Cd_DoAttivita, ''),
						NullIf(@Cd_CF, ''),
						@DataInizio,
						Null,
						NullIf(@CD_CFDest, ''),
						NullIf(@Cd_Agente_1, ''),
						NullIf(@Cd_Agente_2, ''),
						NullIf(@Cd_PG, ''),
						NullIf(@Cd_LS_1, ''),
						NullIf(@Cd_LS_2, ''),
						'EUR',
						1,
						NullIf(@Cd_AR, ''),
						@Quantita,
						NullIf(@Cd_ARMisura, ''),
						@FattoreToUM1,
						0)
				End

			If	(@Cd_xContratto Is Not Null) And (@TipoMateriale = 3) And (@Id_xContrattoMateriale = 0) And ((@Cd_xRDModalita = 3) Or (@Previsti = 2))
				Begin
					Set @Prezzo = 0

					Select
						@Prezzo 						= Prezzo,
						@PrezzoAddizionale 	= PrezzoAddizionale,
						@Id_LSArticolo	   	= Id_LSArticolo,
						@Id_LSScaglione			= Id_LSScaglione
					From DoRig_Defaults_Prezzo(
						NullIf(@Cd_DoAttivita, ''),
						NullIf(@Cd_CF, ''),
						@DataInizio,
						Null,
						NullIf(@CD_CFDest, ''),
						NullIf(@Cd_Agente_1, ''),
						NullIf(@Cd_Agente_2, ''),
						NullIf(@Cd_PG, ''),
						NullIf(IsNull(@Cd_LS_Contratto, @Cd_LS_1), ''),
						NullIf(@Cd_LS_1, ''),
						'EUR',
						1,
						NullIf(@Cd_AR, ''),
						@Quantita,
						NullIf(@Cd_ARMisura, ''),
						@FattoreToUM1,
						0)
		
					If @Prezzo = 0
						Begin
							Select
								@Prezzo 						= Prezzo,
								@PrezzoAddizionale 	= PrezzoAddizionale,
								@Id_LSArticolo	   	= Id_LSArticolo,
								@Id_LSScaglione			= Id_LSScaglione
							From DoRig_Defaults_Prezzo(
								NullIf(@Cd_DoAttivita, ''),
								NullIf(@Cd_CF, ''),
								@DataInizio,
								Null,
								NullIf(@CD_CFDest, ''),
								NullIf(@Cd_Agente_1, ''),
								NullIf(@Cd_Agente_2, ''),
								NullIf(@Cd_PG, ''),
								NullIf(IsNull(@Cd_LS_1, ''), ''),
								Null,
								'EUR',
								1,
								NullIf(@Cd_AR, ''),
								@Quantita,
								NullIf(@Cd_ARMisura, ''),
								@FattoreToUM1,
								0)
						End		
					
					If Not IsNull(@MaterialeScontoRiga, '') = ''
						Begin
							Select 
								@Sconto = IsNull(Sconto, '')
							From 
								xGAC_GetSconto(
									'',
									@Cd_CF,
									@DataInizio,
									IsNull(@Cd_LS_Contratto, @Cd_LS_1),
									@Cd_AR,
									@Quantita,
									@Prezzo,
									@Id_LSArticolo,
									@Id_LSScaglione,
									@MaterialeScontoRiga)
						End
				End

			If IsNull(@Sconto, '') = ''
				Begin
					Select
						@Sconto 					= Sconto,
						@ScontoAddizionale	= ScontoAddizionale
					From DoRig_Defaults_Sconto(
						NullIf(@Cd_DoAttivita, ''),
						NullIf(@Cd_CF, ''),
						@DataInizio,
						Null,
						@CD_CFDest,
						NullIf(@Cd_Agente_1, ''),
						NullIf(@Cd_Agente_2, ''),
						NullIf(@Cd_PG, ''),
						NullIf(@Cd_LS_1, ''),
						NullIf(@Cd_LS_2, ''),
						'EUR',
						1,
						NullIf(@Cd_AR, ''),
						@Quantita,
						NullIf(@Cd_ARMisura, ''),
						@FattoreToUM1,
						@Prezzo,
						@PrezzoAddizionale,
						@Id_LSArticolo,
						@Id_LSScaglione,
						'')
				End
				
			Select
				@Provvigione_1 = Provvigione_1
			From DoRig_Defaults_Provvigione1(
				NullIf(@Cd_DoAttivita, ''),
				NullIf(@Cd_CF, ''),
				@DataInizio,
				Null,
				@CD_CFDest,
				NullIf(@Cd_Agente_1, ''),
				NullIf(@Cd_Agente_2, ''),
				NullIf(@Cd_PG, ''),
				NullIf(@Cd_LS_1, ''),
				NullIf(@Cd_LS_2, ''),
				'EUR',
				1,
				NullIf(@Cd_AR, ''),
				@Quantita,
				NullIf(@Cd_ARMisura, ''),
				@FattoreToUM1,
				@Prezzo,
				@PrezzoAddizionale,
				@Id_LSArticolo,
				@Id_LSScaglione,
				@Sconto,
				@ScontoAddizionale,
				'')
----------------------------------------------------------------
Fine_Funzione:
		If @Assistenza = 1 And @Previsti = 0 And @Cd_xRDModalita <> 5
			Begin
				-- Verifico la presenza di valori nei materiali previsti
				-- I materiali previsti entrano in gioco:
				--  a) solo per i ticket di assistenza;
				--  b) solo per le rilevazioni consuntive (non quindi per la valorizzazione dei previsti stessi);
				--  c) con una precedenza superiore a tutte le altre casistiche e seconda solo ai valori di un eventuale preventivo
				--     (per questo i valori dal preventivo sono gestiti in seguito).
				Select Top 1 @Prezzo = IsNull(PrezzoUnitarioV, 0)
						, @Sconto = IsNull(ScontoRiga, '')
					From xRDTicketMaterialeSpesaMov
					Where Cd_AR = @Cd_AR And (Cd_xSpesa Is Null) And Id_xRDTicket = @Id_xRDTicket And Previsto = 1
			End

		If (@Cd_Preventivo Is Not Null) And IsNull(@Cd_xRDModalita, 0) <> 5
			Begin
				-- I preventivi hanno sempre la precedenza sul resto
				Select @MaterialeUsaCostoV = P.MaterialeUsaCostoV, @NumRighe_Preventivo = ISNULL(Count(*), 0)
					From xPreventivoMateriale PM Inner Join xPreventivo P On PM.Id_Preventivo = P.Id_Preventivo
					Where PM.Cd_AR = @Cd_AR And P.Cd_Preventivo = @Cd_Preventivo
					Group By P.MaterialeUsaCostoV
				
				If @NumRighe_Preventivo > 0
					Begin
						If @MaterialeUsaCostoV = 0
							Select Top 1 @Prezzo = Case P.ModelloVal When 'C' Then ISNULL(PM.CostoUnitarioRicaricatoLordoV, 0)/PM.Cambio Else ISNULL(PM.RicavoUnitarioV, 0)/PM.Cambio End
									,@Sconto = Case P.ModelloVal When 'C' Then ISNULL(PM.ScontoCostoRicaricato, '') Else ISNULL(PM.Sconto, '') End
								From xPreventivoMateriale PM Inner Join xPreventivo P On PM.Id_Preventivo = P.Id_Preventivo
								Where PM.Cd_AR = @Cd_AR And P.Cd_Preventivo = @Cd_Preventivo
						Else
							Select Top 1 @CostoUn = PM.CostoUnitarioV
									,@Prezzo = Case P.ModelloVal When 'C' Then ISNULL(PM.CostoUnitarioRicaricatoLordoV, 0)/PM.Cambio Else ISNULL(PM.RicavoUnitarioV, 0)/PM.Cambio End
									,@Sconto = Case P.ModelloVal When 'C' Then ISNULL(PM.ScontoCostoRicaricato, '') Else ISNULL(PM.Sconto, '') End
								From xPreventivoMateriale PM Inner Join xPreventivo P On PM.Id_Preventivo = P.Id_Preventivo
								Where PM.Cd_AR = @Cd_AR And P.Cd_Preventivo = @Cd_Preventivo
					End	
			End

		If @Assistenza = 0
			begin
				-- 17-04-2019: gestione della formula di ricarico nei materiali.
				-- Tale formula è applicata, quando non vuota, sul costo per ottenere il prezzo.
				-- Ha precedenza su tutto il resto.
				declare @xRicarica as varchar(15)
				
				select @xRicarica = C.xRicarica 
					from DOSottoCommessa C inner join xRDTicket T on C.Cd_DOSottoCommessa = T.Cd_DOSottoCommessa 
					where (T.Id_xRDTicket = @Id_xRDTicket)

				if nullif(@xRicarica, '') is not null
					set @Prezzo = dbo.afn_PFormula_Eval(@CostoUn, dbo.afn_PFormula_Normalize(@xRicarica))
			end

      Insert @RetTbl
      Values (@CostoUn, @Prezzo, @Sconto, IsNull(IsNull(@Provvigione_Ag, @Provvigione_1), ''))
      Return
End
go

/****** Object:  UserDefinedFunction [dbo].[xGAC_RDTicket_Valorizzazione_Spesa]    Script Date: 10/02/2012 10:26:00 ******/
--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
CREATE FUNCTION [dbo].[xGAC_RDTicket_Valorizzazione_Spesa] (
	@Cd_xContratto	Char(10),
	@Cd_CF					Char(7),
	@CD_xOperatore	Varchar(20),
	@CD_CFDest			NChar(3),
	@Cd_ARMisura		Char(2),
	@Cd_xSpesa			Char(3),
	@Cd_xRDModalita Char(1),
	@DataInizio			SmallDateTime,
	@Cd_Agente			Char(3),
	@Quantita			Numeric(18,8),
	@Assistenza			Bit,
	@Cd_Preventivo		Varchar(20),
	@Id_xRDTicket		Integer,
	@Previsti			Integer, -- 0 = rilevazioni; 1 = previsti nel ticket; 2 = previsti negli interventi programmati.
	-- dati garanzia
	@SGV_Etichetta				Char(1),
	@Cd_AR_Ticket				Varchar(20),
	@Cd_xImpianto				Char(10),
	@Cd_DOSottoCommessaInst Varchar(20),
	@Cd_xMatricola				Varchar(40)
)

Returns @RetTbl Table (
	CostoUn				Numeric(18,6),
	Prezzo				Numeric(18,6),
	Sconto				Varchar(20),
	Provvigione_1	Varchar(20)
)
AS
Begin
      -- dichiarazione variabili per valori di ritorno
      Declare	@CostoUn		Numeric(18,6),
				@Prezzo			Numeric(18,6),
				@Sconto			Varchar(20),
				@Provvigione_1	Varchar(20)

      -- dichiarazione variabili per valori dai preventivi
      Declare @NumRighe_Preventivo		Integer
		Declare @SpesaUsaCostoV				Bit

		-- dichiarazione variabili di appoggio
		Declare 	@Cd_Agente_1				Char(3),
					@Cd_Agente_2				Char(3),
					@Cd_PG						Char(4),
					@Cd_LS_1					Char(7),
					@Cd_LS_2					Char(7),
					@Cd_AR						Varchar(20),
					@Cd_DoAttivita				Char(3),
					@TipoCosto					TinyInt,
					@Cd_LS_Costo				Char(7),
					@Cd_LS_Prezzo				Char(7),
					@Id_LSArticolo	   			Integer,
					@Id_LSScaglione				Integer,
					@Provvigione_Ag				Varchar(10),
					@AForfait					Bit,
					-- dati contratto
					@TipoSpesa					TinyInt,
					@Cd_LS_Spesa				Char(7),
					@Cd_LS_Contratto			Char(7),
					@SpesaScontoRiga			VarChar(1000),
					@Id_xContrattoSpesa			Integer,
					-- dati garanzia
					@SpesaInGaranzia		Bit
			
			-- dati voce di spesa
			Select 
				@Cd_AR			= Cd_AR,
				@TipoCosto		= TipoCosto,
				@Cd_LS_Costo	= Cd_LS_Costo,
				@Cd_LS_Prezzo	= Cd_LS_Prezzo,
				@AForfait		= AForfait
			From
				xSpesa
			Where
				xSpesa.Cd_xSpesa = @Cd_xSpesa
				
			-- impostazioni G.A.C.
			Select	@Cd_DoAttivita = Cd_DOAttivita
			From	xImpostazione	
			
			-- costo
			If @TipoCosto = 1 Select @CostoUn = 0
			
			If @TipoCosto = 2 
				Begin
					Select
						@CostoUn = Prezzo
					From DoRig_Defaults_PrezzoLS(
								@Cd_LS_Costo,
								@Cd_AR,
								@DataInizio,
								1,
								@Cd_CF)				
				End

			-- dati cliente
			Select	@Cd_Agente_1	= Cd_Agente_1, 
					@Cd_Agente_2	= Cd_Agente_2, 
					@Cd_PG			= Cd_PG, 
					@Cd_LS_1		= Cd_LS_1, 
					@Cd_LS_2		= Cd_LS_2
			From	CF 
			Where	Cd_CF = @Cd_CF
						
			-- dati agente
			Select	@Provvigione_Ag = Provvigione 
			From	Agente 
			Where	Cd_Agente = IsNull(@Cd_Agente, 'xxxxxxx')
			
			-- dati contratto
			Set @Id_xContrattoSpesa = 0
			
			-- I Ticket A Forfait non vengono valorizzati, tranne che per le spese utilizzate per i prezzi a forfait.
			If @Cd_xRDModalita = 5 And @AForfait = 0
				Begin
					Select @Prezzo = 0, @Sconto = '', @Provvigione_1 = ''
					GoTo Fine_Funzione
				End
			
			If @Cd_xContratto Is Null And @Cd_xRDModalita = 2 --@Previsti = 0 And 
				Begin
					If IsNull(@SGV_Etichetta, '') = '' Set @SpesaInGaranzia = 1
					If @SGV_Etichetta = 'M' Select @SpesaInGaranzia = SpesaInGaranzia		From xMatricola		Where Cd_AR = @Cd_AR_Ticket And Cd_xMatricola = @Cd_xMatricola
					If @SGV_Etichetta = 'S' Select @SpesaInGaranzia = xSpesaInGaranzia	From DOSottoCommessa Where Cd_DOSottoCommessa = @Cd_DOSottoCommessaInst
					If @SGV_Etichetta = 'I' Select @SpesaInGaranzia = SpesaInGaranzia		From xImpianto			Where Cd_xImpianto = @Cd_xImpianto

					If @SpesaInGaranzia = 1
						Begin
							Select @Prezzo = 0, @Sconto = '', @Provvigione_1 = ''
							GoTo Fine_Funzione
						End
				End
			
			If (@Cd_xContratto Is Not Null) And ((@Cd_xRDModalita = 3) Or (@Previsti = 2))
				-- prezzo e sconto dal contratto
				Begin
					Select	@TipoSpesa			= TipoSpesa,
							@Cd_LS_Spesa		= Cd_LS_Spesa,
							@Cd_LS_Contratto	= Cd_LS_Contratto,
							@SpesaScontoRiga	= SpesaScontoRiga
					From	xContratto
					Where	Cd_xContratto = @Cd_xContratto
					
					If @TipoSpesa = 1 Select @Prezzo = 0, @Sconto = '', @Provvigione_1 = '', @Provvigione_Ag = ''
					
					If @TipoSpesa = 2
						Begin
							Select
								@Prezzo 						= Prezzo
							From DoRig_Defaults_Prezzo(
								NullIf(@Cd_DoAttivita, ''),
								NullIf(@Cd_CF, ''),
								@DataInizio,
								Null,
								NullIf(@CD_CFDest, ''),
								NullIf(@Cd_Agente_1, ''),
								NullIf(@Cd_Agente_2, ''),
								NullIf(@Cd_PG, ''),
								NullIf(@Cd_LS_Prezzo, ''),
								Null,
								'EUR',
								1,
								NullIf(@Cd_AR, ''),
								@Quantita,
								NullIf(@Cd_ARMisura, ''),
								1,
								0)			
						End
						
					If @TipoSpesa = 3
						Begin
							Select
								@Prezzo 						= Prezzo,
								@Id_LSArticolo	   	= Id_LSArticolo,
								@Id_LSScaglione			= Id_LSScaglione
							From DoRig_Defaults_Prezzo(
								NullIf(@Cd_DoAttivita, ''),
								NullIf(@Cd_CF, ''),
								@DataInizio,
								Null,
								NullIf(@CD_CFDest, ''),
								NullIf(@Cd_Agente_1, ''),
								NullIf(@Cd_Agente_2, ''),
								NullIf(@Cd_PG, ''),
								NullIf(IsNull(@Cd_LS_Spesa, @Cd_LS_Contratto), ''),
								NullIf(@Cd_LS_Contratto, ''),
								'EUR',
								1,
								NullIf(@Cd_AR, ''),
								@Quantita,
								NullIf(@Cd_ARMisura, ''),
								1,
								0)
										
							Select 
								@Sconto = IsNull(Sconto, '')
							From 
								xGAC_GetSconto(
									'',
									@Cd_CF,
									@DataInizio,
									IsNull(@Cd_LS_Spesa, @Cd_LS_Contratto),
									@Cd_AR,
									1,
									@Prezzo,
									@Id_LSArticolo,
									@Id_LSScaglione,
									@SpesaScontoRiga)			
						End
						
					If @TipoSpesa = 4
						Begin
							Select
								@Id_xContrattoSpesa	= Id_xContrattoSpesa,
								@Prezzo							= PrezzoUnitarioV,
				  			@Sconto							= Sconto
							From 
								xContrattoSpesa Inner Join xContratto 
								On xContrattoSpesa.Id_xContratto = xContratto.Id_xContratto
							Where
								xContratto.Cd_xContratto = @Cd_xContratto 
								And xContrattoSpesa.Cd_xSpesa = @Cd_xSpesa
								And ((xContrattoSpesa.DataFine Is Not Null And @DataInizio Between xContrattoSpesa.DataInizio And xContrattoSpesa.DataFine)
										Or (xContrattoSpesa.DataFine Is Null And @DataInizio >= xContrattoSpesa.DataInizio))
						End
						
					If @TipoSpesa < 4 Or @Id_xContrattoSpesa > 0 GoTo Fine_Funzione
				End

			-- prezzo, sconto e provvigione (ticket senza contratto)
			If	(@Cd_xContratto Is Null) Or (@Cd_xRDModalita = 1)
				Begin
					Set @Prezzo = 0
					
					Select
						@Prezzo 						= Prezzo,
						@Id_LSArticolo	   	= Id_LSArticolo,
						@Id_LSScaglione			= Id_LSScaglione
					From DoRig_Defaults_Prezzo(
						NullIf(@Cd_DoAttivita, ''),
						NullIf(@Cd_CF, ''),
						@DataInizio,
						Null,
						NullIf(@CD_CFDest, ''),
						NullIf(@Cd_Agente_1, ''),
						NullIf(@Cd_Agente_2, ''),
						NullIf(@Cd_PG, ''),
						NullIf(IsNull(@Cd_LS_1, @Cd_LS_Prezzo), ''),
						NullIf(IsNull(@Cd_LS_2, @Cd_LS_Prezzo), ''),
						'EUR',
						1,
						NullIf(@Cd_AR, ''),
						@Quantita,
						NullIf(@Cd_ARMisura, ''),
						1,
						0)
					
					If @Prezzo = 0
						Begin
							Select
								@Prezzo 						= Prezzo,
								@Id_LSArticolo	   	= Id_LSArticolo,
								@Id_LSScaglione			= Id_LSScaglione
							From DoRig_Defaults_Prezzo(
								NullIf(@Cd_DoAttivita, ''),
								NullIf(@Cd_CF, ''),
								@DataInizio,
								Null,
								NullIf(@CD_CFDest, ''),
								NullIf(@Cd_Agente_1, ''),
								NullIf(@Cd_Agente_2, ''),
								NullIf(@Cd_PG, ''),
								NullIf(IsNull(@Cd_LS_Prezzo, ''), ''),
								Null,
								'EUR',
								1,
								NullIf(@Cd_AR, ''),
								@Quantita,
								NullIf(@Cd_ARMisura, ''),
								1,
								0)
						End
				End

			If	(@Cd_xContratto Is Not Null) And (@TipoSpesa = 4) And (@Id_xContrattoSpesa = 0) And ((@Cd_xRDModalita = 3) Or (@Previsti = 2))
				Begin
					Set @Prezzo = 0
					Set @Sconto = ''

					Select
						@Prezzo 						= Prezzo,
						@Id_LSArticolo	   	= Id_LSArticolo,
						@Id_LSScaglione			= Id_LSScaglione
					From DoRig_Defaults_Prezzo(
						NullIf(@Cd_DoAttivita, ''),
						NullIf(@Cd_CF, ''),
						@DataInizio,
						Null,
						NullIf(@CD_CFDest, ''),
						NullIf(@Cd_Agente_1, ''),
						NullIf(@Cd_Agente_2, ''),
						NullIf(@Cd_PG, ''),
						NullIf(IsNull(@Cd_LS_Contratto, @Cd_LS_1), ''),
						NullIf(@Cd_LS_1, ''),
						'EUR',
						1,
						NullIf(@Cd_AR, ''),
						@Quantita,
						NullIf(@Cd_ARMisura, ''),
						1,
						0)
		
					If @Prezzo = 0
						Begin
							Select
								@Prezzo 						= Prezzo,
								@Id_LSArticolo	   	= Id_LSArticolo,
								@Id_LSScaglione			= Id_LSScaglione
							From DoRig_Defaults_Prezzo(
								NullIf(@Cd_DoAttivita, ''),
								NullIf(@Cd_CF, ''),
								@DataInizio,
								Null,
								NullIf(@CD_CFDest, ''),
								NullIf(@Cd_Agente_1, ''),
								NullIf(@Cd_Agente_2, ''),
								NullIf(@Cd_PG, ''),
								NullIf(IsNull(@Cd_LS_1, ''), ''),
								Null,
								'EUR',
								1,
								NullIf(@Cd_AR, ''),
								@Quantita,
								NullIf(@Cd_ARMisura, ''),
								1,
								0)
						End

					If Not IsNull(@SpesaScontoRiga, '') = ''						
						Begin
							Select 
								@Sconto = IsNull(Sconto, '')
							From 
								xGAC_GetSconto(
									'',
									@Cd_CF,
									@DataInizio,
									IsNull(@Cd_LS_Contratto, @Cd_LS_1),
									@Cd_AR,
									1,
									@Prezzo,
									@Id_LSArticolo,
									@Id_LSScaglione,
									@SpesaScontoRiga)
						End
				End

			If IsNull(@Sconto, '') = ''
				Begin
					Select
						@Sconto 					= Sconto
					From DoRig_Defaults_Sconto(
						NullIf(@Cd_DoAttivita, ''),
						NullIf(@Cd_CF, ''),
						@DataInizio,
						Null,
						@CD_CFDest,
						NullIf(@Cd_Agente_1, ''),
						NullIf(@Cd_Agente_2, ''),
						NullIf(@Cd_PG, ''),
						NullIf(IsNull(@Cd_LS_1, @Cd_LS_Prezzo), ''),
						NullIf(IsNull(@Cd_LS_2, @Cd_LS_Prezzo), ''),
						'EUR',
						1,
						NullIf(@Cd_AR, ''),
						@Quantita,
						NullIf(@Cd_ARMisura, ''),
						1,
						@Prezzo,
						0,
						@Id_LSArticolo,
						@Id_LSScaglione,
						'')
				End

			Select
				@Provvigione_1 = Provvigione_1
			From DoRig_Defaults_Provvigione1(
				NullIf(@Cd_DoAttivita, ''),
				NullIf(@Cd_CF, ''),
				@DataInizio,
				Null,
				@CD_CFDest,
				NullIf(@Cd_Agente_1, ''),
				NullIf(@Cd_Agente_2, ''),
				NullIf(@Cd_PG, ''),
				NullIf(@Cd_LS_1, ''),
				NullIf(@Cd_LS_2, ''),
				'EUR',
				1,
				NullIf(@Cd_AR, ''),
				@Quantita,
				NullIf(@Cd_ARMisura, ''),
				1,
				@Prezzo,
				0,
				@Id_LSArticolo,
				@Id_LSScaglione,
				@Sconto,
				'',
				'')
			
----------------------------------------------------------------
Fine_Funzione:
		If @Assistenza = 1 And @Previsti = 0 And (@Cd_xRDModalita <> 5 Or @AForfait = 1)
			Begin
				-- Verifico la presenza di valori nelle spese previste
				-- Le spese previste entrano in gioco:
				--  a) solo per i ticket di assistenza;
				--  b) solo per le rilevazioni consuntive (non quindi per la valorizzazione dei previsti stessi);
				--  c) con una precedenza superiore a tutte le altre casistiche e seconda solo ai valori di un eventuale preventivo
				--     (per questo i valori dal preventivo sono gestiti in seguito).
				Select Top 1 @Prezzo = IsNull(PrezzoUnitarioV, 0)
						, @Sconto = IsNull(ScontoRiga, '')
					From xRDTicketMaterialeSpesaMov
					Where Cd_xSpesa = @Cd_xSpesa And (Cd_xSpesa Is Not Null) And Id_xRDTicket = @Id_xRDTicket And Previsto = 1
			End

		If (@Cd_Preventivo Is Not Null) And ((IsNull(@Cd_xRDModalita, 0) <> 5) Or @AForfait = 1)
			Begin
				-- I preventivi hanno sempre la precedenza sul resto
				Select @SpesaUsaCostoV = P.SpesaUsaCostoV, @NumRighe_Preventivo = ISNULL(Count(*), 0)
					From xPreventivoSpesa PS Inner Join xPreventivo P On PS.Id_Preventivo = P.Id_Preventivo
					Where PS.Cd_xSpesa = @Cd_xSpesa And P.Cd_Preventivo = @Cd_Preventivo
					Group By P.SpesaUsaCostoV
				
				If @NumRighe_Preventivo > 0
					Begin
						If @SpesaUsaCostoV = 0
							Select Top 1 @Prezzo = Case P.ModelloVal When 'C' Then ISNULL(PS.CostoUnitarioRicaricatoLordoV, 0)/PS.Cambio Else ISNULL(PS.RicavoUnitarioV, 0)/PS.Cambio End
									,@Sconto = Case P.ModelloVal When 'C' Then ISNULL(PS.ScontoCostoRicaricato, '') Else ISNULL(PS.Sconto, '') End
								From xPreventivoSpesa PS Inner Join xPreventivo P On PS.Id_Preventivo = P.Id_Preventivo
								Where PS.Cd_xSpesa = @Cd_xSpesa And P.Cd_Preventivo = @Cd_Preventivo
						Else
							Select Top 1 @CostoUn = PS.CostoUnitarioV
									,@Prezzo = Case P.ModelloVal When 'C' Then ISNULL(PS.CostoUnitarioRicaricatoLordoV, 0)/PS.Cambio Else ISNULL(PS.RicavoUnitarioV, 0)/PS.Cambio End
									,@Sconto = Case P.ModelloVal When 'C' Then ISNULL(PS.ScontoCostoRicaricato, '') Else ISNULL(PS.Sconto, '') End
								From xPreventivoSpesa PS Inner Join xPreventivo P On PS.Id_Preventivo = P.Id_Preventivo
								Where PS.Cd_xSpesa = @Cd_xSpesa And P.Cd_Preventivo = @Cd_Preventivo
					End	
			End

		-- aggiornamento costo = prezzo
		If @TipoCosto = 1 Select @CostoUn = @Prezzo

		If (@Assistenza = 0) And (@TipoCosto <> 1) 
			begin
				-- 24-04-2019: gestione della formula di ricarico nelle spese.
				-- Tale formula è applicata, quando non vuota, sul costo per ottenere il prezzo.
				-- Ha precedenza su tutto il resto.
				declare @xRicarica as varchar(15)
				
				select @xRicarica = C.xRicarica 
					from DOSottoCommessa C inner join xRDTicket T on C.Cd_DOSottoCommessa = T.Cd_DOSottoCommessa 
					where (T.Id_xRDTicket = @Id_xRDTicket)

				if nullif(@xRicarica, '') is not null
					set @Prezzo = dbo.afn_PFormula_Eval(@CostoUn, dbo.afn_PFormula_Normalize(@xRicarica))
			end

      Insert @RetTbl
      Values (@CostoUn, @Prezzo, @Sconto, IsNull(IsNull(@Provvigione_Ag, @Provvigione_1), ''))
      Return
End

GO

--------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------
CREATE FUNCTION [dbo].[xGAC_RDTicket_Valorizzazione] (
	@TipoRichiesta						TinyInt, -- 1-Attività, 2-Materiali, 3-Spese
	@Cd_xContratto						Char(10),
	@CD_PrAttivita						Varchar(20),
	@CD_xRDTipoValorizzazione	Char(5),
	@Cd_CF										Char(7),
	@CD_xOperatore						Varchar(20),
	@Cd_Agente								Char(3),
	@DataInizio								SmallDateTime,
	@CD_CFDest								NChar(3),
	@Cd_AR										Varchar(20),
	@Durata										Numeric(18,6),
	@Quantita									Numeric(18,8),
	@Cd_ARMisura							Char(2),
	@FattoreToUM1							Numeric(18,8),
	@Cd_xSpesa								Char(3),
	@Cd_xRDModalita						Char(1),
	@Assistenza								Bit,
	@Cd_PrRisorsa							Varchar(20),
	@Id_xRDTicket							Integer,
	@Previsti									Integer, -- 0 = rilevazioni; 1 = previsti nel ticket; 2 = previsti negli interventi programmati.
	@Cd_Preventivo_IP					Varchar(20),
	-- dati garanzia
	@SGV_Etichetta						Char(1),
	@Cd_AR_Ticket							Varchar(20),
	@Cd_xImpianto							Char(10),
	@Cd_DOSottoCommessaInst		Varchar(20),
	@Cd_xMatricola						Varchar(40)
)

Returns @RetTbl Table (
	CostoUn				Numeric(18,6),
	Prezzo				Numeric(18,6),
	Sconto				Varchar(20),
	Provvigione_1	Varchar(20)
)
AS
Begin
		-- dichiarazione variabili comuni
		Declare	@Cd_Preventivo			Varchar(20)

	    -- dichiarazione variabili per valori di ritorno
		Declare	@CostoUn				Numeric(18,6),
				@Prezzo					Numeric(18,6),
				@Sconto					Varchar(20),
				@Provvigione_1			Varchar(20)

		-- Ricerco l'eventuale sottopreventivo legato al ticket
		-- Per i ticket di assistenza, il sottopreventivo è un campo di testa del ticket
		-- Per i ticket di produzione, il sottopreventivo è quello legato alla sottocommessa di testa del ticket
		If @Assistenza = 0
			Select @Cd_Preventivo = xCd_Preventivo From DOSottoCommessa Where Cd_DOSottoCommessa In (
			Select Cd_DOSottoCommessa From xRDTicket Where Id_xRDTicket = @Id_xRDTicket)
		Else
			Select @Cd_Preventivo = Cd_Preventivo From xRDTicket Where Id_xRDTicket = @Id_xRDTicket
		
		If @Previsti = 2 Set @Cd_Preventivo = @Cd_Preventivo_IP -- Provengo dagli interventi programmati
			
		Set @Cd_Preventivo = NullIf(@Cd_Preventivo, '')
 
		If @TipoRichiesta = 1
			Begin
				Select		@CostoUn		= CostoUn,
							@Prezzo			= Prezzo,
							@Sconto			= Sconto,
							@Provvigione_1	= Provvigione_1
				From		dbo.xGAC_RDTicket_Valorizzazione_Attivita(
									@Cd_xContratto	,
									@CD_PrAttivita	,
									@CD_xRDTipoValorizzazione ,
									@Cd_CF					,
									@CD_xOperatore	,
									@Cd_Agente			,
									@DataInizio			,
									@CD_CFDest			,
									@Durata					,
									@Cd_xRDModalita,
									@Cd_PrRisorsa,
									@Assistenza,
									@Cd_Preventivo,
									@Id_xRDTicket,
									@Previsti,
									-- dati garanzia
									@SGV_Etichetta			,
									@Cd_AR_Ticket			,
									@Cd_xImpianto			,
									@Cd_DOSottoCommessaInst,
									@Cd_xMatricola
								)
			End

		If @TipoRichiesta = 2
			Begin
				Select		@CostoUn		= CostoUn,
							@Prezzo			= Prezzo,
							@Sconto			= Sconto,
							@Provvigione_1	= Provvigione_1
				From		dbo.xGAC_RDTicket_Valorizzazione_Materiale(
									@Cd_xContratto	,
									@Cd_CF					,
									@CD_xOperatore	,
									@Cd_Agente			,
									@CD_CFDest			,
									@Cd_AR					,
									@Quantita				,
									@FattoreToUM1		,
									@Cd_ARMisura		,
									@Cd_xRDModalita ,
									@DataInizio			,
									@Assistenza,
									@Cd_Preventivo,
									@Id_xRDTicket,
									@Previsti,
									-- dati garanzia
									@SGV_Etichetta			,
									@Cd_AR_Ticket			,
									@Cd_xImpianto			,
									@Cd_DOSottoCommessaInst,
									@Cd_xMatricola 
								)
			End

		If @TipoRichiesta = 3
			Begin
				Select		@CostoUn		= CostoUn,
							@Prezzo			= Prezzo,
							@Sconto			= Sconto,
							@Provvigione_1	= Provvigione_1
				From		dbo.xGAC_RDTicket_Valorizzazione_Spesa(
									@Cd_xContratto	,
									@Cd_CF					,
									@CD_xOperatore	,
									@CD_CFDest			,
									@Cd_ARMisura		,
									@Cd_xSpesa      ,
									@Cd_xRDModalita ,
									@DataInizio,
									@Cd_Agente,
									@Quantita,
									@Assistenza,
									@Cd_Preventivo,
									@Id_xRDTicket,
									@Previsti,
									-- dati garanzia
									@SGV_Etichetta			,
									@Cd_AR_Ticket			,
									@Cd_xImpianto			,
									@Cd_DOSottoCommessaInst,
									@Cd_xMatricola
								)
			End
----------------------------------------------------------------
Fine_Funzione:
      Insert @RetTbl
      Values (IsNull(@CostoUn, 0), IsNull(@Prezzo, 0), @Sconto, @Provvigione_1)
      Return
End
GO

-- Creazione di un nuovo documento per ticket\attività
CREATE PROCEDURE [dbo].[xasp_Ticket_GeneraDoc] (
		@Cd_DO						Char(3),
		@Cd_CF						Char(7),
		@Cd_CFDest				Char(3),
		@Id_xRDTicket			Int,
		@DataRichiesta		SmallDateTime,
		@Cd_AR 						VarChar(20),
		@Cd_xMatricola		VarChar(40),
		@Cd_MG_P					VARCHAR(5),
		@Cd_MG_A					VARCHAR(5),
		@nReturn					Integer = 0 Output
	)
	/*ENCRYPTED*/ 
	As
	
	-- Return:
	--	>= 0: End OK (1  Nothing To Do)
	--	< 0: End Failed
	--	-1: Cliente non valido
	--	-2: Tipo documento non valido
	--	-3: Cliente non trovato
	--	-4: Documento non trovato
	IF ISNULL(@CD_CF, '') = '' BEGIN
		RAISERROR('Cliente non valido : %d', 15, -1, @CD_CF)
		SET @nReturn = -1
		RETURN @nReturn 
	END

	IF ISNULL(@CD_DO, '') = '' BEGIN
		RAISERROR('Tipo documento non valido : %d', 15, -1, @CD_DO)
		SET @nReturn = -2
		RETURN @nReturn 
	END

	DECLARE @TestCount INT

	SELECT @TestCount = COUNT(*)
	FROM CF
	WHERE CF.CD_CF = @CD_CF

	IF @TestCount = 0 BEGIN
		RAISERROR('Cliente non trovato: %d', 15, -1, @CD_CF)
		SET @nReturn = -3
		RETURN @nReturn
	END

	SELECT @TestCount = COUNT(*)
	FROM DO
	WHERE DO.CD_DO = @CD_DO

	IF @TestCount = 0 BEGIN
		RAISERROR('Documento non trovato: %d', 15, -1, @CD_DO)
		SET @nReturn = -4
		RETURN @nReturn
	END

	/* Dichiarazione variabili identificativi per relazionare testa e righe */
	DECLARE	@LastIdentity_Id_DOTes INT, 
					@LastIdentity_Id_DORig INT

	/* Dichiarazioni variabili campi testa documento */
	DECLARE	@Cd_CFSede CHAR(3), 
				@NumeroDocRif VARCHAR(20), 
				@DataDocRif SMALLDATETIME, 
				@Cd_VL CHAR(3), 
				@Cambio NUMERIC(18, 6), 
				@Cd_LS_1 CHAR(7),
				@Cd_LS_2 CHAR(7),
				@Cd_PG CHAR(4), 
				@Cd_Agente_1 CHAR(3), 
				@Cd_Agente_2 CHAR(3), 
				@Cd_CFZona CHAR(3), 
				@Cd_CGConto_Banca CHAR(12), 
				@Cd_DOSottoCommessa_Tes VARCHAR(20), 
				@ScontoCassa VARCHAR(20), 
				@Cd_DOTrasporto CHAR(3), 
				@Cd_DOSped CHAR(3), 
				@Cd_DOPorto CHAR(3), 
				@Cd_DOAspBene CHAR(3), 
				@Cd_DOVettore_1 CHAR(2), 
				@Cd_DOVettore_2 CHAR(2), 
				@Vettore1DataOra DATETIME, 
				@Vettore2DataOra DATETIME, 
				@TrasportoDataora DATETIME,
				@PesoLordo NUMERIC(18, 8),
				@PesoNetto NUMERIC(18, 8),
				@VolumeTotale NUMERIC(18, 8),
				@Colli INT,
				@NotePiede VARCHAR(8000),
				@Esecutivo BIT,
				@Prelevabile BIT,
				@Modificabile BIT

	/* Dichiarazione variabili campi riga documento */
	DECLARE @Riga SMALLINT,
				@DataDoc SmallDateTime, 
				@Descrizione VARCHAR(80), 
				@Cd_MGUbicazione_A VARCHAR(20),
				@Cd_MGUbicazione_P VARCHAR(20),
				@Cd_ARMisura CHAR(2), 
				@Cd_CGConto CHAR(12), 
				@Cd_Aliquota CHAR(3), 
				@Cd_DOSottoCommessa_Rig VARCHAR(20), 
				@TipoRigaRif CHAR(1), 
				@Qta NUMERIC(18, 8),
				@FattoreToUM1 NUMERIC(18, 8), 
				@PrezzoUnitarioV NUMERIC(18, 6), 
				@ScontoRiga VARCHAR(20), 
				@PrezzoAddizionaleV NUMERIC(18, 6), 
				@PrezzoTotaleV NUMERIC(18, 6),
				@Omaggio TINYINT, 
				@ProvvigioneRiga_1 VARCHAR(16), 
				@ProvvigioneRiga_2 VARCHAR (16), 
				@DataConsegna SMALLDATETIME, 
				@ScontoAddizionale VARCHAR(20),
				@NoteRiga VARCHAR(8000),
				@xCD_xBancale VARCHAR(4),
				@xNumBancali NUMERIC(18, 0),
				@Cd_ARLotto VARCHAR(20),
				@xId_DORig Int

	DECLARE	@SXmlMatricole Varchar(8000)

	-- Selezione dei dati di default di testa
	SELECT 
		@DataDoc = GETDATE(),
		@Vettore1DataOra = GETDATE(),
		@Vettore2DataOra = GETDATE(),
		@TrasportoDataOra = null,
		@NotePiede = NoteDO,
		@PesoLordo = 0,
		@PesoNetto = 0,
		@VolumeTotale = 0,
		@Colli = 0
	FROM DO WITH (READUNCOMMITTED)
	WHERE Cd_DO = @Cd_DO

	SELECT
		@Cd_CFSede = Cd_CFSede,
		@Cd_VL = Cd_VL,
		@Cambio = Cambio,
		@Cd_LS_1 = Cd_LS_1,
		@Cd_LS_2 = Cd_LS_2, 
		@Cd_PG = Cd_PG,
		@Cd_Agente_1 = Cd_Agente_1,
		@Cd_Agente_2 = Cd_Agente_2,
		@Cd_CFZona = Cd_CFZona, 
		@Cd_CGConto_Banca = Cd_CGConto_Banca,
		@ScontoCassa = ScontoCassa,
		@Cd_DOTrasporto = Cd_DOTrasporto,
		@Cd_DOSped = Cd_DOSped, 
		@Cd_DOPorto = Cd_DOPorto, 
		@Cd_DOAspBene = Cd_DOAspBene, 	
		@Cd_DOVettore_1 = Cd_DOVettore_1, 
		@Cd_DOVettore_2 = Cd_DOVettore_2,
		@Esecutivo = Esecutivo,
		@Prelevabile = Prelevabile,
		@Modificabile = Modificabile
	FROM dbo.DOTes_Defaults(@CD_DO, @CD_CF, @DataDoc)

	/* Inizio inserimento documento */
	BEGIN TRANSACTION tran_GeneraDoc
	EXEC asp_Do_Begin 0, 1

	/* Inserimento della testa */
	INSERT INTO DOTes(	Cd_CF, Cd_CFDest, Cd_CFSede, Cd_DO, DataDoc, NumeroDocRif, DataDocRif, Cd_VL, Cambio, 
						Cd_PG, Cd_Agente_1, Cd_Agente_2, Cd_CFZona, Cd_CGConto_Banca, ScontoCassa, 
						Cd_DOTrasporto, Cd_DOSped, Cd_DOPorto, Cd_DOAspBene, Cd_DOVettore_1, Cd_DOVettore_2, 
						Vettore1DataOra, Vettore2DataOra, TrasportoDataora, PesoLordo, PesoNetto, VolumeTotale, Colli, Cd_LS_1, Cd_LS_2, Esecutivo, Prelevabile, Modificabile) 
	VALUES (	@Cd_CF, @Cd_CFDest, @Cd_CFSede, @Cd_DO, @DataDoc, @Id_xRDTicket, @DataRichiesta, @Cd_VL, @Cambio, 
				@Cd_PG, @Cd_Agente_1, @Cd_Agente_2, @Cd_CFZona, @Cd_CGConto_Banca, @ScontoCassa, 
				@Cd_DOTrasporto, @Cd_DOSped, @Cd_DOPorto, @Cd_DOAspBene, @Cd_DOVettore_1, @Cd_DOVettore_2, 
				@Vettore1DataOra, @Vettore2DataOra, @TrasportoDataora, @PesoLordo, @PesoNetto, @VolumeTotale, @Colli, @Cd_LS_1, @Cd_LS_2, @Esecutivo, @Prelevabile, @Modificabile)

	SET @LastIdentity_Id_DOTes = SCOPE_IDENTITY()
	IF @@ROWCOUNT < 1 BEGIN
		RAISERROR('Inserimento testa documento fallito: %d', 15, -1, @Id_xRDTicket)
		SET @nReturn = -21
		ROLLBACK TRANSACTION tran_GeneraDoc
		RETURN @nReturn 
	END
	
	Set @SXmlMatricole = ''
	IF Len(@Cd_xMatricola) > 0 SET @SXmlMatricole = '<row matricola="' + ISNULL(@Cd_xMatricola, '') +  '" />'
	IF Len(@SXmlMatricole) > 0 SET @SXmlMatricole = '<rows>' + @SXmlMatricole + '</rows>'

	/* Gestione dati di riga */
	-- Determinazione @DataConsegna
	Set @DataConsegna = @DataDoc

	-- Selezione dei defaults di riga
	SELECT @Cd_CGConto = Cd_CGConto, @Cd_Aliquota = Cd_Aliquota 
		FROM dbo.DORig_Defaults_AliquotaConto(@Cd_CF, @Cd_CFDest, @Cd_AR, @Cd_DO)

	Select @CD_ARMisura = Cd_ARMisura From ARARMisura Where Cd_AR = @Cd_AR And DefaultMisura = 1
	SET @FattoreToUM1 = 1 
	SET @Qta = 1

	-- Selezione dei defaults di riga
	SELECT @PrezzoUnitarioV = Prezzo, @PrezzoAddizionaleV = PrezzoAddizionale 
		FROM dbo.DORig_Defaults_Prezzo(	@Cd_DO, @Cd_CF, @DataDoc, @DataConsegna, @Cd_CFDest, 
													@Cd_Agente_1, @Cd_Agente_2, @Cd_PG, 
													@Cd_LS_1, @Cd_LS_2, @Cd_VL, @Cambio, 
													@Cd_AR, @Qta, @Cd_ARMisura, @FattoreToUM1, 1)

	SELECT @ScontoRiga = Sconto, @ScontoAddizionale = ScontoAddizionale 
		FROM dbo.DORig_Defaults(	@Cd_DO, @Cd_CF, @DataDoc, @DataConsegna, @Cd_CFDest, 
													@Cd_Agente_1, @Cd_Agente_2, @Cd_PG, 
													@Cd_LS_1, @Cd_LS_2, @Cd_VL, @Cambio, 
													@Cd_AR, @Qta, @Cd_ARMisura, @FattoreToUM1, 1)
	SELECT @ProvvigioneRiga_1 = Provvigione_1 
		FROM dbo.DORig_Defaults_Provvigione1(	@Cd_DO, @Cd_CF, @DataDoc, @DataConsegna, @Cd_CFDest, 
															@Cd_Agente_1, @Cd_Agente_2, @Cd_PG, @Cd_LS_1, 
															@Cd_LS_2, @Cd_VL, @Cambio, @Cd_AR, @Qta, 
															@Cd_ARMisura, @FattoreToUM1, @PrezzoUnitarioV, 
															@PrezzoAddizionaleV, NULL, NULL, @ScontoRiga, 
															@ScontoAddizionale, '')

	SELECT @ProvvigioneRiga_2 = Provvigione_2 
		FROM dbo.DORig_Defaults_Provvigione2(	@Cd_DO, @Cd_CF, @DataDoc, @DataConsegna, @Cd_CFDest, 
															@Cd_Agente_1, @Cd_Agente_2, @Cd_PG, @Cd_LS_1, 
															@Cd_LS_2, @Cd_VL, @Cambio, @Cd_AR, @Qta, 
															@Cd_ARMisura, @FattoreToUM1, @PrezzoUnitarioV, 
															@PrezzoAddizionaleV, NULL, NULL, @ScontoRiga, 
															@ScontoAddizionale, @ProvvigioneRiga_1, '')

	-- Inserimento della riga nel documento
	INSERT INTO DORig(Id_DOTes, Cd_AR, Qta, Cd_MG_P, Cd_MG_A, Cd_CGConto, Cd_Aliquota, 
							PrezzoUnitarioV, PrezzoAddizionaleV, ScontoRiga, ScontoAddizionale, ProvvigioneRiga_1, 
							ProvvigioneRiga_2, DataConsegna, Cd_ARMisura, FattoreToUM1, Matricole, Riga, xId_RDTicket) 
	VALUES(	@LastIdentity_Id_DOTes, @Cd_AR, @Qta, @Cd_MG_P, @Cd_MG_A, @Cd_CGConto, @Cd_Aliquota, 
				0, 0, '', '', '', 
				'', @DataConsegna, @Cd_ARMisura, @FattoreToUM1, NULLIF(@SXmlMatricole, ''), 1, @Id_xRDTicket)
				-- 01-10-2012: Prezzo sempre uguale a 0. Prima era: @PrezzoUnitarioV, @PrezzoAddizionaleV, @ScontoRiga, @ScontoAddizionale, @ProvvigioneRiga_1, 

	SET @LastIdentity_Id_DORig = SCOPE_IDENTITY()
	IF @@ROWCOUNT < 1 BEGIN
		RAISERROR('Inserimento riga documento fallito: %d', 15, -1, @Id_xRDTicket)
		SET @nReturn = -22
		ROLLBACK TRANSACTION tran_GeneraDoc
		RETURN @nReturn 
	END

	/* Chiusura del documento */
	EXEC asp_Do_End @LastIdentity_Id_DOTes, 0
	COMMIT TRANSACTION tran_GeneraDoc

	SET @nReturn = @LastIdentity_Id_DOTes
	RETURN @nReturn		
GO

-- Documenti - Creazione Automatica Matricola
CREATE PROCEDURE [dbo].[xasp_DORig_CreaMatricola] (
		@Id_DORig					Integer,
		@Cd_AR 						VarChar(20),
		@TipoDocumento		Char(1),
		@nReturn					Integer = 0 Output
	)
	/*ENCRYPTED*/ 
	As
	
	-- Return:
	--	>= 0: End OK (1  Nothing To Do)
	--	< 0: End Failed
	--	-1: Identificativo riga non valido
	--	-2: Articolo non valido
	--	-3: Identificativo riga non trovato
	--	-4: Articolo non trovato
	--  -5: Inserimento fallito
	IF (Not @TipoDocumento = 'A') And (Not @TipoDocumento = 'F') And (Not @TipoDocumento = 'B') BEGIN
		SET @nReturn = 1
		RETURN @nReturn 
	END
	
	IF ISNULL(@Id_DORig, 0) = 0 BEGIN
		RAISERROR('Identificativo riga non valido : %d', 15, -1, @Id_DORig)
		SET @nReturn = -1
		RETURN @nReturn 
	END

	IF ISNULL(@Cd_AR, '') = '' BEGIN
		--RAISERROR('Articolo non valido : %d', 15, -1, @Cd_AR)
		SET @nReturn = 1
		RETURN @nReturn 
	END

	DECLARE @TestCount INT

	SELECT @TestCount = COUNT(*)
	FROM DORig
	WHERE DORig.Id_DORig = @Id_DORig

	IF @TestCount = 0 BEGIN
		RAISERROR('Identificativo riga non trovato: %d', 15, -1, @Id_DORig)
		SET @nReturn = -3
		RETURN @nReturn
	END

	SELECT @TestCount = COUNT(*)
	FROM DORig
	WHERE DORig.CD_AR = @Cd_AR

	IF @TestCount = 0 BEGIN
		RAISERROR('Articolo non trovato: %d', 15, -1, @Cd_AR)
		SET @nReturn = -4
		RETURN @nReturn
	END

	/* Dichiarazione variabili identificativi */
	DECLARE	@LastIdentity_Id_xMatricola INT

	/* Dichiarazioni variabili di appoggio */
	DECLARE	@xCreaMatricola Integer,
					@Matricola			VarChar(40),
					@AR_Descrizione VarChar(80),
					@Cd_CF					Char(7),
					@Cd_CF_For			Char(7),
					@Cd_CFDest			Char(3),
					@DataDoc				SmallDateTime,
					@xDurataGaranziaAcquisto	SmallInt,
					@xDurataGaranziaVendita		SmallInt,
					@Count					SmallInt,
					@ScadenzaGaranziaAcquisto SmallDateTime,
					@ScadenzaGaranziaVendita	SmallDateTime,
					@ScadenzaGaranziaAcquisto_CurValue SmallDateTime,
					@ScadenzaGaranziaVendita_CurValue	SmallDateTime,
					@Cd_CF_Matricola					Char(7),
					@Cd_CFDest_Matricola			Char(3),
					@Cd_CF_For_Matricola			Char(7),
					@Id_DOTes		Integer,
					@Id_DOTes_C Integer,
					@Id_DOTes_F Integer,
					@xValoreGaranzia Numeric(18, 6),
					@xAttivitaInGaranzia Bit,
					@xMaterialeInGaranzia Bit,
					@xSpesaInGaranzia Bit,
					@Cd_DOSottoCommessa Varchar(20),
					@Cd_DOSottoCommessaInst_CurValue Varchar(20)
					-- VARIABILI PER GESTIONE MATRICOLA PERSONALIZZATA PER WATERTIRE
					, @CF_xCd_MG_Esiste bit = case when exists(	select 1
																from sys.columns 
																where Name = N'xCd_MG' AND Object_ID = Object_ID(N'dbo.CF')
															) then 1 else 0 end
					, @CFDest_xCd_MG_Esiste bit = case when exists(	select 1
																	from sys.columns 
																	where Name = N'xCd_MG' AND Object_ID = Object_ID(N'dbo.CFDest')
																) then 1 else 0 end
					, @MG_xCd_CF_Esiste bit = case when exists(	select 1
																from sys.columns 
																where Name = N'xCd_CF' AND Object_ID = Object_ID(N'dbo.MG')
															) then 1 else 0 end
					, @MG_xCd_CFDest_Esiste bit = case when exists(	select 1
																	from sys.columns 
																	where Name = N'xCd_CfDest' AND Object_ID = Object_ID(N'dbo.MG')
																) then 1 else 0 end
					, @RC Int

	/* Verifica se l'articolo richiede la creazione automatica della matricola */
	Select @xCreaMatricola = xCreaMatricola 
	From AR
	Where Cd_AR = @Cd_AR
	
	IF ISNULL(@xCreaMatricola, 0) = 0 BEGIN
		SET @nReturn = 1
		RETURN @nReturn 
	END
	
	/* Seleziona i dati da riportare in anagrafica matricola */
	DECLARE Matricole CURSOR FAST_FORWARD FOR 
	Select
			R.r.value('@matricola', 'nvarchar(40)') As Matricola,
			AR.Descrizione As AR_Descrizione,
			DORig.Cd_CF,
			DORig.Cd_CF,
			DOTes.Cd_CFDest,
			DORig.DataDoc,
			AR.xDurataGaranziaAcquisto,
			AR.xDurataGaranziaVendita,
			DORig.Id_DOTes,
			AR.xValoreGaranzia,
			AR.xAttivitaInGaranzia,
			AR.xMaterialeInGaranzia,
			AR.xSpesaInGaranzia,
			DORig.Cd_DOSottoCommessa
		From
			DOTes
			Inner Join DORig	On DOTes.ID_DOTes = DORig.ID_DOTes
			Cross Apply Matricole.nodes('rows/row') As R(r)
			Inner Join AR On DORig.Cd_AR = AR.Cd_AR
		Where
			DORig.Id_DORig = @Id_DORig
	
	/* Inserimento o modifica dati nella tabella xMatricola */
	OPEN Matricole
	FETCH NEXT FROM Matricole INTO @Matricola, @AR_Descrizione, @Cd_CF, @Cd_CF_For, @Cd_CFDest, @DataDoc, @xDurataGaranziaAcquisto, @xDurataGaranziaVendita, @Id_DOTes, @xValoreGaranzia, @xAttivitaInGaranzia, @xMaterialeInGaranzia, @xSpesaInGaranzia, @Cd_DOSottoCommessa
	WHILE @@FETCH_STATUS = 0 BEGIN
		-- Verifica la presenza della matricola
		Select
				@Count = COUNT(*)
			From
				xMatricola
			Where
				Cd_xMatricola = @Matricola
				And Cd_AR = @Cd_AR
		
		-- Cliente
		Select @Cd_CF = Case LEFT(@Cd_CF, 1) When 'C' Then @Cd_CF Else Null End
		
		-- Fornitore
		Select @Cd_CF_For = Case LEFT(@Cd_CF_For, 1) When 'F' Then @Cd_CF_For Else Null End
		
		-- Scadenza Garanzia Vendita
		If LEFT(@Cd_CF, 1) = 'C'
			Begin
				Select @ScadenzaGaranziaVendita		= DATEADD(M, @xDurataGaranziaVendita, @DataDoc)		- 1
				Select @Id_DOTes_C								= @Id_DOTes
				Select @Id_DOTes_F								= Null
			End
		-- Scadenza Garanzia Acquisto
		If LEFT(@Cd_CF_For, 1) = 'F'	
			Begin
				Select @ScadenzaGaranziaAcquisto	= DATEADD(M, @xDurataGaranziaAcquisto, @DataDoc)	- 1
				Select @Id_DOTes_C								= Null
				Select @Id_DOTes_F								= @Id_DOTes
			End
		
		-- ESCLUSIVAMENTE PER WATERTIME (TESTANDO I LORO CAMPI PERSONALIZZATI) CHIAMO LA FUNZIONE DI CREAZIONE MATRICOLA PERSONALIZZATA
		if(@CF_xCd_MG_Esiste = 1 And @CFDest_xCd_MG_Esiste = 1 And @MG_xCd_CF_Esiste = 1 And @MG_xCd_CFDest_Esiste = 1) begin

			execute @RC = [dbo].[xasp_DORig_CreaMatricola_Ext]
				@Count
				, @Matricola
				, @Cd_AR
				, @AR_Descrizione
				, @Cd_CF
				, @Cd_CF_For
				, @Cd_CFDest
				, @ScadenzaGaranziaAcquisto
				, @ScadenzaGaranziaVendita
				, @Id_DOTes_C
				, @Id_DOTes_F
				, @xValoreGaranzia
				, @xAttivitaInGaranzia
				, @xMaterialeInGaranzia
				, @xSpesaInGaranzia
				, @Cd_DOSottoCommessa

			Set @LastIdentity_Id_xMatricola = @RC

		end else begin
		If @Count = 0
			-- Inserimento
			Begin
				INSERT INTO xMatricola(Cd_xMatricola, Cd_AR, Descrizione, Cd_CF, Cd_CF_For, Cd_CFDest, ScadenzaGaranziaAcquisto, ScadenzaGaranziaVendita, RifID_DoTes_C, RifID_DoTes_F, ValoreGaranzia, AttivitaInGaranzia, MaterialeInGaranzia, SpesaInGaranzia, Cd_DOSottoCommessaInst) 
				VALUES (@Matricola, @Cd_AR, @AR_Descrizione, @Cd_CF, @Cd_CF_For, @Cd_CFDest, @ScadenzaGaranziaAcquisto, @ScadenzaGaranziaVendita, @Id_DOTes_C, @Id_DOTes_F, @xValoreGaranzia, @xAttivitaInGaranzia, @xMaterialeInGaranzia, @xSpesaInGaranzia, @Cd_DOSottoCommessa)
				
				SET @LastIdentity_Id_xMatricola = SCOPE_IDENTITY()
				IF @@ROWCOUNT < 1 BEGIN
					RAISERROR('Inserimento matricola fallito: %d', 15, -1, @LastIdentity_Id_xMatricola)
					SET @nReturn = -5
					RETURN @nReturn 
				END
			End
		Else
			-- Modifica
			Begin
				If (LEFT(@Cd_CF, 1) = 'C') -- Documento cliente
					Begin
						-- Verifica se il cliente proprietario della matricola è lo stesso del documento
						-- e se è già presente una data scadenza garanzia
						Select
								@Cd_CF_Matricola		= Cd_CF
								, @Cd_CFDest_Matricola = IsNull(Cd_CFDest, '')
								, @ScadenzaGaranziaVendita_CurValue = ScadenzaGaranziaVendita
								, @Cd_DOSottoCommessaInst_CurValue = IsNull(Cd_DOSottoCommessaInst, '')
							From
								xMatricola
							Where
								Cd_xMatricola = @Matricola
								And Cd_AR = @Cd_AR
					
						If ISNULL(@Cd_CF_Matricola, '') = '' GoTo Update_Cliente -- Cliente vuoto, aggiorno

						If Not @Cd_CF_Matricola = @Cd_CF GoTo Update_Cliente -- Cliente diverso, aggiorno

						If (@Cd_CF_Matricola = @Cd_CF) And (@ScadenzaGaranziaVendita_CurValue Is Null) GoTo Update_Cliente	-- Stesso cliente ma scadenza assente, aggiorno

						If (@Cd_CF_Matricola = @Cd_CF) And (Not @Cd_DOSottoCommessaInst_CurValue = IsNull(@Cd_DOSottoCommessa, '')) GoTo Update_Cliente	-- Stesso cliente ma sottocommessa diversa, aggiorno

						If (@Cd_CF_Matricola = @Cd_CF) And (Not @Cd_CFDest_Matricola = IsNull(@Cd_CFDest, '')) GoTo Update_Sede	-- Stesso cliente ma sede diversa, aggiorno solo il campo sede

						If (@Cd_CF_Matricola = @Cd_CF) And (Not @ScadenzaGaranziaVendita_CurValue Is Null) GoTo Fine_Modifica	-- Stesso cliente e scadenza presente, nessun aggiornamento
					
Update_Cliente:		
						Update 
								xMatricola 
							Set 
								Cd_CF = @Cd_CF
								, Cd_CFDest = Null
								, ScadenzaGaranziaVendita = @ScadenzaGaranziaVendita 
								, RifID_DoTes_C = @Id_DOTes_C
								, Cd_DOSottoCommessaInst = @Cd_DOSottoCommessa
							Where
								Cd_xMatricola = @Matricola
								And Cd_AR = @Cd_AR

Update_Sede:
						Update 
								xMatricola 
							Set 
								Cd_CFDest = @Cd_CFDest
							Where
								Cd_xMatricola = @Matricola
								And Cd_AR = @Cd_AR
					End
					
				If (LEFT(@Cd_CF_For, 1) = 'F') -- Documento fornitore
					Begin
						-- Verifica se il fornitore proprietario della matricola è lo stesso del documento
						-- e se è già presente una data scadenza garanzia
						Select
								@Cd_CF_For_Matricola	= Cd_CF_For
								, @ScadenzaGaranziaAcquisto_CurValue = ScadenzaGaranziaAcquisto
							From
								xMatricola
							Where
								Cd_xMatricola = @Matricola
								And Cd_AR = @Cd_AR

						If ISNULL(@Cd_CF_For_Matricola, '') = '' GoTo Update_Fornitore -- Fornitore vuoto, aggiorno

						If Not @Cd_CF_For_Matricola = @Cd_CF_For GoTo Update_Fornitore -- Fornitore diverso, aggiorno

						If (@Cd_CF_For_Matricola = @Cd_CF_For) And (@ScadenzaGaranziaAcquisto_CurValue Is Null) GoTo Update_Fornitore	-- Stesso fornitore ma scadenza assente, aggiorno

						If (@Cd_CF_For_Matricola = @Cd_CF_For) And (Not @ScadenzaGaranziaAcquisto_CurValue Is Null) GoTo Fine_Modifica	-- Stesso fornitore e scadenza presente, nessun aggiornamento

Update_Fornitore:		
						Update 
								xMatricola 
							Set 
								Cd_CF_For = @Cd_CF_For
								, ScadenzaGaranziaAcquisto = @ScadenzaGaranziaAcquisto
								, RifID_DoTes_F = @Id_DOTes_F
							Where
								Cd_xMatricola = @Matricola
								And Cd_AR = @Cd_AR
					End
					
Fine_Modifica:					
				Set @LastIdentity_Id_xMatricola = 1
			End		
		end		
		FETCH NEXT FROM Matricole INTO @Matricola, @AR_Descrizione, @Cd_CF, @Cd_CF_For, @Cd_CFDest, @DataDoc, @xDurataGaranziaAcquisto, @xDurataGaranziaVendita, @Id_DOTes, @xValoreGaranzia, @xAttivitaInGaranzia, @xMaterialeInGaranzia, @xSpesaInGaranzia, @Cd_DOSottoCommessa
	END -- Matricole FETCH
	CLOSE Matricole
	DEALLOCATE Matricole
	
	SET @nReturn = @LastIdentity_Id_xMatricola
	RETURN @nReturn		
GO

Create Procedure [dbo].[xasp_DORig_CreaMatricola_Ext]
	@Count						Int
	, @Matricola				VarChar(40)
	, @Cd_AR					VarChar(20)
	, @AR_Descrizione			VarChar(80)
	, @Cd_CF					Char(7)
	, @Cd_CF_For				Char(7)
	, @Cd_CFDest				Char(3)
	, @ScadenzaGaranziaAcquisto	SmallDateTime
	, @ScadenzaGaranziaVendita	SmallDateTime
	, @Id_DOTes_C				Integer
	, @Id_DOTes_F				Integer
	, @xValoreGaranzia			Numeric(18, 6)
	, @xAttivitaInGaranzia		Bit
	, @xMaterialeInGaranzia		Bit
	, @xSpesaInGaranzia			Bit
	, @Cd_DOSottoCommessa		Varchar(20)
As
	Return 1
go

-- Ticket - Gestione operatori confermati
CREATE PROCEDURE [dbo].[xasp_xRDTicketAttivitaMov_Operatore] 
	@WorkType								Int, 
	@Id_xRDTicketAttivita		Int,
	@Id_xRDTicketAttivitaMov Int, 
	@Cd_xOperatore					varchar(20),
	@nReturn								Integer = 0 Output

As

	-- Return:
	--		1: End OK 
	--	 < 0: End Failed
	--      -1: Azione non valida
	--			-2: Attività non valida
	--      -3: Rilevazione non valida
	--			-4: Operatore non valido

	/* Test validità parametri passati */
	-- @WorkType = 1 - Insert; 2 - Delete
	IF ISNULL(@WorkType, 0) = 0 BEGIN
		SET @nReturn = -1
		RETURN @nReturn 
	END

	IF ISNULL(@Id_xRDTicketAttivita, 0) = 0 BEGIN
		SET @nReturn = -2
		RETURN @nReturn 
	END

	IF ISNULL(@Id_xRDTicketAttivitaMov, 0) = 0 BEGIN
		SET @nReturn = -3
		RETURN @nReturn 
	END

	IF ISNULL(@Cd_xOperatore, '') = '' BEGIN
		SET @nReturn = -4
		RETURN @nReturn
	END
	
	IF @WorkType = 1 -- Inserimento nuova rilevazione
		BEGIN
			-- Flag Confermato in xRDTicketAttivitaOperatore = 1
			Update xRDTicketAttivitaOperatore
			Set Confermato = 1
			Where Id_xRDTicketAttivita = @Id_xRDTicketAttivita
						And Cd_xOperatore = @Cd_xOperatore
						
			SET @nReturn = 1
			GoTo Fine_Funzione
		END
	
	IF @WorkType = 2 -- Cancellazione rilevazione
		BEGIN
			-- Flag Confermato in xRDTicketAttivitaOperatore = 0
			Declare @NumeroRighe As Int
			
			Select @NumeroRighe = COUNT(*)
			From xRDTicketAttivitaMov
			Where Id_xRDTicketAttivita = @Id_xRDTicketAttivita
						And Cd_xOperatore = @Cd_xOperatore
						And Id_xRDTicketAttivitaMov <> @Id_xRDTicketAttivitaMov
			
			If @NumeroRighe = 0 Begin --Non ci sono altre rilevazione per quell'operatore
				Update xRDTicketAttivitaOperatore
				Set Confermato = 0
				Where Id_xRDTicketAttivita = @Id_xRDTicketAttivita
							And Cd_xOperatore = @Cd_xOperatore
			End
						
			SET @nReturn = 1
			GoTo Fine_Funzione
		END

Fine_Funzione:
	RETURN @nReturn
GO

-- Documenti - Aggiornamento Matricola
CREATE PROCEDURE [dbo].[xasp_DOTes_UpdateMatricola] (
		@Id_DOTes			Integer,
		@TipoDocumento		Char(1),
		@CliFor				Char(1),
		@nReturn			Integer = 0 Output
	)
	/*ENCRYPTED*/ 
	As
	
	-- Return:
	--	>= 0: End OK (1  Nothing To Do)
	--	< 0: End Failed
	--	-1: Identificativo testa non valido
	--	-2: Identificativo testa non trovato
	--  -3: Modifica fallita
	IF (Not @TipoDocumento = 'A') And (Not @TipoDocumento = 'F') And (Not @TipoDocumento = 'B') BEGIN
		SET @nReturn = 1
		RETURN @nReturn 
	END
	
	IF @CliFor = 'F' BEGIN
		SET @nReturn = 1
		RETURN @nReturn 
	END
	
	IF ISNULL(@Id_DOTes, 0) = 0 BEGIN
		RAISERROR('Identificativo testa non valido : %d', 15, -1, @Id_DOTes)
		SET @nReturn = -1
		RETURN @nReturn 
	END

	DECLARE @TestCount INT

	SELECT @TestCount = COUNT(*)
	FROM DOTes
	WHERE DOTes.Id_DOTes = @Id_DOTes

	IF @TestCount = 0 BEGIN
		RAISERROR('Identificativo testa non trovato: %d', 15, -1, @Id_DOTes)
		SET @nReturn = -2
		RETURN @nReturn
	END

	/* Dichiarazione variabili identificativi */
	DECLARE	@LastIdentity_Id_xMatricola INT

	/* Dichiarazioni variabili di appoggio */
	DECLARE	@Matricola				VarChar(40),
			@Cd_CF					Char(7),
			@Cd_CFDest				Char(3),
			@Cd_AR					VarChar(20),
			@Count					SmallInt,
			@Cd_CF_Matricola		Char(7),
			@Cd_CFDest_Matricola	Char(3)
			-- VARIABILI PER GESTIONE MATRICOLA PERSONALIZZATA PER WATERTIRE
			, @CF_xCd_MG_Esiste bit = case when exists(	select 1
														from sys.columns 
														where Name = N'xCd_MG' AND Object_ID = Object_ID(N'dbo.CF')
													) then 1 else 0 end
			, @CFDest_xCd_MG_Esiste bit = case when exists(	select 1
															from sys.columns 
															where Name = N'xCd_MG' AND Object_ID = Object_ID(N'dbo.CFDest')
														) then 1 else 0 end
			, @MG_xCd_CF_Esiste bit = case when exists(	select 1
														from sys.columns 
														where Name = N'xCd_CF' AND Object_ID = Object_ID(N'dbo.MG')
													) then 1 else 0 end
			, @MG_xCd_CFDest_Esiste bit = case when exists(	select 1
															from sys.columns 
															where Name = N'xCd_CfDest' AND Object_ID = Object_ID(N'dbo.MG')
														) then 1 else 0 end
			, @RC Int

	/* Seleziona i dati da riportare in anagrafica matricola */
	DECLARE Matricole CURSOR FAST_FORWARD FOR 
	Select
			R.r.value('@matricola', 'nvarchar(40)') As Matricola,
			DOTes.Cd_CF,
			DOTes.Cd_CFDest,
			DORig.Cd_AR
		From
			DOTes
			Inner Join DORig	On DOTes.ID_DOTes = DORig.ID_DOTes
			Cross Apply Matricole.nodes('rows/row') As R(r)
		Where
			DOTes.Id_DOTes = @Id_DOTes
	
	/* Inserimento o modifica dati nella tabella xMatricola */
	OPEN Matricole
	FETCH NEXT FROM Matricole INTO @Matricola, @Cd_CF, @Cd_CFDest, @Cd_AR
	WHILE @@FETCH_STATUS = 0 BEGIN
		-- Verifica la presenza della matricola
		Select
				@Count = COUNT(*)
			From
				xMatricola
			Where
				Cd_xMatricola = @Matricola
				And Cd_AR = @Cd_AR
		
		-- ESCLUSIVAMENTE PER WATERTIME (TESTANDO I LORO CAMPI PERSONALIZZATI) CHIAMO LA FUNZIONE DI UPDATE MATRICOLA PERSONALIZZATA
		if(@CF_xCd_MG_Esiste = 1 And @CFDest_xCd_MG_Esiste = 1 And @MG_xCd_CF_Esiste = 1 And @MG_xCd_CFDest_Esiste = 1) begin

			execute @RC = [dbo].[xasp_DOTes_UpdateMatricola_Ext]
				@Count
				, @Matricola
				, @Cd_AR
				, @Cd_CF
				, @Cd_CFDest

			Set @LastIdentity_Id_xMatricola = @RC

		end else begin
		If @Count > 0
			-- Modifica
			Begin
				If (LEFT(@Cd_CF, 1) = 'C') -- Documento cliente
					Begin
						-- Verifica se il cliente proprietario della matricola è lo stesso del documento
						Select
								@Cd_CF_Matricola		= Cd_CF
								, @Cd_CFDest_Matricola	= IsNull(Cd_CFDest, '')
							From
								xMatricola
							Where
								Cd_xMatricola = @Matricola
								And Cd_AR = @Cd_AR
					
						If ISNULL(@Cd_CF_Matricola, '') = '' GoTo Update_Cliente	-- Cliente vuoto, aggiorno

						If Not (@Cd_CF_Matricola = @Cd_CF) GoTo Update_Cliente		-- Cliente diverso, aggiorno

						If (@Cd_CF_Matricola = @Cd_CF) And (Not @Cd_CFDest_Matricola = IsNull(@Cd_CFDest, '')) GoTo Update_Sede	-- Stesso cliente ma sede diversa, aggiorno solo il campo sede

						If (@Cd_CF_Matricola = @Cd_CF) And (@Cd_CFDest_Matricola = IsNull(@Cd_CFDest, '')) GoTo Fine_Modifica	-- Stesso cliente e stessa sede, nessun aggiornamento

Update_Cliente:		
						Update xMatricola Set Cd_CF = @Cd_CF, Cd_CFDest = Null Where Cd_xMatricola = @Matricola And Cd_AR = @Cd_AR

Update_Sede:
						Update xMatricola Set Cd_CFDest = @Cd_CFDest Where Cd_xMatricola = @Matricola And Cd_AR = @Cd_AR
					End
					
Fine_Modifica:					
				Set @LastIdentity_Id_xMatricola = 1
			End
		end
		FETCH NEXT FROM Matricole INTO @Matricola, @Cd_CF, @Cd_CFDest, @Cd_AR
	END -- Matricole FETCH
	CLOSE Matricole
	DEALLOCATE Matricole
	
	SET @nReturn = @LastIdentity_Id_xMatricola
	RETURN @nReturn		
GO

Create Procedure [dbo].[xasp_DOTes_UpdateMatricola_Ext]
	@Count						Int
	, @Matricola				VarChar(40)
	, @Cd_AR					VarChar(20)
	, @Cd_CF					Char(7)
	, @Cd_CFDest				Char(3)
As
	Return 1
go

/* Ticket - Elaborazione rilevazione di produzione */
/* 03-06-2014 */
/* 25-05-2017 */
CREATE PROCEDURE [dbo].[xasp_cca_rlelabora](
	@Id_xRDTicketAttivitaMovRL_I	Int = Null,		-- required		
	@Id_xRDTicketAttivitaMovRL_F	Int = Null,		-- required	
	@Id_xRDTicketAttivitaMov		Int = Null Out
)	
    /*ENCRYPTED*/         
As

	Set NoCount On

	Declare
		@Id_xRDTicketAttivitaMovRL_Sibling_I	Int				,	@Id_xRDTicketAttivitaMovRL_Sibling_F	Int,
		@Id_xRDTicketAttivitaMov_I				Int				,	@Id_xRDTicketAttivitaMov_F					Int,
		@Id_xRDTicketAttivita_I					Int				,	@Id_xRDTicketAttivita_F						Int			,	@Id_xRDTicketAttivita Int,
		@DataOra_I								Datetime		,	@DataOra_F										Datetime		,
		@InizioFine_I							Char(1)			,	@InizioFine_F									Char(1)		,
		@Cd_PrAttivita_I						varchar(20)		,	@Cd_PrAttivita_F								Varchar(20)	,	@Cd_PrAttivita	Varchar(20),
		@Cd_xOperatore_I						Varchar(20)		,	@Cd_xOperatore_F								Varchar(20)	,	@Cd_xOperatore   Varchar(20),
		@Cd_PrRisorsa_I							Varchar(20)		,	@Cd_PrRisorsa_F								Varchar(20)	,	@Cd_PrRisorsa   Varchar(20),
		@Durata_F								Numeric(18,8)	,	@FattoreMks_F									Int			,
		@Riga_xRDTicketAttivita					Smallint		,	@UltimoRL_F										Bit			,
		@Cd_xRDTipoValorizzazione				Char(5)			,	@Note_F varchar(max)									,
		@DurataOperatore_F						Numeric(18,8)	,	@Cd_xRDTipoValorizzazione_Operatore_F  Char(5)		,
		@DurataRisorsaOperatore_F				Numeric(18,8)	,	@Cd_xRDTipoValorizzazione_RisorsaOperatore_F	Char(5) ,
		@Riferimento							varchar(80)		,
		@Cd_xRDRilCausale						char(3)			,	@Cd_xRDRilOrigine								char(3)

	Declare
		@Durata							Numeric(18,8),		-- eventuale durata manuale della rilevazione
		@FattoreMks						Int,				-- fattore (1, 60, 3600, etc.) con il quale è stata dichiarata l'eventuale durata manuale della rilevazione
		@DurataMks						Numeric(18,8),		-- durata totale della rilevazione in secondi (dichiarata a mano o ricavata come differenza di ore)
		@DurataOperatoreMks				Numeric(18,8),		-- durata totale della rilevazione operatore in secondi (dichiarata a mano)
		@DurataRisorsaOperatoreMks		Numeric(18,8),		-- durata totale della rilevazione risorsa + operatore in secondi (dichiarata a mano)
		@DurataBLS						Numeric(18,8),		-- durata nell'unità di misura (sec, min, etc) con il quale sono stati dichiarati i tempi in bolla (se dichiarati in min vanno scalati in min...)
		@Return							Int;				
	
	-- inizializza a 0 la variabile di ritorno
	SET	@Return=0

	-----------------------------------------------------------------------------------------------------------
	-- Verifico i parametri
	-----------------------------------------------------------------------------------------------------------

	If (@Id_xRDTicketAttivitaMovRL_I Is Null) Begin Set @Return = -100; Goto EndOfProc; End -- @@Id_xRDTicketAttivitaMovRL_I obbligatorio
	If (@Id_xRDTicketAttivitaMovRL_F Is Null) Begin Set @Return = -200; Goto EndOfProc; End -- @@Id_xRDTicketAttivitaMovRL_F obbligatorio

	-----------------------------------------------------------------------------------------------------------
	-- Verifico il rilevamento I
	-----------------------------------------------------------------------------------------------------------

	Select @Id_xRDTicketAttivita_I					= Id_xRDTicketAttivita,	
			 @Id_xRDTicketAttivitaMov_I				= Id_xRDTicketAttivitaMov,
			 @Id_xRDTicketAttivitaMovRL_Sibling_I	= Id_xRDTicketAttivitaMovRL_Sibling,
			 @Id_xRDTicketAttivita_I				= Id_xRDTicketAttivita,
			 @Cd_PrAttivita_I						= Cd_PrAttivita,
			 @InizioFine_I							= InizioFine,	
			 @Cd_xOperatore_I						= Cd_xOperatore,						
			 @Cd_PrRisorsa_I						= Cd_PrRisorsa,	
			 @DataOra_I								= DataOra
	From   xRDTicketAttivitaMovRL
	Where  Id_xRDTicketAttivitaMovRL = @Id_xRDTicketAttivitaMovRL_I
		
	If (@@rowcount = 0								) Begin Set @Return = -101; Goto EndOfProc; End -- Rilevamento iniziale non esistente		
	If (@Id_xRDTicketAttivitaMov_I Is Not Null) Begin Set @Return = -102; Goto EndOfProc; End -- Rilevamento già elaborato
	If (@InizioFine_I != 'I'						) Begin Set @Return = -103; Goto EndOfProc; End -- Rilevamento iniziale di tipo sbagliato	

	-----------------------------------------------------------------------------------------------------------
	-- Verifico il rilevamento F
	-----------------------------------------------------------------------------------------------------------

	Select @Id_xRDTicketAttivita_F							= Id_xRDTicketAttivita,
			@Id_xRDTicketAttivitaMov_F						= Id_xRDTicketAttivitaMov,
		    @Id_xRDTicketAttivitaMovRL_Sibling_F			= Id_xRDTicketAttivitaMovRL_Sibling,
			@Id_xRDTicketAttivita_F							= Id_xRDTicketAttivita,
			@Cd_PrAttivita_F								= Cd_PrAttivita,
			@InizioFine_F									= InizioFine,	
		    @Cd_xOperatore_F								= Cd_xOperatore,
		    @Cd_PrRisorsa_F									= Cd_PrRisorsa,				
		    @DataOra_F										= DataOra,		
		    @FattoreMks_F									= FattoreMks,
		    @Durata_F										= Durata,		
		    @UltimoRL_F										= UltimoRL,
		    @Riga_xRDTicketAttivita							= Riga_xRDTicketAttivita,
		    @Cd_xRDTipoValorizzazione						= Cd_xRDTipoValorizzazione,
		    @Note_F											= Note,
		    @DurataOperatore_F								= DurataOperatore,		
		    @Cd_xRDTipoValorizzazione_Operatore_F			= Cd_xRDTipoValorizzazione_Operatore,
		    @DurataRisorsaOperatore_F						= DurataRisorsaOperatore,		
		    @Cd_xRDTipoValorizzazione_RisorsaOperatore_F	= Cd_xRDTipoValorizzazione_RisorsaOperatore,
		    @Riferimento									= Riferimento,
			@Cd_xRDRilCausale								= Cd_xRDRilCausale,
			@Cd_xRDRilOrigine								= Cd_xRDRilOrigine

	From   xRDTicketAttivitaMovRL
	Where  Id_xRDTicketAttivitaMovRL = @Id_xRDTicketAttivitaMovRL_F
	
	If (@@rowcount = 0				   			) Begin Set @Return = -201; Goto EndOfProc; End -- Rilevamento finale non esistente
	If (@Id_xRDTicketAttivitaMov_F Is Not Null) Begin Set @Return = -202; Goto EndOfProc; End -- Rilevamento già elaborato
	If (@InizioFine_F != 'F'						) Begin Set @Return = -203; Goto EndOfProc; End -- Rilevamento finale di tipo sbagliato

	-----------------------------------------------------------------------------------------------------------
	-- Verifica incrociata di coerenza tra i due rilevamenti I e F
	-----------------------------------------------------------------------------------------------------------
	
	-- Attenzione: l'operatore può essere null sulle rilevazioni con macchine automatiche 

	-- Se sono stati valorizzati i riferimenti incrociati, devono essere coerenti
	If (@Id_xRDTicketAttivitaMovRL_Sibling_I Is Not Null And @Id_xRDTicketAttivitaMovRL_Sibling_I       !=        @Id_xRDTicketAttivitaMovRL_F  ) Begin Set @Return = -104; Goto EndOfProc; End
	If (@Id_xRDTicketAttivitaMovRL_Sibling_F Is Not Null And @Id_xRDTicketAttivitaMovRL_Sibling_F       !=        @Id_xRDTicketAttivitaMovRL_I  ) Begin Set @Return = -105; Goto EndOfProc; End
																																	 
	/* l'attività deve essere la stessa					*/	If (			@Cd_PrAttivita_F			!=	@Cd_PrAttivita_I				) Begin Set @Return = -106; Goto EndOfProc; End
	/* L'Operatore        deve essere lo stesso		*/	If (IsNull(	@Cd_xOperatore_I, '')		!= IsNull(@Cd_xOperatore_F, '')) Begin Set @Return = -107; Goto EndOfProc; End
	/* La Risorsa         deve essere la stessa		*/	If (			@Cd_PrRisorsa_I			!= @Cd_PrRisorsa_F				) Begin Set @Return = -108; Goto EndOfProc; End
	/* L'attività del ticket deve essere la stessa	*/	If (			@Id_xRDTicketAttivita_I	!= @Id_xRDTicketAttivita_F		) Begin Set @Return = -109; Goto EndOfProc; End

	/* DataOra finale > DataOra iniziale			*/
	If (@DataOra_F < @DataOra_I ) Begin Set @Return = -110; Goto EndOfProc; End
	
	-- Durata se passata <= DateDiff inizio-fine
	If (@Durata_F Is Not Null And @Durata_F * @FattoreMks_F > DateDiff(Second, @DataOra_I, @DataOra_F)) Begin Set @Return = -111; Goto EndOfProc; End
	
	-- Per le varibili che devono essere coerenti tra _I e _F inizializzo una sola variabile nel codice da qui in poi per non aver ambiguità
	
	Select @Cd_PrAttivita			=	@Cd_PrAttivita_I   
	      ,@Id_xRDTicketAttivita	=	@Id_xRDTicketAttivita_I
	      ,@Cd_xOperatore			=	@Cd_xOperatore_I   
	      ,@Cd_PrRisorsa				=	@Cd_PrRisorsa_I   
			,@FattoreMks				=	@FattoreMks_F
	      ,@DurataMks							=	Case When @Durata_F						Is Not Null Then @Durata_F * @FattoreMks_F Else DateDiff(Second, @DataOra_I, @DataOra_F) End
	      ,@DurataOperatoreMks				=	Case When @DurataOperatore_F			Is Not Null Then @DurataOperatore_F * @FattoreMks_F Else 0 End
	      ,@DurataRisorsaOperatoreMks	=	Case When @DurataRisorsaOperatore_F Is Not Null Then @DurataRisorsaOperatore_F * @FattoreMks_F Else 0 End
	
	-----------------------------------------------------------------------------------------------------------
	-- Aggiorno i due record di rilevazione con i riferimenti incrociati ed i dati replicati se entrambi
	--	Lo faccio prima della transazione in modo che se poi per qualche motivo fallisce il versamento
	--	mi restino ugualmente le info di 'accoppiamento' che ho ricevuto da chiamante.
	--	Potrò riconoscere questi records da Id_xRDTicketAttivitaMovRL_Sibling Not Null And Id_xRDTicketAttivitaMov = Null
	-----------------------------------------------------------------------------------------------------------

	Update xRDTicketAttivitaMovRL
	Set	 Id_xRDTicketAttivitaMovRL_Sibling = Case When Id_xRDTicketAttivitaMovRL = @Id_xRDTicketAttivitaMovRL_I Then @Id_xRDTicketAttivitaMovRL_F Else @Id_xRDTicketAttivitaMovRL_I End
			,Durata							= @Durata_F
			,FattoreMks    				= @FattoreMks_F
			,DurataMks						= @DurataMks
			,DurataOperatoreMks			= @DurataOperatoreMks
			,DurataRisorsaOperatoreMks = @DurataRisorsaOperatoreMks
			,UltimoRL						= @UltimoRL_F
	Where  Id_xRDTicketAttivitaMovRL In (@Id_xRDTicketAttivitaMovRL_I, @Id_xRDTicketAttivitaMovRL_F)	
	
	--Recupera la riga di questo movimento
	DECLARE @Riga	Smallint
	SELECT @Riga= IsNull(MAX(Riga),0) + 1 
	FROM xRDTicketAttivitaMov 
	WHERE ID_xRDTicketAttivita = @Id_xRDTicketAttivita 

	-----------------------------------------------------------------------------------------------------------
	-- 1) Inserisco la riga di xRDTickeAttivitaMov e recupero l'identity
	-----------------------------------------------------------------------------------------------------------
	
	Begin Tran

		--Inserisce il nuovo movimento
		INSERT INTO xRDTicketAttivitaMov(
		  Id_xRDTicketAttivita
		  ,Cd_xOperatore
		  ,CD_PrRisorsa
		  ,DataInizio
		  ,DataFine
		  ,NoteAttivitaMov
		  ,DurataIns
		  ,Durata
		  ,Cd_xRDTipoValorizzazione
		  ,Riga
		  ,RigaPadre
		  ,ChiusuraAttivita
		  ,DurataOperatore
		  ,Cd_xRDTipoValorizzazione_Operatore
		  ,DurataRisorsaOperatore
		  ,Cd_xRDTipoValorizzazione_RisorsaOperatore
		  ,Riferimento
		  ,Cd_xRDRilCausale
		  ,Cd_xRDRilOrigine
		) 
		VALUES (
			@Id_xRDTicketAttivita
		  ,@Cd_xOperatore
		  ,@CD_PrRisorsa
		  ,@DataOra_I
		  ,@DataOra_F
		  ,@Note_F
		  ,@DurataMks/3600
		  ,@DurataMks/3600
		  ,@Cd_xRDTipoValorizzazione
		  ,@Riga
		  ,@Riga_xRDTicketAttivita
		  ,@UltimoRL_F
		  ,@DurataOperatoreMks/3600
		  ,@Cd_xRDTipoValorizzazione_Operatore_F
		  ,@DurataRisorsaOperatoreMks/3600
		  ,@Cd_xRDTipoValorizzazione_RisorsaOperatore_F
		  ,@Riferimento
		  ,@Cd_xRDRilCausale	
		  ,@Cd_xRDRilOrigine
		)
		
		SELECT @Id_xRDTicketAttivitaMov = Scope_Identity()

		--	Aggiornamento della data apertura dell'attività se si tratta della prima rilevazione per essa.
		If (@Riga = 1) BEGIN
			UPDATE xRDTicketAttivita
				SET DataApertura = CONVERT(datetime, @DataOra_I)
				WHERE Id_xRDTicketAttivita = @Id_xRDTicketAttivita 
		END


		
		-- AGGIORNAMENTO DEL NUMERO DI ORE EFFETTIVE

		-- DEPRECATO

		--UPDATE xRDTicketAttivita 
		--SET NumOreEff = (
		--	SELECT sum(Durata + ISNULL(DurataOperatore, 0)+ ISNULL(DurataRisorsaOperatore, 0))  
		--	FROM xRDTicketAttivitaMov 
		--	WHERE Id_xRDTicketAttivita = @Id_xRDTicketAttivita
		--)  
		--WHERE Id_xRDTicketAttivita = @Id_xRDTicketAttivita

		-- 25/05/2017 Il calcolo delle ore effettive deve tener conto se nell'attività la durata è esclusa oppure no dal conteggio delle ore effettive
		UPDATE xRDTicketAttivita 
		SET 
			NumOreEff = (SELECT SUM(CASE WHEN PRAttivita.xDDRisorsaNoOreEff				= 0 THEN IsNull(DurataIns,0)				ELSE 0 END +  
									CASE WHEN PRAttivita.xDDOperatoreNoOreEff			= 0 THEN IsNull(DurataOperatore,0)			ELSE 0 END +      
									CASE WHEN PRAttivita.xDDRisorsaOperatoreNoOreEff	= 0 THEN ISnull(DurataRisorsaOperatore,0)	ELSE 0 END	) as Ore
							FROM
								 xRDTicketAttivitaMov 
									INNER JOIN xRDTicketAttivita	ON xRDTicketAttivitaMov.Id_xRDTicketAttivita	= xRDTicketAttivita.Id_xRDTicketAttivita
									INNER JOIN PRAttivita			ON xRDTicketAttivita.Cd_PrAttivita				= PRAttivita.Cd_PrAttivita
							WHERE 
								xRDTicketAttivitaMov.Id_xRDTicketAttivita = @Id_xRDTicketAttivita
						)

		WHERE 
			Id_xRDTicketAttivita = @Id_xRDTicketAttivita
		
		--Aggiorno la chiusura dell'attività se il flag "Chiudi Att." della rilevazione è stato contrassegnato.
		If (@UltimoRL_F=1) BEGIN
			UPDATE xRDTicketAttivita
			SET Chiuso = 1, DataChiusura = CONVERT(datetime, @DataOra_F)
			WHERE Id_xRDTicketAttivita = @Id_xRDTicketAttivita
		END

	-----------------------------------------------------------------------------------------------------------
	-- Uscita
	-----------------------------------------------------------------------------------------------------------

EndOfProcWR:			-- EndOfProc with rollback

	If (@Return >= 0) Begin
	
		Update xRDTicketAttivitaMovRL
		Set	 Id_xRDTicketAttivitaMov = @Id_xRDTicketAttivitaMov
		Where  Id_xRDTicketAttivitaMovRL In (@Id_xRDTicketAttivitaMovRL_I, @Id_xRDTicketAttivitaMovRL_F)
		
		If @@trancount > 0 Commit Transaction

	End Else Begin
	
		If @@trancount > 0 RollBack Transaction
	
	End
	
EndOfProc:
	Return @Return
GO

/* Ticket - Valorizzazione rilevazione di produzione */
CREATE PROCEDURE [dbo].[xasp_cca_rlvalorizza](
	@Id_2enhance		Int     = Null, -- required
	@TipoRichiesta  tinyInt = Null  -- optional
)	
    /*ENCRYPTED*/         
As
	Set NoCount On
	-- parametri restituiti per la valorizzazione
	Declare
      @CostoUn       Numeric(18,6),
      @Prezzo        Numeric(18,6),
      @Sconto        Varchar(20),
      @Provvigione_1 Varchar(20),
      @PrezzoTotaleV As Numeric(18, 6)

	-- parametri da passare alla funzione tabellare per la valorizzazione dell'attività, del materiale o della spesa
	Declare
		@Cd_xContratto						char(10),
		@CD_PrAttivita						varchar(20),
		@CD_xRDTipoValorizzazione	char(5),
		@Cd_CF										char(7),
		@CD_xOperatore						varchar(20),
		@Cd_Agente								char(3),
		@DataInizio								smalldatetime,
		@CD_CFDest								nchar(3),
		@Durata										numeric(18,6),
		@Cd_xRDModalita						char(1),
		@Assistenza								bit,
		@Cd_PrRisorsa							varchar(20),
		@Id_xRDTicket							int,
		@Previsti									bit,
		@DurataOperatore					numeric(18,6),
		@CD_xRDTipoValorizzazione_Operatore				  char(5),
		@DurataRisorsaOperatore											numeric(18,6),
		@CD_xRDTipoValorizzazione_RisorsaOperatore	char(5),
		@SGV_Etichetta						Char(1),
		@Cd_AR_Ticket						  Varchar(20),
		@Cd_xImpianto						  Char(10),
		@Cd_DOSottoCommessaInst		Varchar(20),
		@Cd_xMatricola						Varchar(40),
		@Cd_AR						        Varchar(20),
		@Quantita                 Numeric(18,8),
		@Cd_ARMisura              Char(2),
		@FattoreToUM1             Numeric(18,8),
		@Cd_xSpesa                Char(3)

	-- tipo richiesta (null o 1 = attività (default); 2 = materiali; 3 = spese)
	If IsNull(@TipoRichiesta, 0) = 0 Set @TipoRichiesta = 1
	-- inizializzo i parametri fissi	
	SET	@Previsti = 0	-- Solo consuntivo
	-- inizializza a 0 la variabile di ritorno
	DECLARE @Return int; SET @Return=0
			
	-----------------------------------------------------------------------------------------------------------
	-- Verifico i parametri passati
	-----------------------------------------------------------------------------------------------------------
	If (@Id_2enhance Is Null) Begin Set @Return = -300; Goto EndOfProc; End -- @@Id_2enhance obbligatorio

	---------------
	-- ATTIVITA' --
	---------------
	If @TipoRichiesta = 1
		Begin
			-----------------------------------------------------------------------------------------------------------
			-- Carico i parametri necessari per la valorizzazione dal movimento specificato in Id_2enhance
			-----------------------------------------------------------------------------------------------------------
			SELECT @Cd_xContratto			=	TIC.Cd_xContratto
					,@CD_PrAttivita				=  ATT.Cd_PrAttivita
					,@Cd_xRDTipoValorizzazione =	MOV.Cd_xRDTipoValorizzazione
					,@Cd_CF							  =	TIC.Cd_CF
					,@CD_xOperatore				=	MOV.Cd_xOperatore
					,@Cd_Agente						=	TIC.CD_Agente
					,@DataInizio					=	MOV.DataInizio
					,@Cd_CFDest						=  ISNULL(ATT.Cd_CFDest, TIC.Cd_CFDest)
					,@Durata							=	MOV.Durata
					,@Cd_xRDModalita			=	TIC.Cd_xRDModalita
					,@Assistenza					=	TIC.GestisciTicket
					,@CD_PrRisorsa				=  MOV.CD_PrRisorsa
					,@Id_xRDTicket				=	TIC.Id_xRDTicket
					,@DurataOperatore			=	MOV.DurataOperatore
					,@CD_xRDTipoValorizzazione_Operatore	=	MOV.Cd_xRDTipoValorizzazione_Operatore
					,@DurataRisorsaOperatore							=	MOV.DurataRisorsaOperatore
					,@CD_xRDTipoValorizzazione_RisorsaOperatore	=	MOV.Cd_xRDTipoValorizzazione_RisorsaOperatore
					,@SGV_Etichetta				= TIC.SGV_Etichetta
					,@Cd_AR_Ticket				= TIC.CD_AR
					,@Cd_xImpianto				= TIC.CD_xImpianto
					,@Cd_DOSottoCommessaInst	= TIC.Cd_DOSottoCommessaInst
					,@Cd_xMatricola				= TIC.Cd_xMatricola
			FROM xRDTicketAttivitaMov		MOV
			INNER JOIN xRDTicketAttivita	ATT ON MOV.Id_xRDTicketAttivita	=	ATT.Id_xRDTicketAttivita
			INNER JOIN xRDTicket				TIC ON ATT.Id_xRDTicket				=	TIC.Id_xRDTicket
			WHERE Id_xRDTicketAttivitaMov = @Id_2enhance

			If (@@rowcount = 0) Begin Set @Return = -301; Goto EndOfProc; End -- Id_2enhance inesistente		

			-----------------------------------------------------------------------------------------------------------
			-- Lancio la funzione tabellare di valorizzazione della durata risorsa
			-----------------------------------------------------------------------------------------------------------
			Select  @CostoUn				= CostoUn,
							@Prezzo        = Prezzo,
							@Sconto        = Sconto,
							@Provvigione_1	= Provvigione_1
			From	xGAC_RDTicket_Valorizzazione(
						@TipoRichiesta,
						@Cd_xContratto,
						@Cd_PRAttivita,
						@Cd_xRDTipoValorizzazione,
						@Cd_CF,
						@CD_xOperatore,
						@Cd_Agente,
						@DataInizio,
						@CD_CFDest,
						Null,							--Cd_AR
						@Durata,
						Null,							--Quantita
						Null,							--CD_ARMisura
						Null,							--FattoreToUM1
						Null,							--CD_xSpesa
						@Cd_xRDModalita,
						@Assistenza,
						@Cd_PRRisorsa,
						@Id_xRDTicket,
						@Previsti,
						Null,							--CD_Preventivo_IP
						@SGV_Etichetta,
						@Cd_AR_Ticket,
						@Cd_xImpianto,
						@Cd_DOSottoCommessaInst,
						@Cd_xMatricola)

			If (@@rowcount = 0) Begin Set @Return = -302; Goto EndOfProc; End -- Non è stato possibile recuperare la valorizzazione risorsa

			-----------------------------------------------------------------------------------------------------------
			-- Lancio la funzione tabellare di valorizzazione della durata operatore e operatore+risorsa
			-----------------------------------------------------------------------------------------------------------
			-- parametri restituiti per la valorizzazione
			Declare
					@CostoUnOperatore				 Numeric(18,6),
					@CostoUnRisorsaOperatore Numeric(18,6),
					@Cd_Preventivo           Varchar(20)
		
			-- Ricerco l'eventuale sottopreventivo legato al ticket:
			-- il sottopreventivo è quello legato alla sottocommessa di testa del ticket
			Select @Cd_Preventivo = xCd_Preventivo
			From DOSottoCommessa
			Where Cd_DOSottoCommessa In (
				Select Cd_DOSottoCommessa 
				From xRDTicket 
				Where Id_xRDTicket = @Id_xRDTicket
				)

			Set @Cd_Preventivo = NullIf(@Cd_Preventivo, '')

			 Select @CostoUnOperatore = CostoUn
			 From	xGAC_RDTicket_Valorizzazione_Attivita_DD(
					 2,	--@DDTipo ->Durata Operatore
					 @Cd_PRAttivita,
					 @CD_xRDTipoValorizzazione_Operatore,
					 @CD_xOperatore,
					 @DataInizio,
					 @DurataOperatore,
					 @Cd_PRRisorsa,
					 @Cd_Preventivo,
					 @Id_xRDTicket)

			If (@@rowcount = 0) Begin Set @Return = -303; Goto EndOfProc; End -- Non è stato possibile recuperare la valorizzazione operatore

			 Select @CostoUnRisorsaOperatore = CostoUn
			 From	xGAC_RDTicket_Valorizzazione_Attivita_DD(
					 3,	--@DDTipo ->Durata Risorsa + Operatore
					 @Cd_PRAttivita,
					 @CD_xRDTipoValorizzazione_Operatore,
					 @CD_xOperatore,
					 @DataInizio,
					 @DurataOperatore,
					 @Cd_PRRisorsa,
					 @Cd_Preventivo,
					 @Id_xRDTicket)

			If (@@rowcount = 0) Begin Set @Return = -304; Goto EndOfProc; End -- Non è stato possibile recuperare la valorizzazione risorsa + operatore

			-----------------------------------------------------------------------------------------------------------
			-- Applico la valorizzazione
			-----------------------------------------------------------------------------------------------------------
			Set @PrezzoTotaleV = Round(IsNull(@Prezzo, 0) * [dbo].[afn_PercStrEvalCD] ([dbo].[afn_PercStrNormalize] (IsNull(@Sconto, ''))) * IsNull(@Durata, 0), 2)

			UPDATE xRDTicketAttivitaMov
			SET	CostoUn				          =	@CostoUn,
					CostoUnOperatore        = @CostoUnOperatore,
					CostoUnRisorsaOperatore = @CostoUnRisorsaOperatore,
					PrezzoUnitarioV         =	@Prezzo,
					Scontoriga			        =	@Sconto,
					Provvigione			        =	@Provvigione_1,
					PrezzoTotaleV						= @PrezzoTotaleV,
					Valorizzato			        = 1	
			WHERE Id_xRDTicketAttivitaMov = @Id_2enhance
		End

	---------------
	-- MATERIALI --
	---------------
	If @TipoRichiesta = 2
		Begin
			-----------------------------------------------------------------------------------------------------------
			-- Carico i parametri necessari per la valorizzazione del materiale specificato in Id_2enhance
			-----------------------------------------------------------------------------------------------------------
			Select @Cd_xContratto			=	T.Cd_xContratto
					,@Cd_CF							  =	T.Cd_CF
					,@CD_xOperatore				=	TM.Cd_xOperatore
					,@Cd_Agente						=	T.CD_Agente
					,@DataInizio					=	TM.DataRiferimento
					,@Cd_CFDest						=  IsNull(TM.Cd_CFDest, T.Cd_CFDest)
					,@Cd_AR							  =	TM.CD_AR
					,@Quantita			      =	TM.Quantita
					,@Cd_ARMisura					=	TM.Cd_ARMisura
					,@FattoreToUM1				= TM.FattoreToUM1
					,@Cd_xRDModalita			=	T.Cd_xRDModalita
					,@Assistenza          = T.GestisciTicket
					,@Id_xRDTicket        = T.Id_xRDTicket
					,@SGV_Etichetta       = T.SGV_Etichetta
					,@Cd_AR_Ticket				= T.CD_AR
					,@Cd_xImpianto				= T.CD_xImpianto
					,@Cd_DOSottoCommessaInst	= T.Cd_DOSottoCommessaInst
					,@Cd_xMatricola				= T.Cd_xMatricola
			From xRDTicketMaterialeSpesaMov	TM
			Inner Join xRDTicket T On TM.Id_xRDTicket	=	T.Id_xRDTicket
			Where Id_xRDTicketMaterialeSpesaMov = @Id_2enhance

			If (@@rowcount = 0) Begin Set @Return = -401; Goto EndOfProc; End -- Id_2enhance inesistente		

			-----------------------------------------------------------------------------------------------------------
			-- Lancio la funzione tabellare di valorizzazione del materiale
			-----------------------------------------------------------------------------------------------------------
			Select @CostoUn 		= CostoUn,
						 @Prezzo			= Prezzo,
						 @Sconto			= Sconto,
						 @Provvigione_1	= Provvigione_1
			From	xGAC_RDTicket_Valorizzazione(
						@TipoRichiesta,
						@Cd_xContratto,
						Null,
						Null,
						@Cd_CF,
						@CD_xOperatore,
						@Cd_Agente,
						@DataInizio,
						@CD_CFDest,
						@Cd_AR,
						Null,
						@Quantita,
						@Cd_ARMisura,
						@FattoreToUM1,
						Null,
						@Cd_xRDModalita,
						@Assistenza,
						Null,
						@Id_xRDTicket,
						@Previsti,
						Null,
						@SGV_Etichetta,
						@Cd_AR_Ticket,
						@Cd_xImpianto,
						@Cd_DOSottoCommessaInst,
						@Cd_xMatricola)

			If (@@rowcount = 0) Begin Set @Return = -402; Goto EndOfProc; End -- Non è stato possibile recuperare la valorizzazione materiale

			-----------------------------------------------------------------------------------------------------------
			-- Applico la valorizzazione
			-----------------------------------------------------------------------------------------------------------
			Set @PrezzoTotaleV = Round(IsNull(@Prezzo, 0) * [dbo].[afn_PercStrEvalCD] ([dbo].[afn_PercStrNormalize] (IsNull(@Sconto, ''))) * IsNull(@Quantita, 0), 2)

			UPDATE xRDTicketMaterialeSpesaMov
			SET	CostoUnitarioV          =	@CostoUn,
					PrezzoUnitarioV         =	@Prezzo,
					Scontoriga			        =	@Sconto,
					Provvigione			        =	@Provvigione_1,
					PrezzoTotaleV						= @PrezzoTotaleV
			WHERE Id_xRDTicketMaterialeSpesaMov = @Id_2enhance
		End

	-----------
	-- SPESE --
	-----------
	If @TipoRichiesta = 3
		Begin
			-----------------------------------------------------------------------------------------------------------
			-- Carico i parametri necessari per la valorizzazione della spesa specificata in Id_2enhance
			-----------------------------------------------------------------------------------------------------------
			Select @Cd_xContratto			=	T.Cd_xContratto
					,@Cd_CF							  =	T.Cd_CF
					,@CD_xOperatore				=	TS.Cd_xOperatore
					,@Cd_Agente						=	T.CD_Agente
					,@DataInizio					=	TS.DataRiferimento
					,@Cd_CFDest						= IsNull(TS.Cd_CFDest, T.Cd_CFDest)
					,@Quantita			      =	TS.Quantita
					,@Cd_ARMisura					=	TS.Cd_ARMisura
					,@FattoreToUM1				= 1
					,@Cd_xSpesa           = TS.Cd_xSpesa
					,@Cd_xRDModalita			=	T.Cd_xRDModalita
					,@Assistenza          = T.GestisciTicket
					,@Id_xRDTicket        = T.Id_xRDTicket
					,@SGV_Etichetta       = T.SGV_Etichetta
					,@Cd_AR_Ticket				= T.CD_AR
					,@Cd_xImpianto				= T.CD_xImpianto
					,@Cd_DOSottoCommessaInst	= T.Cd_DOSottoCommessaInst
					,@Cd_xMatricola				= T.Cd_xMatricola
			From xRDTicketMaterialeSpesaMov	TS
			Inner Join xRDTicket T On TS.Id_xRDTicket	=	T.Id_xRDTicket
			Where Id_xRDTicketMaterialeSpesaMov = @Id_2enhance

			If (@@rowcount = 0) Begin Set @Return = -501; Goto EndOfProc; End -- Id_2enhance inesistente		

			-----------------------------------------------------------------------------------------------------------
			-- Lancio la funzione tabellare di valorizzazione della spesa
			-----------------------------------------------------------------------------------------------------------
			Select @CostoUn 		= CostoUn,
						 @Prezzo			= Prezzo,
						 @Sconto			= Sconto,
						 @Provvigione_1	= Provvigione_1
			From	xGAC_RDTicket_Valorizzazione(
						@TipoRichiesta,
						@Cd_xContratto,
						Null,
						Null,
						@Cd_CF,
						@CD_xOperatore,
						@Cd_Agente,
						@DataInizio,
						@Cd_CFDest,
						Null,
						Null,
						@Quantita,
						@Cd_ARMisura,
						@FattoreToUM1,
						@Cd_xSpesa,
						@Cd_xRDModalita,
						@Assistenza,
						Null,
						@Id_xRDTicket,
						@Previsti,
						Null,
						@SGV_Etichetta,
						@Cd_AR_Ticket,
						@Cd_xImpianto,
						@Cd_DOSottoCommessaInst,
						@Cd_xMatricola)

			If (@@rowcount = 0) Begin Set @Return = -502; Goto EndOfProc; End -- Non è stato possibile recuperare la valorizzazione materiale

			-----------------------------------------------------------------------------------------------------------
			-- Applico la valorizzazione
			-----------------------------------------------------------------------------------------------------------
			Set @PrezzoTotaleV = Round(IsNull(@Prezzo, 0) * [dbo].[afn_PercStrEvalCD] ([dbo].[afn_PercStrNormalize] (IsNull(@Sconto, ''))) * IsNull(@Quantita, 0), 2)

			UPDATE xRDTicketMaterialeSpesaMov
			SET	CostoUnitarioV          =	@CostoUn,
					PrezzoUnitarioV         =	@Prezzo,
					Scontoriga			        =	@Sconto,
					Provvigione			        =	@Provvigione_1,
					PrezzoTotaleV						= @PrezzoTotaleV
			WHERE Id_xRDTicketMaterialeSpesaMov = @Id_2enhance
		End

	-----------------------------------------------------------------------------------------------------------
	-- Uscita
	-----------------------------------------------------------------------------------------------------------
EndOfProc:
	Return @Return
GO

Create Procedure xasp_cca_RLSalva
	@Id_xRDTicketAttivitaMovRL_I					Int
	, @Id_xRDTicketAttivitaMovRL_F					Int
	, @Id_xRDTicketAttivita							Int
	, @Terminale									Varchar(20)
	, @DataOraInizio								Datetime
	, @DataOraFine									Datetime
	, @Cd_PrAttivita        						Varchar(20)
	, @Cd_xOperatore								Varchar(20)
	, @Cd_PrRisorsa									Varchar(20)
	, @Durata										Numeric(18,8)
	, @UltimoRL		  								Bit
	, @Cd_xRDTipoValorizzazione						Char(5)
	, @Note						  					Varchar(max)
	, @DurataOperatore								Numeric(18,8)
	, @Cd_xRDTipoValorizzazione_Operatore			Char(5)
	, @DurataRisorsaOperatore						Numeric(18,8)
	, @Cd_xRDTipoValorizzazione_RisorsaOperatore	Char(5)
	, @Riferimento									Varchar(80)
	, @Cd_xRDRilOrigine								Char(3)
	, @Cd_xRDRilCausale								Char(3)
	, @Parziale										Bit
	, @VRCrea										Bit
As
Begin
	-- Avvio una transazione
	Begin tran t;

	Begin try
		-- Dichiarazione variabili
		Declare
			@Id_xRDTicketAttivitaMovRL_I_New Int
			, @Id_xRDTicketAttivitaMovRL_F_New Int
			, @Riga_xRDTicketAttivita Int
			, @Id_xRDTicketAttivitaMov Int
			, @RC Int

		-- Normalizzo le variabili per la valorizzazione
		if isnull(@Cd_xRDTipoValorizzazione					, '') = '' set @Cd_xRDTipoValorizzazione = 'ORD'
		if isnull(@Cd_xRDTipoValorizzazione_Operatore		, '') = '' set @Cd_xRDTipoValorizzazione_Operatore = null
		if isnull(@Cd_xRDTipoValorizzazione_RisorsaOperatore, '') = '' set @Cd_xRDTipoValorizzazione_RisorsaOperatore = null
		if isnull(@Cd_xRDRilOrigine							, '') = '' set @Cd_xRDRilOrigine = null
		if isnull(@Cd_xRDRilCausale							, '') = '' set @Cd_xRDRilCausale = null

		-- Verifico la presenza della rilevazione nel ticket
		Select @Id_xRDTicketAttivitaMov = Id_xRDTicketAttivitaMov From xRDTicketAttivitaMovRL Where Id_xRDTicketAttivitaMovRL = @Id_xRDTicketAttivitaMovRL_F
		If isnull(@Id_xRDTicketAttivitaMov, 0) > 0 Begin
			-- Sgancio la rilevazione e la elimino
			Update xRDTicketAttivitaMovRL Set Id_xRDTicketAttivitaMov = null Where Id_xRDTicketAttivitaMov = @Id_xRDTicketAttivitaMov
			Delete From xRDTicketAttivitaMov Where Id_xRDTicketAttivitaMov = @Id_xRDTicketAttivitaMov

			If @@ROWCOUNT = 0 
			Begin
				If @@trancount > 0 Rollback tran
				Select -100 As Result, @Id_xRDTicketAttivitaMovRL_I As Id_xRDTicketAttivitaMovRL, 'Errore in fase di eliminazione dei movimenti di rilevazione!!' As [Message]
				Return
			End
		End

		-- Inserisce la nuova rilevazione
		Insert Into xRDTicketAttivitaMovRL (
			Id_xRDTicketAttivita
			, Terminale
			, DataOra
			, InizioFine
			, Cd_PrAttivita
			, Cd_xOperatore
			, Cd_PrRisorsa
		)
		Values (
			@Id_xRDTicketAttivita
			, @Terminale
			, @DataOraInizio
			, 'I'
			, @Cd_PrAttivita
			, @Cd_xOperatore
			, @Cd_PrRisorsa
		)

		-- Se l'inserimento è fallito esco con -20
		If @@ROWCOUNT = 0 Begin
			If @@trancount > 0 Rollback tran
			Select -20 As Result, @Id_xRDTicketAttivitaMovRL_I As Id_xRDTicketAttivitaMovRL, 'Errore in fase di creazione del movimento iniziale della rilevazione!!' As [Message]
			Return
		End

		-- Recupera l'ID della rilevazione iniziale
		Set @Id_xRDTicketAttivitaMovRL_I_New = SCOPE_IDENTITY()

		-- Verifico se devo inserire anche la fine
		If @Parziale = 0 Begin
			-- Recupero il numero di riga dell'attività del ticket
			Select @Riga_xRDTicketAttivita = Riga from xRDTicketAttivita where Id_xRDTicketAttivita = @Id_xRDTicketAttivita
						
			--Inserisce l'attività di fine
			Insert Into xRDTicketAttivitaMovRL(
				Id_xRDTicketAttivita
				, Id_xRDTicketAttivitaMov
				, Terminale
				, DataOra
				, Cd_PrAttivita
				, Cd_xOperatore
				, Cd_PrRisorsa
				, UltimoRL
				, Id_xRDTicketAttivitaMovRL_Sibling
				, InizioFine
				, Durata
				, FattoreMks
				, Riga_xRDTicketAttivita
				, Cd_xRDTipoValorizzazione
				, Note
				, DurataOperatore
				, Cd_xRDTipoValorizzazione_Operatore
				, DurataRisorsaOperatore
				, Cd_xRDTipoValorizzazione_RisorsaOperatore
				, Riferimento
				, Cd_xRDRilOrigine
				, Cd_xRDRilCausale
			)
			Values (
				@Id_xRDTicketAttivita
				, null
				, @Terminale
				, @DataOraFine
				, @Cd_PrAttivita
				, @Cd_xOperatore
				, @Cd_PrRisorsa
				, @UltimoRL
				, @Id_xRDTicketAttivitaMovRL_I_New
				, 'F'
				, @Durata
				, 60
				, @Riga_xRDTicketAttivita
				, @Cd_xRDTipoValorizzazione
				, @Note
				, @DurataOperatore
				, @Cd_xRDTipoValorizzazione_Operatore
				, @DurataRisorsaOperatore
				, @Cd_xRDTipoValorizzazione_RisorsaOperatore
				, @Riferimento
				, @Cd_xRDRilOrigine
				, @Cd_xRDRilCausale
			)

			-- Se l'inserimento della chiusura è fallito esco con -30
			If @@ROWCOUNT = 0 Begin
				If @@trancount > 0 Rollback tran
				Select -30 As Result, @Id_xRDTicketAttivitaMovRL_I As Id_xRDTicketAttivitaMovRL, 'Errore in fase di creazione del movimento finale della rilevazione!!' As [Message]
				Return
			End

			-- Recupera l'ID della rilevazione finale
			Set @Id_xRDTicketAttivitaMovRL_F_New = SCOPE_IDENTITY()

			-- Verifico se devo creare il versamento
			If @VRCrea = 1 Begin
				Execute @RC = xasp_cca_rlelabora @Id_xRDTicketAttivitaMovRL_I_New, @Id_xRDTicketAttivitaMovRL_F_New, @Id_xRDTicketAttivitaMov Output

				-- Se l'elaborazione è fallita
				If @RC != 0
				Begin
					If @@trancount > 0 Rollback tran
					Select @RC - 1000 As Result, @Id_xRDTicketAttivitaMovRL_I As Id_xRDTicketAttivitaMovRL, 'Errore in fase di creazione del movimento nel ticket!!' As [Message]
					Return
				End

				Execute @RC = xasp_cca_rlvalorizza @Id_xRDTicketAttivitaMov -- Restituisce 0 se tutto è andato bene o un numero negativo compreso tra -300 e -302 in caso di errore

				-- Se l'elaborazione è fallita
				If @RC != 0
				Begin
					If @@trancount > 0 Rollback tran
					Select @RC - 1000 As Result, @Id_xRDTicketAttivitaMovRL_I As Id_xRDTicketAttivitaMovRL, 'Errore in fase di valorizzazione del movimento nel ticket!!' As [Message]
					Return
				End
			End

		End
		
		If @Id_xRDTicketAttivitaMovRL_I > 0 Or @Id_xRDTicketAttivitaMovRL_F > 0 Begin
			-- Elimino le vecchie rilevazioni
			Delete From xRDTicketAttivitaMovRL Where Id_xRDTicketAttivitaMovRL = @Id_xRDTicketAttivitaMovRL_I Or Id_xRDTicketAttivitaMovRL = @Id_xRDTicketAttivitaMovRL_F 

			If @@ROWCOUNT = 0 
			Begin
				If @@trancount > 0 Rollback tran
				Select -100 As Result, @Id_xRDTicketAttivitaMovRL_I As Id_xRDTicketAttivitaMovRL, 'Errore in fase di eliminazione delle vecchie rilevazioni!!' As [Message]
				Return 
			End
		End

	End try
	Begin catch
		IF @@TRANCOUNT > 0
			Rollback tran;
		Select ERROR_NUMBER() * -1 As Result, @Id_xRDTicketAttivitaMovRL_I As Id_xRDTicketAttivitaMovRL, cast(ERROR_MESSAGE() As Varchar(max)) As [Message]
		Return 
	End catch

	If @@TRANCOUNT > 0
		Commit tran t;

	-- restituisce 
	Select 1 As Result, @Id_xRDTicketAttivitaMovRL_I_New as Id_xRDTicketAttivitaMovRL, 'Modifica avvenuta con successo.' AS [Message]
	Return
End
Go

-- Funzione a livello di tabella per il calcolo del plafond residuo (xGAC_GetPlafondResiduo)
CREATE FUNCTION [dbo].[xGAC_GetPlafondResiduo](
	@Cd_xContratto as Char(10)
	, @Cd_PRAttivita as Varchar(20)	
	, @FasePlafondOrePartenza As Numeric(18, 2)
)
Returns @RetTbl Table (
	PlafondResiduo		Numeric(18,2),
	PlafondUtilizzato	Numeric(18,2)
)
AS 
Begin
 
 Declare @PlafondResiduo		As Numeric(18, 2)
 Declare @PlafondUtilizzato	As Numeric(18, 2)
 
 If IsNull(@Cd_PRAttivita, '') = '' -- Plafond per contratto
	Begin
		If @FasePlafondOrePartenza Is Null -- Ore partenza non passate come parametro.
			Select @PlafondResiduo = IsNull(FasePlafondOrePartenza, 0) From xContratto Where Cd_xContratto = @Cd_xContratto
		Else
			Select @PlafondResiduo = @FasePlafondOrePartenza
			
		-- Sommo le ore di plafond	utilizzato 
		Select @PlafondUtilizzato = IsNull(Sum(DurataIns - Durata), 0)
			From xRDTicketAttivitaMov TAM Inner Join xRDTicketAttivita TA	On TAM.Id_xRDTicketAttivita	= TA.Id_xRDTicketAttivita
													Inner Join xRDTicket T				On TA.Id_xRDTicket				= T.Id_xRDTicket
													Inner Join xContratto C				On T.Cd_xContratto				= C.Cd_xContratto
			Where (T.Cd_xContratto = @Cd_xContratto) And (TAM.DataInizio Between C.DataInizioUltimoRinnovo And C.DataFine)
			
		-- Calcolo il plafond residuo
		If @PlafondResiduo > IsNull(@PlafondUtilizzato, 0) Set @PlafondResiduo = @PlafondResiduo - IsNull(@PlafondUtilizzato, 0) Else Set @PlafondResiduo = 0
	End
 --Else -- Plafond per attività

   Insert @RetTbl
   Values (IsNull(@PlafondResiduo, 0), IsNull(@PlafondUtilizzato, 0))
   Return
End
GO

/* Gestione personalizzata dell'ordinato\impegnato */
/* 23-10-2012 */
CREATE FUNCTION [dbo].[xGAC_PROrdImp](@IncludeOL Bit = 1) Returns Table
 /*ENCRYPTED*/ 
As Return

-- Tenere allineato con MRP per la "interpretazione"
-- del magazzino PrOLAttivita.Cd_MG come magazzino di ordinato, del magazzino PrOLMateriale.Cd_MG come
-- magazzino di impegnato nel caso degli ordini, dei due PrBLAttivita.Cd_MG e PrBLMateriale.Cd_MG come
-- magazzini di impegnato nel caso delle bolle

-- Ordini

-----------------------------------------------------------------------
-- 1) Ordinato del padre quota parte non ancora rilasciata
Select
	Type					 =  1,
	Id_PrOL				 =  OLO.Id_PrOL,
	Id_PrOLMateriale	 =  Convert(Integer, Null),
	Id_PrBL				 =  Convert(Integer, Null),
	Id_PrBLMateriale	 =  Convert(Integer, Null),
	Data					 =  OLO.Data,
	DataObiettivo		 =  OLO.DataObiettivo,
	Cd_MG					 =  OLO.Cd_MG,	
	Cd_AR					 =  OLO.Cd_AR,
	Id_DoDB				 =  OLO.Id_DoDB,
	Cd_MGUbicazione	 =  OLO.Cd_MGUbicazione,
	Cd_ARLotto			 =  Convert(Varchar(20), Null),	
	Cd_DoSottoCommessa =  OLO.Cd_DoSottoCommessa, --Case When ARp.TipoGestComm > 0 Then OLO.Cd_DoSottoCommessa Else Null End,
	Cd_PrRisorsa		 =  OLA.Cd_PrRisorsa,
	Quantita				 = +OLA.QuantitaDaRilasciareUM1
From
	PrOLEx         OLO,
	PrOLAttivitaEx OLA,
	AR				   ARp
Where
		 @IncludeOL			= 1													--> Condizione Globale
	And OLA.Id_PrOL		= OLO.Id_PrOL And OLA.FaseFinale = 1		--> Condizione di Join
	And ARp.Cd_AR			= OLO.Cd_AR											--> Condizione di Join
	And OLO.Esecutivo		= 1
	And OLO.Prodotto		= 0
	And OLA.Rilasciata	= 0					

Union All

-----------------------------------------------------------------------
-- 2) Impegni componenti quota parte non ancora rilasciata
Select
	Type					 =  2,
	Id_PrOL				 =  OLA.Id_PrOL,
	Id_PrOLMateriale	 =  OLM.Id_PrOLMateriale,
	Id_PrBL				 =  Convert(Integer, Null),
	Id_PrBLMateriale	 =  Convert(Integer, Null),
	Data					 =  OLO.Data,
	DataObiettivo		 =  OLO.DataObiettivo,
	Cd_MG					 =  OLM.Cd_MG,	
	Cd_AR					 =  OLM.Cd_AR,
	Id_DoDB				 =  Null,
	Cd_MGUbicazione	 =  OLM.Cd_MGUbicazione,
	Cd_ARLotto			 =  Convert(Varchar(20), Null),	
	Cd_DoSottoCommessa =  OLO.Cd_DoSottoCommessa, --Case When ARc.TipoGestComm > 0 And ARp.TipoGestComm > 0 Then OLO.Cd_DoSottoCommessa Else Null End,
	Cd_PrRisorsa		 =  OLA.Cd_PrRisorsa,
	Quantita				 = -Convert(Numeric(18,8), OLM.ConsumoUM1 * OLA.QuantitaDaRilasciare / OLA.Quantita)
From
	PrOLEx          OLO,
	PrOLAttivitaEx  OLA,
	PrOLMaterialeEx OLM,
	AR				    ARp,
	AR				    ARc	
Where
		 @IncludeOL				= 1												--> Condizione Globale
	And OLA.Id_PrOL			= OLO.Id_PrOL									--> Condizione di Join
	And OLM.Id_PrOLAttivita = OLA.Id_PrOLAttivita						--> Condizione di Join
	And ARp.Cd_AR				= OLO.Cd_AR										--> Condizione di Join
	And ARc.Cd_AR				= OLM.Cd_AR										--> Condizione di Join
	And OLO.Esecutivo  		= 1
	And OLO.Prodotto   		= 0
	And OLA.Rilasciata 		= 0

Union All

-- Bolle

-----------------------------------------------------------------------
-- 3) Ordinato del padre quota parte non ancora versata
Select
	Type					 =  3,
	Id_PrOL				 =  OLA.Id_PrOL,
	Id_PrOLMateriale	 =  Convert(Integer, Null),
	Id_PrBL				 =  BLA.Id_PrBL,
	Id_PrBLMateriale	 =  Convert(Integer, Null),
	Data					 =  BLO.Data,
	DataObiettivo		 =  BLO.DataObiettivo,
	Cd_MG					 =  OLA.Cd_MG,	
	Cd_AR					 =  OLO.Cd_AR,
	Id_DoDB				 =  OLO.Id_DoDB,
	Cd_MGUbicazione	 =  OLA.Cd_MGUbicazione,	
	Cd_ARLotto			 =  Convert(Varchar(20), Null),
	Cd_DoSottoCommessa =  OLO.Cd_DoSottoCommessa, --Case When ARp.TipoGestComm > 0 Then OLO.Cd_DoSottoCommessa Else Null End,	
	Cd_PrRisorsa		 =  BLO.Cd_PrRisorsa,
	Quantita				 = +BLA.QuantitaDaProdurreUM1
From
	PrBLEx         BLO,
	PrBLAttivitaEx BLA,
	PrOLAttivitaEx OLA,
	PrOLEx         OLO,
	AR				   ARp
Where
		 BLA.Id_PrBL         = BLO.Id_PrBL									--> Condizione Globale
	And OLA.Id_PrOLAttivita	= BLA.Id_PrOLAttivita						--> Condizione Globale
	And OLA.Id_PrOL			= OLO.Id_PrOL And OLA.FaseFinale = 1	--> Condizione di Join
	And ARp.Cd_AR				= OLO.Cd_AR										--> Condizione di Join
/*	And BLO.Esecutivo			= 1 */
	And BLO.Prodotto			= 0
	And BLA.Prodotta			= 0

Union All

-----------------------------------------------------------------------
-- 4) Impegni componenti quota parte non ancora versata
Select
	Type					 =  4,
	Id_PrOL				 =  OLA.Id_PrOL,
	Id_PrOLMateriale	 =  Convert(Integer, Null),
	Id_PrBL				 =  BLA.Id_PrBL,
	Id_PrBLMateriale	 =  BLM.Id_PrBLMateriale,
	Data					 =  BLO.Data,
	DataObiettivo		 =  BLO.DataObiettivo,
	Cd_MG					 =  Case When BLO.Esecutivo = 1 And BLA.Cd_MG Is Not Null Then BLA.Cd_MG Else BLM.Cd_MG End,	
	Cd_AR					 =  BLM.Cd_AR,
	Id_DoDB				 =  Null,
	Cd_MGUbicazione	 =  Case When BLO.Esecutivo = 1 And BLA.Cd_MG Is Not Null Then BLA.Cd_MGUbicazione Else BLM.Cd_MGUbicazione End,
	Cd_ARLotto			 =  BLM.Cd_ARLotto,	
	Cd_DoSottoCommessa =  OLO.Cd_DoSottoCommessa, --Case When ARc.TipoGestComm > 0 And ARp.TipoGestComm > 0 Then OLO.Cd_DoSottoCommessa Else Null End,	
	Cd_PrRisorsa		 =  BLO.Cd_PrRisorsa,
	Quantita				 = -Convert(Numeric(18,8), BLM.ConsumoUM1 * BLA.QuantitaDaProdurre / BLA.Quantita)
From
   PrBLEx          BLO,
	PrBLAttivitaEx  BLA,
	PrBLMaterialeEx BLM,
	PrOLAttivitaEx  OLA,
	PrOLEx          OLO,
	AR					 ARp,
	AR					 ARc		
Where
		 BLA.Id_PrBL         = BLO.Id_PrBL									--> Condizione Globale
	And BLM.Id_PrBLAttivita = BLA.Id_PrBLAttivita And BLM.Tipo = 2	--> Condizione Globale
	And OLA.Id_PrOLAttivita = BLA.Id_PrOLAttivita						--> Condizione Globale
	And OLO.Id_PrOL         = OLA.Id_PrOL									--> Condizione Globale
	And ARp.Cd_AR				= OLO.Cd_AR										--> Condizione Globale
	And ARc.Cd_AR				= BLM.Cd_AR										--> Condizione Globale
/*	And BLO.Esecutivo			= 1 */
	And BLO.Prodotto			= 0
	And BLA.Prodotta			= 0
GO

/* Gestione personalizzata dei movimenti di magazzino */
/* 23-10-2012 */
Create FUNCTION [dbo].[xGAC_MGDispEx] (@Cd_MGEsercizio Varchar(4) = Null) Returns Table
As Return

	Select
		Cd_MGEsercizio,
		Cd_MG,
		Cd_AR,
		Id_DoDB,
		Cd_MGUbicazione,
		Cd_ARLotto,
		Cd_DoSottoCommessa,
		IsNull(Convert(Numeric(18,8), Sum( Sign			 	  * Quantita)), 0) As Quantita,
		IsNull(Convert(Numeric(18,2), Sum( Sign				  * Valore  )), 0) As Valore,
		IsNull(Convert(Numeric(18,8), Sum((Sign + Ord - Imp) * Quantita)), 0) As QuantitaDisp,
		IsNull(Convert(Numeric(18,2), Sum((Sign + Ord - Imp) * Valore  )), 0) As ValoreDisp,
		IsNull(Convert(Numeric(18,8), Sum((Sign		 - Imp) * Quantita)), 0) As QuantitaDimm,
		IsNull(Convert(Numeric(18,2), Sum((Sign		 - Imp) * Valore  )), 0) As ValoreDimm,
		IsNull(Convert(Numeric(18,8), Sum( Ini					  * Quantita)), 0) As IniQ,
		IsNull(Convert(Numeric(18,2), Sum( Ini					  * Valore  )), 0) As IniV,
		IsNull(Convert(Numeric(18,8), Sum( Ret					  * Quantita)), 0) As RetQ,
		IsNull(Convert(Numeric(18,2), Sum( Ret					  * Valore  )), 0) As RetV,
		IsNull(Convert(Numeric(18,8), Sum( Car					  * Quantita)), 0) As CarQ,
		IsNull(Convert(Numeric(18,2), Sum( Car					  * Valore  )), 0) As CarV,
		IsNull(Convert(Numeric(18,8), Sum( Sca					  * Quantita)), 0) As ScaQ,
		IsNull(Convert(Numeric(18,2), Sum( Sca					  * Valore  )), 0) As ScaV,
		IsNull(Convert(Numeric(18,8), Sum( CarA				  * Quantita)), 0) As CarQA,
		IsNull(Convert(Numeric(18,2), Sum( CarA				  * Valore  )), 0) As CarVA,
		IsNull(Convert(Numeric(18,8), Sum( CarP				  * Quantita)), 0) As CarQP,
		IsNull(Convert(Numeric(18,2), Sum( CarP				  * Valore  )), 0) As CarVP,
		IsNull(Convert(Numeric(18,8), Sum( CarT				  * Quantita)), 0) As CarQT,
		IsNull(Convert(Numeric(18,2), Sum( CarT				  * Valore  )), 0) As CarVT,
		IsNull(Convert(Numeric(18,8), Sum( ScaV				  * Quantita)), 0) As ScaQV,
		IsNull(Convert(Numeric(18,2), Sum( ScaV				  * Valore  )), 0) As ScaVV,
		IsNull(Convert(Numeric(18,8), Sum( ScaP				  * Quantita)), 0) As ScaQP,
		IsNull(Convert(Numeric(18,2), Sum( ScaP				  * Valore  )), 0) As ScaVP,
		IsNull(Convert(Numeric(18,8), Sum( ScaT				  * Quantita)), 0) As ScaQT,
		IsNull(Convert(Numeric(18,2), Sum( ScaT				  * Valore  )), 0) As ScaVT,
		IsNull(Convert(Numeric(18,8), Sum( Ord					  * Quantita)), 0) As OrdQ,
		IsNull(Convert(Numeric(18,2), Sum( Ord					  * Valore  )), 0) As OrdV,
		IsNull(Convert(Numeric(18,8), Sum( Imp					  * Quantita)), 0) As ImpQ,
		IsNull(Convert(Numeric(18,2), Sum( Imp					  * Valore  )), 0) As ImpV
	From (

		Select
			MGMov.Cd_MGEsercizio,
			Cd_MG,
			MGMov.Cd_AR,
			MGMov.Id_DoDB,
			Cd_MGUbicazione,
			MGMov.Cd_ARLotto,
			[Cd_DoSottoCommessa] = ISNULL(DORig.Cd_DOSottoCommessa, MGMov.Cd_DOSottoCommessa),
			0 As Ord,
			0 As Imp,
			Ini,
			Ret,
			Car,
			Sca,
			CarA,
			CarP,
			CarT,
			ScaV,
			ScaP,
			ScaT,
			Sign,
			Quantita,
			Valore
		From
			MGMov
			Inner Join MGEsercizio On MGMov.DataMov >= MGEsercizio.DtInizio And MGMov.DataMov <= MGEsercizio.DtFine
			Left Join DORig On MGMov.Id_DoRig = DORig.Id_DORig
		Where
			MGEsercizio.Cd_MGEsercizio = IsNull(@Cd_MGEsercizio, dbo.afn_MGEsercizio(GetDate()))			
			
		Union All

		Select
			IsNull(@Cd_MGEsercizio, dbo.afn_MGEsercizio(GetDate())),
			Cd_MG,
			MGOrdImp.Cd_AR,
			MGOrdImp.Id_DoDB,
			Cd_MGUbicazione,
			MGOrdImp.Cd_ARLotto,
			[Cd_DoSottoCommessa] = ISNULL(DORig.Cd_DOSottoCommessa, MGOrdImp.Cd_DOSottoCommessa),
			Ord,
			Imp,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			Quantita,
			Valore
		From
			MGOrdImp
			Left Join DORig On MGOrdImp.Id_DoRig = DORig.Id_DORig

		Union All

		Select
			IsNull(@Cd_MGEsercizio, dbo.afn_MGEsercizio(GetDate())),
			X.Cd_MG,		--> può essere Null
			X.Cd_AR,
			X.Id_DoDB,
			X.Cd_MGUbicazione,
			X.Cd_ARLotto,
			X.Cd_DoSottoCommessa,
			(Case When Quantita > 0 Then 1 Else 0 End) As Ord,
			(Case When Quantita < 0 Then 1 Else 0 End) As Imp,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			Abs    (Quantita        ) As Quantita,
			Convert(Numeric(18,2), 0) As Valore
		From
			xGAC_PROrdImp(default) X

	) X
	Group By
		Cd_MGEsercizio,
		Cd_MG,
		Cd_AR,
		Id_DoDB,
		Cd_MGUbicazione,
		Cd_ARLotto,
		Cd_DoSottoCommessa  
GO

/* Gestione personalizzata dei movimenti di magazzino */
/* 24-10-2012 */
Create FUNCTION [dbo].[xGAC_MGDispEx_AR] (@Cd_MGEsercizio Varchar(4) = Null) Returns Table
As Return

	Select
		Cd_MGEsercizio,
		Cd_MG,
		Cd_AR,
		Cd_MGUbicazione,
		IsNull(Convert(Numeric(18,8), Sum( Sign			 	  * Quantita)), 0) As Quantita,
		IsNull(Convert(Numeric(18,2), Sum( Sign				  * Valore  )), 0) As Valore,
		IsNull(Convert(Numeric(18,8), Sum((Sign + Ord - Imp) * Quantita)), 0) As QuantitaDisp,
		IsNull(Convert(Numeric(18,2), Sum((Sign + Ord - Imp) * Valore  )), 0) As ValoreDisp,
		IsNull(Convert(Numeric(18,8), Sum((Sign		 - Imp) * Quantita)), 0) As QuantitaDimm,
		IsNull(Convert(Numeric(18,2), Sum((Sign		 - Imp) * Valore  )), 0) As ValoreDimm,
		IsNull(Convert(Numeric(18,8), Sum( Ini					  * Quantita)), 0) As IniQ,
		IsNull(Convert(Numeric(18,2), Sum( Ini					  * Valore  )), 0) As IniV,
		IsNull(Convert(Numeric(18,8), Sum( Ret					  * Quantita)), 0) As RetQ,
		IsNull(Convert(Numeric(18,2), Sum( Ret					  * Valore  )), 0) As RetV,
		IsNull(Convert(Numeric(18,8), Sum( Car					  * Quantita)), 0) As CarQ,
		IsNull(Convert(Numeric(18,2), Sum( Car					  * Valore  )), 0) As CarV,
		IsNull(Convert(Numeric(18,8), Sum( Sca					  * Quantita)), 0) As ScaQ,
		IsNull(Convert(Numeric(18,2), Sum( Sca					  * Valore  )), 0) As ScaV,
		IsNull(Convert(Numeric(18,8), Sum( CarA				  * Quantita)), 0) As CarQA,
		IsNull(Convert(Numeric(18,2), Sum( CarA				  * Valore  )), 0) As CarVA,
		IsNull(Convert(Numeric(18,8), Sum( CarP				  * Quantita)), 0) As CarQP,
		IsNull(Convert(Numeric(18,2), Sum( CarP				  * Valore  )), 0) As CarVP,
		IsNull(Convert(Numeric(18,8), Sum( CarT				  * Quantita)), 0) As CarQT,
		IsNull(Convert(Numeric(18,2), Sum( CarT				  * Valore  )), 0) As CarVT,
		IsNull(Convert(Numeric(18,8), Sum( ScaV				  * Quantita)), 0) As ScaQV,
		IsNull(Convert(Numeric(18,2), Sum( ScaV				  * Valore  )), 0) As ScaVV,
		IsNull(Convert(Numeric(18,8), Sum( ScaP				  * Quantita)), 0) As ScaQP,
		IsNull(Convert(Numeric(18,2), Sum( ScaP				  * Valore  )), 0) As ScaVP,
		IsNull(Convert(Numeric(18,8), Sum( ScaT				  * Quantita)), 0) As ScaQT,
		IsNull(Convert(Numeric(18,2), Sum( ScaT				  * Valore  )), 0) As ScaVT,
		IsNull(Convert(Numeric(18,8), Sum( Ord					  * Quantita)), 0) As OrdQ,
		IsNull(Convert(Numeric(18,2), Sum( Ord					  * Valore  )), 0) As OrdV,
		IsNull(Convert(Numeric(18,8), Sum( Imp					  * Quantita)), 0) As ImpQ,
		IsNull(Convert(Numeric(18,2), Sum( Imp					  * Valore  )), 0) As ImpV
	From (

		Select
			MGMov.Cd_MGEsercizio,
			Cd_MG,
			MGMov.Cd_AR,
			MGMov.Id_DoDB,
			Cd_MGUbicazione,
			MGMov.Cd_ARLotto,
			[Cd_DoSottoCommessa] = ISNULL(DORig.Cd_DOSottoCommessa, MGMov.Cd_DOSottoCommessa),
			0 As Ord,
			0 As Imp,
			Ini,
			Ret,
			Car,
			Sca,
			CarA,
			CarP,
			CarT,
			ScaV,
			ScaP,
			ScaT,
			Sign,
			Quantita,
			Valore
		From
			MGMov
			Inner Join MGEsercizio On MGMov.DataMov >= MGEsercizio.DtInizio And MGMov.DataMov <= MGEsercizio.DtFine
			Left Join DORig On MGMov.Id_DoRig = DORig.Id_DORig
		Where
			(MGEsercizio.Cd_MGEsercizio = IsNull(@Cd_MGEsercizio, dbo.afn_MGEsercizio(GetDate())))
			And (DORig.Cd_DOSottoCommessa Is Null)
			And (MGMov.Cd_DoSottoCommessa Is Null)
			
		Union All

		Select
			IsNull(@Cd_MGEsercizio, dbo.afn_MGEsercizio(GetDate())),
			Cd_MG,
			MGOrdImp.Cd_AR,
			MGOrdImp.Id_DoDB,
			Cd_MGUbicazione,
			MGOrdImp.Cd_ARLotto,
			[Cd_DoSottoCommessa] = ISNULL(DORig.Cd_DOSottoCommessa, MGOrdImp.Cd_DOSottoCommessa),
			Ord,
			Imp,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			Quantita,
			Valore
		From
			MGOrdImp
			Left Join DORig On MGOrdImp.Id_DoRig = DORig.Id_DORig
		Where
			(DORig.Cd_DOSottoCommessa Is Null) And (MGOrdImp.Cd_DoSottoCommessa Is Null)

		Union All

		Select
			IsNull(@Cd_MGEsercizio, dbo.afn_MGEsercizio(GetDate())),
			X.Cd_MG,		--> può essere Null
			X.Cd_AR,
			X.Id_DoDB,
			X.Cd_MGUbicazione,
			X.Cd_ARLotto,
			X.Cd_DoSottoCommessa,
			(Case When Quantita > 0 Then 1 Else 0 End) As Ord,
			(Case When Quantita < 0 Then 1 Else 0 End) As Imp,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			0,
			Abs    (Quantita        ) As Quantita,
			Convert(Numeric(18,2), 0) As Valore
		From
			xGAC_PROrdImp(default) X
		Where
			X.Cd_DoSottoCommessa Is Null
	) X
	Group By
		Cd_MGEsercizio,
		Cd_MG,
		Cd_AR,
		Cd_MGUbicazione
GO

Create FUNCTION [dbo].[xGAC_MGDispEx_Commessa_Full] (@Cd_MGEsercizio Varchar(4) = Null, @Cd_DOCommessa Char(10) = Null) Returns Table
As Return

	Select
		[ATO]			 			= Ato,
		[Cd_DoSottoCommessa]	= Cd_DoSottoCommessa,
		[Cd_AR]					= Cd_AR,
		[Cd_MG]					= Cd_MG,
		[Cd_MGUbicazione]		= Cd_MGUbicazione,
		[Cd_ARLotto]			= Cd_ARLotto,
		[IniQ]					= SUM(IniQ),
		[RetQ]					= SUM(RetQ),
		[CarQA]					= SUM(CarQA),
		[CarQP]					= SUM(CarQP),
		[CarQT]					= SUM(CarQT),
		[ScaQV]					= SUM(ScaQV),
		[ScaQP]					= SUM(ScaQP),
		[ScaQT]					= SUM(ScaQT),
		[OrdQ]					= SUM(OrdQ),
		[ImpQ]					= SUM(ImpQ),
		[Giac]					= SUM(Giac),
		[Disp]					= SUM(Disp),		
		[Dimm]					= SUM(Dimm),
		[OrdQ_NoComm]			= MAX(OrdQ_NoComm),
		[ImpQ_NoComm]			= MAX(ImpQ_NoComm),
		[Giac_NoComm]			= MAX(Giac_NoComm),
		[Disp_NoComm]			= MAX(Disp_NoComm),		
		[Dimm_NoComm]			= MAX(Dimm_NoComm)
	From
		(
		Select
			[ATO]			 			= IsNull(S.Id_DoDB, 0),
			[Cd_DoSottoCommessa]	= S.Cd_DoSottoCommessa,
			[Cd_AR]					= S.Cd_AR,
			[Cd_MG]					= S.Cd_MG,
			[Cd_MGUbicazione]		= S.Cd_MGUbicazione,
			[Cd_ARLotto]			= S.Cd_ARLotto,
			[IniQ]					= S.IniQ,
			[RetQ]					= S.RetQ,
			[CarQA]					= S.CarQA,
			[CarQP]					= S.CarQP,
			[CarQT]					= S.CarQT,
			[ScaQV]					= S.ScaQV,
			[ScaQP]					= S.ScaQP,
			[ScaQT]					= S.ScaQT,
			[OrdQ]					= S.OrdQ,
			[ImpQ]					= S.ImpQ,
			[Giac]					= S.Quantita,
			[Disp]					= S.QuantitaDisp,		
			[Dimm]					= S.QuantitaDimm,
			[OrdQ_NoComm]			= ISNULL(SAR.OrdQ, 0),
			[ImpQ_NoComm]			= ISNULL(SAR.ImpQ, 0),
			[Giac_NoComm]			= ISNULL(SAR.Quantita, 0),
			[Disp_NoComm]			= ISNULL(SAR.QuantitaDisp, 0),		
			[Dimm_NoComm]			= ISNULL(SAR.QuantitaDimm, 0)

			/*CIP*/

		From
			xGAC_MGDispEx(@Cd_MGEsercizio) S
			Left Join (
						Select * From dbo.xGAC_MGDispEx_AR(@Cd_MGEsercizio) Where Cd_AR In 
							(	
								Select Distinct S.Cd_AR
									From
										xGAC_MGDispEx(@Cd_MGEsercizio) S
										Left Join MG 			M On S.Cd_MG 	  	= M.Cd_MG
										Left Join AR 			A On S.Cd_AR 	  	= A.Cd_AR
										Left Join MGUbicazione 	U On S.Cd_MG		= U.Cd_MG 	  	And S.Cd_MGUbicazione 	= U.Cd_MGUbicazione
										Left Join DoSottoCommessa 	C On S.Cd_DoSottoCommessa 	= C.Cd_DoSottoCommessa
										Left Join ARLotto		L On S.Cd_ARLotto 	= L.Cd_ARLotto 	And L.Cd_AR				= A.Cd_AR
									Where
										C.Cd_DoCommessa = @Cd_DOCommessa
							)	
						) SAR On S.Cd_AR = SAR.Cd_AR And S.Cd_MG = SAR.Cd_MG And ISNULL(S.Cd_MGUbicazione, '') = ISNULL(SAR.Cd_MGUbicazione, '')
			Left Join MG 			M On S.Cd_MG 	  	= M.Cd_MG
			Left Join AR 			A On S.Cd_AR 	  	= A.Cd_AR
			Left Join MGUbicazione 	U On S.Cd_MG		= U.Cd_MG 	  	And S.Cd_MGUbicazione 	= U.Cd_MGUbicazione
			Left Join DoSottoCommessa 	C On S.Cd_DoSottoCommessa 	= C.Cd_DoSottoCommessa
			Left Join ARLotto		L On S.Cd_ARLotto 	= L.Cd_ARLotto 	And L.Cd_AR				= A.Cd_AR

			/*TIP*/		

		Where
			C.Cd_DoCommessa = @Cd_DOCommessa

			/*WHR*/			

		Union
		
		Select
			[ATO]			 			= IsNull(S.Id_DoDB, 0),
			[Cd_DoSottoCommessa]	= S.Cd_DoSottoCommessa,
			[Cd_AR]					= S.Cd_AR,
			[Cd_MG]					= S.Cd_MG,
			[Cd_MGUbicazione]		= S.Cd_MGUbicazione,
			[Cd_ARLotto]			= S.Cd_ARLotto,
			[IniQ]					= 0,
			[RetQ]					= 0,
			[CarQA]					= 0,
			[CarQP]					= 0,
			[CarQT]					= 0,
			[ScaQV]					= 0,
			[ScaQP]					= 0,
			[ScaQT]					= 0,
			[OrdQ]					= 0,
			[ImpQ]					= 0,
			[Giac]					= 0,
			[Disp]					= 0,		
			[Dimm]					= 0,
			[OrdQ_NoComm]			= ISNULL(SAR.OrdQ, 0),
			[ImpQ_NoComm]			= ISNULL(SAR.ImpQ, 0),
			[Giac_NoComm]			= ISNULL(SAR.Quantita, 0),
			[Disp_NoComm]			= ISNULL(SAR.QuantitaDisp, 0),		
			[Dimm_NoComm]			= ISNULL(SAR.QuantitaDimm, 0)

			/*CIP*/

		From
			xGAC_MGDispEx(@Cd_MGEsercizio) S
			Left Join (
						Select * From dbo.xGAC_MGDispEx_AR(@Cd_MGEsercizio) Where Cd_AR In 
							(	
								Select Distinct S.Cd_AR
									From
										xGAC_MGDispEx(@Cd_MGEsercizio) S
										Left Join MG 			M On S.Cd_MG 	  	= M.Cd_MG
										Left Join AR 			A On S.Cd_AR 	  	= A.Cd_AR
										Left Join MGUbicazione 	U On S.Cd_MG		= U.Cd_MG 	  	And S.Cd_MGUbicazione 	= U.Cd_MGUbicazione
										Left Join DoSottoCommessa 	C On S.Cd_DoSottoCommessa 	= C.Cd_DoSottoCommessa
										Left Join ARLotto		L On S.Cd_ARLotto 	= L.Cd_ARLotto 	And L.Cd_AR				= A.Cd_AR
									Where
										C.Cd_DoCommessa = @Cd_DOCommessa
							)	
						) SAR On S.Cd_AR = SAR.Cd_AR And S.Cd_MG = SAR.Cd_MG And ISNULL(S.Cd_MGUbicazione, '') = ISNULL(SAR.Cd_MGUbicazione, '')
			Left Join MG 			M On S.Cd_MG 	  	= M.Cd_MG
			Left Join AR 			A On S.Cd_AR 	  	= A.Cd_AR
			Left Join MGUbicazione 	U On S.Cd_MG		= U.Cd_MG 	  	And S.Cd_MGUbicazione 	= U.Cd_MGUbicazione
			Left Join DoSottoCommessa 	C On S.Cd_DoSottoCommessa 	= C.Cd_DoSottoCommessa
			Left Join ARLotto		L On S.Cd_ARLotto 	= L.Cd_ARLotto 	And L.Cd_AR				= A.Cd_AR

			/*TIP*/		

		Where
			ISNULL(C.Cd_DoCommessa, '') = '' And S.Cd_AR In 
			(
				Select Distinct S.Cd_AR
					From
						xGAC_MGDispEx(@Cd_MGEsercizio) S
						Left Join MG 			M On S.Cd_MG 	  	= M.Cd_MG
						Left Join AR 			A On S.Cd_AR 	  	= A.Cd_AR
						Left Join MGUbicazione 	U On S.Cd_MG		= U.Cd_MG 	  	And S.Cd_MGUbicazione 	= U.Cd_MGUbicazione
						Left Join DoSottoCommessa 	C On S.Cd_DoSottoCommessa 	= C.Cd_DoSottoCommessa
						Left Join ARLotto		L On S.Cd_ARLotto 	= L.Cd_ARLotto 	And L.Cd_AR				= A.Cd_AR
					Where
						C.Cd_DoCommessa = @Cd_DOCommessa
			)

			/*WHR*/
		) A
	Group By Ato, Cd_DoSottoCommessa, Cd_AR, Cd_MG, Cd_MGUbicazione, Cd_ARLotto
GO

Create FUNCTION [dbo].[xGAC_MGDispEx_Sottocommessa_Full] (@Cd_MGEsercizio Varchar(4) = Null, @Cd_DOSottoCommessa Varchar(20) = Null) Returns Table
As Return

	Select
		[ATO]			 			= Ato,
		[Cd_AR]					= Cd_AR,
		[Cd_MG]					= Cd_MG,
		[Cd_MGUbicazione]		= Cd_MGUbicazione,
		[Cd_ARLotto]			= Cd_ARLotto,
		[IniQ]					= SUM(IniQ),
		[RetQ]					= SUM(RetQ),
		[CarQA]					= SUM(CarQA),
		[CarQP]					= SUM(CarQP),
		[CarQT]					= SUM(CarQT),
		[ScaQV]					= SUM(ScaQV),
		[ScaQP]					= SUM(ScaQP),
		[ScaQT]					= SUM(ScaQT),
		[OrdQ]					= SUM(OrdQ),
		[ImpQ]					= SUM(ImpQ),
		[Giac]					= SUM(Giac),
		[Disp]					= SUM(Disp),		
		[Dimm]					= SUM(Dimm),
		[OrdQ_NoComm]			= MAX(OrdQ_NoComm),
		[ImpQ_NoComm]			= MAX(ImpQ_NoComm),
		[Giac_NoComm]			= MAX(Giac_NoComm),
		[Disp_NoComm]			= MAX(Disp_NoComm),		
		[Dimm_NoComm]			= MAX(Dimm_NoComm)
	From
		(
		Select
			[ATO]			 			= IsNull(S.Id_DoDB, 0),
			[Cd_AR]					= S.Cd_AR,
			[Cd_MG]					= S.Cd_MG,
			[Cd_MGUbicazione]		= S.Cd_MGUbicazione,
			[Cd_ARLotto]			= S.Cd_ARLotto,
			[IniQ]					= S.IniQ,
			[RetQ]					= S.RetQ,
			[CarQA]					= S.CarQA,
			[CarQP]					= S.CarQP,
			[CarQT]					= S.CarQT,
			[ScaQV]					= S.ScaQV,
			[ScaQP]					= S.ScaQP,
			[ScaQT]					= S.ScaQT,
			[OrdQ]					= S.OrdQ,
			[ImpQ]					= S.ImpQ,
			[Giac]					= S.Quantita,
			[Disp]					= S.QuantitaDisp,		
			[Dimm]					= S.QuantitaDimm,
			[OrdQ_NoComm]			= ISNULL(SAR.OrdQ, 0),
			[ImpQ_NoComm]			= ISNULL(SAR.ImpQ, 0),
			[Giac_NoComm]			= ISNULL(SAR.Quantita, 0),
			[Disp_NoComm]			= ISNULL(SAR.QuantitaDisp, 0),		
			[Dimm_NoComm]			= ISNULL(SAR.QuantitaDimm, 0)

			/*CIP*/

		From
			xGAC_MGDispEx(@Cd_MGEsercizio) S
			Left Join (
						Select * From dbo.xGAC_MGDispEx_AR(@Cd_MGEsercizio) Where Cd_AR In 
							(	
								Select Distinct S.Cd_AR
									From
										xGAC_MGDispEx(@Cd_MGEsercizio) S
										Left Join MG 			M On S.Cd_MG 	  	= M.Cd_MG
										Left Join AR 			A On S.Cd_AR 	  	= A.Cd_AR
										Left Join MGUbicazione 	U On S.Cd_MG		= U.Cd_MG 	  	And S.Cd_MGUbicazione 	= U.Cd_MGUbicazione
										Left Join ARLotto		L On S.Cd_ARLotto 	= L.Cd_ARLotto 	And L.Cd_AR				= A.Cd_AR
									Where
										S.Cd_DoSottoCommessa = @Cd_DOSottoCommessa
							)	
						) SAR On S.Cd_AR = SAR.Cd_AR And S.Cd_MG = SAR.Cd_MG And ISNULL(S.Cd_MGUbicazione, '') = ISNULL(SAR.Cd_MGUbicazione, '')
			Left Join MG 			M On S.Cd_MG 	  	= M.Cd_MG
			Left Join AR 			A On S.Cd_AR 	  	= A.Cd_AR
			Left Join MGUbicazione 	U On S.Cd_MG		= U.Cd_MG 	  	And S.Cd_MGUbicazione 	= U.Cd_MGUbicazione
			Left Join ARLotto		L On S.Cd_ARLotto 	= L.Cd_ARLotto 	And L.Cd_AR				= A.Cd_AR

			/*TIP*/		

		Where
			S.Cd_DoSottoCommessa = @Cd_DOSottoCommessa

			/*WHR*/			

		Union
		
		Select
			[ATO]			 			= IsNull(S.Id_DoDB, 0),
			[Cd_AR]					= S.Cd_AR,
			[Cd_MG]					= S.Cd_MG,
			[Cd_MGUbicazione]		= S.Cd_MGUbicazione,
			[Cd_ARLotto]			= S.Cd_ARLotto,
			[IniQ]					= 0,
			[RetQ]					= 0,
			[CarQA]					= 0,
			[CarQP]					= 0,
			[CarQT]					= 0,
			[ScaQV]					= 0,
			[ScaQP]					= 0,
			[ScaQT]					= 0,
			[OrdQ]					= 0,
			[ImpQ]					= 0,
			[Giac]					= 0,
			[Disp]					= 0,		
			[Dimm]					= 0,
			[OrdQ_NoComm]			= ISNULL(SAR.OrdQ, 0),
			[ImpQ_NoComm]			= ISNULL(SAR.ImpQ, 0),
			[Giac_NoComm]			= ISNULL(SAR.Quantita, 0),
			[Disp_NoComm]			= ISNULL(SAR.QuantitaDisp, 0),		
			[Dimm_NoComm]			= ISNULL(SAR.QuantitaDimm, 0)

			/*CIP*/

		From
			xGAC_MGDispEx(@Cd_MGEsercizio) S
			Left Join (
						Select * From dbo.xGAC_MGDispEx_AR(@Cd_MGEsercizio) Where Cd_AR In 
							(	
								Select Distinct S.Cd_AR
									From
										xGAC_MGDispEx(@Cd_MGEsercizio) S
										Left Join MG 			M On S.Cd_MG 	  	= M.Cd_MG
										Left Join AR 			A On S.Cd_AR 	  	= A.Cd_AR
										Left Join MGUbicazione 	U On S.Cd_MG		= U.Cd_MG 	  	And S.Cd_MGUbicazione 	= U.Cd_MGUbicazione
										Left Join ARLotto		L On S.Cd_ARLotto 	= L.Cd_ARLotto 	And L.Cd_AR				= A.Cd_AR
									Where
										S.Cd_DoSottoCommessa = @Cd_DOSottoCommessa
							)	
						) SAR On S.Cd_AR = SAR.Cd_AR And S.Cd_MG = SAR.Cd_MG And ISNULL(S.Cd_MGUbicazione, '') = ISNULL(SAR.Cd_MGUbicazione, '')
			Left Join MG 			M On S.Cd_MG 	  	= M.Cd_MG
			Left Join AR 			A On S.Cd_AR 	  	= A.Cd_AR
			Left Join MGUbicazione 	U On S.Cd_MG		= U.Cd_MG 	  	And S.Cd_MGUbicazione 	= U.Cd_MGUbicazione
			Left Join ARLotto		L On S.Cd_ARLotto 	= L.Cd_ARLotto 	And L.Cd_AR				= A.Cd_AR

			/*TIP*/		

		Where
			ISNULL(S.Cd_DoSottoCommessa, '') = '' And S.Cd_AR In 
			(
				Select Distinct S.Cd_AR
					From
						xGAC_MGDispEx(@Cd_MGEsercizio) S
						Left Join MG 			M On S.Cd_MG 	  	= M.Cd_MG
						Left Join AR 			A On S.Cd_AR 	  	= A.Cd_AR
						Left Join MGUbicazione 	U On S.Cd_MG		= U.Cd_MG 	  	And S.Cd_MGUbicazione 	= U.Cd_MGUbicazione
						Left Join ARLotto		L On S.Cd_ARLotto 	= L.Cd_ARLotto 	And L.Cd_AR				= A.Cd_AR
					Where
						S.Cd_DoSottoCommessa = @Cd_DOSottoCommessa
			)

			/*WHR*/
		) A
	Group By Ato, Cd_AR, Cd_MG, Cd_MGUbicazione, Cd_ARLotto
GO

-- Restituisce gli Operatori possibili per una determinata Attività
CREATE FUNCTION [dbo].[xGAC_RDTicketAttivita_Operatore_All] (
	@Cd_PRAttivita        Varchar(20)
	, @DataDal              SmallDateTime
	, @DataAl               SmallDateTime
)
Returns @RetTbl Table (
      Cd_xOperatore      Varchar(20),
      O_Desc             Varchar(80),
      Cd_PRCalDefault    Varchar(20),
      Cd_PRCal           Varchar(20),
      Capacity           Int
)
AS
	Begin

		Insert @RetTbl
		Select X.Cd_xOperatore
			  , O.Descrizione As O_Desc
			  , PRC.Cd_PrCal  As Cd_PrCalDefault
			  , PRC.Cd_PrCal
			  , PRC.Capacity
		From (
				Select Distinct xO.Cd_xOperatore
				From xOperatorePRRisorsa xOPRR
					Inner Join xOperatore xO On xOPRR.Id_xOperatore = xO.Id_xOperatore
					Inner Join 
						(
						 Select Cd_PRRisorsa = Case When PRR.Gruppo = 1 Then PRRL.Cd_PrRisorsa_C Else PRR.Cd_PrRisorsa End
						 From PRAttivita PRA	
							Inner Join PRRisorsa PRR      On PRA.Cd_PrRisorsa = PRR.CD_PRRisorsa
							Left  Join PRRisorsaLink PRRL On PRR.CD_PrRisorsa = PRRL.Cd_PrRisorsa_P
						 Where PRA.Cd_PrAttivita = @Cd_PRAttivita
						) PRR On xOPRR.Cd_PrRisorsa = PRR.Cd_PRRisorsa
				) X
			Inner Join xOperatore O On X.Cd_xOperatore = O.Cd_xOperatore
			Inner Join xOperatorePRRisorsa OPRR On O.Id_xOperatore = OPRR.Id_xOperatore And OPRR.DefaultPRRisorsa = 1
			Left Join [dbo].[PRCapacity] (Null, @DataDal, @DataAl, 1) PRC On OPRR.Cd_PRRisorsa = PRC.Cd_PrRisorsa	
		Order By O.Cd_xOperatore

		Return
	End
GO

-- Restituisce gli Operatori possibili per una determinata Risorsa o Gruppo di Risorsa
CREATE FUNCTION [dbo].[xGAC_RDTicketAttivita_Operatore_All_Risorsa] (
	@Cd_PRRisorsa         Varchar(20)
	, @DataDal              SmallDateTime
	, @DataAl               SmallDateTime
)
Returns @RetTbl Table (
      Cd_xOperatore      Varchar(20),
      O_Desc             Varchar(80),
      Cd_PRCalDefault    Varchar(20),
      Cd_PRCal           Varchar(20),
      Capacity           Int
)
AS
	Begin

		Insert @RetTbl
		Select X.Cd_xOperatore
			  , O.Descrizione As O_Desc
			  , PRC.Cd_PrCal  As Cd_PrCalDefault
			  , PRC.Cd_PrCal
			  , PRC.Capacity
		From (
				Select Distinct xO.Cd_xOperatore
				From xOperatorePRRisorsa xOPRR
					Inner Join xOperatore xO On xOPRR.Id_xOperatore = xO.Id_xOperatore
					Inner Join 
						(
						 Select Cd_PRRisorsa = Case When PRR.Gruppo = 1 Then PRRL.Cd_PrRisorsa_C Else PRR.Cd_PrRisorsa End
						 From PRRisorsa PRR Left Join PRRisorsaLink PRRL On PRR.CD_PrRisorsa = PRRL.Cd_PrRisorsa_P
						 Where PRR.Cd_PrRisorsa = @Cd_PRRisorsa
						) PRR On xOPRR.Cd_PrRisorsa = PRR.Cd_PRRisorsa
				) X
			Inner Join xOperatore O On X.Cd_xOperatore = O.Cd_xOperatore
			Inner Join xOperatorePRRisorsa OPRR On O.Id_xOperatore = OPRR.Id_xOperatore And OPRR.DefaultPRRisorsa = 1
			Left Join [dbo].[PRCapacity] (Null, @DataDal, @DataAl, 1) PRC On OPRR.Cd_PRRisorsa = PRC.Cd_PrRisorsa	
		Order By O.Cd_xOperatore

		Return
	End
GO

-- Restituisce gli impegni degli operatori in un dato periodo
CREATE FUNCTION [dbo].[xGAC_RDTicketAttivita_Operatore_Imp] (
	@Cd_PRAttivita        Varchar(20)
	, @DataDal              SmallDateTime
	, @DataAl               SmallDateTime
	, @wcTicketChiusi       Bit
	, @wcTicketSospesi      Bit
	, @wcAttivitaChiuse     Bit
	, @wcAttivitaSospese    Bit
	, @Id_xRDTicketAttivita	Int -- Attività in assegnazione da escludere in quanto processata lato client.
)
Returns @RetTbl Table (
      Id_xRDTicketAttivitaOperatore Int, 
      Cd_xOperatore      Varchar(20),
      Cd_PRAttivita      Varchar(20),
      DataInizio         SmallDateTime,
      OraInizioSec		 Int,
      DataFine           SmallDateTime,
      DurataImpegno      Numeric(18, 6),
      DurataImpegnoSec   Int,
      DurataTrasferta    Numeric(18, 6),
      DurataTrasfertaSec Int,
      Cd_PRCal           Varchar(20),
      Id_xRDTicket       Int,
      Cd_CF              Char(7),
      Cd_CFDest          NChar(3),
      Cd_DOSottoCommessa Varchar(20),
      Cd_xImpianto       Char(10),
      Cd_xMatricola      Varchar(40),
      O_Desc             Varchar(80),
      PRA_Desc           Varchar(80),
      PRA_Note           Text,
      T_Desc             Varchar(230),
      CF_Desc            Varchar(80),
      CFDest_Desc        Varchar(80),
      Contatto           Varchar(50),
      SC_Desc            Varchar(50),
      I_Desc             Varchar(230),
      M_Desc             Varchar(80),
      Telefono           Varchar(20),
      FuoriSede          Bit,
      Indirizzo          Varchar(80),
      Localita           Varchar(60),
      CAP                Varchar(10),
      Cd_Provincia       Char(3),
      Cd_CFZona          Char(3),
      Prov_Desc          Varchar(50),
      Zona_Desc          Varchar(50)
)
AS
	Begin

		Insert @RetTbl
		Select Main.*
       , Provincia.Descrizione As Prov_Desc
       , CFZona.Descrizione    As Zona_Desc
		From (
				Select TA.Id_xRDTicketAttivitaOperatore
				       , O.Cd_xOperatore
						 , TA.Cd_PrAttivita
						 , TA.Datainizio
						 , OraInizioSec = CAST(((DatePart(hh, TA.DataInizio) * 60 * 60) + (DatePart(mi, TA.DataInizio) * 60)) As Int)
						 , TA.Datafine
						 , DurataImpegno = TA.Durata
						 , DurataImpegnoSec = TA.Durata * 60 * 60
						 , TA.DurataTrasferta
						 , DurataTrasfertaSec = TA.DurataTrasferta * 60 * 60
						 , PRC.Cd_PrCal
						 , TA.Id_xRDTicket
						 , T.CD_CF
						 , TA.Cd_CFDest
						 , Cd_DOSottoCommessa = Case When T.GestisciTicket = 1 Then T.Cd_DOSottoCommessaInst Else T.Cd_DOSottoCommessa End
						 , T.CD_xImpianto
						 , T.Cd_xMatricola
						 , O.Descrizione As O_Desc
						 , TA.Descrizione As PRA_Desc
						 , PRA.NotePrAttivita As PRA_Note
						 , T.Descrizione As T_Desc
						 , CF.Descrizione As CF_Desc
						 , CFDest.Descrizione As CFDest_Desc
						 , T.Contatto
						 , SC.Descrizione As SC_Desc
						 , I.Descrizione As I_Desc
						 , IsNull(T.xMatricola_Desc, M.Descrizione) As M_Desc
						 , Telefono     = ISNULL(ISNULL(T.Telefono, CFDest.Telefono), CF.Telefono)
						 , PRA.xFuoriSede As FuoriSede
						 , Indirizzo    = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Indirizzo, CF.Indirizzo) End
						 , Localita     = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Localita, CF.Localita) End
						 , CAP          = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.CAP, CF.CAP) End
						 , Cd_Provincia = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Cd_Provincia, CF.Cd_Provincia) End
						 , Cd_CFZona    = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Cd_CFZona, CF.Cd_CFZona) End
				From (
						Select Distinct xO.Cd_xOperatore
						From xOperatorePRRisorsa xOPRR
							Inner Join xOperatore xO On xOPRR.Id_xOperatore = xO.Id_xOperatore
							Inner Join 
								(
								 Select Cd_PRRisorsa = Case When PRR.Gruppo = 1 Then PRRL.Cd_PrRisorsa_C Else PRR.Cd_PrRisorsa End
								 From PRAttivita PRA	
									Inner Join PRRisorsa PRR      On PRA.Cd_PrRisorsa = PRR.CD_PRRisorsa
									Left  Join PRRisorsaLink PRRL On PRR.CD_PrRisorsa = PRRL.Cd_PrRisorsa_P
								 Where PRA.Cd_PrAttivita = @Cd_PRAttivita
								) PRR On xOPRR.Cd_PrRisorsa = PRR.Cd_PRRisorsa
						) As X
					Inner Join xOperatore O On X.Cd_xOperatore = O.Cd_xOperatore
					Inner Join xOperatorePRRisorsa OPRR On O.Id_xOperatore = OPRR.Id_xOperatore And OPRR.DefaultPRRisorsa = 1
					Inner Join 
						(
						 Select TA.Cd_PrAttivita
						        , TA.Descrizione
								  , TA.Cd_CFDest
								  , TA.NumOrePrev
								  , TA.NumOreEff
								  , TA.Id_xRDTicket
								  , TAO.Cd_xOperatore
								  , TAO.Datainizio
								  , TAO.Datafine
								  , TAO.Durata
								  , TAO.DurataTrasferta
								  , TAO.Id_xRDTicketAttivitaOperatore
							From xRDTicketAttivita TA
								Inner Join xRDTicketAttivitaOperatore TAO On TA.Id_xRDTicketAttivita = TAO.Id_xRDTicketAttivita
							Where (IsNull(TA.Sospeso, 0) = @wcAttivitaSospese Or IsNull(TA.Sospeso, 0) = 0) 
							  And (IsNull(TA.Chiuso , 0) = @wcAttivitaChiuse  Or IsNull(TA.Chiuso , 0) = 0)
							  And (TAO.Datainizio Between @DataDal And @DataAl)
							  -- Attività in assegnazione da escludere in quanto processata lato client.
							  And (TAO.Id_xRDTicketAttivita <> IsNull(@Id_xRDTicketAttivita, 0))
						) As TA On O.Cd_xOperatore = TA.Cd_xOperatore
					Left Join [dbo].[PRCapacity] (Null, @DataDal, @DataAl, 1) PRC On OPRR.Cd_PRRisorsa = PRC.Cd_PrRisorsa	
					Left Join PRAttivita PRA On TA.Cd_PrAttivita = PRA.Cd_PrAttivita
					Left Join xRDTicket T On TA.ID_xRDTicket = T.Id_xRDTicket
					Left Join CFEx CF On T.Cd_CF = CF.CD_CF
					Left Join CFDestEx CFDest On T.CD_CF + TA.Cd_CFDest = CFDEst.CD_CF + CFDest.Cd_CFDest
					Left Join xImpianto I On T.CD_xImpianto = I.Cd_xImpianto
					Left Join xMatricola M On T.Cd_xMatricola = M.Cd_xMatricola And T.CD_AR = M.Cd_AR
					Left Join DoSottoCommessa SC On SC.Cd_DOSottoCommessa = Case When T.GestisciTicket = 1 Then T.Cd_DOSottoCommessaInst Else T.Cd_DOSottoCommessa End
				Where (IsNull(T.Sospeso, 0) = @wcTicketSospesi Or IsNull(T.Sospeso, 0) = 0)
				  And (IsNull(T.Chiuso , 0) = @wcTicketChiusi  Or IsNull(T.Chiuso , 0) = 0)
				) Main
		 Left Join Provincia On Main.Cd_Provincia = Provincia.Cd_Provincia
		 Left Join CFZona On Main.Cd_CFZona = CFZona.Cd_CFZona
		Order By Cd_xOperatore
				, Case When Datainizio Is Null Then 1 Else 0 End
				, DataInizio
				, OraInizioSec
				, CD_PRAttivita

		Return
	End
GO

-- Restituisce gli impegni degli operatori in un dato periodo, basandosi sulle Risorse
CREATE FUNCTION [dbo].[xGAC_RDTicketAttivita_Operatore_Imp_Risorsa] (
	@Cd_PRRisorsa         Varchar(20)
	, @DataDal              SmallDateTime
	, @DataAl               SmallDateTime
	, @wcTicketChiusi       Bit
	, @wcTicketSospesi      Bit
	, @wcAttivitaChiuse     Bit
	, @wcAttivitaSospese    Bit
	, @Id_xRDTicketAttivita	Int
)
Returns @RetTbl Table (
      Id_xRDTicketAttivitaOperatore Int, 
      Cd_xOperatore      Varchar(20),
      Cd_PRAttivita      Varchar(20),
      DataInizio         SmallDateTime,
      OraInizioSec		 Int,
      DataFine           SmallDateTime,
      DurataImpegno      Numeric(18, 6),
      DurataImpegnoSec   Int,
      DurataTrasferta    Numeric(18, 6),
      DurataTrasfertaSec Int,
      Cd_PRCal           Varchar(20),
      Id_xRDTicket       Int,
      Cd_CF              Char(7),
      Cd_CFDest          NChar(3),
      Cd_DOSottoCommessa Varchar(20),
      Cd_xImpianto       Char(10),
      Cd_xMatricola      Varchar(40),
      O_Desc             Varchar(80),
      PRA_Desc           Varchar(80),
      PRA_Note           Text,
      T_Desc             Varchar(230),
      CF_Desc            Varchar(80),
      CFDest_Desc        Varchar(80),
      Contatto           Varchar(50),
      SC_Desc            Varchar(50),
      I_Desc             Varchar(230),
      M_Desc             Varchar(80),
      Telefono           Varchar(20),
      FuoriSede          Bit,
      Indirizzo          Varchar(80),
      Localita           Varchar(60),
      CAP                Varchar(10),
      Cd_Provincia       Char(3),
      Cd_CFZona          Char(3),
      Prov_Desc          Varchar(50),
      Zona_Desc          Varchar(50)
)
AS
	Begin

		Insert @RetTbl
		Select Main.*
       , Provincia.Descrizione As Prov_Desc
       , CFZona.Descrizione    As Zona_Desc
		From (
				Select TA.Id_xRDTicketAttivitaOperatore
				       , O.Cd_xOperatore
						 , TA.Cd_PrAttivita
						 , TA.Datainizio
						 , OraInizioSec = CAST(((DatePart(hh, TA.DataInizio) * 60 * 60) + (DatePart(mi, TA.DataInizio) * 60)) As Int)
						 , TA.Datafine
						 , DurataImpegno = TA.Durata
						 , DurataImpegnoSec = TA.Durata * 60 * 60
						 , TA.DurataTrasferta
						 , DurataTrasfertaSec = TA.DurataTrasferta * 60 * 60
						 , PRC.Cd_PrCal
						 , TA.Id_xRDTicket
						 , T.CD_CF
						 , TA.Cd_CFDest
						 , Cd_DOSottoCommessa = Case When T.GestisciTicket = 1 Then T.Cd_DOSottoCommessaInst Else T.Cd_DOSottoCommessa End
						 , T.CD_xImpianto
						 , T.Cd_xMatricola
						 , O.Descrizione As O_Desc
						 , TA.Descrizione As PRA_Desc
						 , PRA.NotePrAttivita As PRA_Note
						 , T.Descrizione As T_Desc
						 , CF.Descrizione As CF_Desc
						 , CFDest.Descrizione As CFDest_Desc
						 , T.Contatto
						 , SC.Descrizione As SC_Desc
						 , I.Descrizione As I_Desc
						 , IsNull(T.xMatricola_Desc, M.Descrizione) As M_Desc
						 , Telefono     = ISNULL(ISNULL(T.Telefono, CFDest.Telefono), CF.Telefono)
						 , PRA.xFuoriSede As FuoriSede
						 , Indirizzo    = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Indirizzo, CF.Indirizzo) End
						 , Localita     = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Localita, CF.Localita) End
						 , CAP          = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.CAP, CF.CAP) End
						 , Cd_Provincia = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Cd_Provincia, CF.Cd_Provincia) End
						 , Cd_CFZona    = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Cd_CFZona, CF.Cd_CFZona) End
				From (
						Select Distinct xO.Cd_xOperatore
						From xOperatorePRRisorsa xOPRR
							Inner Join xOperatore xO On xOPRR.Id_xOperatore = xO.Id_xOperatore
							Inner Join 
								(
								 Select Cd_PRRisorsa = Case When PRR.Gruppo = 1 Then PRRL.Cd_PrRisorsa_C Else PRR.Cd_PrRisorsa End
								 From PRRisorsa PRR Left Join PRRisorsaLink PRRL On PRR.CD_PrRisorsa = PRRL.Cd_PrRisorsa_P
								 Where PRR.Cd_PrRisorsa = @Cd_PRRisorsa
								) PRR On xOPRR.Cd_PrRisorsa = PRR.Cd_PRRisorsa
						) As X
					Inner Join xOperatore O On X.Cd_xOperatore = O.Cd_xOperatore
					Inner Join xOperatorePRRisorsa OPRR On O.Id_xOperatore = OPRR.Id_xOperatore And OPRR.DefaultPRRisorsa = 1
					Inner Join 
						(
						 Select TA.Cd_PrAttivita
						        , TA.Descrizione
								  , TA.Cd_CFDest
								  , TA.NumOrePrev
								  , TA.NumOreEff
								  , TA.Id_xRDTicket
								  , TAO.Cd_xOperatore
								  , TAO.Datainizio
								  , TAO.Datafine
								  , TAO.Durata
								  , TAO.DurataTrasferta
								  , TAO.Id_xRDTicketAttivitaOperatore
							From xRDTicketAttivita TA
								Inner Join xRDTicketAttivitaOperatore TAO On TA.Id_xRDTicketAttivita = TAO.Id_xRDTicketAttivita
							Where (IsNull(TA.Sospeso, 0) = @wcAttivitaSospese Or IsNull(TA.Sospeso, 0) = 0) 
							  And (IsNull(TA.Chiuso , 0) = @wcAttivitaChiuse  Or IsNull(TA.Chiuso , 0) = 0)
							  And (TAO.Datainizio Between @DataDal And @DataAl)
						) As TA On O.Cd_xOperatore = TA.Cd_xOperatore
					Left Join [dbo].[PRCapacity] (Null, @DataDal, @DataAl, 1) PRC On OPRR.Cd_PRRisorsa = PRC.Cd_PrRisorsa	
					Left Join PRAttivita PRA On TA.Cd_PrAttivita = PRA.Cd_PrAttivita
					Left Join xRDTicket T On TA.ID_xRDTicket = T.Id_xRDTicket
					Left Join CFEx CF On T.Cd_CF = CF.CD_CF
					Left Join CFDestEx CFDest On T.CD_CF + TA.Cd_CFDest = CFDEst.CD_CF + CFDest.Cd_CFDest
					Left Join xImpianto I On T.CD_xImpianto = I.Cd_xImpianto
					Left Join xMatricola M On T.Cd_xMatricola = M.Cd_xMatricola And T.CD_AR = M.Cd_AR
					Left Join DoSottoCommessa SC On SC.Cd_DOSottoCommessa = Case When T.GestisciTicket = 1 Then T.Cd_DOSottoCommessaInst Else T.Cd_DOSottoCommessa End
				Where (IsNull(T.Sospeso, 0) = @wcTicketSospesi Or IsNull(T.Sospeso, 0) = 0)
				  And (IsNull(T.Chiuso , 0) = @wcTicketChiusi  Or IsNull(T.Chiuso , 0) = 0)
				) Main
		 Left Join Provincia On Main.Cd_Provincia = Provincia.Cd_Provincia
		 Left Join CFZona On Main.Cd_CFZona = CFZona.Cd_CFZona
		Order By Cd_xOperatore
				, Case When Datainizio Is Null Then 1 Else 0 End
				, DataInizio
				, OraInizioSec
				, CD_PRAttivita

		Return
	End
GO

-- Restituisce la Select per la gestione degli Interventi Previsti dell'Attività corrente presenti lato client.
CREATE FUNCTION [dbo].[xafn_GAC_RDTicketAttivita_GetStmt4ClientData](
	@Cd_PRAttivita     		Varchar(20)
 , @DataDal           		SmallDateTime
 , @DataAl            		SmallDateTime
 , @wcTicketChiusi    		Bit
 , @wcTicketSospesi			Bit
 , @wcAttivitaChiuse			Bit
 , @wcAttivitaSospese		Bit
 , @Id_xRDTicketAttivita	Int
)
Returns Varchar(max)				
AS
	Begin
		Declare @SqlStmt As Varchar(Max)
		
		Set @SqlStmt = 
		'Select RigaPadre = Null --CAST(0 As Int)
			 , Main.*
			 , Provincia.Descrizione As Prov_Desc
			 , CFZona.Descrizione    As Zona_Desc
			 , Cd_xOperatore_DS = Ltrim(RTrim(Cd_xOperatore)) + '' - '' + LTrim(RTrim(O_Desc))
			 , DurataTotaleSec = IsNull(DurataImpegnoSec, 0) + IsNull(DurataTrasfertaSec, 0)
			From (
					Select TA.Id_xRDTicketAttivitaOperatore
					 , O.Cd_xOperatore
					 , TA.Cd_PrAttivita
					 , TA.Datainizio
					 , OraInizioSec = CAST(((DatePart(hh, TA.DataInizio) * 60 * 60) + (DatePart(mi, TA.DataInizio) * 60)) As Int)
					 , TA.Datafine
					 , DurataImpegno = TA.Durata
					 , DurataImpegnoSec = TA.Durata * 60 * 60
					 , TA.DurataTrasferta
					 , DurataTrasfertaSec = TA.DurataTrasferta * 60 * 60
					 , PRC.Cd_PrCal
					 , TA.Id_xRDTicket
					 , T.CD_CF
					 , TA.Cd_CFDest
					 , Cd_DOSottoCommessa = Case When T.GestisciTicket = 1 Then T.Cd_DOSottoCommessaInst Else T.Cd_DOSottoCommessa End
					 , T.CD_xImpianto
					 , T.Cd_xMatricola
					 , O.Descrizione As O_Desc
					 , TA.Descrizione As PRA_Desc
					 , PRA.NotePrAttivita As PRA_Note
					 , T.Descrizione As T_Desc
					 , CF.Descrizione As CF_Desc
					 , CFDest.Descrizione As CFDest_Desc
					 , T.Contatto
					 , SC.Descrizione As SC_Desc
					 , I.Descrizione As I_Desc
					 , IsNull(T.xMatricola_Desc, M.Descrizione) As M_Desc
					 , Telefono     = ISNULL(ISNULL(T.Telefono, CFDest.Telefono), CF.Telefono)
					 , PRA.xFuoriSede As FuoriSede
					 , Indirizzo    = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Indirizzo, CF.Indirizzo) End
					 , Localita     = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Localita, CF.Localita) End
					 , CAP          = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.CAP, CF.CAP) End
					 , Cd_Provincia = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Cd_Provincia, CF.Cd_Provincia) End
					 , Cd_CFZona    = Case PRA.xFuoriSede When 0 Then Null Else ISNULL(CFDest.Cd_CFZona, CF.Cd_CFZona) End
					From (
							Select Distinct xO.Cd_xOperatore
							From xOperatorePRRisorsa xOPRR
								Inner Join xOperatore xO On xOPRR.Id_xOperatore = xO.Id_xOperatore
								Inner Join 
									(
									 Select Cd_PRRisorsa = Case When PRR.Gruppo = 1 Then PRRL.Cd_PrRisorsa_C Else PRR.Cd_PrRisorsa End
									 From PRAttivita PRA	
										Inner Join PRRisorsa PRR      On PRA.Cd_PrRisorsa = PRR.CD_PRRisorsa
										Left  Join PRRisorsaLink PRRL On PRR.CD_PrRisorsa = PRRL.Cd_PrRisorsa_P
									 Where PRA.Cd_PrAttivita = ''' + @Cd_PRAttivita + '''
									) PRR On xOPRR.Cd_PrRisorsa = PRR.Cd_PRRisorsa
							) As X
						Inner Join xOperatore O On X.Cd_xOperatore = O.Cd_xOperatore
						Inner Join xOperatorePRRisorsa OPRR On O.Id_xOperatore = OPRR.Id_xOperatore And OPRR.DefaultPRRisorsa = 1
						Inner Join 
							(
							 ---- Attività in assegnazione che si sta processando lato client.
							 Select TA_temp.Cd_PrAttivita
							  , TA_temp.Descrizione
							  , TA_temp.Cd_CFDest
							  , TA_temp.NumOrePrev
							  , TA_temp.NumOreEff
							  , TA_temp.Id_xRDTicket
							  , TAO_temp.Cd_xOperatore
							  , TAO_temp.Datainizio
							  , TAO_temp.Datafine
							  , TAO_temp.Durata
							  , TAO_temp.DurataTrasferta
							  , TAO_temp.Id_xRDTicketAttivitaOperatore
								From xRDTicketAttivita TA_temp
									Inner Join #xRDTicketAttivitaOperatore_temp TAO_temp On TA_temp.Id_xRDTicketAttivita = TAO_temp.Id_xRDTicketAttivita
								Where (IsNull(TA_temp.Sospeso, 0) = CAST(' + Cast(@wcAttivitaSospese As Varchar(Max)) + ' as Bit) Or IsNull(TA_temp.Sospeso, 0) = 0) 
								  And (IsNull(TA_temp.Chiuso , 0) = CAST(' + Cast(@wcAttivitaChiuse  As Varchar(Max)) + ' as Bit) Or IsNull(TA_temp.Chiuso , 0) = 0)
								  And (TAO_temp.Datainizio Between CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataDal, 105) + ' 00:00:00'', 105) And CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataAl, 105) + ' 00:00:00'', 105))
								  And (TAO_temp.Id_xRDTicketAttivita = IsNull(CAST(' + Cast(@Id_xRDTicketAttivita As Varchar(Max)) + ' as Int), 0))
							) As TA On O.Cd_xOperatore = TA.Cd_xOperatore
						Left Join [dbo].[PRCapacity] (Null, CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataDal, 105) + ' 00:00:00'', 105), CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataAl, 105) + ' 00:00:00'', 105), 1) PRC On OPRR.Cd_PRRisorsa = PRC.Cd_PrRisorsa	
						Left Join PRAttivita PRA On TA.Cd_PrAttivita = PRA.Cd_PrAttivita
						Left Join xRDTicket T On TA.ID_xRDTicket = T.Id_xRDTicket
						Left Join CFEx CF On T.Cd_CF = CF.CD_CF
						Left Join CFDestEx CFDest On T.CD_CF + TA.Cd_CFDest = CFDEst.CD_CF + CFDest.Cd_CFDest
						Left Join xImpianto I On T.CD_xImpianto = I.Cd_xImpianto
						Left Join xMatricola M On T.Cd_xMatricola = M.Cd_xMatricola And T.CD_AR = M.Cd_AR
						Left Join DoSottoCommessa SC On SC.Cd_DOSottoCommessa = Case When T.GestisciTicket = 1 Then T.Cd_DOSottoCommessaInst Else T.Cd_DOSottoCommessa End
					Where (IsNull(T.Sospeso, 0) = CAST(' + Cast(@wcTicketSospesi As Varchar(Max)) + ' as Bit) Or IsNull(T.Sospeso, 0) = 0)
					  And (IsNull(T.Chiuso , 0) = CAST(' + Cast(@wcTicketChiusi  As Varchar(Max)) + ' as Bit) Or IsNull(T.Chiuso , 0) = 0)
					) Main
			 Left Join Provincia On Main.Cd_Provincia = Provincia.Cd_Provincia
			 Left Join CFZona On Main.Cd_CFZona = CFZona.Cd_CFZona
			Order By Cd_xOperatore
					, Case When Datainizio Is Null Then 1 Else 0 End
					, DataInizio
					, OraInizioSec
					, CD_PRAttivita'
	----------------------------------------------------------------
	Fine_Funzione:
		Return @SqlStmt
	End
GO

-- Attività dei Ticket - Analisi Operatori Disponibili
CREATE PROCEDURE [dbo].[xasp_xRDTicketAttivita_Operatore_Disp] (
		@Cd_PRAttivita     		Varchar(20)
    , @Hrs2Analyze       		Numeric (18, 2)
    , @DataDal           		SmallDateTime
    , @DataAl            		SmallDateTime
    , @wcUserCal         		Varchar(Max)
    , @HrsFreeMin        		Numeric (18, 2)
    , @wcTicketChiusi    		Bit
    , @wcTicketSospesi			Bit
    , @wcAttivitaChiuse			Bit
    , @wcAttivitaSospese		Bit
	 , @FullAnalysis				Bit -- 0 = solo x calendario; 1 = analisi completa disponibilità
	 , @Cd_PRRisorsa				Varchar(20)
	 , @Id_xRDTicketAttivita	Int
    , @nReturn						Integer = 0 Output
	)
	/*ENCRYPTED*/ 
	As

	If @FullAnalysis = 1 -- 0 = solo x calendario; 1 = analisi completa disponibilità
		Set @HrsFreeMin = IsNull(@HrsFreeMin, 0)
	Else
		Set @HrsFreeMin = 0

	-- Variabili di appoggio
	Declare @Riga Int
			, @Cd_PRCal As Varchar(20)
			, @DataImpegno As SmallDateTime
			, @OraInizioSec As Int
			, @DurataImpegnoSec As Int
			, @DataPRCal As SmallDateTime
			, @From1 As Int, @To1 As Int
			, @From2 As Int, @To2 As Int
			, @From3 As Int, @To3 As Int
			, @From4 As Int, @To4 As Int
			, @From5 As Int, @To5 As Int
			, @WorkedSeconds As Int, @WorkedPeriods As Int
			, @ReservedSeconds As Int, @RequiredSeconds As Int
			, @ReservedFrom0 As Int, @ReservedTo0 As Int
			, @ReservedFrom1 As Int, @ReservedTo1 As Int
			, @ReservedFrom2 As Int, @ReservedTo2 As Int
			, @ReservedFrom3 As Int, @ReservedTo3 As Int
			, @ReservedFrom4 As Int, @ReservedTo4 As Int
			, @ReservedFrom5 As Int, @ReservedTo5 As Int
			, @MaxRigaPRCal  As Int, @Period      As Int
			, @DeltaSeconds  As Int, @SQL         As nvarchar(max)
			, @Fx As Int, @RFx As Int, @Tx As Int, @RTx As Int
			, @UserCal_Cd_xOperatore As Varchar(20), @UserCal_Cd_PRCal As Varchar(20)
			, @FreeFrom1a As Int, @FreeTo1a As Int
			, @FreeFrom1b As Int, @FreeTo1b As Int
			, @FreeFrom2a As Int, @FreeTo2a As Int
			, @FreeFrom2b As Int, @FreeTo2b As Int
			, @FreeFrom3a As Int, @FreeTo3a As Int
			, @FreeFrom3b As Int, @FreeTo3b As Int
			, @FreeFrom4a As Int, @FreeTo4a As Int
			, @FreeFrom4b As Int, @FreeTo4b As Int
			, @FreeFrom5a As Int, @FreeTo5a As Int
			, @FreeFrom5b As Int, @FreeTo5b As Int
			, @OreDisp1a As Numeric(18, 2), @OreDisp1b As Numeric(18, 2)
			, @OreDisp2a As Numeric(18, 2), @OreDisp2b As Numeric(18, 2)
			, @OreDisp3a As Numeric(18, 2), @OreDisp3b As Numeric(18, 2)
			, @OreDisp4a As Numeric(18, 2), @OreDisp4b As Numeric(18, 2)
			, @OreDisp5a As Numeric(18, 2), @OreDisp5b As Numeric(18, 2)
			, @OraLibera As Numeric(18, 2), @Reserved1Note As Varchar(max)
			, @Reserved2Note As Varchar(max), @Reserved3Note As Varchar(max)
			, @Reserved4Note As Varchar(max), @Reserved5Note As Varchar(max)
			, @FreeFromX As Varchar(max)    , @FreeToX As Varchar(max)
			, @FreeTimeIn As Int            , @FreeTimeIn_2Hrs As Numeric(18, 2)
			, @OraLiberaIn As Numeric(18, 2), @FreeIn1Note As Varchar(max)
			, @FreeIn2Note As Varchar(max), @FreeIn3Note As Varchar(max)
			, @FreeIn4Note As Varchar(max), @FreeIn5Note As Varchar(max)
			, @Assigned As Bit, @Period0 As Bit


				
	-------------------------------------------------------------------------------------------------
	------------------------------ /* ELENCO OPERATORI "POSSIBILI" */ -------------------------------
	---------------------------------------- /* INIZIO */ -------------------------------------------
	-------------------------------------------------------------------------------------------------

	-- Seleziono tutti gli operatori che possono fare quella determinata attività
	Declare @SqlStmt As Varchar(Max)
	
	If @Cd_PRRisorsa Is Null
		Set @SqlStmt = 'Select Selectable = Cast(0 As Bit)
									 , *
									 , RequiredSeconds = Cast((ISNULL(' + CAST(@Hrs2Analyze As Varchar(max)) + ', 0) * 60 * 60) As Int)
									 , ReservedSeconds = Cast(0 As Int)
									 , Cd_xOperatore_DS = Ltrim(RTrim(Cd_xOperatore)) + '' - '' + LTrim(RTrim(O_Desc))
								From [dbo].[xGAC_RDTicketAttivita_Operatore_All] (
									''' + @Cd_PRAttivita + '''
									, CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataDal, 105) + ''', 105)
									, CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataAl , 105) + ''', 105))
								Where (Not ISNULL(Cd_PRCal, '''') = '''') And (ISNULL(Capacity, 0) > 0)
								Order By Cd_xOperatore'
	Else
		Set @SqlStmt = 'Select Selectable = Cast(0 As Bit)
									 , *
									 , RequiredSeconds = Cast((ISNULL(' + CAST(@Hrs2Analyze As Varchar(max)) + ', 0) * 60 * 60) As Int)
									 , ReservedSeconds = Cast(0 As Int)
									 , Cd_xOperatore_DS = Ltrim(RTrim(Cd_xOperatore)) + '' - '' + LTrim(RTrim(O_Desc))
								From [dbo].[xGAC_RDTicketAttivita_Operatore_All_Risorsa] (
									''' + @Cd_PRRisorsa + '''
									, CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataDal, 105) + ''', 105)
									, CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataAl , 105) + ''', 105))
								Where (Not ISNULL(Cd_PRCal, '''') = '''') And (ISNULL(Capacity, 0) > 0)
								Order By Cd_xOperatore'
						
	Create Table #xOperatoreAll_Temp
		(Selectable Bit
		, Cd_xOperatore Varchar(20)
		, O_Desc Varchar(80)
		, Cd_PrCalDefault Varchar(20)
		, Cd_PrCal Varchar(20)
		, Capacity Int
		, RequiredSeconds Int
		, ReservedSeconds Int
		, Cd_xOperatore_DS Varchar(100))
	
	Insert #xOperatoreAll_Temp Exec(@SqlStmt)
	
	Select Riga = Identity(Int, 1, 1), * Into #xOperatoreAll From #xOperatoreAll_Temp
	
	Drop Table #xOperatoreAll_Temp

	-- Se l'utente ha selezionato calendari differenti per alcuni operatori, aggiorno i dati
	If Len(@wcUserCal) > 0
		Begin
		 -- Creo un cursore temporaneo vuoto per i calendari differenti selezionati dall'operatore
		 Select Cd_xOperatore = Cast('' As Varchar(20))
		      , Cd_PRCal = Cast('' As Varchar(20))
		  Into #xUserCal
		  From #xOperatoreAll
		  Where 1 = 0
		 
		 -- Inserisco i calendari selezionati dall'utente nel cursore temporaneo
		 While LEN(@wcUserCal) > 0
			Begin
			 Set @UserCal_Cd_xOperatore =  SUBSTRING(@wcUserCal, 1, CHARINDEX('|', @wcUserCal) - 1)
			 Set @wcUserCal = SUBSTRING(@wcUserCal, CHARINDEX('|', @wcUserCal) + 1, LEN(@wcUserCal) - CHARINDEX('|', @wcUserCal))
			 Set @UserCal_Cd_PRCal = SUBSTRING(@wcUserCal, 1, CHARINDEX(';', @wcUserCal) - 1)
			 Set @wcUserCal = SUBSTRING(@wcUserCal, CHARINDEX(';', @wcUserCal) + 1, LEN(@wcUserCal) - CHARINDEX(';', @wcUserCal))
			 
			 Insert Into #xUserCal (Cd_xOperatore, Cd_PRCal) Values (@UserCal_Cd_xOperatore, @UserCal_Cd_PRCal)
			End
		 
		 -- Aggiorno la tabella degli operatori che possono fare l'attività con i calendari utente	
		 Update #xOperatoreAll
		  Set Cd_PRCal = X.Cd_PRCal
			 , Capacity = X.Capacity
		  From (
				  Select #xUserCal.*, PRC.Capacity 
				   From #xUserCal 
					 Inner Join [dbo].[PRCapacity](Null, @DataDal, @DataAl, 1) PRC On #xUserCal.Cd_PRCal = PRC.Cd_PRCal
				 ) X
		  Where #xOperatoreAll.Cd_xOperatore = X.Cd_xOperatore
		End

	-------------------------------------------------------------------------------------------------
	------------------------------ /* ELENCO OPERATORI "POSSIBILI" */ -------------------------------
	----------------------------------------- /* FINE */ --------------------------------------------
	-------------------------------------------------------------------------------------------------



	-------------------------------------------------------------------------------------------------
	------------------------------ /* CALCOLO DEGLI IMPEGNI x OPER */ -------------------------------
	---------------------------------------- /* INIZIO */ -------------------------------------------
	-------------------------------------------------------------------------------------------------

	-- Seleziono tutti gli impegni già in essere nel periodo di analisi per gli operatori
	-- che potrebbero fare quella determinata attività
	If @Cd_PRRisorsa Is Null
			Set @SqlStmt = 'Select RigaPadre = Null --CAST(0 As Int)
											 , *
											 , Cd_xOperatore_DS = Ltrim(RTrim(Cd_xOperatore)) + '' - '' + LTrim(RTrim(O_Desc))
											 , DurataTotaleSec = IsNull(DurataImpegnoSec, 0) + IsNull(DurataTrasfertaSec, 0)
									From [dbo].[xGAC_RDTicketAttivita_Operatore_Imp] (
										''' + @Cd_PRAttivita + '''
										, CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataDal, 105) + ' 00:00:00'', 105)
										, CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataAl , 105) + ' 23:59:00'', 105)
										, CAST(' + Cast(@wcTicketChiusi    As Varchar(Max)) + ' as Bit) 
										, CAST(' + Cast(@wcTicketSospesi   As Varchar(Max)) + ' as Bit) 
										, CAST(' + Cast(@wcAttivitaChiuse  As Varchar(Max)) + ' as Bit) 
										, CAST(' + Cast(@wcAttivitaSospese As Varchar(Max)) + ' as Bit)
										, CAST(' + Cast(@Id_xRDTicketAttivita As Varchar(Max)) + ' as Int)
										)
									Order By Cd_xOperatore'
	Else
			Set @SqlStmt = 'Select RigaPadre = Null --CAST(0 As Int)
											 , *
											 , Cd_xOperatore_DS = Ltrim(RTrim(Cd_xOperatore)) + '' - '' + LTrim(RTrim(O_Desc))
											 , DurataTotaleSec = IsNull(DurataImpegnoSec, 0) + IsNull(DurataTrasfertaSec, 0)
									From [dbo].[xGAC_RDTicketAttivita_Operatore_Imp_Risorsa] (
										''' + @Cd_PRRisorsa + '''
										, CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataDal, 105) + ' 00:00:00'', 105)
										, CONVERT(SmallDateTime, ''' + Convert(Varchar(10), @DataAl , 105) + ' 23:59:00'', 105)
										, CAST(' + Cast(@wcTicketChiusi    As Varchar(Max)) + ' as Bit) 
										, CAST(' + Cast(@wcTicketSospesi   As Varchar(Max)) + ' as Bit) 
										, CAST(' + Cast(@wcAttivitaChiuse  As Varchar(Max)) + ' as Bit) 
										, CAST(' + Cast(@wcAttivitaSospese As Varchar(Max)) + ' as Bit)
										, CAST(' + Cast(0 As Varchar(Max)) + ' as Int)
										)
									Order By Cd_xOperatore'

	Create Table #xOperatoreImp_Temp
		(RigaPadre Int
		, Id_xRDTicketAttivitaOperatore Int 
      , Cd_xOperatore      Varchar(20)
      , Cd_PRAttivita      Varchar(20)
      , DataInizio         SmallDateTime
      , OraInizioSec			Int
      , DataFine           SmallDateTime
      , DurataImpegno      Numeric(18, 6)
      , DurataImpegnoSec   Int
      , DurataTrasferta    Numeric(18, 6)
      , DurataTrasfertaSec Int
      , Cd_PRCal           Varchar(20)
      , Id_xRDTicket       Int
      , Cd_CF              Char(7)
      , Cd_CFDest          NChar(3)
      , Cd_DOSottoCommessa Varchar(20)
      , Cd_xImpianto       Char(10)
      , Cd_xMatricola      Varchar(40)
      , O_Desc             Varchar(80)
      , PRA_Desc           Varchar(80)
      , PRA_Note           Text
      , T_Desc             Varchar(230)
      , CF_Desc            Varchar(80)
      , CFDest_Desc        Varchar(80)
      , Contatto           Varchar(50)
      , SC_Desc            Varchar(50)
      , I_Desc             Varchar(230)
      , M_Desc             Varchar(80)
      , Telefono           Varchar(20)
      , FuoriSede          Bit
      , Indirizzo          Varchar(80)
      , Localita           Varchar(60)
      , CAP                Varchar(10)
      , Cd_Provincia       Char(3)
      , Cd_CFZona          Char(3)
      , Prov_Desc          Varchar(50)
      , Zona_Desc          Varchar(50)
		, Cd_xOperatore_DS	Varchar(100)
		, DurataTotaleSec		Int)
	
	Insert #xOperatoreImp_Temp Exec(@SqlStmt)

	------------------------------------------------------------------------------------------------
	-- 04-07-2014: gestione interventi previsti attività corrente che risiedono lato client: inizio.
	------------------------------------------------------------------------------------------------
	If @Cd_PRRisorsa Is Null
		Begin
			 Select @SqlStmt = [dbo].[xafn_GAC_RDTicketAttivita_GetStmt4ClientData] (
				@Cd_PRAttivita
			  ,@DataDal
			  ,@DataAl		
			  ,@wcTicketChiusi		
			  ,@wcTicketSospesi		
			  ,@wcAttivitaChiuse	
			  ,@wcAttivitaSospese
			  ,@Id_xRDTicketAttivita
			  )

			Insert #xOperatoreImp_Temp Exec(@SqlStmt)
		End
	----------------------------------------------------------------------------------------------
	-- 04-07-2014: gestione interventi previsti attività corrente che risiedono lato client: fine.
	----------------------------------------------------------------------------------------------
	
	Select Riga = Identity(Int, 1, 1), * Into #xOperatoreImp From #xOperatoreImp_Temp
	
	Drop Table #xOperatoreImp_Temp

	-- Se l'utente ha selezionato calendari differenti per alcuni operatori, aggiorno i dati degli impegni
	If object_id('tempDB..#xUserCal') Is Not Null
		Begin
		 -- Aggiorno la tabella degli impegni x operatore con i calendari utente	
		 Update #xOperatoreImp
		  Set Cd_PRCal = X.Cd_PRCal
		  From (
				  Select #xUserCal.*
				   From #xUserCal 
				 ) X
		  Where #xOperatoreImp.Cd_xOperatore = X.Cd_xOperatore

		 Drop Table #xUserCal
		End

	-- Metto in relazione il cursore degli operatori "possibili" con il cursore 
	-- degli impegni già in essere
	Update #xOperatoreImp
	 Set RigaPadre = A.Riga
	 From #xOperatoreAll A Left Join #xOperatoreImp I 
			On A.Cd_xOperatore = I.Cd_xOperatore

	-- Creo un cursore temporaneo vuoto per il dettaglio degli impegni
	Select Riga = Identity(Int, 1, 1)
			 , RigaPadre = Null --CAST(0 As Int)
			 , RigaPRCal = Null --CAST(0 As Int)
			 , DataImpegno = CAST('' As SmallDateTime)
			 , WorkedSeconds = CAST(0 As Int)
			 , ReservedSeconds = CAST(0 As Int)
			 , ReservedFrom0 = CAST(0 As Int), ReservedTo0 = CAST(0 As Int)
			 , From1 = CAST(0 As Int), ReservedFrom1 = CAST(0 As Int)
			 , To1   = CAST(0 As Int), ReservedTo1   = CAST(0 As Int)
			 , From2 = CAST(0 As Int), ReservedFrom2 = CAST(0 As Int)
			 , To2   = CAST(0 As Int), ReservedTo2   = CAST(0 As Int)
			 , From3 = CAST(0 As Int), ReservedFrom3 = CAST(0 As Int)
			 , To3   = CAST(0 As Int), ReservedTo3   = CAST(0 As Int)
			 , From4 = CAST(0 As Int), ReservedFrom4 = CAST(0 As Int)
			 , To4   = CAST(0 As Int), ReservedTo4   = CAST(0 As Int)
			 , From5 = CAST(0 As Int), ReservedFrom5 = CAST(0 As Int)
			 , To5   = CAST(0 As Int), ReservedTo5   = CAST(0 As Int)
	Into #xOperatoreImpDT
	From #xOperatoreImp
	Where 1 = 0

	-- Per ogni impegno già in essere, verifico quando dovrebbe terminare il lavoro assegnato
	-- in base alle ore residue di ogni attività
	DECLARE curxOperatoreImp CURSOR FAST_FORWARD FOR 
		Select Riga
				 , Cd_PRCal
				 , DataImpegno = dbo.afn_dt_Datetime2Date(DataInizio)
				 , OraInizioSec
				 , DurataTotaleSec -- Durata Attività + Durata Trasferta
		From #xOperatoreImp
		Where IsNull(DurataImpegnoSec, 0) > 0   -- Impegni solo in presenza di un monte ore residuo x l'attività
				And Not ISNULL(Cd_PRCal, '') = '' -- Impegni solo in presenza di un calendario

	OPEN curxOperatoreImp
	FETCH NEXT FROM curxOperatoreImp INTO @Riga, @Cd_PRCal, @DataImpegno, @OraInizioSec, @DurataImpegnoSec

	WHILE @@FETCH_STATUS = 0 BEGIN -- Ciclo sul cursore curxOperatoreImp

		Set @Period0 = 0

		WHILE @DurataImpegnoSec > 0 BEGIN -- Ciclo su variabile @DurataImpegnoSec
		
			-- Piazza ogni impegno in un determinato giorno e in una determinata ora
			Select @DataPRCal = Data
				, @From1 = From1, @From2 = From2, @From3 = From3, @From4 = From4, @From5 = From5
				, @To1 = To1, @To2 = To2, @To3 = To3, @To4 = To4, @To5 = To5
				, @WorkedSeconds = WorkedSeconds, @WorkedPeriods = WorkedPeriods
			From [dbo].[PRCalInfo] (
				@Cd_PRCal
			  ,@DataImpegno
			  ,@DataImpegno)

			Set @ReservedFrom0 = Null
			Set @ReservedTo0   = Null
			
			-- Verifica da quale periodo partire il primo giorno in base all'ora di inizio
			If IsNull(@OraInizioSec, 0) > 0
				Begin
					If (@WorkedPeriods = 0)
					 Or (@WorkedPeriods = 1 And @OraInizioSec >= IsNull(@To1, 0))
					 Or (@WorkedPeriods = 2 And @OraInizioSec >= IsNull(@To2, 0))
					 Or (@WorkedPeriods = 3 And @OraInizioSec >= IsNull(@To3, 0))
					 Or (@WorkedPeriods = 4 And @OraInizioSec >= IsNull(@To4, 0))
					 Or (@WorkedPeriods = 5 And @OraInizioSec >= IsNull(@To5, 0))
						Begin
							Set @Period0 = 1
							GoTo Period0
						End
				End

	Period1:
			Set @ReservedFrom1 = Case When @WorkedPeriods = 0 Then Null
											  When @WorkedSeconds = 0 Then Null
											  When @OraInizioSec = 0 Then @From1
											  When @OraInizioSec >= IsNull(@To1, 0) Then Null
											  Else @OraInizioSec
										End

			Set @ReservedTo1   = Case When IsNull(@ReservedFrom1, 0) = 0 Then Null
											  When (@ReservedFrom1 + @DurataImpegnoSec) > IsNull(@To1, 0) Then @To1
											  Else @ReservedFrom1 + @DurataImpegnoSec
										End

			Set @DurataImpegnoSec = @DurataImpegnoSec - (IsNull(@ReservedTo1, 0) - IsNull(@ReservedFrom1, 0))

			Set @OraInizioSec = Case When (@DurataImpegnoSec > 0) And (IsNull(@ReservedTo1, 0) > 0) Then @ReservedTo1
											 Else @OraInizioSec
									  End

	Period2:
			Set @ReservedFrom2 = Case When @WorkedPeriods = 0 Then Null
											  When @WorkedSeconds = 0 Then Null
											  When @DurataImpegnoSec = 0 Then Null
											  When @OraInizioSec = 0 Then Null
											  When @OraInizioSec >= IsNull(@To2, 0) Then Null
											  When @OraInizioSec Between IsNull(@To1, 0) And IsNull(@From2, 0) And (IsNull(@ReservedTo1, 0) > 0) Then @From2
											  Else @OraInizioSec
										End

			Set @ReservedTo2   = Case When IsNull(@ReservedFrom2, 0) = 0 Then Null
											  When (@ReservedFrom2 + @DurataImpegnoSec) > IsNull(@To2, 0) Then @To2
											  Else @ReservedFrom2 + @DurataImpegnoSec
										End

			Set @DurataImpegnoSec = @DurataImpegnoSec - (IsNull(@ReservedTo2, 0) - IsNull(@ReservedFrom2, 0))

			Set @OraInizioSec = Case When (@DurataImpegnoSec > 0) And (IsNull(@ReservedTo2, 0) > 0) Then @ReservedTo2
											 Else @OraInizioSec
									  End

	Period3:
			Set @ReservedFrom3 = Case When @WorkedPeriods = 0 Then Null
											  When @WorkedSeconds = 0 Then Null
											  When @DurataImpegnoSec = 0 Then Null
											  When @OraInizioSec = 0 Then Null
											  When @OraInizioSec >= IsNull(@To3, 0) Then Null
											  When @OraInizioSec Between IsNull(@To2, 0) And IsNull(@From3, 0) And (IsNull(@ReservedTo2, 0) > 0) Then @From3
											  Else @OraInizioSec
										End

			Set @ReservedTo3   = Case When IsNull(@ReservedFrom3, 0) = 0 Then Null
											  When (@ReservedFrom3 + @DurataImpegnoSec) > IsNull(@To3, 0) Then @To3
											  Else @ReservedFrom3 + @DurataImpegnoSec
										End

			Set @DurataImpegnoSec = @DurataImpegnoSec - (IsNull(@ReservedTo3, 0) - IsNull(@ReservedFrom3, 0))

			Set @OraInizioSec = Case When (@DurataImpegnoSec > 0) And (IsNull(@ReservedTo3, 0) > 0) Then @ReservedTo3
											 Else @OraInizioSec
									  End
									  
	Period4:
			Set @ReservedFrom4 = Case When @WorkedPeriods = 0 Then Null
											  When @WorkedSeconds = 0 Then Null
											  When @DurataImpegnoSec = 0 Then Null
											  When @OraInizioSec = 0 Then Null
											  When @OraInizioSec >= IsNull(@To4, 0) Then Null
											  When @OraInizioSec Between IsNull(@To3, 0) And IsNull(@From4, 0) And (IsNull(@ReservedTo3, 0) > 0) Then @From4
											  Else @OraInizioSec
										End

			Set @ReservedTo4   = Case When IsNull(@ReservedFrom4, 0) = 0 Then Null
											  When (@ReservedFrom4 + @DurataImpegnoSec) > IsNull(@To4, 0) Then @To4
											  Else @ReservedFrom4 + @DurataImpegnoSec
										End

			Set @DurataImpegnoSec = @DurataImpegnoSec - (IsNull(@ReservedTo4, 0) - IsNull(@ReservedFrom4, 0))

			Set @OraInizioSec = Case When (@DurataImpegnoSec > 0) And (IsNull(@ReservedTo4, 0) > 0) Then @ReservedTo4
											 Else @OraInizioSec
									  End
									  
	Period5:
			Set @ReservedFrom5 = Case When @WorkedPeriods = 0 Then Null
											  When @WorkedSeconds = 0 Then Null
											  When @DurataImpegnoSec = 0 Then Null
											  When @OraInizioSec = 0 Then Null
											  When @OraInizioSec >= IsNull(@To5, 0) Then Null
											  When @OraInizioSec Between IsNull(@To4, 0) And IsNull(@From5, 0) And (IsNull(@ReservedTo4, 0) > 0) Then @From5
											  Else @OraInizioSec
										End

			Set @ReservedTo5   = Case When IsNull(@ReservedFrom5, 0) = 0 Then Null
											  When (@ReservedFrom5 + @DurataImpegnoSec) > IsNull(@To5, 0) Then @To5
											  Else @ReservedFrom5 + @DurataImpegnoSec
										End

			Set @DurataImpegnoSec = @DurataImpegnoSec - (IsNull(@ReservedTo5, 0) - IsNull(@ReservedFrom5, 0))

	Period0:
			If @Period0 = 1
				Begin
					Set @Period0       = 0
					Set @ReservedFrom1 = Null
					Set @ReservedTo1   = Null
					Set @ReservedFrom2 = Null
					Set @ReservedTo2   = Null
					Set @ReservedFrom3 = Null
					Set @ReservedTo3   = Null
					Set @ReservedFrom4 = Null
					Set @ReservedTo4   = Null
					Set @ReservedFrom5 = Null
					Set @ReservedTo5   = Null
					
					Set @ReservedFrom0 = @OraInizioSec

					Set @ReservedTo0   = Case When (@ReservedFrom0 + @DurataImpegnoSec) > 86400 Then 86400
													  Else @ReservedFrom0 + @DurataImpegnoSec
												End

					Set @DurataImpegnoSec = @DurataImpegnoSec - (IsNull(@ReservedTo0, 0) - IsNull(@ReservedFrom0, 0))
				End

			-- Inserimento nuovo giorno con impegno (se è stato assegnato almeno un periodo)
			If (ISNULL(@ReservedFrom0, 0) + ISNULL(@ReservedFrom1, 0) + ISNULL(@ReservedFrom2, 0) + ISNULL(@ReservedFrom3, 0) + ISNULL(@ReservedFrom4, 0) + ISNULL(@ReservedFrom5, 0)) > 0
				Insert Into #xOperatoreImpDT 
				 (RigaPadre, DataImpegno
				 , From1, ReservedFrom1, To1, ReservedTo1
				 , From2, ReservedFrom2, To2, ReservedTo2
				 , From3, ReservedFrom3, To3, ReservedTo3
				 , From4, ReservedFrom4, To4, ReservedTo4
				 , From5, ReservedFrom5, To5, ReservedTo5
				 , ReservedFrom0, ReservedTo0
				 , WorkedSeconds, ReservedSeconds)
				Values
				 (@Riga, @DataImpegno
				 , @From1, @ReservedFrom1, @To1, @ReservedTo1
				 , @From2, @ReservedFrom2, @To2, @ReservedTo2
				 , @From3, @ReservedFrom3, @To3, @ReservedTo3
				 , @From4, @ReservedFrom4, @To4, @ReservedTo4
				 , @From5, @ReservedFrom5, @To5, @ReservedTo5
				 , @ReservedFrom0, @ReservedTo0
				 , @WorkedSeconds
				 , (ISNULL(@ReservedTo1, 0) - ISNULL(@ReservedFrom1, 0))
				 + (ISNULL(@ReservedTo2, 0) - ISNULL(@ReservedFrom2, 0))
				 + (ISNULL(@ReservedTo3, 0) - ISNULL(@ReservedFrom3, 0))
				 + (ISNULL(@ReservedTo4, 0) - ISNULL(@ReservedFrom4, 0))
				 + (ISNULL(@ReservedTo5, 0) - ISNULL(@ReservedFrom5, 0)))

			-- Se esiste ancora del tempo residuo da impegnare, verifico se è possibile impegnare anche il giorno successivo
			If @DurataImpegnoSec > 0 
				Begin
				 Set @DataImpegno = dbo.afn_dt_Datetime2Date(@DataImpegno) + 1 -- giorno successivo
				 Set @OraInizioSec = 0 -- ripartendo sempre dal primo periodo valido
				End 
		END

		FETCH NEXT FROM curxOperatoreImp INTO @Riga, @Cd_PRCal, @DataImpegno, @OraInizioSec, @DurataImpegnoSec
	END -- curxOperatoreImp FETCH

	CLOSE curxOperatoreImp
	DEALLOCATE curxOperatoreImp

	-------------------------------------------------------------------------------------------------
	------------------------------ /* CALCOLO DEGLI IMPEGNI x OPER */ -------------------------------
	----------------------------------------- /* FINE */ --------------------------------------------
	-------------------------------------------------------------------------------------------------



	-------------------------------------------------------------------------------------------------
	------------------------------ /* CALENDARIO x OP. "POSSIBILI" */ -------------------------------
	------------------------------ /* INSERT IMPEGNI -> CALENDARIO */ -------------------------------
	---------------------------------------- /* INIZIO */ -------------------------------------------
	-------------------------------------------------------------------------------------------------
	
	-- Creo un cursore temporaneo vuoto per il dettaglio del calendario
	Select Riga = Identity(Int, 1, 1)
			 , RigaPadre = Null --CAST(0 As Int)
			 , DataPRCal = CAST('' As SmallDateTime)
			 , WorkedPeriods = CAST(0 As Int)
			 , WorkedSeconds = CAST(0 As Int)
			 , ReservedSeconds = CAST(0 As Int)
			 , FreeTimeIn = CAST(0 As Int)
			 , From1 = CAST(0 As Int), ReservedFrom1 = CAST(0 As Int)
			 , To1   = CAST(0 As Int), ReservedTo1   = CAST(0 As Int)
			 , Reserved1Note = Cast('' As Varchar(Max)), FreeIn1Note = Cast('' As Varchar(Max))
			 , From2 = CAST(0 As Int), ReservedFrom2 = CAST(0 As Int)
			 , To2   = CAST(0 As Int), ReservedTo2   = CAST(0 As Int)
			 , Reserved2Note = Cast('' As Varchar(Max)), FreeIn2Note = Cast('' As Varchar(Max))
			 , From3 = CAST(0 As Int), ReservedFrom3 = CAST(0 As Int)
			 , To3   = CAST(0 As Int), ReservedTo3   = CAST(0 As Int)
			 , Reserved3Note = Cast('' As Varchar(Max)), FreeIn3Note = Cast('' As Varchar(Max))
			 , From4 = CAST(0 As Int), ReservedFrom4 = CAST(0 As Int)
			 , To4   = CAST(0 As Int), ReservedTo4   = CAST(0 As Int)
			 , Reserved4Note = Cast('' As Varchar(Max)), FreeIn4Note = Cast('' As Varchar(Max))
			 , From5 = CAST(0 As Int), ReservedFrom5 = CAST(0 As Int)
			 , To5   = CAST(0 As Int), ReservedTo5   = CAST(0 As Int)
			 , Reserved5Note = Cast('' As Varchar(Max)), FreeIn5Note = Cast('' As Varchar(Max))
	Into #xCalendario
	From #xOperatoreAll
	Where 1 = 0
	
   -- Per ogni operatore, creo un calendario per il periodo e per ogni giorno verifico\inserisco 
   -- gli eventuali impegni
	DECLARE curxOperatoreAll CURSOR FAST_FORWARD FOR 
		Select Riga
				 , Cd_PRCal
		From #xOperatoreAll

	OPEN curxOperatoreAll
	FETCH NEXT FROM curxOperatoreAll INTO @Riga, @Cd_PRCal

	WHILE @@FETCH_STATUS = 0 BEGIN -- Ciclo sul cursore curxOperatoreAll

		-- Inserimento nuovo giorno nel calendario dell'operatore
		Insert Into #xCalendario 
		 (RigaPadre, DataPRCal
		 , From1, To1
		 , From2, To2
		 , From3, To3
		 , From4, To4
		 , From5, To5
		 , WorkedPeriods, WorkedSeconds)
		Select @Riga, dbo.afn_dt_Datetime2Date(Data)
		 , From1, To1
		 , From2, To2
		 , From3, To3
		 , From4, To4
		 , From5, To5
		 , WorkedPeriods, WorkedSeconds
		 From [dbo].[PRCalInfo] (
				@Cd_PRCal
			  ,dbo.afn_dt_Datetime2Date(@DataDal)
			  ,dbo.afn_dt_Datetime2Date(@DataAl))

		-- Associo gli impegni con la riga del calendario
		Update #xOperatoreImpDT
		 Set RigaPRCal = Cal.Riga
		 From #xOperatoreAll A
		  Left Join #xCalendario Cal On A.Riga = Cal.RigaPadre
		  Left Join #xOperatoreImp I On A.Riga = I.RigaPadre
		  Left Join #xOperatoreImpDT IDT On I.Riga = IDT.RigaPadre
		 Where I.RigaPadre = @Riga 
		       And dbo.afn_dt_Datetime2Date(Cal.DataPRCal) = dbo.afn_dt_Datetime2Date(IDT.DataImpegno)

		FETCH NEXT FROM curxOperatoreAll INTO @Riga, @Cd_PRCal
	END -- curxOperatoreAll FETCH

	CLOSE curxOperatoreAll
	DEALLOCATE curxOperatoreAll

	-- Inserisco i valori minimi e massimi di impegno per ogni giorno in calendario
	Update #xCalendario
	 Set ReservedFrom1 = Y.RF1Min, ReservedTo1 = Y.RT1Max
	   , ReservedFrom2 = Y.RF2Min, ReservedTo2 = Y.RT2Max
	   , ReservedFrom3 = Y.RF3Min, ReservedTo3 = Y.RT3Max
	   , ReservedFrom4 = Y.RF4Min, ReservedTo4 = Y.RT4Max
	   , ReservedFrom5 = Y.RF5Min, ReservedTo5 = Y.RT5Max
	 From (
		Select X.Riga
		 , RF1Min = Case When IsNull(X.RF1Min, 0) = 0 Then Null
		                 When IsNull(IDT.From1, 0) = 0 Then Null
		                 When IsNull(X.RT1Max, 0) < IDT.From1 Then Null
		                 Else Cast(dbo.afn_Max1(ISNULL(IDT.From1, 0), X.RF1Min) As Int) End
       , RT1Max = Case When IsNull(X.RT1Max, 0) = 0 Then Null
		                 When IsNull(IDT.From1, 0) = 0 Then Null
		                 When IsNull(X.RT1Max, 0) < IDT.From1 Then Null
		                 Else Cast(dbo.afn_Min1(ISNULL(IDT.To1, 86400), X.RT1Max) As Int) End
		 , RF2Min = Case When IsNull(X.RF2Min, 0) = 0 Then Null
		                 When IsNull(IDT.From2, 0) = 0 Then Null
		                 When IsNull(X.RT2Max, 0) < IDT.From2 Then Null
		                 Else Cast(dbo.afn_Max1(ISNULL(IDT.From2, 0), X.RF2Min) As Int) End
       , RT2Max = Case When IsNull(X.RT2Max, 0) = 0 Then Null
		                 When IsNull(IDT.From2, 0) = 0 Then Null
		                 When IsNull(X.RT2Max, 0) < IDT.From2 Then Null
		                 Else Cast(dbo.afn_Min1(ISNULL(IDT.To2, 86400), X.RT2Max) As Int) End
		 , RF3Min = Case When IsNull(X.RF3Min, 0) = 0 Then Null
		                 When IsNull(IDT.From3, 0) = 0 Then Null
		                 When IsNull(X.RT3Max, 0) < IDT.From3 Then Null
		                 Else Cast(dbo.afn_Max1(ISNULL(IDT.From3, 0), X.RF3Min) As Int) End
       , RT3Max = Case When IsNull(X.RT3Max, 0) = 0 Then Null
		                 When IsNull(IDT.From3, 0) = 0 Then Null
		                 When IsNull(X.RT3Max, 0) < IDT.From3 Then Null
		                 Else Cast(dbo.afn_Min1(ISNULL(IDT.To3, 86400), X.RT3Max) As Int) End
		 , RF4Min = Case When IsNull(X.RF4Min, 0) = 0 Then Null
		                 When IsNull(IDT.From4, 0) = 0 Then Null
		                 When IsNull(X.RT4Max, 0) < IDT.From4 Then Null
		                 Else Cast(dbo.afn_Max1(ISNULL(IDT.From4, 0), X.RF4Min) As Int) End
       , RT4Max = Case When IsNull(X.RT4Max, 0) = 0 Then Null
		                 When IsNull(IDT.From4, 0) = 0 Then Null
		                 When IsNull(X.RT4Max, 0) < IDT.From4 Then Null
		                 Else Cast(dbo.afn_Min1(ISNULL(IDT.To4, 86400), X.RT4Max) As Int) End
		 , RF5Min = Case When IsNull(X.RF5Min, 0) = 0 Then Null
		                 When IsNull(IDT.From5, 0) = 0 Then Null
		                 When IsNull(X.RT5Max, 0) < IDT.From5 Then Null
		                 Else Cast(dbo.afn_Max1(ISNULL(IDT.From5, 0), X.RF5Min) As Int) End
       , RT5Max = Case When IsNull(X.RT5Max, 0) = 0 Then Null
		                 When IsNull(IDT.From5, 0) = 0 Then Null
		                 When IsNull(X.RT5Max, 0) < IDT.From5 Then Null
		                 Else Cast(dbo.afn_Min1(ISNULL(IDT.To5, 86400), X.RT5Max) As Int) End
		From (
			Select Cal.Riga
			 , Cast(Min(IDT.ReservedFrom1) As Int) As RF1Min, Cast(Max(IDT.ReservedTo1) As Int) As RT1Max
			 , Cast(Min(IDT.ReservedFrom2) As Int) As RF2Min, Cast(Max(IDT.ReservedTo2) As Int) As RT2Max
			 , Cast(Min(IDT.ReservedFrom3) As Int) As RF3Min, Cast(Max(IDT.ReservedTo3) As Int) As RT3Max
			 , Cast(Min(IDT.ReservedFrom4) As Int) As RF4Min, Cast(Max(IDT.ReservedTo4) As Int) As RT4Max
			 , Cast(Min(IDT.ReservedFrom5) As Int) As RF5Min, Cast(Max(IDT.ReservedTo5) As Int) As RT5Max
			From #xCalendario Cal
				  Inner Join #xOperatoreImpDT IDT On Cal.Riga = IDT.RigaPRCal
			Group By Cal.Riga
			) X Inner Join #xOperatoreImpDT IDT On X.Riga = IDT.RigaPRCal
		) Y
	 Where #xCalendario.Riga = Y.Riga

   -- Nei campi Reserved<Periodo>Note prendo nota dei singoli impegni riferiti al Periodo Lavorativo;
   -- es.: in un calendario con Periodo Lavorativo che va dalle 08:00 alle 12:00, prendo nota di un
   --      eventuale Periodo Impegnato che va dalle 09:30 alle 11:00.
   DECLARE curxOperatoreImpDT CURSOR FAST_FORWARD FOR 
		Select RigaPRCal
				 , ReservedFrom1, ReservedTo1
				 , ReservedFrom2, ReservedTo2
				 , ReservedFrom3, ReservedTo3
				 , ReservedFrom4, ReservedTo4
				 , ReservedFrom5, ReservedTo5
		From #xOperatoreImpDT

	OPEN curxOperatoreImpDT
	FETCH NEXT FROM curxOperatoreImpDT INTO @Riga, @ReservedFrom1, @ReservedTo1, @ReservedFrom2, @ReservedTo2, @ReservedFrom3
	                                      , @ReservedTo3, @ReservedFrom4, @ReservedTo4, @ReservedFrom5, @ReservedTo5

	WHILE @@FETCH_STATUS = 0 BEGIN -- Ciclo sul cursore curxOperatoreImpDT
	
		Update #xCalendario
		 Set Reserved1Note = IsNull(Reserved1Note, '') + IsNull(CAST(@ReservedFrom1 As Char(5)) + '|' + CAST(@ReservedTo1 As Char(5)) + ';', '')
         , Reserved2Note = IsNull(Reserved2Note, '') + IsNull(CAST(@ReservedFrom2 As Char(5)) + '|' + CAST(@ReservedTo2 As Char(5)) + ';', '')
         , Reserved3Note = IsNull(Reserved3Note, '') + IsNull(CAST(@ReservedFrom3 As Char(5)) + '|' + CAST(@ReservedTo3 As Char(5)) + ';', '')
         , Reserved4Note = IsNull(Reserved4Note, '') + IsNull(CAST(@ReservedFrom4 As Char(5)) + '|' + CAST(@ReservedTo4 As Char(5)) + ';', '')
         , Reserved5Note = IsNull(Reserved5Note, '') + IsNull(CAST(@ReservedFrom5 As Char(5)) + '|' + CAST(@ReservedTo5 As Char(5)) + ';', '')
       Where Riga = @Riga
         
		FETCH NEXT FROM curxOperatoreImpDT INTO @Riga, @ReservedFrom1, @ReservedTo1, @ReservedFrom2, @ReservedTo2, @ReservedFrom3
	                                      , @ReservedTo3, @ReservedFrom4, @ReservedTo4, @ReservedFrom5, @ReservedTo5
	END -- curxOperatoreImpDT FETCH

	CLOSE curxOperatoreImpDT
	DEALLOCATE curxOperatoreImpDT
	
	-- Nei campi Free<Periodo>Note prendo nota dei Periodi Liberi interni ad un Periodo Lavorativo;
  -- es.: in un calendario con Periodo Lavorativo che va dalle 08:00 alle 12:00, prendo nota di un
  --      eventuale Periodo Libero che va dalle 09:30 alle 11:00.
   DECLARE curxCalendario CURSOR FAST_FORWARD FOR 
		Select Riga
				 , Reserved1Note
				 , Reserved2Note
				 , Reserved3Note
				 , Reserved4Note
				 , Reserved5Note
		From #xCalendario

	OPEN curxCalendario
	FETCH NEXT FROM curxCalendario INTO @Riga, @Reserved1Note, @Reserved2Note, @Reserved3Note, @Reserved4Note, @Reserved5Note

	WHILE @@FETCH_STATUS = 0 BEGIN -- Ciclo sul cursore curxCalendario
		
		Set @FreeTimeIn = 0

		While LEN(@Reserved1Note) > 0
		 Begin
			Set @FreeFromX = SUBSTRING(@Reserved1Note, CHARINDEX('|', @Reserved1Note) + 1, (CHARINDEX(';', @Reserved1Note) - 1) - CHARINDEX('|', @Reserved1Note))
			Set @Reserved1Note = SUBSTRING(@Reserved1Note, CHARINDEX(';', @Reserved1Note) + 1, LEN(@Reserved1Note) - CHARINDEX(';', @Reserved1Note))
			If LEN(@Reserved1Note) > 0
			 Begin
				 Set @FreeToX =  SUBSTRING(@Reserved1Note, 1, CHARINDEX('|', @Reserved1Note) - 1)
				 If LEN(@FreeFromX) > 0 And LEN(@FreeToX) > 0
				  Begin
					Set @FreeTimeIn = CAST(@FreeToX As Int) - CAST(@FreeFromX As Int)

					If IsNull(@FreeTimeIn, 0) > 0
						Update #xCalendario
						 Set FreeIn1Note = IsNull(FreeIn1Note, '') + IsNull(CAST(@FreeFromX As Char(5)) + '|' + Rtrim(CAST(@FreeTimeIn As Char(5))) + ';', '')
							, FreeTimeIn = IsNull(FreeTimeIn, 0) + IsNull(@FreeTimeIn, 0)
						 Where Riga = @Riga
				  End
			 End
		 End
         
		Set @FreeTimeIn = 0

		While LEN(@Reserved2Note) > 0
		 Begin
			Set @FreeFromX = SUBSTRING(@Reserved2Note, CHARINDEX('|', @Reserved2Note) + 1, (CHARINDEX(';', @Reserved2Note) - 1) - CHARINDEX('|', @Reserved2Note))
			Set @Reserved2Note = SUBSTRING(@Reserved2Note, CHARINDEX(';', @Reserved2Note) + 1, LEN(@Reserved2Note) - CHARINDEX(';', @Reserved2Note))
			If LEN(@Reserved2Note) > 0
			 Begin
				 Set @FreeToX =  SUBSTRING(@Reserved2Note, 1, CHARINDEX('|', @Reserved2Note) - 1)
				 If LEN(@FreeFromX) > 0 And LEN(@FreeToX) > 0 
				  Begin
					Set @FreeTimeIn = CAST(@FreeToX As Int) - CAST(@FreeFromX As Int)

					If IsNull(@FreeTimeIn, 0) > 0
						Update #xCalendario
						 Set FreeIn2Note = IsNull(FreeIn2Note, '') + IsNull(CAST(@FreeFromX As Char(5)) + '|' + Rtrim(CAST(@FreeTimeIn As Char(5))) + ';', '')
							, FreeTimeIn = IsNull(FreeTimeIn, 0) + IsNull(@FreeTimeIn, 0)
						 Where Riga = @Riga
				  End
			 End
		 End

		Set @FreeTimeIn = 0

		While LEN(@Reserved3Note) > 0
		 Begin
			Set @FreeFromX = SUBSTRING(@Reserved3Note, CHARINDEX('|', @Reserved3Note) + 1, (CHARINDEX(';', @Reserved3Note) - 1) - CHARINDEX('|', @Reserved3Note))
			Set @Reserved3Note = SUBSTRING(@Reserved3Note, CHARINDEX(';', @Reserved3Note) + 1, LEN(@Reserved3Note) - CHARINDEX(';', @Reserved3Note))
			If LEN(@Reserved3Note) > 0
			 Begin
				 Set @FreeToX =  SUBSTRING(@Reserved3Note, 1, CHARINDEX('|', @Reserved3Note) - 1)
				 If LEN(@FreeFromX) > 0 And LEN(@FreeToX) > 0 
				  Begin
					Set @FreeTimeIn = CAST(@FreeToX As Int) - CAST(@FreeFromX As Int)

					If IsNull(@FreeTimeIn, 0) > 0
						Update #xCalendario
						 Set FreeIn3Note = IsNull(FreeIn3Note, '') + IsNull(CAST(@FreeFromX As Char(5)) + '|' + Rtrim(CAST(@FreeTimeIn As Char(5))) + ';', '')
							, FreeTimeIn = IsNull(FreeTimeIn, 0) + IsNull(@FreeTimeIn, 0)
						 Where Riga = @Riga
				  End
			 End
		 End

		Set @FreeTimeIn = 0

		While LEN(@Reserved4Note) > 0
		 Begin
			Set @FreeFromX = SUBSTRING(@Reserved4Note, CHARINDEX('|', @Reserved4Note) + 1, (CHARINDEX(';', @Reserved4Note) - 1) - CHARINDEX('|', @Reserved4Note))
			Set @Reserved4Note = SUBSTRING(@Reserved4Note, CHARINDEX(';', @Reserved4Note) + 1, LEN(@Reserved4Note) - CHARINDEX(';', @Reserved4Note))
			If LEN(@Reserved4Note) > 0
			 Begin
				 Set @FreeToX =  SUBSTRING(@Reserved4Note, 1, CHARINDEX('|', @Reserved4Note) - 1)
				 If LEN(@FreeFromX) > 0 And LEN(@FreeToX) > 0 
				  Begin
					Set @FreeTimeIn = CAST(@FreeToX As Int) - CAST(@FreeFromX As Int)

					If IsNull(@FreeTimeIn, 0) > 0
						Update #xCalendario
						 Set FreeIn4Note = IsNull(FreeIn4Note, '') + IsNull(CAST(@FreeFromX As Char(5)) + '|' + Rtrim(CAST(@FreeTimeIn As Char(5))) + ';', '')
							, FreeTimeIn = IsNull(FreeTimeIn, 0) + IsNull(@FreeTimeIn, 0)
						 Where Riga = @Riga
				  End
			 End
		 End

		Set @FreeTimeIn = 0

		While LEN(@Reserved5Note) > 0
		 Begin
			Set @FreeFromX = SUBSTRING(@Reserved5Note, CHARINDEX('|', @Reserved5Note) + 1, (CHARINDEX(';', @Reserved5Note) - 1) - CHARINDEX('|', @Reserved5Note))
			Set @Reserved5Note = SUBSTRING(@Reserved5Note, CHARINDEX(';', @Reserved5Note) + 1, LEN(@Reserved5Note) - CHARINDEX(';', @Reserved5Note))
			If LEN(@Reserved5Note) > 0
			 Begin
				 Set @FreeToX =  SUBSTRING(@Reserved5Note, 1, CHARINDEX('|', @Reserved5Note) - 1)
				 If LEN(@FreeFromX) > 0 And LEN(@FreeToX) > 0 
				  Begin
					Set @FreeTimeIn = CAST(@FreeToX As Int) - CAST(@FreeFromX As Int)

					If IsNull(@FreeTimeIn, 0) > 0
						Update #xCalendario
						 Set FreeIn5Note = IsNull(FreeIn5Note, '') + IsNull(CAST(@FreeFromX As Char(5)) + '|' + Rtrim(CAST(@FreeTimeIn As Char(5))) + ';', '')
							, FreeTimeIn = IsNull(FreeTimeIn, 0) + IsNull(@FreeTimeIn, 0)
						 Where Riga = @Riga
				  End
			 End
		 End

		FETCH NEXT FROM curxCalendario INTO @Riga, @Reserved1Note, @Reserved2Note, @Reserved3Note, @Reserved4Note, @Reserved5Note
	END -- curxCalendario FETCH

	CLOSE curxCalendario
	DEALLOCATE curxCalendario

   -- Aggiorno il tempo totale impegnato per ogni giorno in calendario
   Update #xCalendario
    Set ReservedSeconds = 
			(ISNULL(ReservedTo1, 0) - ISNULL(ReservedFrom1, 0))
		 + (ISNULL(ReservedTo2, 0) - ISNULL(ReservedFrom2, 0))
		 + (ISNULL(ReservedTo3, 0) - ISNULL(ReservedFrom3, 0))
		 + (ISNULL(ReservedTo4, 0) - ISNULL(ReservedFrom4, 0))
		 + (ISNULL(ReservedTo5, 0) - ISNULL(ReservedFrom5, 0))
		 - (ISNULL(FreeTimeIn , 0)                           )

	-- Marco gli operatori che hanno una disponibilità nel periodo per eseguire l'attività
	Update #xOperatoreAll
	 Set ReservedSeconds = X.ReservedSeconds
	 From (
			Select A.Riga, Sum(C.ReservedSeconds) As ReservedSeconds
			 From #xOperatoreAll A
			  Left Join #xCalendario C On A.Riga = C.RigaPadre
			 Group By A.Riga
			) X
	 Where #xOperatoreAll.Riga = X.Riga

	Update #xOperatoreAll
	 Set Selectable = Case When IsNull(Capacity, 0) < (IsNull(RequiredSeconds, 0) + IsNull(ReservedSeconds, 0)) Then Cast(0 As Bit) 
	                       Else Cast(1 As Bit) End

	-------------------------------------------------------------------------------------------------
	------------------------------ /* CALENDARIO x OP. "POSSIBILI" */ -------------------------------
	------------------------------ /* INSERT IMPEGNI -> CALENDARIO */ -------------------------------
	----------------------------------------- /* FINE */ --------------------------------------------
	-------------------------------------------------------------------------------------------------



	-------------------------------------------------------------------------------------------------
	------------------------------ /* VERIFICA PERIODI LIBERI x GG */ -------------------------------
	---------------------------------------- /* INIZIO */ -------------------------------------------
	-------------------------------------------------------------------------------------------------
	
	-- Verifica i periodi liberi di ogni giorno per ogni operatore con una disponibilità
	Select OreDisp1a = CAST(CAST((ISNULL(FreeTo1a, 0) - ISNULL(FreeFrom1a, 0)) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
	     , OreDisp1b = CAST(CAST((ISNULL(FreeTo1b, 0) - ISNULL(FreeFrom1b, 0)) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
	     , OreDisp2a = CAST(CAST((ISNULL(FreeTo2a, 0) - ISNULL(FreeFrom2a, 0)) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
	     , OreDisp2b = CAST(CAST((ISNULL(FreeTo2b, 0) - ISNULL(FreeFrom2b, 0)) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
	     , OreDisp3a = CAST(CAST((ISNULL(FreeTo3a, 0) - ISNULL(FreeFrom3a, 0)) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
	     , OreDisp3b = CAST(CAST((ISNULL(FreeTo3b, 0) - ISNULL(FreeFrom3b, 0)) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
	     , OreDisp4a = CAST(CAST((ISNULL(FreeTo4a, 0) - ISNULL(FreeFrom4a, 0)) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
	     , OreDisp4b = CAST(CAST((ISNULL(FreeTo4b, 0) - ISNULL(FreeFrom4b, 0)) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
	     , OreDisp5a = CAST(CAST((ISNULL(FreeTo5a, 0) - ISNULL(FreeFrom5a, 0)) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
	     , OreDisp5b = CAST(CAST((ISNULL(FreeTo5b, 0) - ISNULL(FreeFrom5b, 0)) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
	     , OreDisp   = CAST(CAST((ISNULL(FreeTo1a, 0) - ISNULL(FreeFrom1a, 0)) 
	                           + (ISNULL(FreeTo1b, 0) - ISNULL(FreeFrom1b, 0)) 
	                           + (ISNULL(FreeTo2a, 0) - ISNULL(FreeFrom2a, 0)) 
	                           + (ISNULL(FreeTo2b, 0) - ISNULL(FreeFrom2b, 0)) 
	                           + (ISNULL(FreeTo3a, 0) - ISNULL(FreeFrom3a, 0)) 
	                           + (ISNULL(FreeTo3b, 0) - ISNULL(FreeFrom3b, 0)) 
	                           + (ISNULL(FreeTo4a, 0) - ISNULL(FreeFrom4a, 0)) 
	                           + (ISNULL(FreeTo4b, 0) - ISNULL(FreeFrom4b, 0)) 
	                           + (ISNULL(FreeTo5a, 0) - ISNULL(FreeFrom5a, 0)) 
	                           + (ISNULL(FreeTo5b, 0) - ISNULL(FreeFrom5b, 0))
	                           + (ISNULL(FreeTimeIn, 0)                      ) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
	     , Y.*
	Into #xCalendarioFree
	From
	  (
		Select Riga
			  , RigaPadre
			  , FreeTimeIn
			  , FreeFrom1a = Case When ISNULL(FreeFrom1a, 0) = ISNULL(FreeTo1a, 0) Then Null Else FreeFrom1a End 
			  , FreeTo1a   = Case When ISNULL(FreeFrom1a, 0) = ISNULL(FreeTo1a, 0) Then Null Else FreeTo1a End 
			  , FreeFrom1b = Case When ISNULL(FreeFrom1b, 0) = ISNULL(FreeFrom1a, 0) Then Null 
										 When ISNULL(FreeFrom1b, 0) = ISNULL(FreeTo1b, 0) Then Null
										 Else FreeFrom1b End 
			  , FreeTo1b   = Case When ISNULL(FreeTo1b  , 0) = ISNULL(FreeTo1a  , 0) Then Null 
										 When ISNULL(FreeFrom1b, 0) = ISNULL(FreeTo1b, 0) Then Null
										 Else FreeTo1b   End 
			  , FreeFrom2a = Case When ISNULL(FreeFrom2a, 0) = ISNULL(FreeTo2a, 0) Then Null Else FreeFrom2a End 
			  , FreeTo2a   = Case When ISNULL(FreeFrom2a, 0) = ISNULL(FreeTo2a, 0) Then Null Else FreeTo2a End 
			  , FreeFrom2b = Case When ISNULL(FreeFrom2b, 0) = ISNULL(FreeFrom2a, 0) Then Null 
										 When ISNULL(FreeFrom2b, 0) = ISNULL(FreeTo2b, 0) Then Null
										 Else FreeFrom2b End 
			  , FreeTo2b   = Case When ISNULL(FreeTo2b  , 0) = ISNULL(FreeTo2a  , 0) Then Null 
										 When ISNULL(FreeFrom2b, 0) = ISNULL(FreeTo2b, 0) Then Null
										 Else FreeTo2b   End 
			  , FreeFrom3a = Case When ISNULL(FreeFrom3a, 0) = ISNULL(FreeTo3a, 0) Then Null Else FreeFrom3a End 
			  , FreeTo3a   = Case When ISNULL(FreeFrom3a, 0) = ISNULL(FreeTo3a, 0) Then Null Else FreeTo3a End 
			  , FreeFrom3b = Case When ISNULL(FreeFrom3b, 0) = ISNULL(FreeFrom3a, 0) Then Null 
										 When ISNULL(FreeFrom3b, 0) = ISNULL(FreeTo3b, 0) Then Null
										 Else FreeFrom3b End 
			  , FreeTo3b   = Case When ISNULL(FreeTo3b  , 0) = ISNULL(FreeTo3a  , 0) Then Null 
										 When ISNULL(FreeFrom3b, 0) = ISNULL(FreeTo3b, 0) Then Null
										 Else FreeTo3b   End 
			  , FreeFrom4a = Case When ISNULL(FreeFrom4a, 0) = ISNULL(FreeTo4a, 0) Then Null Else FreeFrom4a End 
			  , FreeTo4a   = Case When ISNULL(FreeFrom4a, 0) = ISNULL(FreeTo4a, 0) Then Null Else FreeTo4a End 
			  , FreeFrom4b = Case When ISNULL(FreeFrom4b, 0) = ISNULL(FreeFrom4a, 0) Then Null 
										 When ISNULL(FreeFrom4b, 0) = ISNULL(FreeTo4b, 0) Then Null
										 Else FreeFrom4b End 
			  , FreeTo4b   = Case When ISNULL(FreeTo4b  , 0) = ISNULL(FreeTo4a  , 0) Then Null 
										 When ISNULL(FreeFrom4b, 0) = ISNULL(FreeTo4b, 0) Then Null
										 Else FreeTo4b   End 
			  , FreeFrom5a = Case When ISNULL(FreeFrom5a, 0) = ISNULL(FreeTo5a, 0) Then Null Else FreeFrom5a End 
			  , FreeTo5a   = Case When ISNULL(FreeFrom5a, 0) = ISNULL(FreeTo5a, 0) Then Null Else FreeTo5a End 
			  , FreeFrom5b = Case When ISNULL(FreeFrom5b, 0) = ISNULL(FreeFrom5a, 0) Then Null 
										 When ISNULL(FreeFrom5b, 0) = ISNULL(FreeTo5b, 0) Then Null
										 Else FreeFrom5b End 
			  , FreeTo5b   = Case When ISNULL(FreeTo5b  , 0) = ISNULL(FreeTo5a  , 0) Then Null 
										 When ISNULL(FreeFrom5b, 0) = ISNULL(FreeTo5b, 0) Then Null
										 Else FreeTo5b   End 
		 From 
			(
			Select Riga
				  , RigaPadre
				  , FreeTimeIn
				  , FreeFrom1a = From1
				  , FreeTo1a   = Case When ISNULL(ReservedFrom1, 0) = 0 Then To1   Else ReservedFrom1 End
				  , FreeFrom1b = Case When ISNULL(ReservedTo1  , 0) = 0 Then From1 Else ReservedTo1   End 
				  , FreeTo1b   = To1
				  , FreeFrom2a = From2
				  , FreeTo2a   = Case When ISNULL(ReservedFrom2, 0) = 0 Then To2   Else ReservedFrom2 End
				  , FreeFrom2b = Case When ISNULL(ReservedTo2  , 0) = 0 Then From2 Else ReservedTo2   End 
				  , FreeTo2b   = To2
 				  , FreeFrom3a = From3
				  , FreeTo3a   = Case When ISNULL(ReservedFrom3, 0) = 0 Then To3   Else ReservedFrom3 End
				  , FreeFrom3b = Case When ISNULL(ReservedTo3  , 0) = 0 Then From3 Else ReservedTo3   End 
				  , FreeTo3b   = To3
				  , FreeFrom4a = From4
				  , FreeTo4a   = Case When ISNULL(ReservedFrom4, 0) = 0 Then To4   Else ReservedFrom4 End
				  , FreeFrom4b = Case When ISNULL(ReservedTo4  , 0) = 0 Then From4 Else ReservedTo4   End 
				  , FreeTo4b   = To4
 				  , FreeFrom5a = From5
				  , FreeTo5a   = Case When ISNULL(ReservedFrom5, 0) = 0 Then To5   Else ReservedFrom5 End
				  , FreeFrom5b = Case When ISNULL(ReservedTo5  , 0) = 0 Then From5 Else ReservedTo5   End 
				  , FreeTo5b   = To5
			 From #xCalendario 
			 Where ISNULL(WorkedSeconds, 0) >= (ISNULL(ReservedSeconds, 0) + (@HrsFreeMin * 3600))
			) X
	  ) Y

   -- Unisco i periodi liberi al resto del calendario
	Select Selectable = Cast(0 As Bit)
	     , Selected   = Cast(0 As Bit)
	     , C.Riga, C.RigaPadre, C.DataPRCal
		  , C.WorkedPeriods, C.WorkedSeconds, C.ReservedSeconds, C.FreeTimeIn
		  , OraLibera  = Cast(0 As Numeric(18, 2))
	     , PrimaOraLibera = CAST(0 As CHAR(5))
	     , CF.OreDisp
	     , OreAss    = CAST(0 As Numeric(18, 2))
		  , Andata    = CAST(0 As Bit)
		  , Ritorno   = CAST(0 As Bit)
		  , C.From1, C.To1, C.ReservedFrom1, C.ReservedTo1, C.Reserved1Note, CF.FreeFrom1a, CF.FreeTo1a, CF.OreDisp1a, CF.FreeFrom1b, CF.FreeTo1b, CF.OreDisp1b, C.FreeIn1Note
		  , C.From2, C.To2, C.ReservedFrom2, C.ReservedTo2, C.Reserved2Note, CF.FreeFrom2a, CF.FreeTo2a, CF.OreDisp2a, CF.FreeFrom2b, CF.FreeTo2b, CF.OreDisp2b, C.FreeIn2Note
		  , C.From3, C.To3, C.ReservedFrom3, C.ReservedTo3, C.Reserved3Note, CF.FreeFrom3a, CF.FreeTo3a, CF.OreDisp3a, CF.FreeFrom3b, CF.FreeTo3b, CF.OreDisp3b, C.FreeIn3Note
		  , C.From4, C.To4, C.ReservedFrom4, C.ReservedTo4, C.Reserved4Note, CF.FreeFrom4a, CF.FreeTo4a, CF.OreDisp4a, CF.FreeFrom4b, CF.FreeTo4b, CF.OreDisp4b, C.FreeIn4Note
		  , C.From5, C.To5, C.ReservedFrom5, C.ReservedTo5, C.Reserved5Note, CF.FreeFrom5a, CF.FreeTo5a, CF.OreDisp5a, CF.FreeFrom5b, CF.FreeTo5b, CF.OreDisp5b, C.FreeIn5Note
	 Into #xCalendarioDisp
	 From #xCalendario C Inner Join #xCalendarioFree CF On C.Riga = CF.Riga And C.RigaPadre = CF.RigaPadre
    Where OreDisp >= @HrsFreeMin
   
   Set @OraLibera = Null 

   -- Per ogni giorno del calendario, verifico se i periodi liberi soddisfano la richiesta dell'operatore
	DECLARE curxCalendarioDisp CURSOR FAST_FORWARD FOR 
		Select Riga
		     , From1, To1, FreeFrom1a, FreeTo1a, OreDisp1a, FreeFrom1b, FreeTo1b, OreDisp1b, FreeIn1Note
		     , From2, To2, FreeFrom2a, FreeTo2a, OreDisp2a, FreeFrom2b, FreeTo2b, OreDisp2b, FreeIn2Note
		     , From3, To3, FreeFrom3a, FreeTo3a, OreDisp3a, FreeFrom3b, FreeTo3b, OreDisp3b, FreeIn3Note
		     , From4, To4, FreeFrom4a, FreeTo4a, OreDisp4a, FreeFrom4b, FreeTo4b, OreDisp4b, FreeIn4Note
		     , From5, To5, FreeFrom5a, FreeTo5a, OreDisp5a, FreeFrom5b, FreeTo5b, OreDisp5b, FreeIn5Note
		From #xCalendarioDisp

	OPEN curxCalendarioDisp
	FETCH NEXT FROM curxCalendarioDisp INTO @Riga, @From1, @To1, @FreeFrom1a, @FreeTo1a, @OreDisp1a, @FreeFrom1b, @FreeTo1b, @OreDisp1b, @FreeIn1Note
													  , @From2, @To2, @FreeFrom2a, @FreeTo2a, @OreDisp2a, @FreeFrom2b, @FreeTo2b, @OreDisp2b, @FreeIn2Note
													  , @From3, @To3, @FreeFrom3a, @FreeTo3a, @OreDisp3a, @FreeFrom3b, @FreeTo3b, @OreDisp3b, @FreeIn3Note
													  , @From4, @To4, @FreeFrom4a, @FreeTo4a, @OreDisp4a, @FreeFrom4b, @FreeTo4b, @OreDisp4b, @FreeIn4Note
													  , @From5, @To5, @FreeFrom5a, @FreeTo5a, @OreDisp5a, @FreeFrom5b, @FreeTo5b, @OreDisp5b, @FreeIn5Note

	WHILE @@FETCH_STATUS = 0 BEGIN -- Ciclo sul cursore curxCalendarioDisp
		Set @OraLibera = Case When @OreDisp1a > 0 
		                           And @OreDisp1a >= @HrsFreeMin Then Cast(Cast(@FreeFrom1a As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When @OreDisp1b > 0 
		                           And @OreDisp1b >= @HrsFreeMin Then Cast(Cast(@FreeFrom1b As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When ISNULL(@To1, 0) > 0 
										   And [dbo].[afn_Max1](IsNull(@FreeTo1a, 0), IsNull(@FreeTo1b, 0)) = ISNULL(@To1, 0)
										   And ISNULL(@From2, 0) > 0
										   And ISNULL(@FreeFrom2a, 0) = ISNULL(@From2, 0)
										   And (IsNull(NullIf(@OreDisp1b, 0), @OreDisp1a) + @OreDisp2a) >= @HrsFreeMin Then Cast(Cast(IsNull(@FreeFrom1b, @FreeFrom1a) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When @OreDisp2a > 0 
		                           And @OreDisp2a >= @HrsFreeMin Then Cast(Cast(@FreeFrom2a As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When @OreDisp2b > 0 
		                           And @OreDisp2b >= @HrsFreeMin Then Cast(Cast(@FreeFrom2b As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When ISNULL(@To2, 0) > 0 
										   And [dbo].[afn_Max1](IsNull(@FreeTo2a, 0), IsNull(@FreeTo2b, 0)) = ISNULL(@To2, 0)
										   And ISNULL(@From3, 0) > 0
										   And ISNULL(@FreeFrom3a, 0) = ISNULL(@From3, 0)
										   And (IsNull(NullIf(@OreDisp2b, 0), @OreDisp2a) + @OreDisp3a) >= @HrsFreeMin Then Cast(Cast(IsNull(@FreeFrom2b, @FreeFrom2a) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When @OreDisp3a > 0 
		                           And @OreDisp3a >= @HrsFreeMin Then Cast(Cast(@FreeFrom3a As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When @OreDisp3b > 0 
		                           And @OreDisp3b >= @HrsFreeMin Then Cast(Cast(@FreeFrom3b As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When ISNULL(@To3, 0) > 0 
										   And [dbo].[afn_Max1](IsNull(@FreeTo3a, 0), IsNull(@FreeTo3b, 0)) = ISNULL(@To3, 0)
										   And ISNULL(@From4, 0) > 0
										   And ISNULL(@FreeFrom4a, 0) = ISNULL(@From4, 0)
										   And (IsNull(NullIf(@OreDisp3b, 0), @OreDisp3a) + @OreDisp4a) >= @HrsFreeMin Then Cast(Cast(IsNull(@FreeFrom3b, @FreeFrom3a) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When @OreDisp4a > 0 
		                           And @OreDisp4a >= @HrsFreeMin Then Cast(Cast(@FreeFrom4a As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When @OreDisp4b > 0 
		                           And @OreDisp4b >= @HrsFreeMin Then Cast(Cast(@FreeFrom4b As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When ISNULL(@To4, 0) > 0 
										   And [dbo].[afn_Max1](IsNull(@FreeTo4a, 0), IsNull(@FreeTo4b, 0)) = ISNULL(@To4, 0)
										   And ISNULL(@From5, 0) > 0
										   And ISNULL(@FreeFrom5a, 0) = ISNULL(@From5, 0)
										   And (IsNull(NullIf(@OreDisp4b, 0), @OreDisp4a) + @OreDisp5a) >= @HrsFreeMin Then Cast(Cast(IsNull(@FreeFrom4b, @FreeFrom4a) As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When @OreDisp5a > 0 
		                           And @OreDisp5a >= @HrsFreeMin Then Cast(Cast(@FreeFrom5a As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      When @OreDisp5b > 0 
		                           And @OreDisp5b >= @HrsFreeMin Then Cast(Cast(@FreeFrom5b As Numeric(18, 2)) / 3600 As Numeric(18, 2))
		                      Else Null End
		
		-- Verifica se nei Periodi Liberi interni ai singoli Periodi Lavorativi
		-- esiste la possibilità di anticipare la Prima Ora Libera
		Set @OraLibera = ISNULL(@OraLibera, 0)
		Set @Assigned = 0
		
		While LEN(IsNull(@FreeIn1Note, '')) > 0
		 Begin
			Set @OraLiberaIn = IsNull(Cast(Cast(SUBSTRING(@FreeIn1Note, 1, CHARINDEX('|', @FreeIn1Note) - 1) As Numeric(18, 2)) / 3600 As Numeric(18, 2)), 0)
			Set @FreeIn1Note = SUBSTRING(@FreeIn1Note, CHARINDEX('|', @FreeIn1Note) + 1, LEN(@FreeIn1Note) - CHARINDEX('|', @FreeIn1Note))
			If LEN(IsNull(@FreeIn1Note, '')) > 0
			 Begin
				 Set @FreeTimeIn_2Hrs =  IsNull(Cast(Cast(SUBSTRING(@FreeIn1Note, 1, CHARINDEX(';', @FreeIn1Note) - 1) As Numeric(18, 2)) / 3600 As Numeric(18, 2)), 0)
				 Set @FreeIn1Note = SUBSTRING(@FreeIn1Note, CHARINDEX(';', @FreeIn1Note) + 1, LEN(@FreeIn1Note) - CHARINDEX(';', @FreeIn1Note))
			    If (@Assigned = 0) And (@OraLiberaIn > 0) And (@FreeTimeIn_2Hrs > 0) And (@FreeTimeIn_2Hrs >= @HrsFreeMin) And ((@OraLibera = 0) Or (@OraLiberaIn < @OraLibera))
				  Begin
					Set @OraLibera = @OraLiberaIn
					Set @Assigned  = 1
				  End
			 End
		 End
		 
		If @Assigned = 0
		 Begin
			While LEN(IsNull(@FreeIn2Note, '')) > 0
			 Begin
				Set @OraLiberaIn = IsNull(Cast(Cast(SUBSTRING(@FreeIn2Note, 1, CHARINDEX('|', @FreeIn2Note) - 1) As Numeric(18, 2)) / 3600 As Numeric(18, 2)), 0)
				Set @FreeIn2Note = SUBSTRING(@FreeIn2Note, CHARINDEX('|', @FreeIn2Note) + 1, LEN(@FreeIn2Note) - CHARINDEX('|', @FreeIn2Note))
				If LEN(IsNull(@FreeIn2Note, '')) > 0
				 Begin
					 Set @FreeTimeIn_2Hrs =  IsNull(Cast(Cast(SUBSTRING(@FreeIn2Note, 1, CHARINDEX(';', @FreeIn2Note) - 1) As Numeric(18, 2)) / 3600 As Numeric(18, 2)), 0)
					 Set @FreeIn2Note = SUBSTRING(@FreeIn2Note, CHARINDEX(';', @FreeIn2Note) + 1, LEN(@FreeIn2Note) - CHARINDEX(';', @FreeIn2Note))
					 If (@Assigned = 0) And (@OraLiberaIn > 0) And (@FreeTimeIn_2Hrs > 0) And (@FreeTimeIn_2Hrs >= @HrsFreeMin) And ((@OraLibera = 0) Or (@OraLiberaIn < @OraLibera))
					  Begin
						Set @OraLibera = @OraLiberaIn
						Set @Assigned  = 1
					  End
				 End
			 End
		 End

		If @Assigned = 0
		 Begin
			While LEN(IsNull(@FreeIn3Note, '')) > 0
			 Begin
				Set @OraLiberaIn = IsNull(Cast(Cast(SUBSTRING(@FreeIn3Note, 1, CHARINDEX('|', @FreeIn3Note) - 1) As Numeric(18, 2)) / 3600 As Numeric(18, 2)), 0)
				Set @FreeIn3Note = SUBSTRING(@FreeIn3Note, CHARINDEX('|', @FreeIn3Note) + 1, LEN(@FreeIn3Note) - CHARINDEX('|', @FreeIn3Note))
				If LEN(IsNull(@FreeIn3Note, '')) > 0
				 Begin
					 Set @FreeTimeIn_2Hrs =  IsNull(Cast(Cast(SUBSTRING(@FreeIn3Note, 1, CHARINDEX(';', @FreeIn3Note) - 1) As Numeric(18, 2)) / 3600 As Numeric(18, 2)), 0)
					 Set @FreeIn3Note = SUBSTRING(@FreeIn3Note, CHARINDEX(';', @FreeIn3Note) + 1, LEN(@FreeIn3Note) - CHARINDEX(';', @FreeIn3Note))
					 If (@Assigned = 0) And (@OraLiberaIn > 0) And (@FreeTimeIn_2Hrs > 0) And (@FreeTimeIn_2Hrs >= @HrsFreeMin) And ((@OraLibera = 0) Or (@OraLiberaIn < @OraLibera))
					  Begin
						Set @OraLibera = @OraLiberaIn
						Set @Assigned  = 1
					  End
				 End
			 End
		 End

		If @Assigned = 0
		 Begin
			While LEN(IsNull(@FreeIn4Note, '')) > 0
			 Begin
				Set @OraLiberaIn = IsNull(Cast(Cast(SUBSTRING(@FreeIn4Note, 1, CHARINDEX('|', @FreeIn4Note) - 1) As Numeric(18, 2)) / 3600 As Numeric(18, 2)), 0)
				Set @FreeIn4Note = SUBSTRING(@FreeIn4Note, CHARINDEX('|', @FreeIn4Note) + 1, LEN(@FreeIn4Note) - CHARINDEX('|', @FreeIn4Note))
				If LEN(IsNull(@FreeIn4Note, '')) > 0
				 Begin
					 Set @FreeTimeIn_2Hrs =  IsNull(Cast(Cast(SUBSTRING(@FreeIn4Note, 1, CHARINDEX(';', @FreeIn4Note) - 1) As Numeric(18, 2)) / 3600 As Numeric(18, 2)), 0)
					 Set @FreeIn4Note = SUBSTRING(@FreeIn4Note, CHARINDEX(';', @FreeIn4Note) + 1, LEN(@FreeIn4Note) - CHARINDEX(';', @FreeIn4Note))
					 If (@Assigned = 0) And (@OraLiberaIn > 0) And (@FreeTimeIn_2Hrs > 0) And (@FreeTimeIn_2Hrs >= @HrsFreeMin) And ((@OraLibera = 0) Or (@OraLiberaIn < @OraLibera))
					  Begin
						Set @OraLibera = @OraLiberaIn
						Set @Assigned  = 1
					  End
				 End
			 End
		 End

		If @Assigned = 0
		 Begin
			While LEN(IsNull(@FreeIn5Note, '')) > 0
			 Begin
				Set @OraLiberaIn = IsNull(Cast(Cast(SUBSTRING(@FreeIn5Note, 1, CHARINDEX('|', @FreeIn5Note) - 1) As Numeric(18, 2)) / 3600 As Numeric(18, 2)), 0)
				Set @FreeIn5Note = SUBSTRING(@FreeIn5Note, CHARINDEX('|', @FreeIn5Note) + 1, LEN(@FreeIn5Note) - CHARINDEX('|', @FreeIn5Note))
				If LEN(IsNull(@FreeIn5Note, '')) > 0
				 Begin
					 Set @FreeTimeIn_2Hrs =  IsNull(Cast(Cast(SUBSTRING(@FreeIn5Note, 1, CHARINDEX(';', @FreeIn5Note) - 1) As Numeric(18, 2)) / 3600 As Numeric(18, 2)), 0)
					 Set @FreeIn5Note = SUBSTRING(@FreeIn5Note, CHARINDEX(';', @FreeIn5Note) + 1, LEN(@FreeIn5Note) - CHARINDEX(';', @FreeIn5Note))
					 If (@Assigned = 0) And (@OraLiberaIn > 0) And (@FreeTimeIn_2Hrs > 0) And (@FreeTimeIn_2Hrs >= @HrsFreeMin) And ((@OraLibera = 0) Or (@OraLiberaIn < @OraLibera))
					  Begin
						Set @OraLibera = @OraLiberaIn
						Set @Assigned  = 1
					  End
				 End
			 End
		 End

		Update #xCalendarioDisp
		 Set OraLibera = @OraLibera
		 Where Riga = @Riga

		Update #xCalendarioDisp
		 Set Selectable = 1
		 Where Riga = @Riga And ISNULL(OraLibera, 0) > 0                      
	   
		FETCH NEXT FROM curxCalendarioDisp INTO @Riga, @From1, @To1, @FreeFrom1a, @FreeTo1a, @OreDisp1a, @FreeFrom1b, @FreeTo1b, @OreDisp1b, @FreeIn1Note
														  , @From2, @To2, @FreeFrom2a, @FreeTo2a, @OreDisp2a, @FreeFrom2b, @FreeTo2b, @OreDisp2b, @FreeIn2Note
														  , @From3, @To3, @FreeFrom3a, @FreeTo3a, @OreDisp3a, @FreeFrom3b, @FreeTo3b, @OreDisp3b, @FreeIn3Note
														  , @From4, @To4, @FreeFrom4a, @FreeTo4a, @OreDisp4a, @FreeFrom4b, @FreeTo4b, @OreDisp4b, @FreeIn4Note
														  , @From5, @To5, @FreeFrom5a, @FreeTo5a, @OreDisp5a, @FreeFrom5b, @FreeTo5b, @OreDisp5b, @FreeIn5Note
	END -- curxCalendarioDisp FETCH

	CLOSE curxCalendarioDisp
	DEALLOCATE curxCalendarioDisp

	-- Formattazione Prima Ora Libera
	Update #xCalendarioDisp
	 Set OraLibera = CAST(OraLibera As Int) + ((OraLibera - CAST(OraLibera As Int)) / 100 * 60)

	Update #xCalendarioDisp
	 Set PrimaOraLibera = Replace(CAST(OraLibera As Char(5)), '.', ':')

	Update #xCalendarioDisp
	 Set PrimaOraLibera = Case When LEN(SUBSTRING(PrimaOraLibera, 1, CHARINDEX(':', PrimaOraLibera) - 1)) = 1 Then '0' Else '' End + PrimaOraLibera
	
	-------------------------------------------------------------------------------------------------
	------------------------------ /* VERIFICA PERIODI LIBERI x GG */ -------------------------------
	----------------------------------------- /* FINE */ --------------------------------------------
	-------------------------------------------------------------------------------------------------



	-------------------------------------------------------------------------------------------------
	------------------------------ /* SELEZIONE FINALE DATI DA #T  */ -------------------------------
	---------------------------------------- /* INIZIO */ -------------------------------------------
	-------------------------------------------------------------------------------------------------

	Select *
	     , Selected = Cast(0 As Bit) -- Utilizzato solo dal Calendario per evidenziare gli Operatori a cui è stata assegnata l'Attività corrente.
	 From  
		(
		Select *
			  , OreDisp      = Cast(Case When (Capacity - ReservedSeconds) < RequiredSeconds Then (Cast(Capacity As Numeric(18, 2)) - Cast(ReservedSeconds As Numeric(18, 2))) / 3600
									 Else Cast(RequiredSeconds As Numeric(18, 2)) / 3600 End As Numeric(18, 2))
			  , OreDispReali = Cast((Cast(Capacity As Numeric(18, 2)) - Cast(ReservedSeconds As Numeric(18, 2))) / 3600 As Numeric(18, 2))
			  , OreAss       = CAST(0 As Numeric(18, 2))
		 From #xOperatoreAll 
	   ) X
	 Where OreDispReali >= @HrsFreeMin
 	 Order By Selectable Desc, OreDisp Desc, Cd_xOperatore

	If @FullAnalysis = 1 -- 0 = solo x calendario; 1 = analisi completa disponibilità
		Begin
			Select *
			 From #xCalendarioDisp
			 Where Selectable = 1
		End

	Select * 
	 From #xOperatoreImp
	 	 
	Select * 
	 From #xOperatoreImpDT
	
	If @FullAnalysis = 1 -- 0 = solo x calendario; 1 = analisi completa disponibilità
		Begin
			Select Riga = Identity(Int, 1, 1), Y.*
			 Into #xTrasferta
			 From (
				Select Distinct X.*
				 From (
					Select OI.Cd_xOperatore, OI.Cd_xOperatore_DS, OIDT.DataInizio, OIDT.DataFine, OI.Localita, OI.CAP, OI.Cd_Provincia, OI.Cd_CFZona
						  , Provincia = '[' + Ltrim(RTrim(OI.Cd_Provincia)) + '] ' + LTrim(RTrim(OI.Prov_Desc))
						  , Zona      = '[' + Ltrim(RTrim(OI.Cd_CFZona))    + '] ' + LTrim(RTrim(OI.Zona_Desc))
					 From #xOperatoreImp OI Inner Join
						(
						Select RigaPadre, MIN(DataImpegno) As DataInizio, MAX(DataImpegno) As DataFine
						 From #xOperatoreImpDT
						 Group By RigaPadre
						) OIDT On OI.Riga = OIDT.RigaPadre
					 Where OI.FuoriSede = 1
					 ) X
				 ) Y
			 Order By Y.DataInizio, Y.Cd_xOperatore

			Select * 
			 From #xTrasferta
		End

	Select @nReturn = Count(*) 
	 From #xOperatoreAll 

	Drop Table #xOperatoreAll
	Drop Table #xCalendario
	Drop Table #xCalendarioFree
	Drop Table #xCalendarioDisp
	Drop Table #xOperatoreImp
	Drop Table #xOperatoreImpDT
	If @FullAnalysis = 1 Drop Table #xTrasferta -- 0 = solo x calendario; 1 = analisi completa disponibilità

	-------------------------------------------------------------------------------------------------
	------------------------------ /* SELEZIONE FINALE DATI DA #T  */ -------------------------------
	----------------------------------------- /* FINE */ --------------------------------------------
	-------------------------------------------------------------------------------------------------

	Return IsNull(@nReturn, 0)
GO

--aggiornamento dati matricole attività
CREATE PROCEDURE [dbo].[xasp_xRDTicketAttivita_UpdateMatricola] (
		@Id_xRDTicket	Integer
		, @Id_xRDTicketAttivita_wzd	Integer -- passata dal wizard di Inserimento Rilevazioni per gestire solo l'attività rilevata e non tutte le attività del ticket
		, @nReturn		Integer = 0 Output
	)
	/*ENCRYPTED*/ 
	As
	
	-- Return:
	--	= 0: nessun aggiornamento effettuato o procedura non eseguita per il ticket corrente
	--	> 0: matricole aggiornate nelle attività del ticket e\o in anagrafica
	If IsNull(@Id_xRDTicket, 0) = 0 Return 0

	Declare @Assistenza As Bit
	Declare @MultiMatricola As Bit

	Select @Assistenza = GestisciTicket, @MultiMatricola = Case When GestioneMatricola = 'M' Then 0 Else 1 End From xRDTicket Where Id_xRDTicket = @Id_xRDTicket

	If @Assistenza = 0 Return 0 --ticket di produzione
	If @MultiMatricola = 0 Return 0 --ticket di assistenza con gestione mono-matricola

  Set @Id_xRDTicketAttivita_wzd = IsNull(@Id_xRDTicketAttivita_wzd, 0)
	Set @nReturn = 0

	--dichiarazione variabili
	Declare @Id_xRDTicketAttivita Integer
		, @RigaPadre Smallint
		, @Cd_AR Varchar(20)
		, @Cd_xMatricola Varchar(40)
		, @Cd_AR_sub Varchar(20)
		, @Cd_xMatricola_Sub Varchar(40)
		, @Cd_CF Char(7)
		, @Cd_CFDest Char(3)
		, @DescrizioneUbicazione varchar(100)
		, @Dismissione Bit
		, @Cd_AR_sub_Old Varchar(20)
		, @Cd_xMatricola_Sub_Old Varchar(40)
		, @DescrizioneUbicazione_Old varchar(100)
		-- VARIABILI PER GESTIONE MATRICOLA PERSONALIZZATA PER WATERTIRE
		, @CF_xCd_MG_Esiste bit = case when exists(	select 1
													from sys.columns 
													where Name = N'xCd_MG' AND Object_ID = Object_ID(N'dbo.CF')
												) then 1 else 0 end
		, @CFDest_xCd_MG_Esiste bit = case when exists(	select 1
														from sys.columns 
														where Name = N'xCd_MG' AND Object_ID = Object_ID(N'dbo.CFDest')
													) then 1 else 0 end
		, @MG_xCd_CF_Esiste bit = case when exists(	select 1
													from sys.columns 
													where Name = N'xCd_CF' AND Object_ID = Object_ID(N'dbo.MG')
												) then 1 else 0 end
		, @MG_xCd_CFDest_Esiste bit = case when exists(	select 1
														from sys.columns 
														where Name = N'xCd_CfDest' AND Object_ID = Object_ID(N'dbo.MG')
													) then 1 else 0 end
		, @RC Int
		, @stmt Varchar(Max)

	--cursore contenente le matricole associate a tutte le attività del ticket (fedi) o all'attività rilevata (wizard)
	If @Id_xRDTicketAttivita_wzd = 0
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.RigaPadre, TAM.Cd_AR, TAM.Cd_xMatricola, TA.Cd_CFDest, xMatricola.DescrizioneUbicazione
			 From xRDTicketAttivitaMatricola TAM
				Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
				left join xMatricola			on TAM.Cd_xMatricola		= xMatricola.Cd_xMatricola
			 Where TA.Id_xRDTicket = @Id_xRDTicket
			 Order By TA.Riga, TA.Id_xRDTicketAttivita, TAM.Riga
	Else
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.RigaPadre, TAM.Cd_AR, TAM.Cd_xMatricola, TA.Cd_CFDest, xMatricola.DescrizioneUbicazione
			 From xRDTicketAttivitaMatricola TAM
				Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
				inner join xMatricola			on TAM.Cd_xMatricola		= xMatricola.Cd_xMatricola
			 Where TA.Id_xRDTicket = @Id_xRDTicket And TA.Id_xRDTicketAttivita = @Id_xRDTicketAttivita_wzd -- solo attività rilevata da wizard
			 Order By TAM.Riga
	
	Open curTAM
	Fetch Next From curTAM Into @Id_xRDTicketAttivita, @RigaPadre, @Cd_AR, @Cd_xMatricola, @Cd_CFDest, @DescrizioneUbicazione
	While @@FETCH_STATUS = 0 Begin
		--ricerca del cliente intestatario del ticket
		Select @Cd_CF = Cd_CF From xRDTicket Where Id_xRDTicket = @Id_xRDTicket

	  --nelle matricole associate alle attività ripulisco innanzitutto i campi Manutenuta, DataManutenzione, Cd_AR_Sub, Cd_xMatricola_Sub,
		--così da assicurarmi di essere allineato anche con le cancellazioni di rilevazioni o matricole nelle rilevazioni (va anche ripulita
		--temporaneamente la situazione in anagrafica matricola)
		Select @Cd_AR_sub_Old = TAM.Cd_AR_Sub, @Cd_xMatricola_Sub_Old = TAM.Cd_xMatricola_Sub, @DescrizioneUbicazione_Old = xMatricola.DescrizioneUbicazione
			From xRDTicketAttivitaMatricola TAM
				left join xMatricola on TAM.Cd_xMatricola_Sub = xMatricola.Cd_xMatricola
			Where TAM.Id_xRDTicketAttivita = @Id_xRDTicketAttivita And TAM.RigaPadre = @RigaPadre And TAM.Cd_AR = @Cd_AR And TAM.Cd_xMatricola = @Cd_xMatricola

		Update xRDTicketAttivitaMatricola 
			Set Manutenuta = 0, DataManutenzione = Null, Cd_AR_Sub = Null, Cd_xMatricola_Sub = Null
			Where Id_xRDTicketAttivita = @Id_xRDTicketAttivita And RigaPadre = @RigaPadre And Cd_AR = @Cd_AR And Cd_xMatricola = @Cd_xMatricola

		If (@Cd_AR_sub_Old Is Not Null) And (@Cd_xMatricola_Sub_Old Is Not Null)
			Begin
				--la matricola precedentemente utilizzata in sostituzione viene temporaneamente sganciata dal cliente\sede
				Update xMatricola Set Cd_CF = Null, Cd_CFDest = Null, DescrizioneUbicazione = Null Where Cd_AR = @Cd_AR_sub_Old And Cd_xMatricola = @Cd_xMatricola_Sub_Old
				--la matricola precedentemente sostituita viene temporaneamente riagganciata al cliente\sede
				Update xMatricola Set Cd_CF = @Cd_CF, Cd_CFDest = nullif(ltrim(rtrim(@Cd_CFDest)), ''), DescrizioneUbicazione = @DescrizioneUbicazione_Old Where Cd_AR = @Cd_AR And Cd_xMatricola = @Cd_xMatricola
			End

		--aggiornamento nelle matricole associate alle attività del ticket dei campi Manutenuta, DataManutenzione, Cd_AR_Sub, Cd_xMatricola_Sub
		Update TAM
		 Set Manutenuta = 1, DataManutenzione = B.DataInizio, Cd_AR_Sub = B.Cd_AR_Sub, Cd_xMatricola_Sub = B.Cd_xMatricola_Sub
		 From xRDTicketAttivitaMatricola TAM Inner Join (
			Select A.*
				From (
					Select Row_Number() Over(Partition By TAMM.Cd_AR, TAMM.Cd_xMatricola Order By TAMov.DataInizio Desc) As Posizione
						,TAMov.Id_xRDTicketAttivita
						,TAMov.DataInizio
						,TAMM.RigaNonno
						,TAMM.Cd_AR
						,TAMM.Cd_xMatricola
						,TAMM.Cd_AR_Sub
						,TAMM.Cd_xMatricola_Sub
					From xRDTicketAttivitaMovMatricola TAMM Inner Join xRDTicketAttivitaMov TAMov On TAMM.Id_xRDTicketAttivitaMov = TAMov.Id_xRDTicketAttivitaMov
					Where TAMov.Id_xRDTicketAttivita = @Id_xRDTicketAttivita And TAMM.RigaNonno = @RigaPadre And TAMM.Cd_AR = @Cd_AR And TAMM.Cd_xMatricola = @Cd_xMatricola
				) A
				Where A.Posizione = 1
			) B On TAM.Id_xRDTicketAttivita = B.Id_xRDTicketAttivita And TAM.RigaPadre = B.RigaNonno And TAM.Cd_AR = B.Cd_AR And TAM.Cd_xMatricola = B.Cd_xMatricola

		Set @nReturn = @nReturn + @@ROWCOUNT

		--aggiornamento in anagrafica matricole
		-- 1. per sostituzione matricola
		Select @Cd_AR_sub = Cd_AR_Sub, @Cd_xMatricola_Sub = Cd_xMatricola_Sub 
			From xRDTicketAttivitaMatricola
			Where Id_xRDTicketAttivita = @Id_xRDTicketAttivita And RigaPadre = @RigaPadre And Cd_AR = @Cd_AR And Cd_xMatricola = @Cd_xMatricola

		If (@Cd_AR_Sub Is Not Null) And (@Cd_xMatricola_Sub Is Not Null)
			Begin
				--la matricola installata viene associata al cliente\sede
				Update xMatricola Set Cd_CF = @Cd_CF, Cd_CFDest = nullif(ltrim(rtrim(@Cd_CFDest)), ''), DescrizioneUbicazione = @DescrizioneUbicazione
				Where Cd_AR = @Cd_AR_Sub And Cd_xMatricola = @Cd_xMatricola_Sub
				Set @nReturn = @nReturn + @@ROWCOUNT
				--la matricola sostituita viene sganciata dal cliente\sede
				-- ESCLUSIVAMENTE PER WATERTIME (TESTANDO I LORO CAMPI PERSONALIZZATI) LA MATRICOLA VIENE RIASSEGNATA AL CLIENTE "Watertime"
				if(@CF_xCd_MG_Esiste = 1 And @CFDest_xCd_MG_Esiste = 1 And @MG_xCd_CF_Esiste = 1 And @MG_xCd_CFDest_Esiste = 1) begin

					-----------------------------------------------
					set @stmt = 'Select @Cd_xOperatore = A.Cd_xOperatore
							From (
								Select Row_Number() Over(Partition By TAMM.Cd_AR, TAMM.Cd_xMatricola Order By TAMov.DataInizio Desc) As Posizione
									,TAMov.Cd_xOperatore
								From xRDTicketAttivitaMovMatricola TAMM Inner Join xRDTicketAttivitaMov TAMov On TAMM.Id_xRDTicketAttivitaMov = TAMov.Id_xRDTicketAttivitaMov
								Where TAMov.Id_xRDTicketAttivita = ' + str(@Id_xRDTicketAttivita) + ' And TAMM.RigaNonno = ' + str(@RigaPadre) + ' And TAMM.Cd_AR = ''' + @Cd_AR + ''' And TAMM.Cd_xMatricola = ''' + @Cd_xMatricola
							+ ''') A
							Where A.Posizione = 1'
					-----------------------------------------------

					execute @RC = [dbo].[xasp_xRDTicketAttivita_UpdateMatricola_Ext]
						@stmt
						, @Cd_AR
						, @Cd_xMatricola

					Set @nReturn = @nReturn + @RC

				end else begin
					Update xMatricola Set Cd_CF = Null, Cd_CFDest = Null, DescrizioneUbicazione = Null Where Cd_AR = @Cd_AR And Cd_xMatricola = @Cd_xMatricola
					Set @nReturn = @nReturn + @@ROWCOUNT
				end
			End
		
		-- 2. per dismissione matricola
		Set @Dismissione = 0 -- altrimenti potrebbe restare il bit = 1 della matricola precedente

		Select @Dismissione = A.Dismissione
			From (
				Select Row_Number() Over(Partition By TAMM.Cd_AR, TAMM.Cd_xMatricola Order By TAMov.DataInizio Desc) As Posizione
					,TAMM.Dismissione
				From xRDTicketAttivitaMovMatricola TAMM Inner Join xRDTicketAttivitaMov TAMov On TAMM.Id_xRDTicketAttivitaMov = TAMov.Id_xRDTicketAttivitaMov
				Where TAMov.Id_xRDTicketAttivita = @Id_xRDTicketAttivita And TAMM.RigaNonno = @RigaPadre And TAMM.Cd_AR = @Cd_AR And TAMM.Cd_xMatricola = @Cd_xMatricola
			) A
			Where A.Posizione = 1

		If @Dismissione = 1
			Begin
				--la matricola dismessa viene sganciata dal cliente\sede
				-- ESCLUSIVAMENTE PER WATERTIME (TESTANDO I LORO CAMPI PERSONALIZZATI) LA MATRICOLA VIENE RIASSEGNATA AL CLIENTE "Watertime"
				if(@CF_xCd_MG_Esiste = 1 And @CFDest_xCd_MG_Esiste = 1 And @MG_xCd_CF_Esiste = 1 And @MG_xCd_CFDest_Esiste = 1) begin

					-----------------------------------------------
					set @stmt = 'Select @Cd_xOperatore = A.Cd_xOperatore
							From (
								Select Row_Number() Over(Partition By TAMM.Cd_AR, TAMM.Cd_xMatricola Order By TAMov.DataInizio Desc) As Posizione
									,TAMov.Cd_xOperatore
								From xRDTicketAttivitaMovMatricola TAMM Inner Join xRDTicketAttivitaMov TAMov On TAMM.Id_xRDTicketAttivitaMov = TAMov.Id_xRDTicketAttivitaMov
								Where TAMov.Id_xRDTicketAttivita = ' + str(@Id_xRDTicketAttivita) + ' And TAMM.RigaNonno = ' + str(@RigaPadre) + ' And TAMM.Cd_AR = ''' + @Cd_AR + ''' And TAMM.Cd_xMatricola = ''' + @Cd_xMatricola
							+ ''') A
							Where A.Posizione = 1'
					-----------------------------------------------

					execute @RC = [dbo].[xasp_xRDTicketAttivita_UpdateMatricola_Ext]
						@stmt
						, @Cd_AR
						, @Cd_xMatricola

					Set @nReturn = @nReturn + @RC

				end else begin
					Update xMatricola Set Cd_CF = Null, Cd_CFDest = Null, DescrizioneUbicazione = Null Where Cd_AR = @Cd_AR And Cd_xMatricola = @Cd_xMatricola
					Set @nReturn = @nReturn + @@ROWCOUNT
				end
			End

		Fetch Next From curTAM Into @Id_xRDTicketAttivita, @RigaPadre, @Cd_AR, @Cd_xMatricola, @Cd_CFDest, @DescrizioneUbicazione
	End --curTAM Fetch
	Close curTAM
	Deallocate curTAM
	
	Return @nReturn		
GO

--aggiornamento dati matricole nel contratto [intervento con sostituzione, cancellazione intervento con sostituzione, dismissione (richiama la sua sp)]
create procedure xasp_xRDTicketAttivita_UpdateImpianto (
	@Id_xRDTicket				int
	, @Id_xRDTicketAttivita_wzd	int -- passata dal wizard di Inserimento Rilevazioni per gestire solo l'attività rilevata e non tutte le attività del ticket
	, @nReturn					int = 0 output
)
/*ENCRYPTED*/
as
	-- Return:
	--	= 0: nessun aggiornamento effettuato o procedura non eseguita per il ticket corrente
	--	> 0: matricole aggiornate nel contratto
	if isnull(@Id_xRDTicket , 0 ) = 0  return 0

	--dichiarazione variabili
	declare
		@Id_xRDTicketAttivita					int
		, @Cd_AR								varchar(20)
		, @Cd_xMatricola						varchar(40)
		, @DataManutenzione						smalldatetime
		, @Cd_AR_sub							varchar(20)
		, @Cd_xMatricola_Sub					varchar(40)
		, @Id_xImpianto							int
		, @Id_xImpiantoMatricola_Sostituisce	int
		, @Riga									smallint
		, @DataInizio							smalldatetime
		, @DataFine								smalldatetime
		, @Cd_CF								char(7)
		, @Cd_CFDest							char(3)
		, @Id_xImpiantoMatricola				int
		, @Assistenza							bit
		, @MultiMatricola						bit
		, @RigaPadre							smallint
		, @Dismissione							bit

	select
		@Assistenza			= xRDTicket.GestisciTicket
		, @MultiMatricola	= case when xRDTicket.GestioneMatricola = 'M' then 0 else 1 end
	from xRDTicket
	where Id_xRDTicket = @Id_xRDTicket

	if @Assistenza = 0
		return 0	--ticket di produzione

	if @MultiMatricola = 0
		return 0	--ticket di assistenza con gestione mono-matricola

	set @Id_xRDTicketAttivita_wzd = isnull(@Id_xRDTicketAttivita_wzd, 0)
	set @nReturn = 0

	-----------------------------------------------------------------------------------
	-- PRIMA PROCEDURA: CANCELLAZIONE INTERVENTO DI SOSTITUZIONE DELLA MATRICOLA - BEGIN
	-----------------------------------------------------------------------------------
	set @Cd_AR_sub			= null
	set @Cd_xMatricola_Sub	= null

	-- Cursore contenente le matricole associate a tutte le attività del ticket (fedi) o all'attività rilevata (wizard)
	-- che sono state manutenute senza sostituzione della matricola
	if @Id_xRDTicketAttivita_wzd = 0
		declare curTAM cursor fast_forward for
			select
				TAM.Id_xRDTicketAttivita
				, TAM.Cd_AR
				, TAM.Cd_xMatricola
				, TAM.DataManutenzione
			from xRDTicketAttivitaMatricola TAM
				inner join xRDTicketAttivita TA on TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			where
					TA.Id_xRDTicket = @Id_xRDTicket
				And TAM.Cd_AR_Sub is null
				And TAM.Cd_xMatricola_Sub is null
			order by
				TA.Riga
				, TA.Id_xRDTicketAttivita
				, TAM.Riga
	else
		declare curTAM cursor fast_forward for
			select
				TAM.Id_xRDTicketAttivita
				, TAM.Cd_AR
				, TAM.Cd_xMatricola
				, TAM.DataManutenzione
			from xRDTicketAttivitaMatricola TAM
				inner join xRDTicketAttivita TA on TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			where
					TA.Id_xRDTicket = @Id_xRDTicket
				And TA.Id_xRDTicketAttivita = @Id_xRDTicketAttivita_wzd -- solo attività rilevata da wizard
				And TAM.Cd_AR_Sub is null
				And TAM.Cd_xMatricola_Sub is null
			order by
				TAM.Riga

	open curTAM
	fetch next from curTAM into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione
	while @@FETCH_STATUS = 0 begin
		--identificativo impianto (per righe matricole)
		select top 1
			@Id_xImpianto = Id_xImpianto
		from
			xImpiantoMatricola
		where
				Cd_AR = @Cd_AR
			And	Cd_xMatricola = @Cd_xMatricola
			And DataFine is not null
		order by
			DataInizio desc

		-- verifico se la matricola manutenuta senza sostituzione è presente nel contratto come disattiva perché sostituita da un'altra matricola
		set @Id_xImpiantoMatricola_Sostituisce = null

		-- per quelle non manutenute fa fede la data odierna non avendo una Data Manutenzione
		if @DataManutenzione is null
			set @DataManutenzione = getdate()

		select top 1
			@Id_xImpiantoMatricola_Sostituisce = Id_xImpiantoMatricola
			, @DataInizio = DataInizio
			, @DataFine = DataFine
		from xImpiantoMatricola
		where
				Id_xImpianto = @Id_xImpianto
			And Cd_AR = @Cd_AR
			And Cd_xMatricola = @Cd_xMatricola
			And DataFine is not null
		order by
			Riga

		if isnull(@Id_xImpiantoMatricola_Sostituisce, 0) > 0 begin
			set @Id_xImpiantoMatricola = null

			select top 1
				@Id_xImpiantoMatricola	= Id_xImpiantoMatricola
				, @DataManutenzione		= DataFine
				, @Cd_AR_sub			= Cd_AR
				, @Cd_xMatricola_sub	= Cd_xMatricola
			from xImpiantoMatricola 
			where
					Id_xImpiantoMatricola_Sostituisce = @Id_xImpiantoMatricola_Sostituisce
				And DataFine is null
			order by
				Riga

			if isnull(@Id_xImpiantoMatricola, 0) > 0 begin
				-- si può procedere con l'aggiornamento della matricola nel contratto nel seguente modo:
				--  a) eliminazione della riga aggiunta per la nuova matricola
				delete from xImpiantoMatricola where Id_xImpiantoMatricola = @Id_xImpiantoMatricola
				set @nReturn = @nReturn + @@ROWCOUNT
				--  b) ri-attivazione della vecchia matricola e modifica della Data Fine con quella della matricola nuova appena eliminata
				update xImpiantoMatricola set DataFine = null where Id_xImpiantoMatricola = @Id_xImpiantoMatricola_Sostituisce
				set @nReturn = @nReturn + @@ROWCOUNT
			end
		end

		fetch next from curTAM into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione
	end --curTAM Fetch
	close curTAM
	deallocate curTAM
	---------------------------------------------------------------------------------
	--PRIMA PROCEDURA: CANCELLAZIONE INTERVENTO DI SOSTITUZIONE DELLA MATRICOLA - END
	---------------------------------------------------------------------------------

	------------------------------------------------------------------------
	--SECONDA PROCEDURA: INTERVENTO CON SOSTITUZIONE DELLA MATRICOLA - BEGIN
	------------------------------------------------------------------------
	--cursore contenente le matricole associate a tutte le attività del ticket (fedi) o all'attività rilevata (wizard)
	--che sono state manutenute tramite sostituzione della matricola
	if @Id_xRDTicketAttivita_wzd = 0
		declare curTAM cursor fast_forward for
			select
				TAM.Id_xRDTicketAttivita
				, TAM.Cd_AR
				, TAM.Cd_xMatricola
				, TAM.DataManutenzione
				, TAM.Cd_AR_Sub
				, TAM.Cd_xMatricola_Sub
			from xRDTicketAttivitaMatricola TAM
				inner join xRDTicketAttivita TA on TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			where
					TA.Id_xRDTicket = @Id_xRDTicket 
				And TAM.Manutenuta = 1
				And TAM.Cd_AR_Sub is not null
				And TAM.Cd_xMatricola_Sub is not null
			order by
				TA.Riga
				, TA.Id_xRDTicketAttivita
				, TAM.Riga
	else
		declare curTAM cursor fast_forward for
			select
				TAM.Id_xRDTicketAttivita
				, TAM.Cd_AR
				, TAM.Cd_xMatricola
				, TAM.DataManutenzione
				, TAM.Cd_AR_Sub
				, TAM.Cd_xMatricola_Sub
			from xRDTicketAttivitaMatricola TAM
				inner join xRDTicketAttivita TA on TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			where
				TA.Id_xRDTicket = @Id_xRDTicket
				And TA.Id_xRDTicketAttivita = @Id_xRDTicketAttivita_wzd -- solo attività rilevata da wizard
				And TAM.Manutenuta = 1
				And TAM.Cd_AR_Sub is not null
				And TAM.Cd_xMatricola_Sub is not null
			order by
				TAM.Riga
	
	open curTAM
	fetch next from curTAM into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione, @Cd_AR_Sub, @Cd_xMatricola_Sub
	while @@FETCH_STATUS = 0 begin
		--identificativo contratto (per righe matricole)
		select top 1
			@Id_xImpianto = Id_xImpianto
		from
			xImpiantoMatricola
		where
				Cd_AR = @Cd_AR
			And	Cd_xMatricola = @Cd_xMatricola
			And DataFine is null
			And dbo.afn_dt_Datetime2Date(isnull(@DataManutenzione, getdate())) >= DataInizio
		order by
			DataInizio desc

		-- verifico se la matricola manutenuta con sostituzione è presente nel contratto senza risultare già sostituita
		set @Id_xImpiantoMatricola_Sostituisce = null

		select top 1
			@Id_xImpiantoMatricola_Sostituisce = Id_xImpiantoMatricola
			, @DataInizio = DataInizio
			, @DataFine = DataFine
		from xImpiantoMatricola 
		where 
				Id_xImpianto = @Id_xImpianto
			And Cd_AR = @Cd_AR
			And Cd_xMatricola = @Cd_xMatricola
			And DataFine is null
			And @DataManutenzione >= DataInizio
			And dateadd(DD, -1, @DataManutenzione) >= DataInizio
		order by
			Riga

		if isnull(@Id_xImpiantoMatricola_Sostituisce, 0) > 0 begin
			set @Id_xImpiantoMatricola = Null

			select top 1
				@Id_xImpiantoMatricola = Id_xImpiantoMatricola 
			from xImpiantoMatricola 
			where
					Id_xImpiantoMatricola_Sostituisce = @Id_xImpiantoMatricola_Sostituisce
				And DataFine is null
			order by
				Riga

			if isnull(@Id_xImpiantoMatricola, 0) = 0 begin
				--calcolo riga next
				select @Riga = max(Riga)
				from xImpiantoMatricola
				where Id_xImpianto = @Id_xImpianto

				if isnull(@Riga, 0) = 0
					set @Riga = 1
				else
					set @Riga = @Riga + 1

				-- si può procedere con l'aggiornamento della matricola nel contratto nel seguente modo:
				--  a) disattivazione della vecchia matricola e modifica della Data Fine uguale a @DataManutenzione (Data Rilevazione) meno 1 giorno
				update xImpiantoMatricola set DataFine = dateadd(DD, -1, @DataManutenzione)
				where Id_xImpiantoMatricola = @Id_xImpiantoMatricola_Sostituisce

				set @nReturn = @nReturn + @@ROWCOUNT

				--  b) aggiunta della nuova matricola con Prezzo e Data Fine identici a quelli della riga disattivata, 
				--     Data Inizio uguale a @DataManutenzione (Data Rilevazione) e Id_xContrattoMatricola_Sostituisce uguale a @Id_xContrattoMatricola_Sostituisce
				insert into xImpiantoMatricola(Id_xImpianto, Cd_AR, Riga, DataInizio, DataFine, Cd_xMatricola, Id_xImpiantoMatricola_Sostituisce)
				values (@Id_xImpianto, @Cd_AR_sub, @Riga, @DataManutenzione, null, @Cd_xMatricola_Sub, @Id_xImpiantoMatricola_Sostituisce)

				set @nReturn = @nReturn + @@ROWCOUNT
			end
		end

		fetch next from curTAM into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione, @Cd_AR_Sub, @Cd_xMatricola_Sub
	end --curTAM Fetch
	close curTAM
	deallocate curTAM
	----------------------------------------------------------------------
	--SECONDA PROCEDURA: INTERVENTO CON SOSTITUZIONE DELLA MATRICOLA - END
	----------------------------------------------------------------------
	
	-------------------------------------------------------------------------------------
	--TERZA PROCEDURA: INTERVENTO CON DISMISSIONE DELLA MATRICOLA - BEGIN
	-------------------------------------------------------------------------------------
	--cursore contenente le matricole che hanno avuto un intervento senza sostituzione della matricola
	if @Id_xRDTicketAttivita_wzd = 0
		declare curTAM cursor fast_forward for
			select
				TAM.Id_xRDTicketAttivita
				, TAM.RigaPadre
				, TAM.Cd_AR
				, TAM.Cd_xMatricola
				, TAM.DataManutenzione
			from xRDTicketAttivitaMatricola TAM
				inner join xRDTicketAttivita TA on TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			where
					TA.Id_xRDTicket = @Id_xRDTicket 
				And TAM.Manutenuta = 1
				And TAM.Cd_AR_Sub is null
				And TAM.Cd_xMatricola_Sub is null
			order by
				TA.Riga
				, TA.Id_xRDTicketAttivita
				, TAM.Riga
	else
		declare curTAM cursor fast_forward for
			select
				TAM.Id_xRDTicketAttivita
				, TAM.RigaPadre
				, TAM.Cd_AR
				, TAM.Cd_xMatricola
				, TAM.DataManutenzione
			from xRDTicketAttivitaMatricola TAM
				inner join xRDTicketAttivita TA on TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			where
					TA.Id_xRDTicket = @Id_xRDTicket
				And TA.Id_xRDTicketAttivita = @Id_xRDTicketAttivita_wzd -- solo attività rilevata da wizard
				And TAM.Manutenuta = 1
				And TAM.Cd_AR_Sub is null
				And TAM.Cd_xMatricola_Sub is null
			order by
				TAM.Riga

	open curTAM
	fetch next from curTAM into @Id_xRDTicketAttivita, @RigaPadre, @Cd_AR, @Cd_xMatricola, @DataManutenzione
	while @@FETCH_STATUS = 0 begin
		--identificativo impianto (per righe matricole)
		select top 1
			@Id_xImpianto = Id_xImpianto
		from
			xImpiantoMatricola
		where
				Cd_AR = @Cd_AR
			And	Cd_xMatricola = @Cd_xMatricola
			And DataFine is null
			And dbo.afn_dt_Datetime2Date(isnull(@DataManutenzione, getdate())) >= DataInizio
		order by
			DataInizio desc

		-- verifico se con l'intervento la matricola è stata dismessa
		Set @Dismissione = 0 -- altrimenti potrebbe restare il bit = 1 della matricola precedente

		select
			@Dismissione = A.Dismissione
		from (
			select
				Posizione		= row_number() over(partition by TAMM.Cd_AR, TAMM.Cd_xMatricola order by TAMov.DataInizio desc)
				, Dismissione	= TAMM.Dismissione
			from xRDTicketAttivitaMovMatricola TAMM
				inner join xRDTicketAttivitaMov TAMov on TAMM.Id_xRDTicketAttivitaMov = TAMov.Id_xRDTicketAttivitaMov
			where
					TAMov.Id_xRDTicketAttivita = @Id_xRDTicketAttivita 
				And TAMov.DataInizio = @DataManutenzione
				And TAMM.RigaNonno = @RigaPadre 
				And TAMM.Cd_AR = @Cd_AR 
				And TAMM.Cd_xMatricola = @Cd_xMatricola
		) A
		where
			A.Posizione = 1

		If @Dismissione = 1 begin
			update xImpiantoMatricola set DataFine = @DataManutenzione
			where
					Id_xImpianto = @Id_xImpianto
				And Cd_AR = @Cd_AR
				And Cd_xMatricola = @Cd_xMatricola
				And @DataManutenzione >= DataInizio
				And DataFine is null

			set @nReturn = @nReturn + @@ROWCOUNT
		end

		fetch next from curTAM into @Id_xRDTicketAttivita, @RigaPadre, @Cd_AR, @Cd_xMatricola, @DataManutenzione
	end --curTAM Fetch
	close curTAM
	deallocate curTAM
	-------------------------------------------------------------------------------------
	--TERZA PROCEDURA: INTERVENTO CON DISMISSIONE DELLA MATRICOLA - END
	-------------------------------------------------------------------------------------

	return @nReturn
go

--aggiornamento dati matricole nel contratto [dismissione matricola]
CREATE PROCEDURE [dbo].[xasp_xRDTicketAttivita_UpdateContratto_Dismissione] (
		@Id_xContratto Integer						-- = Null se da documento
		, @Id_DOTes Integer								-- = Null se da ticket
		, @Cd_AR Varchar(20)							-- obbligatorio
		, @Cd_xMatricola Varchar(40)			-- obbligatorio
		, @DataManutenzione Smalldatetime	-- = DataDoc se da documento oppure = DataInizio della rilevazione se da ticket (cmq. obbligatorio)
		, @DecimaliPrzUn Tinyint					-- per calcolo rateo, non obbligatorio; se vuoto viene impostato per default = 3
		, @nReturn		Integer = 0 Output
	)
	/*ENCRYPTED*/ 
	As
	
	-- Return:
	--	= 0: nessun aggiornamento effettuato o procedura non eseguita per il ticket corrente
	--	> 0: matricole aggiornate nel contratto
	If (@Id_xContratto Is Null) And (@Id_DOTes Is Null) Return 0
	If @Cd_AR Is Null Return 0
	If @Cd_xMatricola Is Null Return 0
	If @DataManutenzione Is Null Return 0

	If IsNull(@DecimaliPrzUn, 0) = 0 Set @DecimaliPrzUn = 3
	Set @nReturn = 0

	If (@Id_xContratto Is Null) And (@Id_DOTes Is Not Null) --da documento
		--ricerco il contratto di appartenenza della matricola
		Select Top 1 @Id_xContratto = C.Id_xContratto
			From DOTes DT Inner Join xContratto C On DT.Cd_CF = C.Cd_CF 
					 Inner Join xContrattoMatricola CM On C.Id_xContratto = CM.Id_xContratto
			Where DT.Id_DoTes = @Id_Dotes
						And IsNull(DT.Cd_CFDest, '') = IsNull(CM.Cd_CFDest, '')
						And CM.Cd_AR = @Cd_AR
						And CM.Cd_xMatricola = @Cd_xMatricola
						And @DataManutenzione Between CM.DataInizio And CM.DataFine
						And CM.Disattiva = 0
						And CM.Rinnovato = 0
			Order By C.Id_xContratto
	
	If @Id_xContratto Is Not Null
		Begin
			--disattivo la matricola e imposto DataFine = DataInizio della rilevazione del ticket
			Update CM
				Set CM.Disattiva = 1
					, CM.DataFine = @DataManutenzione
					, CM.Rateo = Round((CM.Rateo * DateDiff(DD, CM.DataInizio, @DataManutenzione)) / DateDiff(DD, CM.DataInizio, CM.DataFine), @DecimaliPrzUn)
				From xContratto C Inner Join xContrattoMatricola CM On C.Id_xContratto = CM.Id_xContratto
				Where C.Id_xContratto = @Id_xContratto
							And CM.Cd_AR = @Cd_AR
							And CM.Cd_xMatricola = @Cd_xMatricola
							And @DataManutenzione Between CM.DataInizio And CM.DataFine
							And CM.Disattiva = 0
							And CM.Rinnovato = 0
			Set @nReturn = @nReturn + @@ROWCOUNT
			--se la matricola è stata disattivata, imposto il contratto come da ricalcolare
			If @nReturn > 0 Update xContratto Set DaRicalcolare = 1 Where Id_xContratto = @Id_xContratto
		End
	
	Return @nReturn		
GO

--aggiornamento dati matricole nel contratto [intervento con sostituzione, cancellazione intervento con sostituzione, dismissione (richiama la sua sp)]
CREATE PROCEDURE [dbo].[xasp_xRDTicketAttivita_UpdateContratto] (
		@Id_xRDTicket	Integer
		, @Id_xRDTicketAttivita_wzd	Integer -- passata dal wizard di Inserimento Rilevazioni per gestire solo l'attività rilevata e non tutte le attività del ticket
		, @nReturn		Integer = 0 Output
	)
	/*ENCRYPTED*/ 
	As
	
	-- Return:
	--	= 0: nessun aggiornamento effettuato o procedura non eseguita per il ticket corrente
	--	> 0: matricole aggiornate nel contratto
	If IsNull(@Id_xRDTicket , 0 ) = 0  Return 0

	Declare @Assistenza As Bit
	Declare @MultiMatricola As Bit

	Select @Assistenza = GestisciTicket, @MultiMatricola = Case When GestioneMatricola = 'M' Then 0 Else 1 End From xRDTicket Where Id_xRDTicket = @Id_xRDTicket

	If @Assistenza = 0 Return 0 --ticket di produzione
	If @MultiMatricola = 0 Return 0 --ticket di assistenza con gestione mono-matricola

  Set @Id_xRDTicketAttivita_wzd = IsNull(@Id_xRDTicketAttivita_wzd, 0)
	Set @nReturn = 0

	--dichiarazione variabili
	Declare @Id_xRDTicketAttivita Integer
		,@Cd_AR Varchar(20)
		,@Cd_xMatricola Varchar(40)
		,@DataManutenzione Smalldatetime
		,@Cd_AR_sub Varchar(20)
		,@Cd_xMatricola_Sub Varchar(40)
		,@Id_xContratto Int
		,@Cd_VL Char(3)
		,@DecimaliPrzUn Tinyint
		,@Id_xContrattoMatricola_Sostituisce Int
		,@Cd_SLA Char(2)
		,@Riga Smallint
		,@DataInizio Smalldatetime
		,@DataFine Smalldatetime
		,@Cd_CF Char(7)
		,@Cd_CFDest Char(3)
		,@PrezzoUnitarioV Numeric(18, 6)
		,@Rateo Numeric(18, 6)
		,@Sconto Varchar(20)
		,@Id_xContrattoMatricola Int
		,@DD_PreModifica Int
		,@DD_VecchiaMatricola Int
		,@DD_NuovaMatricola Int
		,@Rateo_VecchiaMatricola Numeric(18, 6)
		,@Rateo_NuovaMatricola Numeric(18,6)

	-----------------------------------------------------------------------------------
	--PRIMA PROCEDURA: CANCELLAZIONE INTERVENTO DI SOSTITUZIONE DELLA MATRICOLA - BEGIN
	-----------------------------------------------------------------------------------
	Set @Cd_AR_sub = Null
	Set @Cd_xMatricola_Sub = Null
	--cursore contenente le matricole associate a tutte le attività del ticket (fedi) o all'attività rilevata (wizard)
	--che sono state manutenute senza sostituzione della matricola
	If @Id_xRDTicketAttivita_wzd = 0
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione
				From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
				Where TA.Id_xRDTicket = @Id_xRDTicket 
					And TAM.Cd_AR_Sub Is Null And TAM.Cd_xMatricola_Sub Is Null 
							--And TAM.Manutenuta = 1 ALTRIMENTI NON MI CONSIDERA QUELLE PER LE QUALI E' STATA CANCELLATA L'INTERA RIGA RILEVAZIONE !!!!
				Order By TA.Riga, TA.Id_xRDTicketAttivita, TAM.Riga
	Else
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione
				From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
				Where TA.Id_xRDTicket = @Id_xRDTicket And TA.Id_xRDTicketAttivita = @Id_xRDTicketAttivita_wzd -- solo attività rilevata da wizard
					And TAM.Cd_AR_Sub Is Null And TAM.Cd_xMatricola_Sub Is Null
							--And TAM.Manutenuta = 1 ALTRIMENTI NON MI CONSIDERA QUELLE PER LE QUALI E' STATA CANCELLATA L'INTERA RIGA RILEVAZIONE !!!!
				Order By TAM.Riga

	Open curTAM
	Fetch Next From curTAM Into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione
	While @@FETCH_STATUS = 0 Begin
		--identificativo contratto (per righe matricole)
		Select
			@Id_xContratto = Id_xContratto
			, @Cd_VL = Cd_VL
		From
			xContratto 
		Where Id_xContratto = (
				select top 1
					Id_xContratto
				from
					xContrattoMatricola
				where
						Cd_AR = @Cd_AR
					And	Cd_xMatricola = @Cd_xMatricola
					And Disattiva = 1
					-- And dbo.afn_dt_Datetime2Date(IsNull(@DataManutenzione,getdate())) between DataInizio And DataFine
				order by
					DataInizio desc
		)
		--decimali per prezzi unitari della valuta
		If @Cd_VL Is Null Set @DecimaliPrzUn = 3 Else Select @DecimaliPrzUn = DecimaliPrzUn From VL Where Cd_VL = @Cd_VL

		-- verifico se la matricola manutenuta senza sostituzione è presente nel contratto come disattiva perché sostituita da un'altra matricola
		Set @Id_xContrattoMatricola_Sostituisce = Null

		-- per quelle non manutenute fa fede la data odierna non avendo una Data Manutenzione
		If @DataManutenzione Is Null Set @DataManutenzione = GetDate()

		Select Top 1 @Id_xContrattoMatricola_Sostituisce = Id_xContrattoMatricola
					,@DataInizio = DataInizio
					,@DataFine = DataFine
					,@Rateo = Rateo
					,@Cd_CF = Cd_CF
					,@Cd_CFDest = Cd_CFDest
			From xContrattoMatricola 
			Where (Id_xContratto = @Id_xContratto) And (Cd_AR = @Cd_AR) And (Cd_xMatricola = @Cd_xMatricola) And (Disattiva = 1) 
				And (Rinnovato = 0) -- And (@DataManutenzione >= DataInizio)
			Order By Riga

		If IsNull(@Id_xContrattoMatricola_Sostituisce, 0) > 0
			Begin
				Set @Id_xContrattoMatricola = Null

				Select Top 1 @Id_xContrattoMatricola = Id_xContrattoMatricola
							, @DataManutenzione = DataFine
							, @Rateo_NuovaMatricola = Rateo 
							, @Cd_AR_sub = Cd_AR
							, @Cd_xMatricola_sub = Cd_xMatricola
					From xContrattoMatricola 
					Where (Id_xContrattoMatricola_Sostituisce = @Id_xContrattoMatricola_Sostituisce) And (Disattiva = 0) 
						And (Rinnovato = 0) -- And (@DataManutenzione <= DataFine)
					Order By Riga

					If IsNull(@Id_xContrattoMatricola, 0) > 0
					Begin
						--calcolo rateo (vecchia + nuova matricola da inserire nella vecchia)
						Set @Rateo_VecchiaMatricola = @Rateo + @Rateo_NuovaMatricola
						-- si può procedere con l'aggiornamento della matricola nel contratto nel seguente modo:
						--  a) eliminazione della riga aggiunta per la nuova matricola
						Delete From xContrattoMatricola Where Id_xContrattoMatricola = @Id_xContrattoMatricola
						Set @nReturn = @nReturn + @@ROWCOUNT
						--  b) ri-attivazione della vecchia matricola e modifica della Data Fine con quella della matricola nuova appena eliminata
						Update xContrattoMatricola Set Disattiva = 0, DataFine = @DataManutenzione, Rateo = @Rateo_VecchiaMatricola Where Id_xContrattoMatricola = @Id_xContrattoMatricola_Sostituisce
						Set @nReturn = @nReturn + @@ROWCOUNT
					End			
			End

		Fetch Next From curTAM Into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione
	End --curTAM Fetch
	Close curTAM
	Deallocate curTAM
	---------------------------------------------------------------------------------
	--PRIMA PROCEDURA: CANCELLAZIONE INTERVENTO DI SOSTITUZIONE DELLA MATRICOLA - END
	---------------------------------------------------------------------------------

	------------------------------------------------------------------------
	--SECONDA PROCEDURA: INTERVENTO CON SOSTITUZIONE DELLA MATRICOLA - BEGIN
	------------------------------------------------------------------------
	--cursore contenente le matricole associate a tutte le attività del ticket (fedi) o all'attività rilevata (wizard)
	--che sono state manutenute tramite sostituzione della matricola
	If @Id_xRDTicketAttivita_wzd = 0
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione, TAM.Cd_AR_Sub, TAM.Cd_xMatricola_Sub
				From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
				Where TA.Id_xRDTicket = @Id_xRDTicket 
					And TAM.Manutenuta = 1 And TAM.Cd_AR_Sub Is Not Null And TAM.Cd_xMatricola_Sub Is Not Null
				Order By TA.Riga, TA.Id_xRDTicketAttivita, TAM.Riga
	Else
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione, TAM.Cd_AR_Sub, TAM.Cd_xMatricola_Sub
				From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
				Where TA.Id_xRDTicket = @Id_xRDTicket And TA.Id_xRDTicketAttivita = @Id_xRDTicketAttivita_wzd -- solo attività rilevata da wizard
					And TAM.Manutenuta = 1 And TAM.Cd_AR_Sub Is Not Null And TAM.Cd_xMatricola_Sub Is Not Null
				Order By TAM.Riga
	
	Open curTAM
	Fetch Next From curTAM Into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione, @Cd_AR_Sub, @Cd_xMatricola_Sub
	While @@FETCH_STATUS = 0 Begin
		--identificativo contratto (per righe matricole)
		Select
			@Id_xContratto = Id_xContratto
			, @Cd_VL = Cd_VL
		From
			xContratto 
		Where Id_xContratto = (
				select top 1
					Id_xContratto
				from
					xContrattoMatricola
				where
						Cd_AR = @Cd_AR
					And	Cd_xMatricola = @Cd_xMatricola
					And Disattiva = 0
					And dbo.afn_dt_Datetime2Date(IsNull(@DataManutenzione,getdate())) between DataInizio And DataFine
				order by
					DataInizio desc
		)
		--decimali per prezzi unitari della valuta
		If @Cd_VL Is Null Set @DecimaliPrzUn = 3 Else Select @DecimaliPrzUn = DecimaliPrzUn From VL Where Cd_VL = @Cd_VL

		-- verifico se la matricola manutenuta con sostituzione è presente nel contratto senza risultare già sostituita
		Set @Id_xContrattoMatricola_Sostituisce = Null

		Select Top 1 @Id_xContrattoMatricola_Sostituisce = Id_xContrattoMatricola
								,@Cd_SLA = Cd_SLA
								,@DataInizio = DataInizio
								,@DataFine = DataFine
								,@Cd_CF = Cd_CF
								,@Cd_CFDest = Cd_CFDest
								,@PrezzoUnitarioV = PrezzoUnitarioV
								,@Rateo = Rateo
								,@Sconto = Sconto
			From xContrattoMatricola 
			Where (Id_xContratto = @Id_xContratto) And (Cd_AR = @Cd_AR) And (Cd_xMatricola = @Cd_xMatricola) And (Disattiva = 0) 
				And (Rinnovato = 0) And (@DataManutenzione Between DataInizio And DataFine) And (DateAdd(DD, -1, @DataManutenzione) Between DataInizio And DataFine)
			Order By Riga

		If IsNull(@Id_xContrattoMatricola_Sostituisce, 0) > 0
			Begin
				Set @Id_xContrattoMatricola = Null

				Select Top 1 @Id_xContrattoMatricola = Id_xContrattoMatricola 
				From xContrattoMatricola 
				Where (Id_xContrattoMatricola_Sostituisce = @Id_xContrattoMatricola_Sostituisce) And (Disattiva = 0) And (Rinnovato = 0)
				Order By Riga

				If IsNull(@Id_xContrattoMatricola, 0) = 0
					Begin
						--calcolo riga next
						Select @Riga = MAX(Riga) From xContrattoMatricola Where Id_xContratto = @Id_xContratto
						If IsNull(@Riga, 0) = 0 Set @Riga = 1 Else Set @Riga = @Riga + 1
						--calcolo rateo
						Set @DD_PreModifica = DateDiff(DD, @DataInizio, @DataFine)
						-- per vecchia matricola
						Set @DD_VecchiaMatricola = DateDiff(DD, @DataInizio, @DataManutenzione)
						Set @Rateo_VecchiaMatricola = Round((@Rateo * @DD_VecchiaMatricola) / @DD_PreModifica, @DecimaliPrzUn)
						-- per nuova matricola
						Set @DD_NuovaMatricola = DateDiff(DD, @DataManutenzione, @DataFine)
						Set @Rateo_NuovaMatricola = Round((@Rateo * @DD_NuovaMatricola) / @DD_PreModifica, @DecimaliPrzUn)
						-- si può procedere con l'aggiornamento della matricola nel contratto nel seguente modo:
						--  a) disattivazione della vecchia matricola e modifica della Data Fine uguale a @DataManutenzione (Data Rilevazione) meno 1 giorno
						Update xContrattoMatricola Set Disattiva = 1, DataFine = DateAdd(DD, -1, @DataManutenzione), Rateo = @Rateo_VecchiaMatricola 
										Where Id_xContrattoMatricola = @Id_xContrattoMatricola_Sostituisce
						Set @nReturn = @nReturn + @@ROWCOUNT
						--  b) aggiunta della nuova matricola con Prezzo e Data Fine identici a quelli della riga disattivata, 
						--     Data Inizio uguale a @DataManutenzione (Data Rilevazione) e Id_xContrattoMatricola_Sostituisce uguale a @Id_xContrattoMatricola_Sostituisce
						Insert Into [dbo].[xContrattoMatricola]
										([Id_xContratto],[Cd_AR],[Cd_SLA],[Riga],[DataInizio],[DataFine],[Cd_CF],[Cd_CFDest],[PrezzoUnitarioV],[Cd_xMatricola],[Disattiva],[Rateo]
										,[Rinnovato],[Sconto],[Id_xContrattoMatricola_Sostituisce])
						Values (@Id_xContratto,@Cd_AR_sub,@Cd_SLA,@Riga,@DataManutenzione,@DataFine,@Cd_CF,@Cd_CFDest,@PrezzoUnitarioV,@Cd_xMatricola_Sub,0,@Rateo_NuovaMatricola
										,0,@Sconto,@Id_xContrattoMatricola_Sostituisce)
						Set @nReturn = @nReturn + @@ROWCOUNT
					End 		
			End

		Fetch Next From curTAM Into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione, @Cd_AR_Sub, @Cd_xMatricola_Sub
	End --curTAM Fetch
	Close curTAM
	Deallocate curTAM
	----------------------------------------------------------------------
	--SECONDA PROCEDURA: INTERVENTO CON SOSTITUZIONE DELLA MATRICOLA - END
	----------------------------------------------------------------------
	
	-------------------------------------------------------------------------------------
	--TERZA PROCEDURA: INTERVENTO CON DISMISSIONE DELLA MATRICOLA - BEGIN
	-------------------------------------------------------------------------------------
	Declare @RigaPadre SmallInt
	Declare @Dismissione Bit

	--cursore contenente le matricole che hanno avuto un intervento senza sostituzione della matricola
	If @Id_xRDTicketAttivita_wzd = 0
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.RigaPadre, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione
				From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
				Where TA.Id_xRDTicket = @Id_xRDTicket 
					And TAM.Manutenuta = 1 And TAM.Cd_AR_Sub Is Null And TAM.Cd_xMatricola_Sub Is Null
				Order By TA.Riga, TA.Id_xRDTicketAttivita, TAM.Riga
	Else
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.RigaPadre, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione
				From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
				Where TA.Id_xRDTicket = @Id_xRDTicket And TA.Id_xRDTicketAttivita = @Id_xRDTicketAttivita_wzd -- solo attività rilevata da wizard
					And TAM.Manutenuta = 1 And TAM.Cd_AR_Sub Is Null And TAM.Cd_xMatricola_Sub Is Null
				Order By TAM.Riga

	Open curTAM
	Fetch Next From curTAM Into @Id_xRDTicketAttivita, @RigaPadre, @Cd_AR, @Cd_xMatricola, @DataManutenzione
	While @@FETCH_STATUS = 0 Begin
		--identificativo contratto (per righe matricole)
		Select
			@Id_xContratto = Id_xContratto
			, @Cd_VL		= Cd_VL
			, @Cd_CF		= Cd_CF
			, @Cd_CFDest	= Cd_CFDest
		From
			xContratto 
		Where Id_xContratto = (
				select top 1
					Id_xContratto
				from
					xContrattoMatricola
				where
						Cd_AR = @Cd_AR
					And	Cd_xMatricola = @Cd_xMatricola
					And Disattiva = 0
					And dbo.afn_dt_Datetime2Date(IsNull(@DataManutenzione,getdate())) between DataInizio And DataFine
				order by
					DataInizio desc
		)
		--decimali per prezzi unitari della valuta
		If @Cd_VL Is Null Set @DecimaliPrzUn = 3 Else Select @DecimaliPrzUn = DecimaliPrzUn From VL Where Cd_VL = @Cd_VL

		-- verifico se con l'intervento la matricola è stata dismessa
		Set @Dismissione = 0 -- altrimenti potrebbe restare il bit = 1 della matricola precedente

		Select @Dismissione = A.Dismissione
			From (
				Select Row_Number() Over(Partition By TAMM.Cd_AR, TAMM.Cd_xMatricola Order By TAMov.DataInizio Desc) As Posizione
					,TAMM.Dismissione
				From xRDTicketAttivitaMovMatricola TAMM Inner Join xRDTicketAttivitaMov TAMov On TAMM.Id_xRDTicketAttivitaMov = TAMov.Id_xRDTicketAttivitaMov
				Where TAMov.Id_xRDTicketAttivita = @Id_xRDTicketAttivita 
							And TAMov.DataInizio = @DataManutenzione
						And TAMM.RigaNonno = @RigaPadre 
							And TAMM.Cd_AR = @Cd_AR 
							And TAMM.Cd_xMatricola = @Cd_xMatricola
			) A
			Where A.Posizione = 1

		--In caso affermativo, richiamo la stored procedure di dismissione.
		--Attenzione: viene richiamata un'altra stored procedure anzichè lavorare direttamente 
		--in questa perché solo ed esclusivamente l'intervento con dismissione della matricola 
		--potrebbe essere effettuato anche da un dispositivo palmare tramite la generazione di 
		--un documento con le procedure asp_DO_Begin ed asp_DO_End, senza avere quindi alcuna
		--interazione con l'interfaccia utente (tutto lo sviluppo è a carico del partner); 
		--così facendo, il partner può richiamare nella sua procedura di generazione del 
		--documento la sp di dismissione della matricola senza processare le altre casistiche.
		If @Dismissione = 1
			Begin
				Declare @RC Int
				Declare @nReturn_2nd_sp Int

				Execute @RC = [dbo].[xasp_xRDTicketAttivita_UpdateContratto_Dismissione]
											@Id_xContratto
											,Null
											,@Cd_AR
											,@Cd_xMatricola
											,@DataManutenzione
											,@DecimaliPrzUn
											,@nReturn_2nd_sp Output

				Set @nReturn = @nReturn + IsNull(@nReturn_2nd_sp, 0)
			End

		Fetch Next From curTAM Into @Id_xRDTicketAttivita, @RigaPadre, @Cd_AR, @Cd_xMatricola, @DataManutenzione
	End --curTAM Fetch
	Close curTAM
	Deallocate curTAM
	-------------------------------------------------------------------------------------
	--TERZA PROCEDURA: INTERVENTO CON DISMISSIONE DELLA MATRICOLA - END
	-------------------------------------------------------------------------------------
	Return @nReturn		
GO

-- EntryPoint per WaterTime, usato per la gestione personalizzata della matricola
Create Procedure [dbo].[xasp_xRDTicketAttivita_UpdateMatricola_Ext]
	@stmt Varchar(Max)
	, @Cd_AR Varchar(20)
	, @Cd_xMatricola Varchar(40)
As
	Return 0
go

create procedure [dbo].[xasp_xRDTicketAttivita_UpdateInterventoProg] (
	@Id_xRDTicket				Integer
	, @Id_xRDTicketAttivita_wzd	Integer -- passata dal wizard di Inserimento Rilevazioni per gestire solo l'attività rilevata e non tutte le attività del ticket
	, @nReturn					Integer = 0 Output
)
as
	-- Return:
	--	= 0: nessun aggiornamento effettuato
	--	> 0: scadenze aggiornate nell'intervento
	If IsNull(@Id_xRDTicket , 0 ) = 0  Return 0

	Declare @Assistenza As Bit
	Declare @MultiMatricola As Bit

	Select @Assistenza = GestisciTicket, @MultiMatricola = Case When GestioneMatricola = 'M' Then 0 Else 1 End From xRDTicket Where Id_xRDTicket = @Id_xRDTicket

	If @Assistenza = 0 Return 0 --ticket di produzione
	If @MultiMatricola = 0 Return 0 --ticket di assistenza con gestione mono-matricola

	Set @Id_xRDTicketAttivita_wzd = IsNull(@Id_xRDTicketAttivita_wzd, 0)
	Set @nReturn = 0

	--dichiarazione variabili
	Declare @Id_xRDTicketAttivita		Integer
		, @Cd_AR						Varchar(20)
		, @Cd_xMatricola				Varchar(40)
		, @DataManutenzione				Smalldatetime
		, @Cd_AR_sub					Varchar(20)
		, @Cd_xMatricola_Sub			Varchar(40)
		, @Cd_xContratto				Char(10)
		, @Id_xInterventoProg			Int
		, @FattoreMksCiclo				Int
		, @Id_xInterventoProgScadenza	Int
		, @DataScadenza					Smalldatetime
		, @DataAperturaPrev				Smalldatetime
		, @DataChiusuraPrev				Smalldatetime
		, @DataScadenza_New				Smalldatetime
		, @DataAperturaPrev_Diff		Int
		, @DataChiusuraPrev_Diff		Int
		, @Riga							Int
		, @GiorniAnticipoPianificazione	Int
		, @GiorniCiclo					Int
	
	-----------------------------------------------------------------------------------
	--PRIMA PROCEDURA: CANCELLAZIONE INTERVENTO DI SOSTITUZIONE DELLA MATRICOLA - BEGIN
	-----------------------------------------------------------------------------------
	Set @Cd_AR_sub = Null
	Set @Cd_xMatricola_Sub = Null
	--cursore contenente le matricole associate a tutte le attività del ticket (fedi) o all'attività rilevata (wizard)
	--che sono state manutenute senza sostituzione della matricola
	If @Id_xRDTicketAttivita_wzd = 0
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione
			 From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			 Where TA.Id_xRDTicket = @Id_xRDTicket 
			       And TAM.Cd_AR_Sub Is Null And TAM.Cd_xMatricola_Sub Is Null 
						 --And TAM.Manutenuta = 1 ALTRIMENTI NON MI CONSIDERA QUELLE PER LE QUALI E' STATA CANCELLATA L'INTERA RIGA RILEVAZIONE !!!!
			 Order By TA.Riga, TA.Id_xRDTicketAttivita, TAM.Riga
	Else
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione
			 From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			 Where TA.Id_xRDTicket = @Id_xRDTicket And TA.Id_xRDTicketAttivita = @Id_xRDTicketAttivita_wzd -- solo attività rilevata da wizard
			       And TAM.Cd_AR_Sub Is Null And TAM.Cd_xMatricola_Sub Is Null
						 --And TAM.Manutenuta = 1 ALTRIMENTI NON MI CONSIDERA QUELLE PER LE QUALI E' STATA CANCELLATA L'INTERA RIGA RILEVAZIONE !!!!
			 Order By TAM.Riga

	Open curTAM
	Fetch Next From curTAM Into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione
	While @@FETCH_STATUS = 0 Begin
		-- Cerco il contratto associato alla matricola sostituente
		select
			@Cd_xContratto = Cd_xContratto
		from
			xContrattoMatricola cm
				inner join xContratto c on cm.Id_xContratto = c.Id_xContratto
		where
				Cd_xMatricola = @Cd_xMatricola
			And cm.Cd_AR = @Cd_AR
			And Disattiva = 0
			And Rinnovato = 0
		order by
			cm.DataInizio desc

		if @Cd_xContratto is null goto end_fetch_1; -- Matricola non associata a un contratto

		select
			@Id_xInterventoProg = Id_xInterventoProg
			, @FattoreMksCiclo	= FattoreMksCiclo
			, @GiorniCiclo		= GiorniCiclo
		from
			xInterventoProg
		where
				Cd_xContratto = @Cd_xContratto
			And	((Cd_xMatricola = @Cd_xMatricola And Cd_AR = @Cd_AR) Or MatricoleTutte = 1 Or (Cd_xMatricola is null And MatricoleTutte = 0))

		if @Id_xInterventoProg is null goto end_fetch_1; -- Nessun intervento associato al contratto

		-- per quelle non manutenute fa fede la data odierna non avendo una Data Manutenzione
		If @DataManutenzione Is Null Set @DataManutenzione = GetDate()

		select top 1
			@DataScadenza_New = DataScadenza
		from
			xInterventoProgScadenza
		where
				Id_xInterventoProg = @Id_xInterventoProg
			And Evasa = 1
			And Id_xRDTicket <> @Id_xRDTicket
		order by
			DataScadenza desc
		
		delete from xInterventoProgScadenza
		where Id_xRDTicket = @Id_xRDTicket And Id_xInterventoProg = @Id_xInterventoProg

		if @DataScadenza_New Is Null begin
			select @DataScadenza_New = case when @FattoreMksCiclo = 0 then DATEADD(day, @GiorniCiclo * -1, getdate()) else DATEADD(month, @FattoreMksCiclo * -1, getdate()) end
			from xInterventoProg
			where Id_xInterventoProg = @Id_xInterventoProg
		end

		Declare DS Cursor Fast_Forward For
			select
				Id_xInterventoProgScadenza
				, DataScadenza
				, DataAperturaPrev
				, DataChiusuraPrev
			from
				xInterventoProgScadenza
			where
					Id_xInterventoProg = @Id_xInterventoProg
				And DataScadenza > @DataScadenza_New
				And Evasa = 0

		Open DS
		Fetch Next From DS Into @Id_xInterventoProgScadenza, @DataScadenza, @DataAperturaPrev, @DataChiusuraPrev
		While @@FETCH_STATUS = 0 Begin
			select
				@DataAperturaPrev_Diff		= datediff(day, @DataScadenza, @DataAperturaPrev)
				, @DataChiusuraPrev_Diff	= datediff(day, @DataScadenza, @DataChiusuraPrev)
				, @DataScadenza_New			= case when @FattoreMksCiclo = 0 then dateadd(day, @GiorniCiclo, @DataScadenza_New) else dateadd(month, @FattoreMksCiclo, @DataScadenza_New) end

			update xInterventoProgScadenza set
				DataScadenza = @DataScadenza_New
				, DataAperturaPrev = dateadd(day, @DataAperturaPrev_Diff, @DataScadenza_New)
				, DataChiusuraPrev = dateadd(day, @DataChiusuraPrev_Diff, @DataScadenza_New)
			where Id_xInterventoProgScadenza = @Id_xInterventoProgScadenza

			set @nReturn = @nReturn + @@ROWCOUNT

			Fetch Next From DS Into @Id_xInterventoProgScadenza, @DataScadenza, @DataAperturaPrev, @DataChiusuraPrev
		End
		Close DS
		Deallocate DS

		Fetch Next From curTAM Into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione
	End --curTAM Fetch
	end_fetch_1:
		Close curTAM
		Deallocate curTAM
	---------------------------------------------------------------------------------
	--PRIMA PROCEDURA: CANCELLAZIONE INTERVENTO DI SOSTITUZIONE DELLA MATRICOLA - END
	---------------------------------------------------------------------------------

	------------------------------------------------------------------------
	--SECONDA PROCEDURA: INTERVENTO CON SOSTITUZIONE DELLA MATRICOLA - BEGIN
	------------------------------------------------------------------------
	--cursore contenente le matricole associate a tutte le attività del ticket (fedi) o all'attività rilevata (wizard)
	--che sono state manutenute tramite sostituzione della matricola
	If @Id_xRDTicketAttivita_wzd = 0
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione, TAM.Cd_AR_Sub, TAM.Cd_xMatricola_Sub
			 From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			 Where TA.Id_xRDTicket = @Id_xRDTicket 
			       And TAM.Manutenuta = 1 And TAM.Cd_AR_Sub Is Not Null And TAM.Cd_xMatricola_Sub Is Not Null
			 Order By TA.Riga, TA.Id_xRDTicketAttivita, TAM.Riga
	Else
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione, TAM.Cd_AR_Sub, TAM.Cd_xMatricola_Sub
			 From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			 Where TA.Id_xRDTicket = @Id_xRDTicket And TA.Id_xRDTicketAttivita = @Id_xRDTicketAttivita_wzd -- solo attività rilevata da wizard
			       And TAM.Manutenuta = 1 And TAM.Cd_AR_Sub Is Not Null And TAM.Cd_xMatricola_Sub Is Not Null
			 Order By TAM.Riga
	
	Open curTAM
	Fetch Next From curTAM Into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione, @Cd_AR_Sub, @Cd_xMatricola_Sub
	While @@FETCH_STATUS = 0 Begin
		-- Cerco il contratto associato alla matricola sostituente
		select
			@Cd_xContratto = Cd_xContratto
		from
			xContrattoMatricola cm
				inner join xContratto c on cm.Id_xContratto = c.Id_xContratto
		where
				Cd_xMatricola = @Cd_xMatricola_Sub
			And cm.Cd_AR = @Cd_AR_sub
			And Disattiva = 0
			And Rinnovato = 0
			And dbo.afn_dt_Datetime2Date(IsNull(@DataManutenzione,getdate())) between cm.DataInizio And cm.DataFine

		if @Cd_xContratto is null goto end_fetch_2; -- Matricola non associata a un contratto

		select
			@Id_xInterventoProg				= Id_xInterventoProg
			, @FattoreMksCiclo				= FattoreMksCiclo
			, @GiorniAnticipoPianificazione	= GiorniAnticipoPianificazione
		from
			xInterventoProg
		where
				Cd_xContratto = @Cd_xContratto
			And	((Cd_xMatricola = @Cd_xMatricola And Cd_AR = @Cd_AR) Or MatricoleTutte = 1 Or (Cd_xMatricola is null And MatricoleTutte = 0))

		if @Id_xInterventoProg is null goto end_fetch_2; -- Nessun intervento associato al contratto

		Set @DataScadenza_New = @DataManutenzione

		set @Riga = (select isnull(max(Riga), 0) + 1 from xInterventoProgScadenza where Id_xInterventoProg = @Id_xInterventoProg)

		-- Inserisco la scadenza odierna se non esiste
		if not exists (select * from xInterventoProgScadenza where DataScadenza = @DataManutenzione) begin
			insert into xInterventoProgScadenza(Id_xInterventoProg, DataScadenza, Id_xRDTicket, Riga, Evasa, DataAperturaPrev, DataChiusuraPrev)
			values (@Id_xInterventoProg, @DataManutenzione, @Id_xRDTicket, @Riga, 1, @DataManutenzione, @DataManutenzione)
		end

		Declare DS Cursor Static For
			select
				Id_xInterventoProgScadenza
				, DataScadenza
				, DataAperturaPrev
				, DataChiusuraPrev
			from
				xInterventoProgScadenza
			where
					Id_xInterventoProg = @Id_xInterventoProg
				And DataScadenza > @DataManutenzione
				And Evasa = 0

		Open DS
		if @@CURSOR_ROWS > 0 begin
			Fetch Next From DS Into @Id_xInterventoProgScadenza, @DataScadenza, @DataAperturaPrev, @DataChiusuraPrev
			While @@FETCH_STATUS = 0 Begin
				select
					@DataAperturaPrev_Diff		= datediff(day, @DataScadenza, @DataAperturaPrev)
					, @DataChiusuraPrev_Diff	= datediff(day, @DataScadenza, @DataChiusuraPrev)
					, @DataScadenza_New			= case when @FattoreMksCiclo = 0 then dateadd(day, @GiorniCiclo, @DataScadenza_New) else dateadd(month, @FattoreMksCiclo, @DataScadenza_New) end

				update xInterventoProgScadenza set
					DataScadenza = @DataScadenza_New
					, DataAperturaPrev = dateadd(day, @DataAperturaPrev_Diff, @DataScadenza_New)
					, DataChiusuraPrev = dateadd(day, @DataChiusuraPrev_Diff, @DataScadenza_New)
				where Id_xInterventoProgScadenza = @Id_xInterventoProgScadenza

				set @nReturn = @nReturn + @@ROWCOUNT

				Fetch Next From DS Into @Id_xInterventoProgScadenza, @DataScadenza, @DataAperturaPrev, @DataChiusuraPrev
			End
		end else begin
			select @Riga = isnull(MAX(Riga), 0) + 1 from xInterventoProgScadenza where Id_xInterventoProg = @Id_xInterventoProg
			select @DataScadenza_New = case when @FattoreMksCiclo = 0 then dateadd(day, @GiorniCiclo, @DataManutenzione) else dateadd(month, @FattoreMksCiclo, @DataManutenzione) end

			insert into xInterventoProgScadenza(Id_xInterventoProg, DataScadenza, Riga, Evasa, DataAperturaPrev, DataChiusuraPrev)
			values (@Id_xInterventoProg, @DataScadenza_New, @Riga, 0, dateadd(day, -@GiorniAnticipoPianificazione, @DataScadenza_New), @DataScadenza_New)
		end
		Close DS
		Deallocate DS
		Fetch Next From curTAM Into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione, @Cd_AR_Sub, @Cd_xMatricola_Sub
		End --curTAM Fetch
	end_fetch_2:
		Close curTAM
		Deallocate curTAM
	----------------------------------------------------------------------
	--SECONDA PROCEDURA: INTERVENTO CON SOSTITUZIONE DELLA MATRICOLA - END
	----------------------------------------------------------------------

	------------------------------------------------------------------------
	--TERZA PROCEDURA: INTERVENTO SENZA SOSTITUZIONE DELLA MATRICOLA - BEGIN
	------------------------------------------------------------------------
	--cursore contenente le matricole associate a tutte le attività del ticket (fedi) o all'attività rilevata (wizard)
	--che sono state manutenute senza sostituzione della matricola
	If @Id_xRDTicketAttivita_wzd = 0
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione
			 From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			 Where TA.Id_xRDTicket = @Id_xRDTicket 
			       And TAM.Manutenuta = 1 And TAM.Cd_AR_Sub Is Null And TAM.Cd_xMatricola_Sub Is Null
			 Order By TA.Riga, TA.Id_xRDTicketAttivita, TAM.Riga
	Else
		Declare curTAM Cursor Fast_Forward For
			Select TAM.Id_xRDTicketAttivita, TAM.Cd_AR, TAM.Cd_xMatricola, TAM.DataManutenzione
			 From xRDTicketAttivitaMatricola TAM Inner Join xRDTicketAttivita TA On TAM.Id_xRDTicketAttivita = TA.Id_xRDTicketAttivita
			 Where TA.Id_xRDTicket = @Id_xRDTicket And TA.Id_xRDTicketAttivita = @Id_xRDTicketAttivita_wzd -- solo attività rilevata da wizard
			       And TAM.Manutenuta = 1 And TAM.Cd_AR_Sub Is Null And TAM.Cd_xMatricola_Sub Is Null
			 Order By TAM.Riga
	
	Open curTAM
	Fetch Next From curTAM Into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione
	While @@FETCH_STATUS = 0 Begin
		-- Cerco il contratto associato alla matricola sostituente
		select
			@Cd_xContratto = Cd_xContratto
		from
			xContrattoMatricola cm
				inner join xContratto c on cm.Id_xContratto = c.Id_xContratto
		where
				Cd_xMatricola = @Cd_xMatricola
			And cm.Cd_AR = @Cd_AR
			And Disattiva = 0
			And Rinnovato = 0
			And dbo.afn_dt_Datetime2Date(IsNull(@DataManutenzione,getdate())) between cm.DataInizio And cm.DataFine

		if @Cd_xContratto is null goto end_fetch_3; -- Matricola non associata a un contratto

		select
			@Id_xInterventoProg				= Id_xInterventoProg
			, @FattoreMksCiclo				= FattoreMksCiclo
			, @GiorniAnticipoPianificazione	= GiorniAnticipoPianificazione
		from
			xInterventoProg
		where
				Cd_xContratto = @Cd_xContratto
			And	((Cd_xMatricola = @Cd_xMatricola And Cd_AR = @Cd_AR) Or MatricoleTutte = 1 Or (Cd_xMatricola is null And MatricoleTutte = 0))

		if @Id_xInterventoProg is null goto end_fetch_3; -- Nessun intervento associato al contratto

		Set @DataScadenza_New = @DataManutenzione

		set @Riga = (select isnull(max(Riga), 0) + 1 from xInterventoProgScadenza where Id_xInterventoProg = @Id_xInterventoProg)

		-- Inserisco la scadenza odierna se non esiste
		if not exists (select * from xInterventoProgScadenza where DataScadenza = @DataManutenzione) begin
			insert into xInterventoProgScadenza(Id_xInterventoProg, DataScadenza, Id_xRDTicket, Riga, Evasa, DataAperturaPrev, DataChiusuraPrev)
			values (@Id_xInterventoProg, @DataManutenzione, @Id_xRDTicket, @Riga, 1, @DataManutenzione, @DataManutenzione)
		end

		Declare DS Cursor Static For
			select
				Id_xInterventoProgScadenza
				, DataScadenza
				, DataAperturaPrev
				, DataChiusuraPrev
			from
				xInterventoProgScadenza
			where
					Id_xInterventoProg = @Id_xInterventoProg
				And DataScadenza > @DataManutenzione
				And Evasa = 0

		Open DS
		if @@CURSOR_ROWS > 0 begin
			Fetch Next From DS Into @Id_xInterventoProgScadenza, @DataScadenza, @DataAperturaPrev, @DataChiusuraPrev
			While @@FETCH_STATUS = 0 Begin
				select
					@DataAperturaPrev_Diff		= datediff(day, @DataScadenza, @DataAperturaPrev)
					, @DataChiusuraPrev_Diff	= datediff(day, @DataScadenza, @DataChiusuraPrev)
					, @DataScadenza_New			= case when @FattoreMksCiclo = 0 then dateadd(day, @GiorniCiclo, @DataScadenza_New) else dateadd(month, @FattoreMksCiclo, @DataScadenza_New) end

				update xInterventoProgScadenza set
					DataScadenza = @DataScadenza_New
					, DataAperturaPrev = dateadd(day, @DataAperturaPrev_Diff, @DataScadenza_New)
					, DataChiusuraPrev = dateadd(day, @DataChiusuraPrev_Diff, @DataScadenza_New)
				where Id_xInterventoProgScadenza = @Id_xInterventoProgScadenza

				set @nReturn = @nReturn + @@ROWCOUNT

				Fetch Next From DS Into @Id_xInterventoProgScadenza, @DataScadenza, @DataAperturaPrev, @DataChiusuraPrev
			End
		end else begin
			select @Riga = isnull(MAX(Riga), 0) + 1 from xInterventoProgScadenza where Id_xInterventoProg = @Id_xInterventoProg
			select @DataScadenza_New = case when @FattoreMksCiclo = 0 then dateadd(day, @GiorniCiclo, @DataManutenzione) else dateadd(month, @FattoreMksCiclo, @DataManutenzione) end

			insert into xInterventoProgScadenza(Id_xInterventoProg, DataScadenza, Riga, Evasa, DataAperturaPrev, DataChiusuraPrev)
			values (@Id_xInterventoProg, @DataScadenza_New, @Riga, 0, dateadd(day, -@GiorniAnticipoPianificazione, @DataScadenza_New), @DataScadenza_New)
		end
		Close DS
		Deallocate DS
		Fetch Next From curTAM Into @Id_xRDTicketAttivita, @Cd_AR, @Cd_xMatricola, @DataManutenzione
		End --curTAM Fetch
	end_fetch_3:
		Close curTAM
		Deallocate curTAM
	----------------------------------------------------------------------
	--TERZA PROCEDURA: INTERVENTO SENZA SOSTITUZIONE DELLA MATRICOLA - END
	----------------------------------------------------------------------
	Return @nReturn
go

--noleggio matricole e impianti - sviluppo scadenze per le diverse voci economiche - 2a parte
Create Procedure [dbo].[xasp_cca_noleggiosviluppo_p2]
	@Impianto			Bit
	, @Id_Parent		Int
	, @TipoScadenza		Char(3)
	, @DataInizio		Smalldatetime
	, @FattoreMks		Numeric(25,12)
	, @RR_DataInizio	Smalldatetime
	, @TipoFatt			Smallint
	, @nReturn			Int = 0 Output
As
	--dichiarazione variabili
	Declare @DataScadenza Smalldatetime = Null

	--inserimento scadenze: seconda parte 
	-- solo per periodi di fatturazione posticipati rispetto ai mesi di noleggio
	-- solo 1 eventuale ulteriore scadenza per tipo (QFN, QFP, EP1, ....)
	Set @RR_DataInizio = Case When @DataInizio > @RR_DataInizio Then @DataInizio Else @RR_DataInizio End
	If @Impianto = 0 --matricola
		Begin
			Select Top 1 @DataScadenza = DataScadenza -- l'ultima data scadenza va calcolata a partire dalla precedente
				From (
					Select DataScadenza
						From xNoleggioMatricolaSviluppo 
						Where Id_xNoleggioMatricola = @Id_Parent
							And TipoScadenza = @TipoScadenza 
							And IsNull(Id_DOTes, 0) = 0
					Union
					Select Null As DataScadenza) A
				Order By DataScadenza Desc
			If IsNull(@DataScadenza, '') = '' Set @DataScadenza = (@DataInizio - 1) -- se nessuna scadenza precedente, si parte dalla data inizio
			Set @DataScadenza = dbo.afn_dt_Datetime2Date(DateAdd(M, @FattoreMks, @DataScadenza))
			Insert Into xNoleggioMatricolaSviluppo(Id_xNoleggioMatricola, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
				Values (@Id_Parent, @TipoScadenza, @DataScadenza, @RR_DataInizio, @DataScadenza)
		End
	Else --impianto
		Begin
			Select Top 1 @DataScadenza = DataScadenza -- l'ultima data scadenza va calcolata a partire dalla precedente
				From (
					Select DataScadenza
						From xNoleggioImpiantoSviluppo 
						Where Id_xNoleggioImpianto = @Id_Parent
							And TipoScadenza = @TipoScadenza 
							And IsNull(Id_DOTes, 0) = 0
					Union
					Select Null As DataScadenza) A
				Order By DataScadenza Desc
			If IsNull(@DataScadenza, '') = '' Set @DataScadenza = (@DataInizio - 1) -- se nessuna scadenza precedente, si parte dalla data inizio
			Set @DataScadenza = dbo.afn_dt_Datetime2Date(DateAdd(M, @FattoreMks, @DataScadenza))
			Insert Into xNoleggioImpiantoSviluppo(Id_xNoleggioImpianto, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
				Values (@Id_Parent, @TipoScadenza, @DataScadenza, @RR_DataInizio, @DataScadenza)
		End

	If @@RowCount < 1 
		Begin
			Set @nReturn = -40
			GoTo Fine_Funzione
		End

	--return
	Set @nReturn = 1

Fine_Funzione:
	Return @nReturn
GO

--noleggio matricole e impianti - sviluppo scadenze per le diverse voci economiche
Create Procedure xasp_cca_noleggiosviluppo
	@Impianto		Bit
	, @Id_Parent	Int
	, @TipoFatt		Smallint
	, @nReturn		Int = 0 Output
As
	--verifica validità identificativo matricola o impianto
	If IsNull(@Id_Parent, 0) = 0 
		Begin
			Set @nReturn = -1
			GoTo Fine_Funzione
		End

	--cancellazione scadenze non evase (per essere allineate di continuo con le ultime modifiche)
	If @Impianto = 0 
		Delete From xNoleggioMatricolaSviluppo Where Id_xNoleggioMatricola = @Id_Parent And IsNull(Id_DOTes, 0) = 0
	Else 
		Delete From xNoleggioImpiantoSviluppo  Where Id_xNoleggioImpianto  = @Id_Parent And IsNull(Id_DOTes, 0) = 0

	--dichiarazione variabili
	Declare 
		--x campi di tabelle
		@DataInizio                Smalldatetime
		, @DataFine                Smalldatetime
		, @FattoreMksQFNoleggio    Numeric(25,12)
		, @FattoreMksQFPlafond     Numeric(25,12)
		, @FattoreMksFattura_C1    Numeric(25,12)
		, @FattoreMksFattura_C2    Numeric(25,12)
		, @FattoreMksFattura_C3    Numeric(25,12)
		, @FattoreMksFattura_C4    Numeric(25,12)
		, @FattoreMksFattura_C5    Numeric(25,12)
		, @FattoreMksFattura_C6    Numeric(25,12)
			--x calcoli
		, @MesiNoleggio            Int = 0
		, @i                       Int = 0
		, @QFN_Scad2Ins						 Int = 0
		, @QFP_Scad2Ins						 Int = 0
		, @EP1_Scad2Ins						 Int = 0
		, @EP2_Scad2Ins						 Int = 0
		, @EP3_Scad2Ins						 Int = 0
		, @EP4_Scad2Ins						 Int = 0
		, @EP5_Scad2Ins						 Int = 0
		, @EP6_Scad2Ins						 Int = 0
			--x salvataggio dati
		, @DataScadenza            Smalldatetime
		, @QFN_RR_DataInizio       Smalldatetime = ''
		, @QFP_RR_DataInizio       Smalldatetime = ''
		, @EP1_RR_DataInizio       Smalldatetime = ''
		, @EP2_RR_DataInizio       Smalldatetime = ''
		, @EP3_RR_DataInizio       Smalldatetime = ''
		, @EP4_RR_DataInizio       Smalldatetime = ''
		, @EP5_RR_DataInizio       Smalldatetime = ''
		, @EP6_RR_DataInizio       Smalldatetime = ''
		, @QFN_RR_DataFine         Smalldatetime = ''
		, @QFP_RR_DataFine         Smalldatetime = ''
		, @EP1_RR_DataFine         Smalldatetime = ''
		, @EP2_RR_DataFine         Smalldatetime = ''
		, @EP3_RR_DataFine         Smalldatetime = ''
		, @EP4_RR_DataFine         Smalldatetime = ''
		, @EP5_RR_DataFine         Smalldatetime = ''
		, @EP6_RR_DataFine         Smalldatetime = ''
			--x richiamare sp interna
		, @RC2											Int

	--selezione dati matricola o impianto
	If @Impianto = 0 --matricola
		Select 
			@DataInizio             = DataInizio          
			, @DataFine             = DataFine            
			, @FattoreMksQFNoleggio = Case When IsNull(QuotaFissaNoleggio, 0) = 0 Then 0 Else FattoreMksQFNoleggio End
			, @FattoreMksQFPlafond  = Case When IsNull(QuotaFissaPlafond , 0) = 0 Then 0 Else FattoreMksQFPlafond  End
			, @FattoreMksFattura_C1 = Case When IsNull(Cd_AR_C1, '') = '' Then 0 When IsNull(Prezzo_C1, 0) = 0 Then 0 Else FattoreMksFattura_C1 End
			, @FattoreMksFattura_C2 = Case When IsNull(Cd_AR_C2, '') = '' Then 0 When IsNull(Prezzo_C2, 0) = 0 Then 0 Else FattoreMksFattura_C2 End
			, @FattoreMksFattura_C3 = Case When IsNull(Cd_AR_C3, '') = '' Then 0 When IsNull(Prezzo_C3, 0) = 0 Then 0 Else FattoreMksFattura_C3 End
			, @FattoreMksFattura_C4 = Case When IsNull(Cd_AR_C4, '') = '' Then 0 When IsNull(Prezzo_C4, 0) = 0 Then 0 Else FattoreMksFattura_C4 End
			, @FattoreMksFattura_C5 = Case When IsNull(Cd_AR_C5, '') = '' Then 0 When IsNull(Prezzo_C5, 0) = 0 Then 0 Else FattoreMksFattura_C5 End
			, @FattoreMksFattura_C6 = Case When IsNull(Cd_AR_C6, '') = '' Then 0 When IsNull(Prezzo_C6, 0) = 0 Then 0 Else FattoreMksFattura_C6 End
			From xNoleggioMatricola
			Where Id_xNoleggioMatricola = @Id_Parent
	Else --impianto
		Select 
			@DataInizio             = DataInizio          
			, @DataFine             = DataFine            
			, @FattoreMksQFNoleggio = Case When IsNull(QuotaFissaNoleggio, 0) = 0 Then 0 Else FattoreMksQFNoleggio End
			, @FattoreMksQFPlafond  = Case When IsNull(QuotaFissaPlafond , 0) = 0 Then 0 Else FattoreMksQFPlafond  End
			, @FattoreMksFattura_C1 = Case When IsNull(Cd_AR_C1, '') = '' Then 0 When IsNull(Prezzo_C1, 0) = 0 Then 0 Else FattoreMksFattura_C1 End
			, @FattoreMksFattura_C2 = Case When IsNull(Cd_AR_C2, '') = '' Then 0 When IsNull(Prezzo_C2, 0) = 0 Then 0 Else FattoreMksFattura_C2 End
			, @FattoreMksFattura_C3 = Case When IsNull(Cd_AR_C3, '') = '' Then 0 When IsNull(Prezzo_C3, 0) = 0 Then 0 Else FattoreMksFattura_C3 End
			, @FattoreMksFattura_C4 = Case When IsNull(Cd_AR_C4, '') = '' Then 0 When IsNull(Prezzo_C4, 0) = 0 Then 0 Else FattoreMksFattura_C4 End
			, @FattoreMksFattura_C5 = Case When IsNull(Cd_AR_C5, '') = '' Then 0 When IsNull(Prezzo_C5, 0) = 0 Then 0 Else FattoreMksFattura_C5 End
			, @FattoreMksFattura_C6 = Case When IsNull(Cd_AR_C6, '') = '' Then 0 When IsNull(Prezzo_C6, 0) = 0 Then 0 Else FattoreMksFattura_C6 End
			From xNoleggioImpianto
			Where Id_xNoleggioImpianto = @Id_Parent
    
	--mesi di noleggio della matricola\impianto
	Set @MesiNoleggio = DateDiff(M,@DataInizio,@DataFine+1)
	If (@MesiNoleggio <= 0) Set @MesiNoleggio = 1

	--scadenze totali da gestire per ogni tipo
	If @FattoreMksQFNoleggio > 0 Set @QFN_Scad2Ins = (@MesiNoleggio / @FattoreMksQFNoleggio) + Case When (@MesiNoleggio % @FattoreMksQFNoleggio = 0) Then 0 Else 1 End
	If @FattoreMksQFPlafond  > 0 Set @QFP_Scad2Ins = (@MesiNoleggio / @FattoreMksQFPlafond ) + Case When (@MesiNoleggio % @FattoreMksQFPlafond  = 0) Then 0 Else 1 End
	If @FattoreMksFattura_C1 > 0 Set @EP1_Scad2Ins = (@MesiNoleggio / @FattoreMksFattura_C1) + Case When (@MesiNoleggio % @FattoreMksFattura_C1 = 0) Then 0 Else 1 End
	If @FattoreMksFattura_C2 > 0 Set @EP2_Scad2Ins = (@MesiNoleggio / @FattoreMksFattura_C2) + Case When (@MesiNoleggio % @FattoreMksFattura_C2 = 0) Then 0 Else 1 End
	If @FattoreMksFattura_C3 > 0 Set @EP3_Scad2Ins = (@MesiNoleggio / @FattoreMksFattura_C3) + Case When (@MesiNoleggio % @FattoreMksFattura_C3 = 0) Then 0 Else 1 End
	If @FattoreMksFattura_C4 > 0 Set @EP4_Scad2Ins = (@MesiNoleggio / @FattoreMksFattura_C4) + Case When (@MesiNoleggio % @FattoreMksFattura_C4 = 0) Then 0 Else 1 End
	If @FattoreMksFattura_C5 > 0 Set @EP5_Scad2Ins = (@MesiNoleggio / @FattoreMksFattura_C5) + Case When (@MesiNoleggio % @FattoreMksFattura_C5 = 0) Then 0 Else 1 End
	If @FattoreMksFattura_C6 > 0 Set @EP6_Scad2Ins = (@MesiNoleggio / @FattoreMksFattura_C6) + Case When (@MesiNoleggio % @FattoreMksFattura_C6 = 0) Then 0 Else 1 End

	--inserimento scadenze: prima parte
	While @i < @MesiNoleggio
		Begin
			if @TipoFatt = 1 begin
				set @i = @i + 1
				-- Fattura posticipata (dal 20/06 al 31/12 trimestrale --> 20/09; 20/12;)
				Set @DataScadenza = dbo.afn_dt_Datetime2Date(DateAdd(M, @i, @DataInizio) - 1) 
			end else begin
				-- Fattura anticipata (dal 20/06 al 31/12 trimestrale --> 20/06; 20/09;)
				Set @DataScadenza = dbo.afn_dt_Datetime2Date(DateAdd(M, @i, @DataInizio)) 
			end
			--quota fissa noleggio
			If (@FattoreMksQFNoleggio > 0) And (@i % @FattoreMksQFNoleggio = 0)
				Begin
					Set @QFN_RR_DataInizio = Case When @DataInizio > @QFN_RR_DataInizio Then @DataInizio Else @QFN_RR_DataInizio End
					Set @QFN_RR_DataFine = Case When @TipoFatt = 0 Then dbo.afn_dt_Datetime2Date(DateAdd(M, @FattoreMksQFNoleggio, @DataScadenza) - 1) Else @DataScadenza End
					If @Impianto = 0 --matricola
						Insert Into xNoleggioMatricolaSviluppo(Id_xNoleggioMatricola, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'QFN', @DataScadenza, @QFN_RR_DataInizio, @QFN_RR_DataFine)
					Else --impianto
						Insert Into xNoleggioImpiantoSviluppo(Id_xNoleggioImpianto, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'QFN', @DataScadenza, @QFN_RR_DataInizio, @QFN_RR_DataFine)
					If @@RowCount < 1 
						Begin
							Set @nReturn = -10
							GoTo Fine_Funzione
						End
					Else
						Set @QFN_RR_DataInizio = DateAdd(D, 1, @QFN_RR_DataFine)
						Set @QFN_Scad2Ins -= 1
				End
			--quota fissa plafond
			If (@FattoreMksQFPlafond > 0) And (@i % @FattoreMksQFPlafond = 0)
				Begin
					Set @QFP_RR_DataInizio = Case When @DataInizio > @QFP_RR_DataInizio Then @DataInizio Else @QFP_RR_DataInizio End
					Set @QFP_RR_DataFine = Case When @TipoFatt = 0 Then dbo.afn_dt_Datetime2Date(DateAdd(M, @FattoreMksQFPlafond, @DataScadenza) - 1) Else @DataScadenza End
					If @Impianto = 0 --matricola
						Insert Into xNoleggioMatricolaSviluppo(Id_xNoleggioMatricola, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'QFP', @DataScadenza, @QFP_RR_DataInizio, @QFP_RR_DataFine)
					Else --impianto
						Insert Into xNoleggioImpiantoSviluppo(Id_xNoleggioImpianto, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'QFP', @DataScadenza, @QFP_RR_DataInizio, @QFP_RR_DataFine)
					If @@RowCount < 1 
						Begin
							Set @nReturn = -20
							GoTo Fine_Funzione
						End
					Else 
						Set @QFP_RR_DataInizio = DateAdd(D, 1, @QFP_RR_DataFine)
						Set @QFP_Scad2Ins -= 1
				End
			--extra plafond contatore 1
			If (@FattoreMksFattura_C1 > 0) And (@i % @FattoreMksFattura_C1 = 0)
				Begin
					Set @EP1_RR_DataInizio = Case When @DataInizio > @EP1_RR_DataInizio Then @DataInizio Else @EP1_RR_DataInizio End
					Set @EP1_RR_DataFine = Case When @TipoFatt = 0 Then dbo.afn_dt_Datetime2Date(DateAdd(M, @FattoreMksFattura_C1, @DataScadenza) - 1) Else @DataScadenza End
					If @Impianto = 0 --matricola
						Insert Into xNoleggioMatricolaSviluppo(Id_xNoleggioMatricola, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP1', @DataScadenza, @EP1_RR_DataInizio, @EP1_RR_DataFine)
					Else --impianto
						Insert Into xNoleggioImpiantoSviluppo(Id_xNoleggioImpianto, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP1', @DataScadenza, @EP1_RR_DataInizio, @EP1_RR_DataFine)
					If @@RowCount < 1 
						Begin
							Set @nReturn = -31
							GoTo Fine_Funzione
						End
					Else 
						Set @EP1_RR_DataInizio = DateAdd(D, 1, @EP1_RR_DataFine)
						Set @EP1_Scad2Ins -= 1
				End
			--extra plafond contatore 2
			If (@FattoreMksFattura_C2 > 0) And (@i % @FattoreMksFattura_C2 = 0)
				Begin
					Set @EP2_RR_DataInizio = Case When @DataInizio > @EP2_RR_DataInizio Then @DataInizio Else @EP2_RR_DataInizio End
					Set @EP2_RR_DataFine = Case When @TipoFatt = 0 Then dbo.afn_dt_Datetime2Date(DateAdd(M, @FattoreMksFattura_C2, @DataScadenza) - 1) Else @DataScadenza End
					If @Impianto = 0 --matricola
						Insert Into xNoleggioMatricolaSviluppo(Id_xNoleggioMatricola, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP2', @DataScadenza, @EP2_RR_DataInizio, @EP2_RR_DataFine)
					Else --impianto
						Insert Into xNoleggioImpiantoSviluppo(Id_xNoleggioImpianto, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP2', @DataScadenza, @EP2_RR_DataInizio, @EP2_RR_DataFine)
					If @@RowCount < 1 
						Begin
							Set @nReturn = -32
							GoTo Fine_Funzione
						End
					Else 
						Set @EP2_RR_DataInizio = DateAdd(D, 1, @EP2_RR_DataFine)
						Set @EP2_Scad2Ins -= 1
				End
			--extra plafond contatore 3
			If (@FattoreMksFattura_C3 > 0) And (@i % @FattoreMksFattura_C3 = 0)
				Begin
					Set @EP3_RR_DataInizio = Case When @DataInizio > @EP3_RR_DataInizio Then @DataInizio Else @EP3_RR_DataInizio End
					Set @EP3_RR_DataFine = Case When @TipoFatt = 0 Then dbo.afn_dt_Datetime2Date(DateAdd(M, @FattoreMksFattura_C3, @DataScadenza) - 1) Else @DataScadenza End
					If @Impianto = 0 --matricola
						Insert Into xNoleggioMatricolaSviluppo(Id_xNoleggioMatricola, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP3', @DataScadenza, @EP3_RR_DataInizio, @EP3_RR_DataFine)
					Else --impianto
						Insert Into xNoleggioImpiantoSviluppo(Id_xNoleggioImpianto, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP3', @DataScadenza, @EP3_RR_DataInizio, @EP3_RR_DataFine)
					If @@RowCount < 1 
						Begin
							Set @nReturn = -33
							GoTo Fine_Funzione
						End
					Else 
						Set @EP3_RR_DataInizio = DateAdd(D, 1, @EP3_RR_DataFine)
						Set @EP3_Scad2Ins -= 1
				End
			--extra plafond contatore 4
			If (@FattoreMksFattura_C4 > 0) And (@i % @FattoreMksFattura_C4 = 0)
				Begin
					Set @EP4_RR_DataInizio = Case When @DataInizio > @EP4_RR_DataInizio Then @DataInizio Else @EP4_RR_DataInizio End
					Set @EP4_RR_DataFine = Case When @TipoFatt = 0 Then dbo.afn_dt_Datetime2Date(DateAdd(M, @FattoreMksFattura_C4, @DataScadenza) - 1) Else @DataScadenza End
					If @Impianto = 0 --matricola
						Insert Into xNoleggioMatricolaSviluppo(Id_xNoleggioMatricola, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP4', @DataScadenza, @EP4_RR_DataInizio, @EP4_RR_DataFine)
					Else --impianto
						Insert Into xNoleggioImpiantoSviluppo(Id_xNoleggioImpianto, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP4', @DataScadenza, @EP4_RR_DataInizio, @EP4_RR_DataFine)
					If @@RowCount < 1 
						Begin
							Set @nReturn = -34
							GoTo Fine_Funzione
						End
					Else 
						Set @EP4_RR_DataInizio = DateAdd(D, 1, @EP4_RR_DataFine)
						Set @EP4_Scad2Ins -= 1
				End
			--extra plafond contatore 5
			If (@FattoreMksFattura_C5 > 0) And (@i % @FattoreMksFattura_C5 = 0)
				Begin
					Set @EP5_RR_DataInizio = Case When @DataInizio > @EP5_RR_DataInizio Then @DataInizio Else @EP5_RR_DataInizio End
					Set @EP5_RR_DataFine = Case When @TipoFatt = 0 Then dbo.afn_dt_Datetime2Date(DateAdd(M, @FattoreMksFattura_C5, @DataScadenza) - 1) Else @DataScadenza End
					If @Impianto = 0 --matricola
						Insert Into xNoleggioMatricolaSviluppo(Id_xNoleggioMatricola, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP5', @DataScadenza, @EP5_RR_DataInizio, @EP5_RR_DataFine)
					Else --impianto
						Insert Into xNoleggioImpiantoSviluppo(Id_xNoleggioImpianto, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP5', @DataScadenza, @EP5_RR_DataInizio, @EP5_RR_DataFine)
					If @@RowCount < 1 
						Begin
							Set @nReturn = -35
							GoTo Fine_Funzione
						End
					Else 
						Set @EP5_RR_DataInizio = DateAdd(D, 1, @EP5_RR_DataFine)
						Set @EP5_Scad2Ins -= 1
				End
			--extra plafond contatore 6
			If (@FattoreMksFattura_C6 > 0) And (@i % @FattoreMksFattura_C6 = 0)
				Begin
					Set @EP6_RR_DataInizio = Case When @DataInizio > @EP6_RR_DataInizio Then @DataInizio Else @EP6_RR_DataInizio End
					Set @EP6_RR_DataFine = Case When @TipoFatt = 0 Then dbo.afn_dt_Datetime2Date(DateAdd(M, @FattoreMksFattura_C6, @DataScadenza) - 1) Else @DataScadenza End
					If @Impianto = 0 --matricola
						Insert Into xNoleggioMatricolaSviluppo(Id_xNoleggioMatricola, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP6', @DataScadenza, @EP6_RR_DataInizio, @EP6_RR_DataFine)
					Else --impianto
						Insert Into xNoleggioImpiantoSviluppo(Id_xNoleggioImpianto, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine) 
							Values (@Id_Parent, 'EP6', @DataScadenza, @EP6_RR_DataInizio, @EP6_RR_DataFine)
					If @@RowCount < 1 
						Begin
							Set @nReturn = -36
							GoTo Fine_Funzione
						End
					Else 
						Set @EP6_RR_DataInizio = DateAdd(D, 1, @EP6_RR_DataFine)
						Set @EP6_Scad2Ins -= 1
				End

			if @TipoFatt = 0
				set @i = @i + 1

		End -- while @i < @MesiNoleggio

	--inserimento scadenze: seconda parte 
	-- solo per periodi di fatturazione posticipati rispetto ai mesi di noleggio
	-- solo 1 eventuale ulteriore scadenza per tipo (QFN, QFP, EP1, ....)
	If @QFN_Scad2Ins = 1 Exec @RC2 = [dbo].[xasp_cca_noleggiosviluppo_p2] @Impianto, @Id_Parent, 'QFN', @DataInizio, @FattoreMksQFNoleggio, @QFN_RR_DataInizio, @TipoFatt, @nReturn Output
	If (@nReturn < 0) GoTo Fine_Funzione																																																	  
	If @QFP_Scad2Ins = 1 Exec @RC2 = [dbo].[xasp_cca_noleggiosviluppo_p2] @Impianto, @Id_Parent, 'QFP', @DataInizio, @FattoreMksQFPlafond , @QFP_RR_DataInizio, @TipoFatt, @nReturn Output
	If (@nReturn < 0) GoTo Fine_Funzione																																																	  
	If @EP1_Scad2Ins = 1 Exec @RC2 = [dbo].[xasp_cca_noleggiosviluppo_p2] @Impianto, @Id_Parent, 'EP1', @DataInizio, @FattoreMksFattura_C1, @EP1_RR_DataInizio, @TipoFatt, @nReturn Output
	If (@nReturn < 0) GoTo Fine_Funzione																																																	  
	If @EP2_Scad2Ins = 1 Exec @RC2 = [dbo].[xasp_cca_noleggiosviluppo_p2] @Impianto, @Id_Parent, 'EP2', @DataInizio, @FattoreMksFattura_C2, @EP2_RR_DataInizio, @TipoFatt, @nReturn Output
	If (@nReturn < 0) GoTo Fine_Funzione																																																	  
	If @EP3_Scad2Ins = 1 Exec @RC2 = [dbo].[xasp_cca_noleggiosviluppo_p2] @Impianto, @Id_Parent, 'EP3', @DataInizio, @FattoreMksFattura_C3, @EP3_RR_DataInizio, @TipoFatt, @nReturn Output
	If (@nReturn < 0) GoTo Fine_Funzione																																																	  
	If @EP4_Scad2Ins = 1 Exec @RC2 = [dbo].[xasp_cca_noleggiosviluppo_p2] @Impianto, @Id_Parent, 'EP4', @DataInizio, @FattoreMksFattura_C4, @EP4_RR_DataInizio, @TipoFatt, @nReturn Output
	If (@nReturn < 0) GoTo Fine_Funzione																																																	  
	If @EP5_Scad2Ins = 1 Exec @RC2 = [dbo].[xasp_cca_noleggiosviluppo_p2] @Impianto, @Id_Parent, 'EP5', @DataInizio, @FattoreMksFattura_C5, @EP5_RR_DataInizio, @TipoFatt, @nReturn Output
	If (@nReturn < 0) GoTo Fine_Funzione																																																	  
	If @EP6_Scad2Ins = 1 Exec @RC2 = [dbo].[xasp_cca_noleggiosviluppo_p2] @Impianto, @Id_Parent, 'EP6', @DataInizio, @FattoreMksFattura_C6, @EP6_RR_DataInizio, @TipoFatt, @nReturn Output
	If (@nReturn < 0) GoTo Fine_Funzione
	
	----------------------------------------------------------------------------------------------------------
	-- COMPLETAMENTO CCA - Completamento modulo Noleggi
	-- 25-07-2018: fatturazione noleggi
	----------------------------------------------------------------------------------------------------------
	-- Una volta sviluppate tutte le nuove scadenze, vanno eliminate quelle che, a parità di tutti i valori, 
	-- sono già presenti come evase (Id_DOTes > 0); in caso contrario, ci ritroveremmo in uno scenario nel 
	-- quale una qualsiasi modifica, anche stupida, alla configurazione delle matricole\impianti nei contratti 
	-- renderebbe nuovamente visibili, come se fossero "da fatturare", le scadenze già fatturate.

	-- Matricole
	Delete
	From
		xNoleggioMatricolaSviluppo
	Where
		Id_xNoleggioMatricolaSviluppo In 
		(
			Select 
				Id_xNoleggioMatricolaSviluppo
			From (
				Select
					Posizione = 
						Row_Number() Over (Partition By Id_xNoleggioMatricola, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine
						Order By DataScadenza, TipoScadenza, Id_DOTes Desc)
					, Id_xNoleggioMatricolaSviluppo
				From 
					xNoleggioMatricolaSviluppo
				) A
			Where 
				Posizione > 1
		)

	-- Impianti
	Delete
	From
		xNoleggioImpiantoSviluppo
	Where
		Id_xNoleggioImpiantoSviluppo In 
		(
			Select 
				Id_xNoleggioImpiantoSviluppo
			From (
				Select
					Posizione = 
						Row_Number() Over (Partition By Id_xNoleggioImpianto, TipoScadenza, DataScadenza, RR_DataInizio, RR_DataFine
						Order By DataScadenza, TipoScadenza, Id_DOTes Desc)
					, Id_xNoleggioImpiantoSviluppo
				From 
					xNoleggioImpiantoSviluppo
				) A
			Where 
				Posizione > 1
		)
	----------------------------------------------------------------------------------------------------------

	--return
	Set @nReturn = 1

Fine_Funzione:
	Return @nReturn
GO

--restituisce la descrizione del tipo scadenza per la riga da fatturare
Create Function [dbo].[xafn_cca_noleggiofattura_get_ds_scadenza](
   @NotaAccredito as Bit
	,@Impianto as Bit
	,@Id_Parent as Integer
	,@TipoScadenza as Char(3)
) 
Returns Varchar(max)
As 
	Begin
		--dichiarazione variabili
		Declare @Ds_TipoScadenza Varchar(max) = ''
		--assegnazione descrizione tipo scadenza
		if @NotaAccredito = 1 -- 25-07-2018
			begin
				set @Ds_TipoScadenza = 'Recupero Residuo Plafond'
				goto end_func
			end

		If (@TipoScadenza = 'QFN') Set @Ds_TipoScadenza = 'Quota Fissa Noleggio'
		If (@TipoScadenza = 'QFP') Set @Ds_TipoScadenza = 'Quota Fissa Plafond'
		If (@TipoScadenza = 'EP1') 
			Begin
				--ricerca descrizione dell'articolo associato al contatore 1
				If (@Impianto = 0)
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioMatricola NM Inner Join AR On NM.Cd_AR_C1 = AR.Cd_AR Where Id_xNoleggioMatricola = @Id_Parent
				Else
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioImpianto  NI Inner Join AR On NI.Cd_AR_C1 = AR.Cd_AR Where Id_xNoleggioImpianto  = @Id_Parent
				--aggiunge prefisso
				Set @Ds_TipoScadenza = 'Conguaglio ' + @Ds_TipoScadenza
			End
		If (@TipoScadenza = 'EP2') 
			Begin
				--ricerca descrizione dell'articolo associato al contatore 2
				If (@Impianto = 0)
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioMatricola NM Inner Join AR On NM.Cd_AR_C2 = AR.Cd_AR Where Id_xNoleggioMatricola = @Id_Parent
				Else
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioImpianto  NI Inner Join AR On NI.Cd_AR_C2 = AR.Cd_AR Where Id_xNoleggioImpianto  = @Id_Parent
				--aggiunge prefisso
				Set @Ds_TipoScadenza = 'Conguaglio ' + @Ds_TipoScadenza
			End
		If (@TipoScadenza = 'EP3') 
			Begin
				--ricerca descrizione dell'articolo associato al contatore 3
				If (@Impianto = 0)
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioMatricola NM Inner Join AR On NM.Cd_AR_C3 = AR.Cd_AR Where Id_xNoleggioMatricola = @Id_Parent
				Else
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioImpianto  NI Inner Join AR On NI.Cd_AR_C3 = AR.Cd_AR Where Id_xNoleggioImpianto  = @Id_Parent
				--aggiunge prefisso
				Set @Ds_TipoScadenza = 'Conguaglio ' + @Ds_TipoScadenza
			End
		If (@TipoScadenza = 'EP4') 
			Begin
				--ricerca descrizione dell'articolo associato al contatore 4
				If (@Impianto = 0)
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioMatricola NM Inner Join AR On NM.Cd_AR_C4 = AR.Cd_AR Where Id_xNoleggioMatricola = @Id_Parent
				Else
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioImpianto  NI Inner Join AR On NI.Cd_AR_C4 = AR.Cd_AR Where Id_xNoleggioImpianto  = @Id_Parent
				--aggiunge prefisso
				Set @Ds_TipoScadenza = 'Conguaglio ' + @Ds_TipoScadenza
			End
		If (@TipoScadenza = 'EP5') 
			Begin
				--ricerca descrizione dell'articolo associato al contatore 5
				If (@Impianto = 0)
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioMatricola NM Inner Join AR On NM.Cd_AR_C5 = AR.Cd_AR Where Id_xNoleggioMatricola = @Id_Parent
				Else
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioImpianto  NI Inner Join AR On NI.Cd_AR_C5 = AR.Cd_AR Where Id_xNoleggioImpianto  = @Id_Parent
				--aggiunge prefisso
				Set @Ds_TipoScadenza = 'Conguaglio ' + @Ds_TipoScadenza
			End
		If (@TipoScadenza = 'EP6') 
			Begin
				--ricerca descrizione dell'articolo associato al contatore 6
				If (@Impianto = 0)
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioMatricola NM Inner Join AR On NM.Cd_AR_C6 = AR.Cd_AR Where Id_xNoleggioMatricola = @Id_Parent
				Else
					Select @Ds_TipoScadenza = AR.Descrizione From xNoleggioImpianto  NI Inner Join AR On NI.Cd_AR_C6 = AR.Cd_AR Where Id_xNoleggioImpianto  = @Id_Parent
				--aggiunge prefisso
				Set @Ds_TipoScadenza = 'Conguaglio ' + @Ds_TipoScadenza
			End
		--return
end_func:
		Return @Ds_TipoScadenza
	End
GO

--verifica se l'importo della quota fissa plafond va liquidato o meno
Create Function [dbo].[xafn_cca_noleggiofattura_check_qfp](
	@Impianto as Bit
	, @Id_Parent as Integer
	, @DataScadenza Smalldatetime
) 
returns bit
As 
	begin
		--dichiarazione variabili
		declare @InizioFattQFPlafond as tinyint
		      , @Cd_AR_C1 as varchar(20), @PlafondIniziale_C1 as int, @RPI1 as int
		      , @Cd_AR_C2 as varchar(20), @PlafondIniziale_C2 as int, @RPI2 as int
		      , @Cd_AR_C3 as varchar(20), @PlafondIniziale_C3 as int, @RPI3 as int
		      , @Cd_AR_C4 as varchar(20), @PlafondIniziale_C4 as int, @RPI4 as int
		      , @Cd_AR_C5 as varchar(20), @PlafondIniziale_C5 as int, @RPI5 as int
		      , @Cd_AR_C6 as varchar(20), @PlafondIniziale_C6 as int, @RPI6 as int
					, @ret  as bit = 0

	  --riga lettura da testare
		If @Impianto = 0
			select 
				top 1 @InizioFattQFPlafond = N.InizioFattQFPlafond
						 ,@Cd_AR_C1	= NM.Cd_AR_C1
						 ,@PlafondIniziale_C1 = PlafondIniziale_C1
						 ,@RPI1 = isnull(NM.PlafondIniziale_C1 - (isnull(CL.Lettura_C1, 0) - NM.LetturaPartenza_C1), 0)
						 ,@Cd_AR_C2	= NM.Cd_AR_C2
						 ,@PlafondIniziale_C2 = PlafondIniziale_C2
						 ,@RPI2 = isnull(NM.PlafondIniziale_C2 - (isnull(CL.Lettura_C2, 0) - NM.LetturaPartenza_C2), 0)
						 ,@Cd_AR_C3	= NM.Cd_AR_C3
						 ,@PlafondIniziale_C3 = PlafondIniziale_C3
						 ,@RPI3 = isnull(NM.PlafondIniziale_C3 - (isnull(CL.Lettura_C3, 0) - NM.LetturaPartenza_C3), 0)
						 ,@Cd_AR_C4	= NM.Cd_AR_C4
						 ,@PlafondIniziale_C4 = PlafondIniziale_C4
						 ,@RPI4 = isnull(NM.PlafondIniziale_C4 - (isnull(CL.Lettura_C4, 0) - NM.LetturaPartenza_C4), 0)
						 ,@Cd_AR_C5	= NM.Cd_AR_C5
						 ,@PlafondIniziale_C5 = PlafondIniziale_C5
						 ,@RPI5 = isnull(NM.PlafondIniziale_C5 - (isnull(CL.Lettura_C5, 0) - NM.LetturaPartenza_C5), 0)
						 ,@Cd_AR_C6	= NM.Cd_AR_C6
						 ,@PlafondIniziale_C6 = PlafondIniziale_C6
						 ,@RPI6 = isnull(NM.PlafondIniziale_C6 - (isnull(CL.Lettura_C6, 0) - NM.LetturaPartenza_C6), 0)
			from
				xNoleggio N
				inner join xNoleggioMatricola NM on NM.Id_xNoleggio  = N .Id_xNoleggio
				left  join xContatoreLettura  CL on CL.Cd_xNoleggio  = N .Cd_xNoleggio
																				and CL.Cd_AR         = NM.Cd_AR 
																				and CL.Cd_xMatricola = NM.Cd_xMatricola
																				and CL.DataLettura <= @DataScadenza
			where
				NM.Id_xNoleggioMatricola = @Id_Parent
				--and CL.DataLettura <= @DataScadenza
			order by
				CL.DataLettura desc

		If @Impianto = 1
			select 
				top 1 @InizioFattQFPlafond = N.InizioFattQFPlafond
						 ,@Cd_AR_C1	= NI.Cd_AR_C1
						 ,@PlafondIniziale_C1 = PlafondIniziale_C1
						 ,@RPI1 = isnull(NI.PlafondIniziale_C1 - (isnull(CL.Lettura_C1, 0) - NI.LetturaPartenza_C1), 0)
						 ,@Cd_AR_C2	= NI.Cd_AR_C2
						 ,@PlafondIniziale_C2 = PlafondIniziale_C2
						 ,@RPI2 = isnull(NI.PlafondIniziale_C2 - (isnull(CL.Lettura_C2, 0) - NI.LetturaPartenza_C2), 0)
						 ,@Cd_AR_C3	= NI.Cd_AR_C3
						 ,@PlafondIniziale_C3 = PlafondIniziale_C3
						 ,@RPI3 = isnull(NI.PlafondIniziale_C3 - (isnull(CL.Lettura_C3, 0) - NI.LetturaPartenza_C3), 0)
						 ,@Cd_AR_C4	= NI.Cd_AR_C4
						 ,@PlafondIniziale_C4 = PlafondIniziale_C4
						 ,@RPI4 = isnull(NI.PlafondIniziale_C4 - (isnull(CL.Lettura_C4, 0) - NI.LetturaPartenza_C4), 0)
						 ,@Cd_AR_C5	= NI.Cd_AR_C5
						 ,@PlafondIniziale_C5 = PlafondIniziale_C5
						 ,@RPI5 = isnull(NI.PlafondIniziale_C5 - (isnull(CL.Lettura_C5, 0) - NI.LetturaPartenza_C5), 0)
						 ,@Cd_AR_C6	= NI.Cd_AR_C6
						 ,@PlafondIniziale_C6 = PlafondIniziale_C6
						 ,@RPI6 = isnull(NI.PlafondIniziale_C6 - (isnull(CL.Lettura_C6, 0) - NI.LetturaPartenza_C6), 0)
			from
				xNoleggio N
				inner join xNoleggioImpianto NI on NI.Id_xNoleggio   = N .Id_xNoleggio
				left  join xContatoreLettura  CL on CL.Cd_xNoleggio  = N .Cd_xNoleggio
																				and CL.Cd_xImpianto  = NI.Cd_xImpianto
																				and CL.DataLettura <= @DataScadenza
			where
				NI.Id_xNoleggioImpianto = @Id_Parent
				--and CL.DataLettura <= @DataScadenza
			order by
				CL.DataLettura desc

		--in assenza di contatori, la quota fissa plafond non va mai liquidata
		if (@Cd_AR_C1 is null) and (@Cd_AR_C2 is null) and (@Cd_AR_C3 is null) and
			 (@Cd_AR_C4 is null) and (@Cd_AR_C5 is null) and (@Cd_AR_C6 is null)
			goto exit_func

		--sistemazione valori
		set @RPI1 = iif(@RPI1 < 0, 0, @RPI1)
		set @RPI2 = iif(@RPI2 < 0, 0, @RPI2)
		set @RPI3 = iif(@RPI3 < 0, 0, @RPI3)
		set @RPI4 = iif(@RPI4 < 0, 0, @RPI4)
		set @RPI5 = iif(@RPI5 < 0, 0, @RPI5)
		set @RPI6 = iif(@RPI6 < 0, 0, @RPI6)

		--verifica liquidazione quota fissa plafond
		if @InizioFattQFPlafond = 1 --appena esaurito un plafond iniziale
			set @ret = iif((@PlafondIniziale_C1 = 0) or (@PlafondIniziale_C1 > 0 and @RPI1 = 0),
								 1, 
			           iif((@PlafondIniziale_C2 = 0) or (@PlafondIniziale_C2 > 0 and @RPI2 = 0),
								 1, 
                 iif((@PlafondIniziale_C3 = 0) or (@PlafondIniziale_C3 > 0 and @RPI3 = 0),
								 1, 
                 iif((@PlafondIniziale_C4 = 0) or (@PlafondIniziale_C4 > 0 and @RPI4 = 0),
								 1, 
                 iif((@PlafondIniziale_C5 = 0) or (@PlafondIniziale_C5 > 0 and @RPI5 = 0),
								 1, 
                 iif((@PlafondIniziale_C6 = 0) or (@PlafondIniziale_C6 > 0 and @RPI6 = 0),
								 1, 
								 0))))))

		if @InizioFattQFPlafond = 2 --quando tutti i plafond iniziali sono stati esauriti
			set @ret = iif((@PlafondIniziale_C1 = 0) or (@PlafondIniziale_C1 > 0 and @RPI1 = 0),
			           iif((@PlafondIniziale_C2 = 0) or (@PlafondIniziale_C2 > 0 and @RPI2 = 0),
                 iif((@PlafondIniziale_C3 = 0) or (@PlafondIniziale_C3 > 0 and @RPI3 = 0),
                 iif((@PlafondIniziale_C4 = 0) or (@PlafondIniziale_C4 > 0 and @RPI4 = 0),
                 iif((@PlafondIniziale_C5 = 0) or (@PlafondIniziale_C5 > 0 and @RPI5 = 0),
                 iif((@PlafondIniziale_C6 = 0) or (@PlafondIniziale_C6 > 0 and @RPI6 = 0),
								 1, 0), 0), 0), 0), 0), 0)

		--return
exit_func:
		return @ret
	end
GO

--restituisce l'importo del tipo scadenza per la riga da fatturare
Create Function [dbo].[xafn_cca_noleggiofattura_get_importo](
	 @TipoValoreDaRestituire as Char(1)
	,@NotaAccredito as Bit
	,@Impianto as Bit
	,@Id_Parent as Integer
	,@TipoScadenza as Char(3)
	,@RR_DataInizio as Smalldatetime
	,@RR_DataFine as Smalldatetime
) 
Returns Numeric(18,6)
As 
	Begin
		--dichiarazione variabili
		Declare @Quantita					Numeric(18,6) = 0
		Declare @ImportoScadenza	Numeric(18,6) = 0
		Declare @Valore						Numeric(18,6) = 0

		--assegnazione importo in base a: 
		-- 1. tipo documento (fattura o nota di accredito)
		-- 2. tipo scadenza  (quota fissa noleggio, quota fissa plafond o extra-plafond dei vari contatori)
		-- 3. elemento       (matricola \ impianto)

		if (@NotaAccredito = 0) and (@TipoScadenza = 'QFN') and (@Impianto = 0)
				Select @Quantita = 1, @ImportoScadenza = NM.QuotaFissaNoleggio From xNoleggioMatricola NM Where Id_xNoleggioMatricola = @Id_Parent

		if (@NotaAccredito = 0) and (@TipoScadenza = 'QFN') and (@Impianto = 1)
				Select @Quantita = 1, @ImportoScadenza = NI.QuotaFissaNoleggio From xNoleggioImpianto  NI Where Id_xNoleggioImpianto  = @Id_Parent

		if (@NotaAccredito = 0) and (@TipoScadenza = 'QFP')
				Begin
					--ricerca quota fissa plafond nella riga matricola o impianto
					--05/06/2018: l'importo dipende anche dal parametro di testa "Fatturazione Quota Fissa Plafond":
					--            se = 1, allora va verificato se alla data scadenza è stato esaurito almeno un Plafond Iniziale
					--            se = 2, allora va verificato se alla data scadenza sono stati esauriti i Plafond Iniziali di tutti i contatori
					Declare @FattQFPlafond As Bit = 0

					Set @FattQFPlafond = [dbo].[xafn_cca_noleggiofattura_check_qfp](@Impianto, @Id_Parent, @RR_DataFine)

					If @FattQFPlafond = 0
						Begin
							Set @Quantita					= 0
							Set @ImportoScadenza	= 0
						End
					Else
						Begin
							If (@Impianto = 0)
								Select @Quantita = 1, @ImportoScadenza = NM.QuotaFissaPlafond From xNoleggioMatricola NM Where Id_xNoleggioMatricola = @Id_Parent
							Else
								Select @Quantita = 1, @ImportoScadenza = NI.QuotaFissaPlafond From xNoleggioImpianto  NI Where Id_xNoleggioImpianto  = @Id_Parent
						End
				End

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP1') and (@Impianto = 0)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C1, 0)), 0), @ImportoScadenza = IsNull(NM.Prezzo_C1, 0)
				From xNoleggioMatricola NM 
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NM.Cd_AR = CL.Cd_AR And NM.Cd_xMatricola = CL.Cd_xMatricola And NM.Cd_AR_C1 = CL.Cd_AR_C1
				Where NM.Id_xNoleggioMatricola = @Id_Parent
					And IsNull(CL.ExtraPlafond_C1, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NM.Id_xNoleggioMatricola, NM.Prezzo_C1

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP1') and (@Impianto = 1)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C1, 0)), 0), @ImportoScadenza = IsNull(NI.Prezzo_C1, 0)
				From xNoleggioImpianto NI 
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NI.Cd_xImpianto = CL.Cd_xImpianto And NI.Cd_AR_C1 = CL.Cd_AR_C1
				Where NI.Id_xNoleggioImpianto = @Id_Parent
					And IsNull(CL.ExtraPlafond_C1, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NI.Id_xNoleggioImpianto, NI.Prezzo_C1

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP2') and (@Impianto = 0)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C2, 0)), 0), @ImportoScadenza = IsNull(NM.Prezzo_C2, 0)
				From xNoleggioMatricola NM 
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NM.Cd_AR = CL.Cd_AR And NM.Cd_xMatricola = CL.Cd_xMatricola And NM.Cd_AR_C2 = CL.Cd_AR_C2
				Where NM.Id_xNoleggioMatricola = @Id_Parent
					And IsNull(CL.ExtraPlafond_C2, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NM.Id_xNoleggioMatricola, NM.Prezzo_C2

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP2') and (@Impianto = 1)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C2, 0)), 0), @ImportoScadenza = IsNull(NI.Prezzo_C2, 0)
				From xNoleggioImpianto NI 
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NI.Cd_xImpianto = CL.Cd_xImpianto And NI.Cd_AR_C2 = CL.Cd_AR_C2
				Where NI.Id_xNoleggioImpianto = @Id_Parent
					And IsNull(CL.ExtraPlafond_C2, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NI.Id_xNoleggioImpianto, NI.Prezzo_C2

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP3') and (@Impianto = 0)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C3, 0)), 0), @ImportoScadenza = IsNull(NM.Prezzo_C3, 0)
				From xNoleggioMatricola NM 
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NM.Cd_AR = CL.Cd_AR And NM.Cd_xMatricola = CL.Cd_xMatricola And NM.Cd_AR_C3 = CL.Cd_AR_C3
				Where NM.Id_xNoleggioMatricola = @Id_Parent
					And IsNull(CL.ExtraPlafond_C3, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NM.Id_xNoleggioMatricola, NM.Prezzo_C3

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP3') and (@Impianto = 1)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C3, 0)), 0), @ImportoScadenza = IsNull(NI.Prezzo_C3, 0)
				From xNoleggioImpianto NI 
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NI.Cd_xImpianto = CL.Cd_xImpianto And NI.Cd_AR_C3 = CL.Cd_AR_C3
				Where NI.Id_xNoleggioImpianto = @Id_Parent
					And IsNull(CL.ExtraPlafond_C3, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NI.Id_xNoleggioImpianto, NI.Prezzo_C3

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP4') and (@Impianto = 0)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C4, 0)), 0), @ImportoScadenza = IsNull(NM.Prezzo_C4, 0)
				From xNoleggioMatricola NM 
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NM.Cd_AR = CL.Cd_AR And NM.Cd_xMatricola = CL.Cd_xMatricola And NM.Cd_AR_C4 = CL.Cd_AR_C4
				Where NM.Id_xNoleggioMatricola = @Id_Parent
					And IsNull(CL.ExtraPlafond_C4, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NM.Id_xNoleggioMatricola, NM.Prezzo_C4

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP4') and (@Impianto = 1)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C4, 0)), 0), @ImportoScadenza = IsNull(NI.Prezzo_C4, 0)
				From xNoleggioImpianto NI 
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NI.Cd_xImpianto = CL.Cd_xImpianto And NI.Cd_AR_C4 = CL.Cd_AR_C4
				Where NI.Id_xNoleggioImpianto = @Id_Parent
					And IsNull(CL.ExtraPlafond_C4, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NI.Id_xNoleggioImpianto, NI.Prezzo_C4

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP5') and (@Impianto = 0)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C5, 0)), 0), @ImportoScadenza = IsNull(NM.Prezzo_C5, 0)
				From xNoleggioMatricola NM 
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NM.Cd_AR = CL.Cd_AR And NM.Cd_xMatricola = CL.Cd_xMatricola And NM.Cd_AR_C5 = CL.Cd_AR_C5
				Where NM.Id_xNoleggioMatricola = @Id_Parent
					And IsNull(CL.ExtraPlafond_C5, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NM.Id_xNoleggioMatricola, NM.Prezzo_C5

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP5') and (@Impianto = 1)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C5, 0)), 0), @ImportoScadenza = IsNull(NI.Prezzo_C5, 0)
				From xNoleggioImpianto NI 
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NI.Cd_xImpianto = CL.Cd_xImpianto And NI.Cd_AR_C5 = CL.Cd_AR_C5
				Where NI.Id_xNoleggioImpianto = @Id_Parent
					And IsNull(CL.ExtraPlafond_C5, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NI.Id_xNoleggioImpianto, NI.Prezzo_C5

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP6') and (@Impianto = 0)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C6, 0)), 0), @ImportoScadenza = IsNull(NM.Prezzo_C6, 0)
				From xNoleggioMatricola NM 
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NM.Cd_AR = CL.Cd_AR And NM.Cd_xMatricola = CL.Cd_xMatricola And NM.Cd_AR_C6 = CL.Cd_AR_C6
				Where NM.Id_xNoleggioMatricola = @Id_Parent
					And IsNull(CL.ExtraPlafond_C6, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NM.Id_xNoleggioMatricola, NM.Prezzo_C6

		if (@NotaAccredito = 0) and (@TipoScadenza = 'EP6') and (@Impianto = 1)
			Select @Quantita = IsNull(Sum(IsNull(CL.ExtraPlafond_C6, 0)), 0), @ImportoScadenza = IsNull(NI.Prezzo_C6, 0)
				From xNoleggioImpianto NI 
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio
					Inner Join xContatoreLettura CL On N.Cd_xNoleggio = CL.Cd_xNoleggio And NI.Cd_xImpianto = CL.Cd_xImpianto And NI.Cd_AR_C6 = CL.Cd_AR_C6
				Where NI.Id_xNoleggioImpianto = @Id_Parent
					And IsNull(CL.ExtraPlafond_C6, 0) > 0
					And (CL.DataLettura Between @RR_DataInizio And @RR_DataFine)
				Group By NI.Id_xNoleggioImpianto, NI.Prezzo_C6

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP1') and (@Impianto = 0)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NM.Prezzo_C1, 0)
				From [dbo].[xContatoreLetturaRPPMEx] CLEx
				  Inner Join xNoleggioMatricola NM 
						On CLEx.Cd_AR = NM.Cd_AR And CLEx.Cd_xMatricola = NM.Cd_xMatricola And CLEx.Cd_AR_C = NM.Cd_AR_C1
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NM.Id_xNoleggioMatricola = @Id_Parent

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP1') and (@Impianto = 1)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NI.Prezzo_C1, 0)
				From [dbo].[xContatoreLetturaRPPIEx] CLEx
				  Inner Join xNoleggioImpianto NI
						On CLEx.Cd_xImpianto = NI.Cd_xImpianto And CLEx.Cd_AR_C = NI.Cd_AR_C1
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NI.Id_xNoleggioImpianto = @Id_Parent

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP2') and (@Impianto = 0)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NM.Prezzo_C2, 0)
				From [dbo].[xContatoreLetturaRPPMEx] CLEx
				  Inner Join xNoleggioMatricola NM 
						On CLEx.Cd_AR = NM.Cd_AR And CLEx.Cd_xMatricola = NM.Cd_xMatricola And CLEx.Cd_AR_C = NM.Cd_AR_C2
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NM.Id_xNoleggioMatricola = @Id_Parent

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP2') and (@Impianto = 1)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NI.Prezzo_C2, 0)
				From [dbo].[xContatoreLetturaRPPIEx] CLEx
				  Inner Join xNoleggioImpianto NI
						On CLEx.Cd_xImpianto = NI.Cd_xImpianto And CLEx.Cd_AR_C = NI.Cd_AR_C2
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NI.Id_xNoleggioImpianto = @Id_Parent

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP3') and (@Impianto = 0)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NM.Prezzo_C3, 0)
				From [dbo].[xContatoreLetturaRPPMEx] CLEx
				  Inner Join xNoleggioMatricola NM 
						On CLEx.Cd_AR = NM.Cd_AR And CLEx.Cd_xMatricola = NM.Cd_xMatricola And CLEx.Cd_AR_C = NM.Cd_AR_C3
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NM.Id_xNoleggioMatricola = @Id_Parent

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP3') and (@Impianto = 1)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NI.Prezzo_C3, 0)
				From [dbo].[xContatoreLetturaRPPIEx] CLEx
				  Inner Join xNoleggioImpianto NI
						On CLEx.Cd_xImpianto = NI.Cd_xImpianto And CLEx.Cd_AR_C = NI.Cd_AR_C3
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NI.Id_xNoleggioImpianto = @Id_Parent

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP4') and (@Impianto = 0)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NM.Prezzo_C4, 0)
				From [dbo].[xContatoreLetturaRPPMEx] CLEx
				  Inner Join xNoleggioMatricola NM 
						On CLEx.Cd_AR = NM.Cd_AR And CLEx.Cd_xMatricola = NM.Cd_xMatricola And CLEx.Cd_AR_C = NM.Cd_AR_C4
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NM.Id_xNoleggioMatricola = @Id_Parent

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP4') and (@Impianto = 1)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NI.Prezzo_C4, 0)
				From [dbo].[xContatoreLetturaRPPIEx] CLEx
				  Inner Join xNoleggioImpianto NI
						On CLEx.Cd_xImpianto = NI.Cd_xImpianto And CLEx.Cd_AR_C = NI.Cd_AR_C4
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NI.Id_xNoleggioImpianto = @Id_Parent

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP5') and (@Impianto = 0)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NM.Prezzo_C5, 0)
				From [dbo].[xContatoreLetturaRPPMEx] CLEx
				  Inner Join xNoleggioMatricola NM 
						On CLEx.Cd_AR = NM.Cd_AR And CLEx.Cd_xMatricola = NM.Cd_xMatricola And CLEx.Cd_AR_C = NM.Cd_AR_C5
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NM.Id_xNoleggioMatricola = @Id_Parent

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP5') and (@Impianto = 1)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NI.Prezzo_C5, 0)
				From [dbo].[xContatoreLetturaRPPIEx] CLEx
				  Inner Join xNoleggioImpianto NI
						On CLEx.Cd_xImpianto = NI.Cd_xImpianto And CLEx.Cd_AR_C = NI.Cd_AR_C5
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NI.Id_xNoleggioImpianto = @Id_Parent

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP6') and (@Impianto = 0)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NM.Prezzo_C6, 0)
				From [dbo].[xContatoreLetturaRPPMEx] CLEx
				  Inner Join xNoleggioMatricola NM 
						On CLEx.Cd_AR = NM.Cd_AR And CLEx.Cd_xMatricola = NM.Cd_xMatricola And CLEx.Cd_AR_C = NM.Cd_AR_C6
					Inner Join xNoleggio N On NM.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NM.Id_xNoleggioMatricola = @Id_Parent

		if (@NotaAccredito = 1) and (@TipoScadenza = 'EP6') and (@Impianto = 1)
			Select @Quantita = IsNull(ResiduoPP, 0), @ImportoScadenza = IsNull(NI.Prezzo_C6, 0)
				From [dbo].[xContatoreLetturaRPPIEx] CLEx
				  Inner Join xNoleggioImpianto NI
						On CLEx.Cd_xImpianto = NI.Cd_xImpianto And CLEx.Cd_AR_C = NI.Cd_AR_C6
					Inner Join xNoleggio N On NI.Id_xNoleggio = N.Id_xNoleggio And CLEx.Cd_xNoleggio = N.Cd_xNoleggio
				Where NI.Id_xNoleggioImpianto = @Id_Parent

		--return
end_func:
		if @TipoValoreDaRestituire = 'Q' Set @Valore = @Quantita
		if @TipoValoreDaRestituire = 'I' Set @Valore = @ImportoScadenza

		return @Valore
	End
GO

--restituisce l'ultima lettura per il contatore
Create Function [dbo].[xafn_cca_contatore_get_ul](
	@Cd_AR_C         as varchar(20)
	, @Cd_AR         as varchar(20)
	, @Cd_xMatricola as varchar(40)
	, @Cd_xImpianto  as char(10)
	, @DataScadenza  as smalldatetime
) 
returns int
as 
	begin
		--dichiarazione variabili
		declare @UltimaLettura int = 0
		
		--ultima lettura matricola
		if @Cd_xImpianto is null
			begin
				Select Top 1 @UltimaLettura= Lettura
				From (
					Select DataLettura, Lettura_C1 As Lettura
						From xContatoreLettura
						Where Cd_AR = @Cd_AR
							And Cd_xMatricola = @Cd_xMatricola
							And Cd_AR_C1 = @Cd_AR_C
							And Cd_xImpianto Is Null
					Union
					Select DataLettura, Lettura_C2 As Lettura
						From xContatoreLettura
						Where Cd_AR = @Cd_AR
							And Cd_xMatricola = @Cd_xMatricola
							And Cd_AR_C2 = @Cd_AR_C
							And Cd_xImpianto Is Null
					Union
					Select DataLettura, Lettura_C3 As Lettura
						From xContatoreLettura
						Where Cd_AR = @Cd_AR
							And Cd_xMatricola = @Cd_xMatricola
							And Cd_AR_C3 = @Cd_AR_C
							And Cd_xImpianto Is Null
					Union
					Select DataLettura, Lettura_C4 As Lettura
						From xContatoreLettura
						Where Cd_AR = @Cd_AR
							And Cd_xMatricola = @Cd_xMatricola
							And Cd_AR_C4 = @Cd_AR_C
							And Cd_xImpianto Is Null
					Union
					Select DataLettura, Lettura_C5 As Lettura
						From xContatoreLettura
						Where Cd_AR = @Cd_AR
							And Cd_xMatricola = @Cd_xMatricola
							And Cd_AR_C5 = @Cd_AR_C
							And Cd_xImpianto Is Null
					Union
					Select DataLettura, Lettura_C6 As Lettura
						From xContatoreLettura
						Where Cd_AR = @Cd_AR
							And Cd_xMatricola = @Cd_xMatricola
							And Cd_AR_C6 = @Cd_AR_C
							And Cd_xImpianto Is Null
					Union
					Select Null As DataLettura, 0 As Lettura
				) A
				Where DataLettura <= @DataScadenza
				Order By DataLettura Desc, Lettura Desc
			end

		--ultima lettura impianto
		if @Cd_xImpianto is not null
			begin
				Select Top 1 @UltimaLettura= Lettura
				From (
					Select DataLettura, Lettura_C1 As Lettura
						From xContatoreLettura
						Where Cd_AR Is Null
							And Cd_xMatricola Is Null
							And Cd_AR_C1 = @Cd_AR_C
							And Cd_xImpianto  = @Cd_xImpianto
					Union
					Select DataLettura, Lettura_C2 As Lettura
						From xContatoreLettura
						Where Cd_AR Is Null
							And Cd_xMatricola Is Null
							And Cd_AR_C2 = @Cd_AR_C
							And Cd_xImpianto  = @Cd_xImpianto
					Union
					Select DataLettura, Lettura_C3 As Lettura
						From xContatoreLettura
						Where Cd_AR Is Null
							And Cd_xMatricola Is Null
							And Cd_AR_C3 = @Cd_AR_C
							And Cd_xImpianto  = @Cd_xImpianto
					Union
					Select DataLettura, Lettura_C4 As Lettura
						From xContatoreLettura
						Where Cd_AR Is Null
							And Cd_xMatricola Is Null
							And Cd_AR_C4 = @Cd_AR_C
							And Cd_xImpianto  = @Cd_xImpianto
					Union
					Select DataLettura, Lettura_C5 As Lettura
						From xContatoreLettura
						Where Cd_AR Is Null
							And Cd_xMatricola Is Null
							And Cd_AR_C5 = @Cd_AR_C
							And Cd_xImpianto  = @Cd_xImpianto
					Union
					Select DataLettura, Lettura_C6 As Lettura
						From xContatoreLettura
						Where Cd_AR Is Null
							And Cd_xMatricola Is Null
							And Cd_AR_C6 = @Cd_AR_C
							And Cd_xImpianto  = @Cd_xImpianto
					Union
					Select Null As DataLettura, 0 As Lettura
				) A
				Where DataLettura <= @DataScadenza
				Order By DataLettura Desc, Lettura Desc
			end
			
		--return
		return @UltimaLettura
	end
GO

--restituisce una descrizione con i documenti che hanno evaso la lettura
Create Function [dbo].[xafn_cca_noleggiofattura_get_evasione](
	@Id_xContatoreLettura as Int
) 
Returns Varchar(100)
As 
	Begin
		--dichiarazione variabili
		declare @Cnt tinyint = 0
		declare @Id_DOTes int = 0
		declare @Ds_DOTes varchar(100) = ''

		--verifica quanti documenti hanno evaso la lettura
		select 
			@Cnt = count(*) 
		from 
			xContatoreLetturaEvasione 
		where 
			Id_xContatoreLettura = @Id_xContatoreLettura
			and Id_DOTes is not null

		--se nessun documento ha evaso la lettura esce
		if @Cnt = 0 goto end_proc

		--verifica il primo documento di evasione
		select 
			top 1 @Id_DOTes = Id_DOTes 
		from 
			xContatoreLetturaEvasione 
		where 
			Id_xContatoreLettura = @Id_xContatoreLettura 
		order by 
			Id_DOTes -- desc

		--stringa con i riferimenti del primo (o unico) documento di evasione
		select 
			@Ds_DOTes = Rtrim(Ltrim(DOTes.Cd_Do)) 
									+ ' ' 
									+ Rtrim(Ltrim(DOTes.NumeroDoc)) 
									+ 
									' del ' 
									+ Convert(Varchar(2), Day	(DOTes.DataDoc))
									+ '-' 
									+ Convert(Varchar(2), Month(DOTes.DataDoc)) 
									+ '-' 
									+ Convert(Varchar(4), Year	(DOTes.DataDoc))
		from
			DOTes
		where
			Id_DoTes = @Id_DOTes

	  --prefisso in base al numero di documenti che hanno evaso la lettura
		if @Cnt = 1 set @Ds_DOTes = 'Evasa da : ' + @Ds_DOTes
		if @Cnt > 1 set @Ds_DOTes = 'Evasa da [più documenti] : ' + @Ds_DOTes

		--return
end_proc:
		return @Ds_DOTes
	End
GO

-- restituisce l'elenco delle attività aperte disponibili per la risorsa e per l'operatore passati come parametri
Create Function xGAC_RDTicketAttivita_RisorsaOperatore(
	@Cd_Operatore varchar(20)
	, @Cd_PrRisorsa varchar(20)
	, @GestisciTicket bit
) returns @out table (Id_xRDTicket int, Id_xRDTicketAttivita int)
As 
	Begin
		--declare @out table (Id_xRDTicket int, Id_xRDTicketAttivita int)
		--declare @Cd_Operatore varchar(20) 
		--declare @Cd_PrRisorsa varchar(20) 
		--declare @GestisciTicket bit

		--set @Cd_Operatore		= 'ARONNE'
		--set @Cd_PrRisorsa		= 'ASS01'
		--set @GestisciTicket		= 0

		-- Seleziona l'impostazione di Tutti gli Operatori Disponibili: 
		--			se vero i ticket mostrati all'operatore saranno tutti quelli che possono essere prodotti sulla risorsa
		--			se falso i ticket mostrati all'operatore saranno tutti quelli che possono essere prodotti sulla risorsa e assegnati all'operatore
		declare @tod bit 
		set @tod = (select top 1 case when @GestisciTicket = 0 then TuttiOperatoriDisp else AssistenzaTuttiOperatoriDisp end from xImpostazione)

		-- RISORSE: carica l'elenco di tutte le attività producibili con la risorsa -------------------------------------------------------------------
		insert into @out (Id_xRDTicket, Id_xRDTicketAttivita)
		select 
			t.Id_xRDTicket
			, ta.Id_xRDTicketAttivita
		from 
			xRDTicket							t
				inner join xRDTicketAttivita	ta on t.Id_xRDTicket = ta.Id_xRDTicket
		where
			-- Ticket aperto
			t.Chiuso = 0
			-- Esclusione dei ticket di assistenza
			And t.GestisciTicket = @GestisciTicket
			-- Attività aperta
			And ta.Chiuso = 0
			-- RISORSA E ATTIVITA -----------------------------------------------------------------------------------------------------------------------------------------
			-- Seleziona le attività della risorsa solo se definita nell'attività
			And 
				(
					-- 1) Seleziona tutte le attività che possono essere prodotte con la risorsa	
					(
						ta.Cd_PrRisorsa = @Cd_PrRisorsa 
					) Or
					-- 2) Seleziona tutte le attività che possono essere prodotte con la risorsa ma non specificata direttamente sull'attività del ticket
					(
						ta.Cd_PrRisorsa is null 
						And
						ta.Cd_PrAttivita in (
												-- Attività collegata direttamente alla risorsa
												select Cd_PrAttivita 
												from PRAttivita where Cd_PrRisorsa = @Cd_PrRisorsa
												-- Attività collegata al gruppo di risorsa che contiene la risorsa
												union 
												select Cd_PrAttivita 
												from PRAttivita						a
														inner join PRRisorsa		r	on a.Cd_PrRisorsa = r.Cd_PrRisorsa 
														inner join PRRisorsaLink	rl	on r.Cd_PrRisorsa = rl.Cd_PrRisorsa_P
												where 
													r.Gruppo = 1 
													And rl.Cd_PrRisorsa_C = @Cd_PrRisorsa
											)
					)
				)
			-- OPERATORI --------------------------------------------------------------------------------------------------------------------------------------------------
			And
				(
					-- Tutti gli Operatori Disponibili VERO = Tutte le attività dei ticket della risorsa
					@tod = 1
					Or
					-- L'attività è assegnata direttamente all'operatore
					ta.Id_xRDTicketAttivita in (
						select tao.Id_xRDTicketAttivita from xRDTicketAttivitaOperatore tao inner join xOperatore o on tao.Cd_xOperatore = o.Cd_xOperatore where o.Cd_OperatoreArca = @Cd_Operatore
					)
				)
		Return 
	End
GO

CREATE PROCEDURE xasp_DORig_CheckSottoCommessa
		@Mode smallint
		, @Cd_DOSottoCommessa varchar(20)
		, @nReturn int output
as
begin
	-- Dichiarazione variabili
	declare
		@DataFineReale		smalldatetime
		, @xBloccaModifica	bit
		, @xBloccaElimina	bit

	set @nReturn = 1 -- Di default la sottocommessa è modificabile/eliminabile

	if @Cd_DOSottoCommessa is null return

	select
		@DataFineReale		= DataFineReale
		, @xBloccaModifica	= xBloccaModifica
		, @xBloccaElimina	= xBloccaElimina
	from DOSottoCommessa
	where Cd_DOSottoCommessa = @Cd_DOSottoCommessa

	if @DataFineReale is not null begin
		if @Mode = 1 and @xBloccaModifica = 1 begin -- EDIT
			set @nReturn = -1 -- Modifica bloccata!
		end
		else if @Mode = 2 and @xBloccaElimina = 1 begin -- DELETE
			set @nReturn = -2 -- Eliminazione bloccata!
		end
	end
end
GO

create function xafn_ccan_GetImportoContratto(
	@Id_xContratto		int
) returns numeric(18,6) as begin
	declare @ImportoContratto numeric(18,6) = 0
	declare @PercISTAT numeric(18,2)
	declare @ImportoTmp numeric(18,6)

	-- Calcolo percentuale ISTAT
	select @PercISTAT = IsNull(Case TipoISTAT
									When 1 Then (Select PercAdeguamento From xISTAT Where Anno = DATEPART(yy, DataInizioUltimoRinnovo))
									When 2 Then ISTAT
									Else 0 End, 0)
	from xContratto
	where Id_xContratto = @Id_xContratto

	-- Articoli
	select @ImportoTmp = isnull(sum(xContrattoAR.Rateo), 0)
	from xContrattoAR
		inner join xContratto on xContrattoAR.Id_xContratto = xContratto.Id_xContratto
	where
			xContrattoAR.Rinnovato = 0
		And xContrattoAR.Disattiva = 0
		And xContrattoAR.Id_xContratto = @Id_xContratto
		And xContrattoAR.DataInizio >= xContratto.DataInizioUltimoRinnovo
		And xContrattoAR.DataFine <= xContratto.DataFine

	set @ImportoContratto = @ImportoContratto + @ImportoTmp

	-- Matricole
	select @ImportoTmp = isnull(sum(xContrattoMatricola.Rateo), 0)
	from xContrattoMatricola
		inner join xContratto on xContrattoMatricola.Id_xContratto = xContratto.Id_xContratto
	where
			xContrattoMatricola.Rinnovato = 0
		And xContrattoMatricola.Disattiva = 0
		And xContrattoMatricola.Id_xContratto = @Id_xContratto
		And xContrattoMatricola.DataInizio >= xContratto.DataInizioUltimoRinnovo
		And xContrattoMatricola.DataFine <= xContratto.DataFine

	set @ImportoContratto = @ImportoContratto + @ImportoTmp

	-- Impianti
	select @ImportoTmp = isnull(sum(xContrattoImpianto.Rateo), 0)
	from xContrattoImpianto
		inner join xContratto on xContrattoImpianto.Id_xContratto = xContratto.Id_xContratto
	where
			xContrattoImpianto.Rinnovato = 0
		And xContrattoImpianto.Disattiva = 0
		And xContrattoImpianto.Id_xContratto = @Id_xContratto
		And xContrattoImpianto.DataInizio >= xContratto.DataInizioUltimoRinnovo
		And xContrattoImpianto.DataFine <= xContratto.DataFine

	set @ImportoContratto = @ImportoContratto + @ImportoTmp

	-- Commesse
	select @ImportoTmp = isnull(sum(xContrattoDOSottoCommessa.Rateo), 0)
	from xContrattoDOSottoCommessa
		inner join xContratto on xContrattoDOSottoCommessa.Id_xContratto = xContratto.Id_xContratto
	where
			xContrattoDOSottoCommessa.Rinnovato = 0
		And xContrattoDOSottoCommessa.Disattiva = 0
		And xContrattoDOSottoCommessa.Id_xContratto = @Id_xContratto
		And xContrattoDOSottoCommessa.DataInizio >= xContratto.DataInizioUltimoRinnovo
		And xContrattoDOSottoCommessa.DataFine <= xContratto.DataFine

	set @ImportoContratto = @ImportoContratto + @ImportoTmp

	-- ISTAT
	--select @ImportoContratto =	case @PercISTAT
	--								when 0 then @ImportoContratto
	--								else @ImportoContratto * (1 + (@PercISTAT / 100))
	--							end

	set @ImportoContratto = case when @ImportoContratto > 0 then @ImportoContratto else null end

	return @ImportoContratto
end
go

-- Gestione delle View
EXEC asp_du_DropView	'xPreventivoFamigliaEx'
EXEC asp_du_DropView	'xPreventivoEx'
EXEC asp_du_DropView	'xPreventivoEuroEx'
EXEC asp_du_DropView	'xDOCommessaEx'
EXEC asp_du_DropView	'xDOSottoCommessaEx'
EXEC asp_du_DropView	'xRDTicketEx'
EXEC asp_du_DropView	'xLavorazioniEx'
EXEC asp_du_DropView	'xMaterialiEx'
EXEC asp_du_DropView	'xSpeseEx'
EXEC asp_du_DropView	'xRDTicketAttivitaInterventiEx'
EXEC asp_du_DropView	'xContatoreLetturaRPPMEx'
EXEC asp_du_DropView	'xContatoreLetturaRPPIEx'
EXEC asp_du_DropView	'xNoleggioMatricolaEx'
EXEC asp_du_DropView	'xNoleggioImpiantoEx'
EXEC asp_du_DropView	'xPreventivoNota'
GO

CREATE VIEW [dbo].[xPreventivoFamigliaEx]
As (
	 Select B.*, A.PiaInizio, A.PiaFine
	  From (	 
		 Select PF.Cd_PreventivoFamiglia
				 , Min(PA.PiaInizio) As PiaInizio
				 , Max(PA.PiaFine) As PiaFine
		  From xPreventivoFamiglia PF
		   Inner Join xPreventivo P On PF.Cd_PreventivoFamiglia = P.Cd_PreventivoFamiglia
		   Inner Join xPreventivoFase PA On P.Id_Preventivo = PA.Id_Preventivo
		  Group By PF.Cd_PreventivoFamiglia
		 ) A
	   Right Join xPreventivoFamiglia B On A.Cd_PreventivoFamiglia = B.Cd_PreventivoFamiglia
)
GO

CREATE VIEW [dbo].[xPreventivoEx]
As (
	SELECT A.Id_Preventivo,[Cd_Preventivo],[UserIns],[UserUpd],[TimeIns],[TimeUpd],[Ts]
			,[Cd_PreventivoFamiglia],[TipoPreventivo],[Id_Preventivo_Rif],[Descrizione],[Cd_CF]
			,[InizioValidita],[Cd_LS_Ricavo],[TipoValorizzazioneCosto],[Cd_LS_Costo],[Cd_VL]
			,[Cambio],[Decimali],[DecimaliPrzUn],[ImportoTotaleV],[Template],[Cd_Template],[Ricarica]
			,[ScontoRiga],[FaseRicarica],[FaseCd_LS_Ricavo],[FaseScontoRiga],[NotePreventivo]
			,[MaterialeCostoV],[MaterialeRicavoV],[FaseCostoV],[FaseRicavoV],[RiepilogoCostoV],[RiepilogoRicavoV]
			,[Cd_FormulaMC1],[Cd_FormulaMC2],[Cd_FormulaMC3],[Cd_FormulaMC4],[Cd_FormulaMC5]
			,[Cd_FormulaMR1],[Cd_FormulaMR2],[Cd_FormulaMR3],[Cd_FormulaMR4],[Cd_FormulaMR5]
			,[Cd_FormulaFC1],[Cd_FormulaFC2],[Cd_FormulaFC3],[Cd_FormulaFC4],[Cd_FormulaFC5]
			,[Cd_FormulaFR1],[Cd_FormulaFR2],[Cd_FormulaFR3],[Cd_FormulaFR4],[Cd_FormulaFR5]
			,[Cd_FormulaRC1],[Cd_FormulaRC2],[Cd_FormulaRC3],[Cd_FormulaRC4],[Cd_FormulaRC5]
			,[Cd_FormulaRR1],[Cd_FormulaRR2],[Cd_FormulaRR3],[Cd_FormulaRR4],[Cd_FormulaRR5]
			,[FormulaMC1],[FormulaMC2],[FormulaMC3],[FormulaMC4],[FormulaMC5]
			,[FormulaMR1],[FormulaMR2],[FormulaMR3],[FormulaMR4],[FormulaMR5]
			,[FormulaFC1],[FormulaFC2],[FormulaFC3],[FormulaFC4],[FormulaFC5]
			,[FormulaFR1],[FormulaFR2],[FormulaFR3],[FormulaFR4],[FormulaFR5]
			,[FormulaRC1],[FormulaRC2],[FormulaRC3],[FormulaRC4],[FormulaRC5]
			,[FormulaRR1],[FormulaRR2],[FormulaRR3],[FormulaRR4],[FormulaRR5]
			,[ValoreMC1V],[ValoreMC2V],[ValoreMC3V],[ValoreMC4V],[ValoreMC5V]
			,[ValoreMR1V],[ValoreMR2V],[ValoreMR3V],[ValoreMR4V],[ValoreMR5V]
			,[ValoreFC1V],[ValoreFC2V],[ValoreFC3V],[ValoreFC4V],[ValoreFC5V]
			,[ValoreFR1V],[ValoreFR2V],[ValoreFR3V],[ValoreFR4V],[ValoreFR5V]
			,[ValoreRC1V],[ValoreRC2V],[ValoreRC3V],[ValoreRC4V],[ValoreRC5V]
			,[ValoreRR1V],[ValoreRR2V],[ValoreRR3V],[ValoreRR4V],[ValoreRR5V]
			,[ModelloVal],[Cd_ContrattoTipo],[Cd_RinnovoTipo],[Cd_LS_Contratto],[Cd_SLA],[Periodo]
			,[FattoreMksPeriodo],[PeriodoFattura],[FattoreMksPeriodoFattura],[FattoreMksCicloFattura]
			,[GiornoFattura],[FatturaFineMese],[Anticipo],[Rinnovabile],[Cd_xMMModello],[Cd_LS_Contratto_Costo]
			,[Cd_Agente],[Cd_CFDest],[Area],[FaseUsaCostoV],[MaterialeUsaCostoV],[SpesaUsaCostoV]
			,[SpesaRicarica],[SpesaCd_LS_Ricavo],[SpesaScontoRiga],[SpesaCostoV],[SpesaRicavoV]
			,[Cd_FormulaSC1],[Cd_FormulaSC2],[Cd_FormulaSC3],[Cd_FormulaSC4],[Cd_FormulaSC5]
			,[Cd_FormulaSR1],[Cd_FormulaSR2],[Cd_FormulaSR3],[Cd_FormulaSR4],[Cd_FormulaSR5]
			,[FormulaSC1],[FormulaSC2],[FormulaSC3],[FormulaSC4],[FormulaSC5]
			,[FormulaSR1],[FormulaSR2],[FormulaSR3],[FormulaSR4],[FormulaSR5]
			,[ValoreSC1V],[ValoreSC2V],[ValoreSC3V],[ValoreSC4V],[ValoreSC5V]
			,[ValoreSR1V],[ValoreSR2V],[ValoreSR3V],[ValoreSR4V],[ValoreSR5V]
			,[DataIns],[FineValidita],[Stato],[DataStato],[Probabilita]
			,[DataAperturaPrev],[DataChiusuraPrev],[RicalcolaDatePrev], B.PiaInizio, B.PiaFine,[Cd_xDOSottoCommessaTipo]
			,[PreventiviItem],[ItemProvvigionePrev],[ItemPrezzoVenditaV],[ItemProvvigioneEff],[Provvigione]
			,[DBCd_AR_P],[DBQtaInProd],[DBCostoUnitarioV]
			-- Aggiunto con la versione 3.80
			,[NoteXML],[ScontoFinale]
	  FROM xPreventivo A Left Join (
		Select P.Id_Preventivo
				 , Min(PF.PiaInizio) As PiaInizio
				 , Max(PF.PiaFine) As PiaFine
		  From xPreventivo P 
		   Inner Join xPreventivoFase PF On P.Id_Preventivo = PF.Id_Preventivo
		  Group By P.Id_Preventivo
	  ) B On A.Id_Preventivo = B.Id_Preventivo
)
GO

CREATE VIEW [dbo].[xPreventivoEuroEx]
As (
	SELECT A.Id_Preventivo,[Cd_Preventivo],[UserIns],[UserUpd],[TimeIns],[TimeUpd],[Ts]
			,[Cd_PreventivoFamiglia],[TipoPreventivo],[Id_Preventivo_Rif],[Descrizione],[Cd_CF]
			,[InizioValidita],[Cd_LS_Ricavo],[TipoValorizzazioneCosto],[Cd_LS_Costo],[Cd_VL]
			,[Cambio],[Decimali],[DecimaliPrzUn],[ImportoTotaleE],[Template],[Cd_Template],[Ricarica]
			,[ScontoRiga],[FaseRicarica],[FaseCd_LS_Ricavo],[FaseScontoRiga],[NotePreventivo]
			,[MaterialeCostoE],[MaterialeRicavoE],[FaseCostoE],[FaseRicavoE],[RiepilogoCostoE],[RiepilogoRicavoE]
			,[Cd_FormulaMC1],[Cd_FormulaMC2],[Cd_FormulaMC3],[Cd_FormulaMC4],[Cd_FormulaMC5]
			,[Cd_FormulaMR1],[Cd_FormulaMR2],[Cd_FormulaMR3],[Cd_FormulaMR4],[Cd_FormulaMR5]
			,[Cd_FormulaFC1],[Cd_FormulaFC2],[Cd_FormulaFC3],[Cd_FormulaFC4],[Cd_FormulaFC5]
			,[Cd_FormulaFR1],[Cd_FormulaFR2],[Cd_FormulaFR3],[Cd_FormulaFR4],[Cd_FormulaFR5]
			,[Cd_FormulaRC1],[Cd_FormulaRC2],[Cd_FormulaRC3],[Cd_FormulaRC4],[Cd_FormulaRC5]
			,[Cd_FormulaRR1],[Cd_FormulaRR2],[Cd_FormulaRR3],[Cd_FormulaRR4],[Cd_FormulaRR5]
			,[FormulaMC1],[FormulaMC2],[FormulaMC3],[FormulaMC4],[FormulaMC5]
			,[FormulaMR1],[FormulaMR2],[FormulaMR3],[FormulaMR4],[FormulaMR5]
			,[FormulaFC1],[FormulaFC2],[FormulaFC3],[FormulaFC4],[FormulaFC5]
			,[FormulaFR1],[FormulaFR2],[FormulaFR3],[FormulaFR4],[FormulaFR5]
			,[FormulaRC1],[FormulaRC2],[FormulaRC3],[FormulaRC4],[FormulaRC5]
			,[FormulaRR1],[FormulaRR2],[FormulaRR3],[FormulaRR4],[FormulaRR5]
			,[ValoreMC1E],[ValoreMC2E],[ValoreMC3E],[ValoreMC4E],[ValoreMC5E]
			,[ValoreMR1E],[ValoreMR2E],[ValoreMR3E],[ValoreMR4E],[ValoreMR5E]
			,[ValoreFC1E],[ValoreFC2E],[ValoreFC3E],[ValoreFC4E],[ValoreFC5E]
			,[ValoreFR1E],[ValoreFR2E],[ValoreFR3E],[ValoreFR4E],[ValoreFR5E]
			,[ValoreRC1E],[ValoreRC2E],[ValoreRC3E],[ValoreRC4E],[ValoreRC5E]
			,[ValoreRR1E],[ValoreRR2E],[ValoreRR3E],[ValoreRR4E],[ValoreRR5E]
			,[ModelloVal],[Cd_ContrattoTipo],[Cd_RinnovoTipo],[Cd_LS_Contratto],[Cd_SLA],[Periodo]
			,[FattoreMksPeriodo],[PeriodoFattura],[FattoreMksPeriodoFattura],[FattoreMksCicloFattura]
			,[GiornoFattura],[FatturaFineMese],[Anticipo],[Rinnovabile],[Cd_xMMModello],[Cd_LS_Contratto_Costo]
			,[Cd_Agente],[Cd_CFDest],[Area],[FaseUsaCostoV],[MaterialeUsaCostoV],[SpesaUsaCostoV]
			,[SpesaRicarica],[SpesaCd_LS_Ricavo],[SpesaScontoRiga],[SpesaCostoE],[SpesaRicavoE]
			,[Cd_FormulaSC1],[Cd_FormulaSC2],[Cd_FormulaSC3],[Cd_FormulaSC4],[Cd_FormulaSC5]
			,[Cd_FormulaSR1],[Cd_FormulaSR2],[Cd_FormulaSR3],[Cd_FormulaSR4],[Cd_FormulaSR5]
			,[FormulaSC1],[FormulaSC2],[FormulaSC3],[FormulaSC4],[FormulaSC5]
			,[FormulaSR1],[FormulaSR2],[FormulaSR3],[FormulaSR4],[FormulaSR5]
			,[ValoreSC1E],[ValoreSC2E],[ValoreSC3E],[ValoreSC4E],[ValoreSC5E]
			,[ValoreSR1E],[ValoreSR2E],[ValoreSR3E],[ValoreSR4E],[ValoreSR5E]
			,[DataIns],[FineValidita],[Stato],[DataStato],[Probabilita]
			,[DataAperturaPrev],[DataChiusuraPrev],[RicalcolaDatePrev], B.PiaInizio, B.PiaFine, [Cd_xDOSottoCommessaTipo]
			,[PreventiviItem],[ItemProvvigionePrev],[ItemPrezzoVenditaE],[ItemProvvigioneEff],[Provvigione]
			,[DBCd_AR_P],[DBQtaInProd],[DBCostoUnitarioV]
	  FROM xPreventivo A Left Join (
		Select P.Id_Preventivo
				 , Min(PF.PiaInizio) As PiaInizio
				 , Max(PF.PiaFine) As PiaFine
		  From xPreventivo P 
		   Inner Join xPreventivoFase PF On P.Id_Preventivo = PF.Id_Preventivo
		  Group By P.Id_Preventivo
	  ) B On A.Id_Preventivo = B.Id_Preventivo
)
GO

CREATE VIEW [dbo].[xDOCommessaEx]
As (
	 Select B.*, A.PiaInizio, A.PiaFine
	  From (	 
		 Select C.Cd_DOCommessa
				 , Min(TA.PiaInizio) As PiaInizio
				 , Max(TA.PiaFine) As PiaFine
		  From DOCommessa C
		   Inner Join DOSottoCommessa SC On C.Cd_DOCommessa = SC.Cd_DOCommessa
		   Inner Join xRDTicket T On SC.Cd_DOSottoCommessa = (Case When T.GestisciTicket = 1 Then T.Cd_DOSottoCommessaInst Else T.Cd_DOSottoCommessa End)
		   Inner Join xRDTicketAttivita TA On T.Id_xRDTicket = TA.Id_xRDTicket
		  Group By C.Cd_DOCommessa
		 ) A
	   Right Join DOCommessa B On A.Cd_DOCommessa = B.Cd_DOCommessa
)
GO

CREATE VIEW [dbo].[xDOSottoCommessaEx]
As (
	 Select B.*, A.PiaInizio, A.PiaFine
	  From (	 
		 Select SC.Cd_DOSottoCommessa
				 , Min(TA.PiaInizio) As PiaInizio
				 , Max(TA.PiaFine) As PiaFine
		  From DOSottoCommessa SC 
		   Inner Join xRDTicket T On SC.Cd_DOSottoCommessa = (Case When T.GestisciTicket = 1 Then T.Cd_DOSottoCommessaInst Else T.Cd_DOSottoCommessa End)
		   Inner Join xRDTicketAttivita TA On T.Id_xRDTicket = TA.Id_xRDTicket
		  Group By SC.Cd_DOSottoCommessa
		 ) A
	   Right Join DOSottoCommessa B On A.Cd_DOSottoCommessa = B.Cd_DOSottoCommessa
)
GO

CREATE VIEW [dbo].[xRDTicketEx]
As (
	 Select B.*, A.PiaInizio, A.PiaFine
	  From (	 
		 Select T.Id_xRDTicket
				 , Min(TA.PiaInizio) As PiaInizio
				 , Max(TA.PiaFine) As PiaFine
		  From xRDTicket T 
		   Inner Join xRDTicketAttivita TA On T.Id_xRDTicket = TA.Id_xRDTicket
		  Group By T.Id_xRDTicket
		 ) A
	   Right Join xRDTicket B On A.Id_xRDTicket = B.Id_xRDTicket
)
GO

CREATE VIEW [dbo].[xLavorazioniEx]
As (
		-- consuntivo rilevazioni dai documenti legati ai ticket
		SELECT 
		    ID								= DoRig.Id_DoRig,
			Provenienza						= 'T',
			CD_DOCommessa					= DoCommessa.Cd_DOCommessa,
			DoCommessa_Desc					= DoCommessa.Descrizione,
			CD_DOSottoCommessa				= DoSottoCommessa.CD_DoSottoCommessa,
			DoSottoCommessa_Desc			= DoSottoCommessa.Descrizione,
			CD_DoSottoCommessaInst			= ISNULL(xRDTicket.Cd_DOSottoCommessaInst,''),
			DoSottoCommessaInst_Desc		= ISNULL(Inst.Descrizione,''),
			CD_CF							= DoSottoCommessa.CD_CF,
			CD_DO							= DoRig.CD_DO,
			CD_PRAttivita					= xRDTicketAttivita.Cd_PrAttivita,
		    Attivita_Desc					= PrAttivita.Descrizione,
			Riferimento						= xRDTicketAttivitaMov.Riferimento,
			CD_ARItem						= ISNULL(DoRig.xCd_ARItem, ISNULL(xRDTicketAttivita.Cd_ARItem,'')),
			ARItem_Desc						= ISNULL(DoRig.xDescrizioneARItem, ISNULL(xRDTicketAttivita.DescrizioneARItem,'')),
			CD_ARMisura						= DoRig.Cd_ARMisura,
			Operatore						= xRDTicketAttivitaMov.Cd_xOperatore,
			Operatore_Desc					= xOperatore.Descrizione,
			CD_PRRisorsa					= xRDTicketAttivitaMov.Cd_PrRisorsa,
			Risorsa_Desc					= PRRisorsa.Descrizione,
			Data							= Isnull(DORig.RR_DataInizio, DoRig.DataDoc),
			PreQta							= 0,
			PreCosto						= 0,
			PreRicavo						= 0,
			PreMargine						= 0,
		    Durata							= (CASE WHEN Do.xAECSegno = 1 THEN DoRig.QtaEvadibile ELSE DoRig.QtaEvadibile * -1 END),
			DurataOperatore					= xRDTicketAttivitaMov.DurataOperatore,
			DurataRisorsaOperatore			= xRDTicketAttivitaMov.DurataRisorsaOperatore,
			CostoTot						= CASE WHEN LEFT(DoRig.CD_CF,1) = 'C' THEN (CASE WHEN Do.xAECSegno = 1 THEN DoRig.QtaEvadibile * xCostoUnitarioE ELSE DoRig.QtaEvadibile * xCostoUnitarioE * -1 END)
											ELSE (CASE WHEN Do.xAECSegno = 1 THEN DoRig.PrezzoResiduoE ELSE DoRig.PrezzoResiduoE * -1 END) END,
			PrezzoTot						= CASE WHEN LEFT(DoRig.CD_CF,1) = 'C' THEN (CASE WHEN Do.xAECSegno = 1 THEN DoRig.PrezzoResiduoE ELSE DoRig.PrezzoResiduoE * -1 END) ELSE 0 END,
			Risorsa_Est						= PRRisorsa.Esterno,
			Reparto							= ISNULL(xRDTicketAttivitaMov.Cd_xRDReparto,''),
			Reparto_Desc					= ISNULL(xRDReparto.Descrizione,''),
			GestisciTicket					= xRDTicket.GestisciTicket,
			Cd_xRDRilOrigine				= xRDTicketAttivitaMov.Cd_xRDRilOrigine,
			Cd_xRDRilCausale				= xRDTicketAttivitaMov.Cd_xRDRilCausale, 
			Provv							= (CASE WHEN Do.xAECSegno = 1 THEN ((ValProvvigione_1 + ValProvvigione_2)/Cambio) ELSE ((ValProvvigione_1 + ValProvvigione_2)/Cambio) * -1 END) 
		FROM DOSottoCommessa
			INNER JOIN DoCommessa ON DoSottoCommessa.Cd_DOCommessa = DoCommessa.Cd_DOCommessa
			INNER JOIN DoRig ON DOSottoCommessa.Cd_DOSottoCommessa = DoRig.Cd_DOSottoCommessa
			INNER JOIN Do ON Do.CD_DO = DoRig.CD_DO
			INNER JOIN xRDTicketAttivitaMov ON DoRig.xId_RDTicketAttivitaMov = xRDTicketAttivitaMov.Id_xRDTicketAttivitaMov
			INNER JOIN xRDTicketAttivita ON xRDTicketAttivitaMov.Id_xRDTicketAttivita = xRDTicketAttivita.ID_xRDTicketAttivita
			INNER JOIN xRDTicket	ON xRDTicketAttivita.Id_xRDTicket = xRDTicket.Id_xRDTicket
			LEFT JOIN DoSottoCommessa Inst ON xRDTicket.Cd_DOSottoCommessaInst = DOSottoCommessa.Cd_DOSottoCommessa
			INNER JOIN PRAttivita ON xRDTicketAttivita.Cd_PrAttivita = PRAttivita.Cd_PrAttivita
			LEFT JOIN xOperatore ON xRDTicketAttivitaMov.Cd_xOperatore = xOperatore.Cd_xOperatore
			LEFT JOIN PRRisorsa ON xRDTicketAttivitaMov.Cd_PrRisorsa = PRRisorsa.Cd_PrRisorsa
			LEFT JOIN xRDReparto ON xRDReparto.Cd_xRDReparto = xRDTicketAttivitaMov.Cd_xRDReparto
		WHERE 
			xAECAttiva = 1
			--AND LEFT(DoRig.CD_CF,1) ='C'
			AND DoRig.xId_RDTicketAttivitaMov is not null
		-- consuntivo rilevazioni dai documenti non legati ai ticket
		UNION
		SELECT 
			    ID								= DoRig.Id_DoRig,
				Provenienza						= 'D' ,
				CD_DOCommessa					= DoCommessa.Cd_DOCommessa,
				DoCommessa_Desc					= DoCommessa.Descrizione,
				CD_DOSottoCommessa				= DoSottoCommessa.CD_DoSottoCommessa,
				DoSottoCommessa_Desc			= DoSottoCommessa.Descrizione,
				CD_DoSottoCommessaInst			= '',
				DoSottoCommessaInst_Desc		= '',
				CD_CF							= DoSottoCommessa.CD_CF,
				CD_DO							= DoRig.CD_DO,
			    CD_PRAttivita					= PrAttivita.CD_PRAttivita,
				Attivita_Desc					= PrAttivita.Descrizione,
				Riferimento						= '' ,
			    Cd_ARItem						= DoRig.xCd_ARItem,
				ARItem_Desc						= DoRig.xDescrizioneARItem,
				CD_ARMisura						= DoRig.Cd_ARMisura,
				Operatore						= null,
				Operatore_Desc					= null,
				CD_PRRisorsa					= PRRisorsa.Cd_PrRisorsa,
				Risorsa_Desc					= PRRisorsa.Descrizione,
				Data							= Isnull(DORig.RR_DataInizio, DoRig.DataDoc),
				PreQta							= 0,
				PreCosto						= 0,
				PreRicavo						= 0,
				PreMargine						= 0,
				Durata							= (CASE WHEN Do.xAECSegno = 1 THEN DoRig.QtaEvadibile ELSE DoRig.QtaEvadibile * -1 END),
				DurataOperatore					= 0,
				DurataRisorsaOperatore			= 0,
				CostoTot						= CASE WHEN LEFT(DoRig.CD_CF,1) = 'C' THEN (CASE WHEN Do.xAECSegno = 1 THEN DoRig.QtaEvadibile * xCostoUnitarioE ELSE DoRig.QtaEvadibile * xCostoUnitarioE * -1 END)
												ELSE (CASE WHEN Do.xAECSegno = 1 THEN DoRig.PrezzoResiduoE ELSE DoRig.PrezzoResiduoE * -1 END) END,
				PrezzoTot						= CASE WHEN LEFT(DoRig.CD_CF,1) = 'C' THEN (CASE WHEN Do.xAECSegno = 1 THEN DoRig.PrezzoResiduoE ELSE DoRig.PrezzoResiduoE * -1 END) ELSE 0 END,
				Risorsa_Est						= PRRisorsa.Esterno,
				Reparto							= ISNULL(DoRig.xCd_xRDReparto,''),
				Reparto_Desc					= ISNULL(xRDReparto.Descrizione,''),
				GestisciTicket					= 0,
				Cd_xRDRilOrigine				= null,
				Cd_xRDRilCausale				= null,
				Provv							= (CASE WHEN Do.xAECSegno = 1 THEN ((ValProvvigione_1 + ValProvvigione_2)/Cambio) ELSE ((ValProvvigione_1 + ValProvvigione_2)/Cambio) * -1 END) 	
			FROM DOSottoCommessa
				INNER JOIN DoCommessa ON DoSottoCommessa.Cd_DOCommessa = DoCommessa.Cd_DOCommessa
				INNER JOIN DoRig ON DOSottoCommessa.Cd_DOSottoCommessa = DoRig.Cd_DOSottoCommessa
				INNER JOIN Do ON Do.CD_DO = DoRig.CD_DO
				INNER JOIN xPRAttivitaVal ON DoRig.CD_AR = xPRAttivitaVal.CD_AR
				INNER JOIN PrAttivita ON xPRAttivitaVal.Id_PrAttivita = PRAttivita.Id_PrAttivita
				LEFT JOIN PRRisorsa ON PrAttivita.Cd_PrRisorsa = PRRisorsa.Cd_PrRisorsa
				LEFT JOIN xRDReparto ON DoRig.xCd_xRDReparto = xRDReparto.Cd_xRDReparto
			WHERE 
				xAECAttiva = 1
				--AND LEFT(DoRig.CD_CF,1) ='C'
				AND DoRig.xId_RDTicketAttivitaMov is null
				And xPRAttivitaVal.Id_xPRAttivitaVal In (Select Top 1 Id_xPRAttivitaVal From xPRAttivitaVal Where Cd_AR = DORig.Cd_AR)
		
		UNION  
		-- consuntivo rilevazioni dai ticket non trasformati in documenti
		SELECT 
			ID								= xRDTicketAttivitaMov.Id_xRDTicketAttivitaMov,
			Provenienza						= 'R' ,
			CD_DOCommessa					= DoCommessa.Cd_DOCommessa,
			DoCommessa_Desc					= DoCommessa.Descrizione,
			CD_DOSottoCommessa				= DoSottoCommessa.CD_DoSottoCommessa,
			DoSottoCommessa_Desc			= DoSottoCommessa.Descrizione,
			CD_DoSottoCommessaInst			= ISNULL(xRDTicket.Cd_DOSottoCommessaInst,''),
			DoSottoCommessaInst_Desc		= ISNULL(Inst.Descrizione,''),
			CD_CF							= DoSottoCommessa.CD_CF,
			CD_DO							= '',
			CD_PRAttivita					= PrAttivita.CD_PRAttivita,
			Attivita_Desc					= PrAttivita.Descrizione,	
			Riferimento						= xRDTicketAttivitaMov.Riferimento,
			CD_ARItem						= ISNULL(xRDTicketAttivita.Cd_ARItem,''),
			ARItem_Desc						= ISNULL(xRDTicketAttivita.DescrizioneARItem,''),
			CD_ARMisura						= (SELECT CD_ARMisuraAttivita FROM xImpostazione),
			Operatore						= xRDTicketAttivitaMov.Cd_xOperatore,
			Operatore_Desc					= xOperatore.Descrizione,
			CD_PRRisorsa					= xRDTicketAttivitaMov.Cd_PrRisorsa,
			Risorsa_Desc					= PRRisorsa.Descrizione,
			Data							= dbo.afn_dt_datetime2date(xRDTicketAttivitaMov.DataInizio),
			PreQta							= 0,
			PreCosto						= 0,
			PreRicavo						= 0,
			PreMargine						= 0,
			Durata							= xRDTicketAttivitaMov.Durata,
			DurataOperatore					= xRDTicketAttivitaMov.DurataOperatore,
			DurataRisorsaOperatore			= xRDTicketAttivitaMov.DurataRisorsaOperatore,
			CostoTot						= xRDTicketAttivitaMov.CostoTot,
			PrezzoTot						= (CASE WHEN xRDTicketAttivitaMov.EsclusoDaVal = 0 THEN xRDTicketAttivitaMov.PrezzoTotaleV ELSE 0 END),
			Risorsa_Est						= PRRisorsa.Esterno,
			Reparto							= ISNULL(xRDTicketAttivitaMov.Cd_xRDReparto,''),
			Reparto_Desc					= ISNULL(xRDReparto.Descrizione,''),
			GestisciTicket					= xRDTicket.GestisciTicket,
			Cd_xRDRilOrigine				= xRDTicketAttivitaMov.Cd_xRDRilOrigine,
			Cd_xRDRilCausale				= xRDTicketAttivitaMov.Cd_xRDRilCausale,
			Provv							= xRDTicketAttivitaMov.ValProvvigione
		FROM xRDTicket
			INNER JOIN DoSottoCommessa ON xRDTicket.CD_DoSottoCommessa = DoSottoCommessa.CD_DoSottoCommessa
			INNER JOIN DoCommessa ON DoSottoCommessa.Cd_DOCommessa = DoCommessa.Cd_DOCommessa
			LEFT JOIN DoSottoCommessa Inst ON xRDTicket.CD_DoSottoCommessaInst = Inst.CD_DoSottoCommessa
			INNER JOIN xRDTicketAttivita ON xRDTicket.Id_xRDTicket = xRDTicketAttivita.Id_xRDTicket
			INNER JOIN PRAttivita ON xRDTicketAttivita.Cd_PrAttivita = PRAttivita.Cd_PrAttivita
			INNER JOIN xRDTicketAttivitaMov ON xRDTicketAttivita.Id_xRDTicketAttivita = xRDTicketAttivitaMov.Id_xRDTicketAttivita
			LEFT JOIN xOperatore ON xRDTicketAttivitaMov.Cd_xOperatore = xOperatore.Cd_xOperatore
			LEFT JOIN PRRisorsa ON xRDTicketAttivitaMov.Cd_PrRisorsa = PRRisorsa.Cd_PrRisorsa
			LEFT JOIN xRDReparto ON xRDReparto.Cd_xRDReparto = xRDTicketAttivitaMov.Cd_xRDReparto
		WHERE xRDTicketAttivitaMov.Id_xRDTicketAttivitaMov NOT IN (SELECT DoRig.xId_RDTicketAttivitaMov FROM DoRig WHERE DoRig.xId_RDTicketAttivitaMov is Not null)
			
		UNION 
		-- preventivo rilevazioni 
		SELECT 
			Id								= xPreventivoFase.Id_PreventivoFase,
			Provenienza						= 'P',
			CD_DOCommessa					= DoCommessa.Cd_DOCommessa,
			DoCommessa_Desc					= DoCommessa.Descrizione,
			CD_DOSottoCommessa				= DoSottoCommessa.CD_DoSottoCommessa,
			DoSottoCommessa_Desc			= DoSottoCommessa.Descrizione,
			CD_DoSottoCommessaInst			= '',
			DoSottoCommessaInst_Desc		= '',
			CD_CF							= DoSottoCommessa.CD_CF,
			CD_DO							= '',
			CD_PRAttivita					= xPreventivoFase.CD_PrAttivita,
			Attivita_Desc					= PrAttivita.Descrizione,		
			Riferimento						= '',
			CD_ARItem						= ISNULL(xPreventivoFase.Cd_ARItem,''),
			ARItem_Desc						= ISNULL(xPreventivoFase.DescrizioneARItem,''),
			CD_ARMisura						= (SELECT CD_ARMisuraAttivita FROM xImpostazione),
			Operatore						= xPreventivoFase.Cd_xOperatore,
			Operatore_Desc					= xOperatore.Descrizione,
			CD_PRRisorsa					= xPreventivoFase.Cd_PrRisorsa,
			Risorsa_Desc					= PRRisorsa.Descrizione,
			Data							= null,
			PreQta							= xPreventivoFase.Ore,
			PreCosto						= xPreventivoFase.CostoUnitarioV * xPreventivoFase.Ore,
		-- PreRicavo						= (CASE WHEN xPreventivo.ModelloVal = 'C' THEN xPreventivoFase.CostoTotaleV ELSE xPreventivoFase.RicavoTotaleV END),
			PreRicavo						= xPreventivoFase.PrezzoUnVenditaV * xPreventivoFase.Ore,
		--PreMargine						= (CASE WHEN xPreventivo.ModelloVal = 'C' THEN xPreventivoFase.MargineCostoV ELSE xPreventivoFase.MargineRicavoV END),
			PreMargine						= (xPreventivoFase.PrezzoUnVenditaV - xPreventivoFase.CostoUnitarioV) * xPreventivoFase.Ore,
			Durata							= 0 ,
			DurataOperatore					= 0 ,
			DurataRisorsaOperatore			= 0 ,
			CostoTot						= 0 ,
			PrezzoTot						= 0 ,
			Risorsa_Est						= PRRisorsa.Esterno,
			Reparto							= '',
			Reparto_Desc					= '',
			GestisciTicket					= 0 ,
			Cd_xRDRilOrigine				= null,
			Cd_xRDRilCausale				= null,
			Provv							= 0
		FROM DoSottoCommessa
			INNER JOIN DoCommessa ON DoSottoCommessa.Cd_DOCommessa = DoCommessa.Cd_DOCommessa
			LEFT JOIN xPreventivo ON DoSottoCommessa.xCD_Preventivo = xPreventivo.CD_Preventivo
			INNER JOIN xPreventivoFase ON xPreventivo.Id_Preventivo = xPreventivoFase.Id_Preventivo
			INNER JOIN PRAttivita ON xPreventivoFase.Cd_PrAttivita = PRAttivita.Cd_PrAttivita
			LEFT JOIN xOperatore ON xPreventivoFase.Cd_xOperatore = xOperatore.Cd_xOperatore
			LEFT JOIN PRRisorsa ON xPreventivoFase.Cd_PrRisorsa = PRRisorsa.Cd_PrRisorsa
		WHERE xPreventivoFase.CD_PrAttivita is not null 
)
GO

CREATE VIEW [dbo].[xMaterialiEx]
As (
		-- consuntivo materiali dai documenti
		SELECT 
		    ID							= DoRig.Id_DORig,
			Provenienza					= 'D',
			CD_DOCommessa				= DoCommessa.Cd_DOCommessa, 
			DoCommessa_Desc				= DoCommessa.Descrizione, 
			CD_DoSottoCommessa			= DoSottoCommessa.CD_DoSottoCommessa,
			DoSottoCommessa_Desc	    = DoSottoCommessa.Descrizione,
			CD_DoSottoCommessaInst		= ISNULL(xRDTicket.Cd_DOSottoCommessaInst,''),
			DoSottoCommessaInst_Desc	= ISNULL(Inst.Descrizione,''),
			CD_CF						= DoSottoCommessa.CD_CF,
			CD_DO						= DoRig.CD_DO,
		    CD_AR						= DoRig.CD_AR,
			AR_Desc						= DoRig.Descrizione,
			Cd_ARGruppo1				= AR.Cd_ARGruppo1,
			Cd_ARGruppo2				= AR.Cd_ARGruppo2,
			CD_ARGruppo3				= AR.Cd_ARGruppo3,
			CD_ARItem					= ISNULL(DoRig.xCd_ARItem, ISNULL(xRDTicketMaterialeSpesaMov.Cd_ARItem,'')),
			ARItem_Desc					= ISNULL(DoRig.xDescrizioneARItem, ISNULL(xRDTicketMaterialeSpesaMov.DescrizioneARItem,'')),
			CD_ARMisura					= DoRig.Cd_ARMisura,
			Operatore					= xRDTicketMaterialeSpesaMov.CD_xOperatore,
		    Operatore_Desc			    = xOperatore.Descrizione,	
			Data						= Isnull(DORig.RR_DataInizio, DoRig.DataDoc),
			PreQta						= 0 ,
			PreCosto					= 0 , 
			PreRicavo					= 0 ,
			PreMargine					= 0 ,
			Qta							= (CASE WHEN Do.xAECSegno = 1 THEN DoRig.QtaEvadibile ELSE DoRig.QtaEvadibile * -1 END),
			CostoTot					= CASE WHEN LEFT(DoRig.CD_CF,1) = 'C' THEN (CASE WHEN Do.xAECSegno = 1 THEN DoRig.QtaEvadibile * xCostoUnitarioE ELSE DoRig.QtaEvadibile * xCostoUnitarioE * -1 END)
											ELSE (CASE WHEN Do.xAECSegno = 1 THEN DoRig.PrezzoResiduoE ELSE DoRig.PrezzoResiduoE * -1 END) END,
			PrezzoTot					= CASE WHEN LEFT(DoRig.CD_CF,1) = 'C' THEN (CASE WHEN Do.xAECSegno = 1 THEN DoRig.PrezzoResiduoE ELSE DoRig.PrezzoResiduoE * -1 END) ELSE 0 END,
			Reparto						= ISNULL(DoRig.xCd_xRDReparto,''),
			Reparto_Desc				= ISNULL(xRDReparto.Descrizione,''),
			GestisciTicket				= xRDTicket.GestisciTicket ,
			Provv						= (CASE WHEN Do.xAECSegno = 1 THEN ((ValProvvigione_1 + ValProvvigione_2)/Cambio) ELSE ((ValProvvigione_1 + ValProvvigione_2)/Cambio) * -1 END) 
	
		FROM  DOSottoCommessa
			 INNER JOIN DoCommessa ON DoSottoCommessa.Cd_DOCommessa = DoCommessa.Cd_DOCommessa
			 INNER JOIN DoRig ON DOSottoCommessa.Cd_DOSottoCommessa = DoRig.Cd_DOSottoCommessa
			 INNER JOIN Do ON Do.CD_DO = DoRig.CD_DO
			 LEFT JOIN AR ON DoRig.CD_AR = AR.CD_AR
			 LEFT JOIN xRDTicketMaterialeSpesaMov ON DoRig.xId_xRDTicketMaterialeSpesaMov = xRDTicketMaterialeSpesaMov.Id_xRDTicketMaterialeSpesaMov
			 LEFT JOIN xRDTicket ON xRDTicketMaterialeSpesaMov.Id_xRDTicket = xRDTicket.Id_xRDTicket
			 LEFT JOIN DOSottoCommessa Inst ON xRDTicket.Cd_DOSottoCommessaInst = DOSottoCommessa.Cd_DOSottoCommessa
			 LEFT JOIN xOperatore ON xRDTicketMaterialeSpesaMov.Cd_xOperatore = xOperatore.Cd_xOperatore
			 LEFT JOIN xRDReparto ON DoRig.xCd_xRDReparto = xRDReparto.Cd_xRDReparto
		WHERE 
			Do.xAECAttiva = 1
			--AND LEFT(DoRig.CD_CF,1) ='C'
			AND DoRig.CD_AR NOT IN (SELECT Distinct CD_AR FROM xPRAttivitaVal)
			AND DoRig.CD_AR NOT IN (SELECT Distinct CD_AR FROM xSpesa)
			
		UNION
		-- consuntivo materiali dai ticket non trasformati in documenti    
		SELECT  
				ID							= xRDTicketMaterialeSpesaMov.ID_xRDTicketMaterialeSpesaMov,
				Provenienza					=  'R',
				CD_DOCommessa				= DoCommessa.Cd_DOCommessa,
				DoCommessa_Desc				= DoCommessa.Descrizione,
				CD_DoSottoCommessa			= DoSottoCommessa.CD_DoSottoCommessa,
				DoSottoCommessa_Desc		= DoSottoCommessa.Descrizione,
				CD_DoSottoCommessaInst		= ISNULL(xRDTicket.Cd_DOSottoCommessaInst,''),
				DoSottoCommessaInst_Desc	= ISNULL(Inst.Descrizione, ''),
				CD_CF						= DoSottoCommessa.CD_CF,
				CD_DO						= '',
				CD_AR						= xRDTicketMaterialeSpesaMov.CD_AR,
				AR_Desc						= xRDTicketMaterialeSpesaMov.Descrizione,
				Cd_ARGruppo1				= AR.Cd_ARGruppo1,
				Cd_ARGruppo2				= AR.Cd_ARGruppo2,
				CD_ARGruppo3				= AR.Cd_ARGruppo3,
				CD_ARItem					= ISNULL(xRDTicketMaterialeSpesaMov.Cd_ARItem,''),
				ARItem_Desc					= ISNULL(xRDTicketMaterialeSpesaMov.DescrizioneARItem,''),
				CD_ARMisura					= xRDTicketMaterialeSpesaMov.Cd_ARMisura,
				Operatore					= xRDTicketMaterialeSpesaMov.CD_xOperatore,
				Operatore_Desc			    = xOperatore.Descrizione,	
				Data						= xRDTicketMaterialeSpesaMov.DataRiferimento,
				PreQta						= 0,
				PreCosto					= 0,
				PreRicavo				    = 0,
				PreMargine					= 0,
				Qta							= xRDTicketMaterialeSpesaMov.Quantita,
				CostoTot					= xRDTicketMaterialeSpesaMov.CostoTotaleV,
				PrezzoTot				    = (CASE WHEN xRDTicketMaterialeSpesaMov.EsclusoDaVal = 0 THEN xRDTicketMaterialeSpesaMov.PrezzoTotaleV ELSE 0 END),
				Reparto						= ISNULL(xRDTicketMaterialeSpesaMov.Cd_xRDReparto,''),
				Reparto_Desc				= ISNULL(xRDReparto.Descrizione,''),
				GestisciTicket				= xRDTicket.GestisciTicket,
				Provv						= xRDTicketMaterialeSpesaMov.ValProvvigione
		FROM DOSottoCommessa
			INNER JOIN DoCommessa ON DoSottoCommessa.Cd_DOCommessa = DoCommessa.Cd_DOCommessa
			INNER JOIN xRDTicket ON DoSottoCommessa.Cd_DOSottoCommessa = xRDTicket.Cd_DOSottoCommessa
			LEFT JOIN DoSottoCommessa Inst ON xRDTicket.Cd_DOSottoCommessaInst = DOSottoCommessa.Cd_DOSottoCommessa
			INNER JOIN xRDTicketMaterialeSpesaMov ON xRDTicket.Id_xRDTicket = xRDTicketMaterialeSpesaMov.Id_xRDTicket AND Cd_xSpesa is null
			LEFT JOIN xOperatore ON xRDTicketMaterialeSpesaMov.Cd_xOperatore = xOperatore.Cd_xOperatore
			LEFT JOIN AR		ON xRDTicketMaterialeSpesaMov.CD_AR = AR.CD_AR
			LEFT JOIN xRDReparto ON xRDTicketMaterialeSpesaMov.Cd_xRDReparto = xRDReparto.Cd_xRDReparto
		WHERE xRDTicketMaterialeSpesaMov.Id_xRDTicketMaterialeSpesaMov NOT IN (SELECT DoRig.xId_xRDTicketMaterialeSpesaMov FROM DoRig WHERE DoRig.xId_xRDTicketMaterialeSpesaMov is Not Null)
			and xRDTicketMaterialeSpesaMov.Previsto = 0
		UNION
		-- preventivo materiali 
		SELECT 
				ID							= xPreventivoMateriale.Id_PreventivoMateriale,
				Provenienza					= 'P',
				CD_DOCommessa				= DoCommessa.Cd_DOCommessa,
				DoCommessa_Desc				= DoCommessa.Descrizione,
				CD_DoSottoCommessa			= DoSottoCommessa.CD_DoSottoCommessa,
				DoSottoCommessa_Desc		= DoSottoCommessa.Descrizione,
				CD_DoSottoCommessaInst		= '',
				DoSottoCommessaInst_Desc	= '',
				CD_CF						= DoSottoCommessa.CD_CF,
				CD_DO						= '',
				CD_AR						= xPreventivoMateriale.CD_AR,
				AR_Desc						= xPreventivoMateriale.Descrizione,
				Cd_ARGruppo1				= AR.Cd_ARGruppo1,
				Cd_ARGruppo2				= AR.Cd_ARGruppo2,
				CD_ARGruppo3				= AR.Cd_ARGruppo3,
				CD_ARItem					= ISNULL(xPreventivoMateriale.Cd_ARItem,''),
				ARItem_Desc					= ISNULL(xPreventivoMateriale.DescrizioneARItem,''),
				CD_ARMisura					= xPreventivoMateriale.Cd_ARMisura,
				Operatore					= null,
				Operatore_Desc				= null,
				Data						= null,
				PreQta						= xPreventivoMateriale.Quantita,
				PreCosto					= xPreventivoMateriale.CostoUnitarioV * xPreventivoMateriale.Quantita,
				--PreRicavo					= (CASE WHEN xPreventivo.ModelloVal = 'C' THEN xPreventivoMateriale.CostoTotaleV ELSE xPreventivoMateriale.RicavoTotaleV END),
				PreRicavo					= xPreventivoMateriale.PrezzoUnVenditaV * xPreventivoMateriale.Quantita,
				--PreMargine					= (CASE WHEN xPreventivo.ModelloVal = 'C' THEN xPreventivoMateriale.MargineCostoV ELSE xPreventivoMateriale.MargineRicavoV END),
				PreMargine					= (xPreventivoMateriale.PrezzoUnVenditaV - xPreventivoMateriale.CostoUnitarioV) * xPreventivoMateriale.Quantita,
				ConsQta						= 0,  
				CostoTot					= 0,
				PrezzoTot					= 0,
				Reparto						= '',
				Reparto_Desc				= '',
				GestisciTicket				= 0,
				Provv					    = 0
		FROM DoSottoCommessa
			INNER JOIN DoCommessa ON DoSottoCommessa.Cd_DOCommessa = DoCommessa.Cd_DOCommessa
			LEFT JOIN xPreventivo ON DoSottoCommessa.xCD_Preventivo = xPreventivo.CD_Preventivo
			INNER JOIN xPreventivoMateriale ON xPreventivo.Id_Preventivo = xPreventivoMateriale.Id_Preventivo
			LEFT JOIN AR		ON xPreventivoMateriale.CD_AR = AR.CD_AR
		WHERE xPreventivoMateriale.CD_AR is not null 
		UNION 
		-- preventivo gruppi materiali
		-- preventivo materiali 
		SELECT 
				ID							= xPreventivoGruppo.Id_PreventivoGruppo,
				Provenienza					= 'Q',
				CD_DOCommessa				= DoCommessa.Cd_DOCommessa,
				DoCommessa_Desc				= DoCommessa.Descrizione,
				CD_DoSottoCommessa			= DoSottoCommessa.CD_DoSottoCommessa,
				DoSottoCommessa_Desc		= DoSottoCommessa.Descrizione,
				CD_DoSottoCommessaInst		= '',
				DoSottoCommessaInst_Desc	= '',
				CD_CF						= DoSottoCommessa.CD_CF,
				CD_DO						= '',
				CD_AR						= '',
				AR_Desc						= '',
				Cd_ARGruppo1				= xPreventivoGruppo.Cd_ARGruppo1,
				Cd_ARGruppo2				= xPreventivoGruppo.Cd_ARGruppo2,
				CD_ARGruppo3				= xPreventivoGruppo.Cd_ARGruppo3,
				CD_ARItem					= '',
				ARItem_Desc					= '',
				CD_ARMisura					= null,
				Operatore					= null,
				Operatore_Desc				= null,	
				Data						= null,
				PreQta						= xPreventivoGruppo.Quantita,
				PreCosto					= xPreventivoGruppo.CostoUnitarioV * xPreventivoGruppo.Quantita,
				PreRicavo					= (CASE WHEN xPreventivo.ModelloVal = 'C' THEN xPreventivoGruppo.CostoTotaleV ELSE xPreventivoGruppo.RicavoTotaleV END),
				PreMargine					= (CASE WHEN xPreventivo.ModelloVal = 'C' THEN xPreventivoGruppo.MargineCostoV ELSE xPreventivoGruppo.MargineRicavoV END),
				ConsQta						= 0,  
				CostoTot					= 0,
				PrezzoTot					= 0,
				Reparto						= '',
				Reparto_Desc				= '',
				GestisciTicket				= 0,
				Provv						= 0
		FROM DoSottoCommessa
			INNER JOIN DoCommessa ON DoSottoCommessa.Cd_DOCommessa = DoCommessa.Cd_DOCommessa
			LEFT JOIN xPreventivo ON DoSottoCommessa.xCD_Preventivo = xPreventivo.CD_Preventivo
			INNER JOIN xPreventivoGruppo ON xPreventivo.Id_Preventivo = xPreventivoGruppo.Id_Preventivo
		WHERE xPreventivoGruppo.Cd_ARGruppo1 is not null 
)
GO

CREATE VIEW [dbo].[xSpeseEx]
As (
	
	-- consuntivo spese dai documenti
		SELECT 
		    ID								= DoRig.Id_DORig,
			Provenienza						= 'D',
			CD_DOCommessa					= DoCommessa.Cd_DOCommessa,
			DoCommessa_Desc					= DoCommessa.Descrizione,
			CD_DOSottoCommessa				= DoSottoCommessa.CD_DoSottoCommessa,
			DoSottoCommessa_Desc			= DoSottoCommessa.Descrizione,
			CD_DoSottoCommessaInst			= ISNULL(xRDTicket.Cd_DOSottoCommessaInst,''),
			DoSottoCommessaInst_Desc		= ISNULL(Inst.Descrizione,''),
			CD_CF							= DoSottoCommessa.CD_CF,
			CD_DO							= DoRig.CD_DO,
			CD_AR							= DoRig.CD_AR,
		    AR_Desc							= DoRig.Descrizione,
			Cd_ARGruppo1					= AR.Cd_ARGruppo1,
			Cd_ARGruppo2					= AR.Cd_ARGruppo2,
			CD_ARGruppo3					= AR.Cd_ARGruppo3,
			CD_ARItem						= ISNULL(DoRig.xCd_ARItem, ISNULL(xRDTicketMaterialeSpesaMov.Cd_ARItem,'')),
			ARItem_Desc						= ISNULL(DoRig.xDescrizioneARItem, ISNULL(xRDTicketMaterialeSpesaMov.DescrizioneARItem,'')),
		    Cd_ARMisura						= DoRig.Cd_ARMisura,
		    Operatore						= xRDTicketMaterialeSpesaMov.CD_xOperatore,
		    Operatore_Desc					= xOperatore.Descrizione,	
		    Data							= Isnull(DORig.RR_DataInizio, DoRig.DataDoc),
			PreQta							= 0 ,
			PreCosto						= 0 ,
			PreRicavo						= 0 ,
			PreMargine						= 0 ,
			Qta								= (CASE WHEN Do.xAECSegno = 1 THEN DoRig.QtaEvadibile ELSE DoRig.QtaEvadibile * -1 END) ,
			CostoTot						= CASE WHEN LEFT(DoRig.CD_CF,1) = 'C' THEN (CASE WHEN Do.xAECSegno = 1 THEN DoRig.QtaEvadibile * xCostoUnitarioE ELSE DoRig.QtaEvadibile * xCostoUnitarioE * -1 END)
											ELSE (CASE WHEN Do.xAECSegno = 1 THEN DoRig.PrezzoResiduoE ELSE DoRig.PrezzoResiduoE * -1 END) END,
			PrezzoTot						= CASE WHEN LEFT(DoRig.CD_CF,1) = 'C' THEN (CASE WHEN Do.xAECSegno = 1 THEN DoRig.PrezzoResiduoE ELSE DoRig.PrezzoResiduoE * -1 END) ELSE 0 END,
			Reparto							= ISNULL(DoRig.xCd_xRDReparto,''),
			Reparto_Desc					= ISNULL(xRDReparto.Descrizione,''),
			GestisciTicket					= xRDTicket.GestisciTicket,
			Provv						= (CASE WHEN Do.xAECSegno = 1 THEN ((ValProvvigione_1 + ValProvvigione_2)/Cambio) ELSE ((ValProvvigione_1 + ValProvvigione_2)/Cambio) * -1 END) 
				
		FROM DOSottoCommessa
			INNER JOIN DoCommessa ON DoSottoCommessa.Cd_DOCommessa = DoCommessa.Cd_DOCommessa
			INNER JOIN DoRig ON DOSottoCommessa.Cd_DOSottoCommessa = DoRig.Cd_DOSottoCommessa
			INNER JOIN Do ON Do.CD_DO = DoRig.CD_DO
			LEFT JOIN AR ON DoRig.CD_AR = AR.CD_AR
			LEFT JOIN xRDTicketMaterialeSpesaMov ON DoRig.xId_xRDTicketMaterialeSpesaMov = xRDTicketMaterialeSpesaMov.Id_xRDTicketMaterialeSpesaMov
			LEFT JOIN xRDTicket ON xRDTicketMaterialeSpesaMov.Id_xRDTicket = xRDTicket.Id_xRDTicket
			LEFT JOIN DOSottoCommessa Inst ON xRDTicket.Cd_DOSottoCommessaInst = DOSottoCommessa.Cd_DOSottoCommessa
			LEFT JOIN xOperatore ON xRDTicketMaterialeSpesaMov.Cd_xOperatore = xOperatore.Cd_xOperatore
			LEFT JOIN xRDReparto ON DoRig.xCd_xRDReparto = xRDReparto.Cd_xRDReparto
		WHERE 
			Do.xAECAttiva = 1
			--AND LEFT(DoRig.CD_CF,1) ='C'
			AND DoRig.CD_AR IN (SELECT Distinct CD_AR FROM xSpesa)
			
		UNION
		-- consuntivo spese dai ticket non trasformati in documenti    
		SELECT  
				ID								= xRDTicketMaterialeSpesaMov.ID_xRDTicketMaterialeSpesaMov,
				Provenienza						= 'R',
				CD_DOCommessa					= DoCommessa.Cd_DOCommessa,
				DoCommessa_Desc					= DoCommessa.Descrizione,
				CD_DOSottoCommessa				= DoSottoCommessa.CD_DoSottoCommessa,
				DoSottoCommessa_Desc			= DoSottoCommessa.Descrizione,
				CD_DoSottoCommessaInst			= ISNULL(xRDTicket.Cd_DOSottoCommessaInst,''),
				DoSottoCommessaInst_Desc		= ISNULL(Inst.Descrizione, ''),
				CD_CF							= DoSottoCommessa.CD_CF,
				CD_DO							= '',
				CD_AR							= xRDTicketMaterialeSpesaMov.CD_AR,
				AR_Desc							= xRDTicketMaterialeSpesaMov.Descrizione,
				Cd_ARGruppo1					= AR.Cd_ARGruppo1,
				Cd_ARGruppo2					= AR.Cd_ARGruppo2,
				CD_ARGruppo3					= AR.Cd_ARGruppo3,
				CD_ARItem					= ISNULL(xRDTicketMaterialeSpesaMov.Cd_ARItem,''),
				ARItem_Desc					= ISNULL(xRDTicketMaterialeSpesaMov.DescrizioneARItem,''),
				Cd_ARMisura						= xRDTicketMaterialeSpesaMov.Cd_ARMisura,
				Operatore						= xRDTicketMaterialeSpesaMov.CD_xOperatore,
				Operatore_Desc					= xOperatore.Descrizione,
				Data							= xRDTicketMaterialeSpesaMov.DataRiferimento,
				PreQta							= 0 ,
				PreCosto						= 0 ,
				PreRicavo						= 0 ,
				PreMargine						= 0 ,
				Qta								= xRDTicketMaterialeSpesaMov.Quantita,
				CostoTot						= xRDTicketMaterialeSpesaMov.CostoTotaleV,
				PrezzoTot						= (CASE WHEN xRDTicketMaterialeSpesaMov.EsclusoDaVal = 0 THEN xRDTicketMaterialeSpesaMov.PrezzoTotaleV ELSE 0 END),
				Reparto							= ISNULL(xRDTicketMaterialeSpesaMov.Cd_xRDReparto,''),
				Reparto_Desc					= ISNULL(xRDReparto.Descrizione,''),
				GestisciTicket					= xRDTicket.GestisciTicket,
				Provv							= xRDTicketMaterialeSpesaMov.ValProvvigione
		FROM DOSottoCommessa
			INNER JOIN DoCommessa ON DoSottoCommessa.Cd_DOCommessa = DoCommessa.Cd_DOCommessa
			INNER JOIN xRDTicket ON DoSottoCommessa.Cd_DOSottoCommessa = xRDTicket.Cd_DOSottoCommessa
			INNER JOIN xRDTicketMaterialeSpesaMov ON xRDTicket.Id_xRDTicket = xRDTicketMaterialeSpesaMov.Id_xRDTicket AND Cd_xSpesa is not null
			LEFT JOIN DoSottoCommessa Inst ON xRDTicket.Cd_DOSottoCommessaInst = DOSottoCommessa.Cd_DOSottoCommessa
			LEFT JOIN xOperatore ON xRDTicketMaterialeSpesaMov.Cd_xOperatore = xOperatore.Cd_xOperatore
			LEFT JOIN AR ON xRDTicketMaterialeSpesaMov.CD_AR = AR.CD_AR
			LEFT JOIN xRDReparto ON xRDTicketMaterialeSpesaMov.Cd_xRDReparto = xRDReparto.Cd_xRDReparto
		WHERE xRDTicketMaterialeSpesaMov.Id_xRDTicketMaterialeSpesaMov NOT IN (SELECT DoRig.xId_xRDTicketMaterialeSpesaMov FROM DoRig WHERE DoRig.xId_xRDTicketMaterialeSpesaMov is Not Null)
			and xRDTicketMaterialeSpesaMov.Previsto = 0
	UNION
		-- preventivo spese 
		SELECT 
			ID								= xPreventivoSpesa.Id_PreventivoSpesa,
			Provenienza						= 'P',
			CD_DOCommessa					= DoCommessa.Cd_DOCommessa,
			DoCommessa_Desc					= DoCommessa.Descrizione,
			CD_DOSottoCommessa				= DoSottoCommessa.CD_DoSottoCommessa,
			DoSottoCommessa_Desc			= DoSottoCommessa.Descrizione,
			CD_DoSottoCommessaInst			= '',
			DoSottoCommessaInst_Desc		= '',
			CD_CF							= DoSottoCommessa.CD_CF,
			CD_DO							= '',
			CD_AR							= xPreventivoSpesa.CD_AR,
			AR_Desc							= xPreventivoSpesa.Descrizione,
			Cd_ARGruppo1					= AR.Cd_ARGruppo1,
			Cd_ARGruppo2					= AR.Cd_ARGruppo2,
			CD_ARGruppo3					= AR.Cd_ARGruppo3,
			CD_ARItem						= ISNULL(xPreventivoSpesa.Cd_ARItem,''),
			ARItem_Desc						= ISNULL(xPreventivoSpesa.DescrizioneARItem,''),
			CD_ARMisura						= xPreventivoSpesa.Cd_ARMisura,
			Operatore						= null,
			Operatore_Desc					= null,
			Data							= null,
			PreQta							= xPreventivoSpesa.Quantita,
			PreCosto						= xPreventivoSpesa.CostoUnitarioV * xPreventivoSpesa.Quantita,
			--PreRicavo						= (CASE WHEN xPreventivo.ModelloVal = 'C' THEN xPreventivoSpesa.CostoTotaleV ELSE xPreventivoSpesa.RicavoTotaleV END),
			PreRicavo					    = xPreventivoSpesa.PrezzoUnVenditaV * xPreventivoSpesa.Quantita,
			--PreMargine						= (CASE WHEN xPreventivo.ModelloVal = 'C' THEN xPreventivoSpesa.MargineCostoV ELSE xPreventivoSpesa.MargineRicavoV END),
			PreMargine					    = (xPreventivoSpesa.PrezzoUnVenditaV - xPreventivoSpesa.CostoUnitarioV) * xPreventivoSpesa.Quantita,
			ConsQta							= 0 ,
			ConsCosto						= 0 ,
			ConsRicavo						= 0 ,
			Reparto							= '',
			Reparto_Desc					= '',
			GestisciTicket					= 0,
			Provv							= 0
		FROM DoSottoCommessa
			INNER JOIN DoCommessa ON DoSottoCommessa.Cd_DOCommessa = DoCommessa.Cd_DOCommessa
			LEFT JOIN xPreventivo ON DoSottoCommessa.xCD_Preventivo = xPreventivo.CD_Preventivo
			INNER JOIN xPreventivoSpesa ON xPreventivo.Id_Preventivo = xPreventivoSpesa.Id_Preventivo
			LEFT JOIN AR ON xPreventivoSpesa.CD_AR = AR.CD_AR
		WHERE xPreventivoSpesa.CD_AR is not null 
)
GO

Create View xRDTicketAttivitaInterventiEx As (
/* Questa vista serve per avere tutti gli interventi sia singoli che master con la somma della durata anche delle
   righe duplicate e con la lista degli operatori anche delle righe duplicate */
	Select
		*
		/* Subquery per calcolo della durata:
			Master con riga duplicata di tipo null	= la durata è uguale a se stesso
			Master e righe duplicate				= la durata è uguale a se stesso + durata figli
		*/
		, DurataIntervento = (Select Sum(Durata) 
										From xRDTicketAttivitaOperatore 
										/* dove l'identificativo dell'intervento è uguale al master */
										Where LTrim(Str(Id_xRDTicketAttivita)) + '_' + LTrim(Str(Case When RigaDuplicata Is Null Then Riga Else RigaDuplicata End)) = rdto_master.Id_xRdTicketIntervento)
			/* Subquery per concatenazione degli operatori */
		, Operatori			 = Stuff((Select ' - ' + Convert(Varchar, xOperatore.Descrizione)
										From xRDTicketAttivitaOperatore xRDOp
											  Left Join xOperatore On xRDOp.Cd_xOperatore = xOperatore.Cd_xOperatore
										/* dove l'identificativo dell'intervento è uguale al master */
										Where LTrim(Str(Id_xRDTicketAttivita)) + '_' + LTrim(Str(Case When RigaDuplicata Is Null Then Riga Else RigaDuplicata End)) = rdto_master.Id_xRdTicketIntervento
										For Xml Path('')),1,3,'')
		, NoteIntervento = Stuff((Select ' - ' + Convert(Varchar(max), xRDTicketAttivitaOperatore.NoteAttivitaOperatore)
										From xRDTicketAttivitaOperatore
										/* dove l'identificativo dell'intervento è uguale al master */
										Where LTrim(Str(Id_xRDTicketAttivita)) + '_' + LTrim(Str(Case When RigaDuplicata Is Null Then Riga Else RigaDuplicata End)) = rdto_master.Id_xRdTicketIntervento
										Order by Id_xRDTicketAttivitaOperatore
										For Xml Path(''), type).value('(./text())[1]','varchar(max)'),1,3,'')
	From 
			/* Solo gli interventi operatori di tipo master (sia singoli che collegati con righe duplicate)  */
			(Select *, Id_xRdTicketIntervento = LTrim(Str(Id_xRDTicketAttivita)) + '_' + LTrim(Str(Case When RigaDuplicata Is Null Then Riga Else RigaDuplicata End))
				From xRDTicketAttivitaOperatore
				Where Riga = (Case When RigaDuplicata Is Null Then Riga Else RigaDuplicata End)
			) As rdto_master
)
GO

-- calcolo residuo plafond periodico per le matricole
CREATE VIEW [dbo].[xContatoreLetturaRPPMEx]
As (
	Select Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C, Sum(ResiduoPP) As ResiduoPP
		From (
			Select Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C1 As Cd_AR_C, IsNull(Sum(ResiduoPP_C1), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C1 Is Not Null And Cd_AR Is Not Null And Cd_xMatricola Is Not Null
				Group By Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C1
			Union All
			Select Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C2 As Cd_AR_C, IsNull(Sum(ResiduoPP_C2), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C2 Is Not Null And Cd_AR Is Not Null And Cd_xMatricola Is Not Null
				Group By Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C2
			Union All
			Select Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C3 As Cd_AR_C, IsNull(Sum(ResiduoPP_C3), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C3 Is Not Null And Cd_AR Is Not Null And Cd_xMatricola Is Not Null
				Group By Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C3
			Union All
			Select Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C4 As Cd_AR_C, IsNull(Sum(ResiduoPP_C4), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C4 Is Not Null And Cd_AR Is Not Null And Cd_xMatricola Is Not Null
				Group By Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C4
			Union All
			Select Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C5 As Cd_AR_C, IsNull(Sum(ResiduoPP_C5), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C5 Is Not Null And Cd_AR Is Not Null And Cd_xMatricola Is Not Null
				Group By Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C5
			Union All
			Select Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C6 As Cd_AR_C, IsNull(Sum(ResiduoPP_C6), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C6 Is Not Null And Cd_AR Is Not Null And Cd_xMatricola Is Not Null
				Group By Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C6
			Union All
			Select Null, Null, Null, Null, 0 As ResiduoPP
		) A
		Group By Cd_xNoleggio, Cd_AR, Cd_xMatricola, Cd_AR_C
)
GO

-- calcolo residuo plafond periodico per gli impianti
CREATE VIEW [dbo].[xContatoreLetturaRPPIEx]
As (
	Select Cd_xNoleggio, Cd_xImpianto, Cd_AR_C, Sum(ResiduoPP) As ResiduoPP
		From (
			Select Cd_xNoleggio, Cd_xImpianto, Cd_AR_C1 As Cd_AR_C, IsNull(Sum(ResiduoPP_C1), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C1 Is Not Null And Cd_xImpianto Is Not Null
				Group By Cd_xNoleggio, Cd_xImpianto, Cd_AR_C1
			Union All
			Select Cd_xNoleggio, Cd_xImpianto, Cd_AR_C2 As Cd_AR_C, IsNull(Sum(ResiduoPP_C2), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C2 Is Not Null And Cd_xImpianto Is Not Null
				Group By Cd_xNoleggio, Cd_xImpianto, Cd_AR_C2
			Union All
			Select Cd_xNoleggio, Cd_xImpianto, Cd_AR_C3 As Cd_AR_C, IsNull(Sum(ResiduoPP_C3), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C3 Is Not Null And Cd_xImpianto Is Not Null
				Group By Cd_xNoleggio, Cd_xImpianto, Cd_AR_C3
			Union All
			Select Cd_xNoleggio, Cd_xImpianto, Cd_AR_C4 As Cd_AR_C, IsNull(Sum(ResiduoPP_C4), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C4 Is Not Null And Cd_xImpianto Is Not Null
				Group By Cd_xNoleggio, Cd_xImpianto, Cd_AR_C4
			Union All
			Select Cd_xNoleggio, Cd_xImpianto, Cd_AR_C5 As Cd_AR_C, IsNull(Sum(ResiduoPP_C5), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C5 Is Not Null And Cd_xImpianto Is Not Null
				Group By Cd_xNoleggio, Cd_xImpianto, Cd_AR_C5
			Union All
			Select Cd_xNoleggio, Cd_xImpianto, Cd_AR_C6 As Cd_AR_C, IsNull(Sum(ResiduoPP_C6), 0) As ResiduoPP
				From xContatoreLettura
				Where Cd_AR_C6 Is Not Null And Cd_xImpianto Is Not Null
				Group By Cd_xNoleggio, Cd_xImpianto, Cd_AR_C6
			Union All
			Select Null, Null, Null, 0 As ResiduoPP
		) A
		Group By Cd_xNoleggio, Cd_xImpianto, Cd_AR_C
)
GO

-- stampe e statistiche gestione noleggi
CREATE VIEW [dbo].[xNoleggioMatricolaEx] as 
	SELECT	Id_xNoleggio
			, Id_xNoleggioMatricola
			, Riga
			, Cd_AR	
			, Cd_xMatricola
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= Cd_AR_C1
			, Cd_ARMisura		= Cd_ARMisura_C1
			, Prezzo			= Prezzo_C1
			, PlafondIniziale	= PlafondIniziale_C1
			, PlafondPeriodico	= PlafondPeriodico_C1
			, FattoreMksFattura = FattoreMksFattura_C1
			, FattoreMksPlafond = FattoreMksPlafond_C1
			, LetturaPartenza	= LetturaPartenza_C1
	FROM xNoleggioMatricola
	WHERE Cd_AR_C1 is not null
	UNION
	SELECT Id_xNoleggio
			, Id_xNoleggioMatricola
			, Riga
			, Cd_AR	
			, Cd_xMatricola
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= CD_AR_C2
			, Cd_ARMisura		= Cd_ARMisura_C1
			, Prezzo			= Prezzo_C2
			, PlafondIniziale	= PlafondIniziale_C2
			, PlafondPeriodico	= PlafondPeriodico_C2
			, FattoreMksFattura = FattoreMksFattura_C2
			, FattoreMksPlafond = FattoreMksPlafond_C2
			, LetturaPartenza	= LetturaPartenza_C2
	FROM xNoleggioMatricola
	WHERE Cd_AR_C2 is not null
	UNION
	SELECT Id_xNoleggio
			, Id_xNoleggioMatricola
			, Riga
			, Cd_AR	
			, Cd_xMatricola
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= CD_AR_C3
			, Cd_ARMisura		= Cd_ARMisura_C3
			, Prezzo			= Prezzo_C3
			, PlafondIniziale	= PlafondIniziale_C3
			, PlafondPeriodico	= PlafondPeriodico_C3
			, FattoreMksFattura = FattoreMksFattura_C3
			, FattoreMksPlafond = FattoreMksPlafond_C3
			, LetturaPartenza	= LetturaPartenza_C3
	FROM xNoleggioMatricola
	WHERE Cd_AR_C3 is not null
	UNION
	SELECT Id_xNoleggio
			, Id_xNoleggioMatricola
			, Riga
			, Cd_AR	
			, Cd_xMatricola
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= CD_AR_C4
			, Cd_ARMisura		= Cd_ARMisura_C4
			, Prezzo			= Prezzo_C4
			, PlafondIniziale	= PlafondIniziale_C4
			, PlafondPeriodico	= PlafondPeriodico_C4
			, FattoreMksFattura = FattoreMksFattura_C4
			, FattoreMksPlafond = FattoreMksPlafond_C4
			, LetturaPartenza	= LetturaPartenza_C4
	FROM xNoleggioMatricola
	WHERE Cd_AR_C4 is not null
	UNION
	SELECT Id_xNoleggio
			, Id_xNoleggioMatricola
			, Riga
			, Cd_AR	
			, Cd_xMatricola
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= CD_AR_C5
			, Cd_ARMisura		= Cd_ARMisura_C5
			, Prezzo			= Prezzo_C5
			, PlafondIniziale	= PlafondIniziale_C5
			, PlafondPeriodico	= PlafondPeriodico_C5
			, FattoreMksFattura = FattoreMksFattura_C5
			, FattoreMksPlafond = FattoreMksPlafond_C5
			, LetturaPartenza	= LetturaPartenza_C5
	FROM xNoleggioMatricola
	WHERE Cd_AR_C5 is not null
	UNION
	SELECT Id_xNoleggio
			, Id_xNoleggioMatricola
			, Riga
			, Cd_AR	
			, Cd_xMatricola
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= CD_AR_C6
			, Cd_ARMisura		= Cd_ARMisura_C6
			, Prezzo			= Prezzo_C6
			, PlafondIniziale	= PlafondIniziale_C6
			, PlafondPeriodico	= PlafondPeriodico_C6
			, FattoreMksFattura = FattoreMksFattura_C6
			, FattoreMksPlafond = FattoreMksPlafond_C6
			, LetturaPartenza	= LetturaPartenza_C6
	FROM xNoleggioMatricola
	WHERE Cd_AR_C6 is not null
GO

-- stampe e statistiche gestione noleggi
CREATE VIEW [dbo].[xNoleggioImpiantoEx] as 
	SELECT	Id_xNoleggio
			, Id_xNoleggioImpianto
			, Riga
			, Cd_xImpianto	
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= Cd_AR_C1
			, Cd_ARMisura		= Cd_ARMisura_C1
			, Prezzo			= Prezzo_C1
			, PlafondIniziale	= PlafondIniziale_C1
			, PlafondPeriodico	= PlafondPeriodico_C1
			, FattoreMksFattura = FattoreMksFattura_C1
			, FattoreMksPlafond = FattoreMksPlafond_C1
			, LetturaPartenza	= LetturaPartenza_C1
	FROM xNoleggioImpianto
	WHERE Cd_AR_C1 is not null
	UNION
	SELECT Id_xNoleggio
			, Id_xNoleggioImpianto
			, Riga
			, Cd_xImpianto	
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= CD_AR_C2
			, Cd_ARMisura		= Cd_ARMisura_C1
			, Prezzo			= Prezzo_C2
			, PlafondIniziale	= PlafondIniziale_C2
			, PlafondPeriodico	= PlafondPeriodico_C2
			, FattoreMksFattura = FattoreMksFattura_C2
			, FattoreMksPlafond = FattoreMksPlafond_C2
			, LetturaPartenza	= LetturaPartenza_C2
	FROM xNoleggioImpianto
	WHERE Cd_AR_C2 is not null
	UNION
	SELECT Id_xNoleggio
			, Id_xNoleggioImpianto
			, Riga
			, Cd_xImpianto	
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= CD_AR_C3
			, Cd_ARMisura		= Cd_ARMisura_C3
			, Prezzo			= Prezzo_C3
			, PlafondIniziale	= PlafondIniziale_C3
			, PlafondPeriodico	= PlafondPeriodico_C3
			, FattoreMksFattura = FattoreMksFattura_C3
			, FattoreMksPlafond = FattoreMksPlafond_C3
			, LetturaPartenza	= LetturaPartenza_C3
	FROM xNoleggioImpianto
	WHERE Cd_AR_C3 is not null
	UNION
	SELECT Id_xNoleggio
			, Id_xNoleggioImpianto
			, Riga
			, Cd_xImpianto	
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= CD_AR_C4
			, Cd_ARMisura		= Cd_ARMisura_C4
			, Prezzo			= Prezzo_C4
			, PlafondIniziale	= PlafondIniziale_C4
			, PlafondPeriodico	= PlafondPeriodico_C4
			, FattoreMksFattura = FattoreMksFattura_C4
			, FattoreMksPlafond = FattoreMksPlafond_C4
			, LetturaPartenza	= LetturaPartenza_C4
	FROM xNoleggioImpianto
	WHERE Cd_AR_C4 is not null
	UNION
	SELECT Id_xNoleggio
			, Id_xNoleggioImpianto
			, Riga
			, Cd_xImpianto	
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= CD_AR_C5
			, Cd_ARMisura		= Cd_ARMisura_C5
			, Prezzo			= Prezzo_C5
			, PlafondIniziale	= PlafondIniziale_C5
			, PlafondPeriodico	= PlafondPeriodico_C5
			, FattoreMksFattura = FattoreMksFattura_C5
			, FattoreMksPlafond = FattoreMksPlafond_C5
			, LetturaPartenza	= LetturaPartenza_C5
	FROM xNoleggioImpianto
	WHERE Cd_AR_C5 is not null
	UNION
	SELECT Id_xNoleggio
			, Id_xNoleggioImpianto
			, Riga
			, Cd_xImpianto	
			, CD_CF
			, Cd_CFDest
			, DataInizio
			, DataFine
			, Disattiva
			, Rinnovato
			, QuotaFissaNoleggio
			, FattoreMksQFNoleggio
			, QuotaFissaPlafond
			, FattoreMksQFPlafond
			, CD_AR_C			= CD_AR_C6
			, Cd_ARMisura		= Cd_ARMisura_C6
			, Prezzo			= Prezzo_C6
			, PlafondIniziale	= PlafondIniziale_C6
			, PlafondPeriodico	= PlafondPeriodico_C6
			, FattoreMksFattura = FattoreMksFattura_C6
			, FattoreMksPlafond = FattoreMksPlafond_C6
			, LetturaPartenza	= LetturaPartenza_C6
	FROM xNoleggioImpianto
	WHERE Cd_AR_C6 is not null
GO

CREATE VIEW [dbo].[xPreventivoNota] AS
	Select Id_Nota, Cd_Nota, Descrizione, Note, UserIns, UserUpd, TimeIns, TimeUpd, Ts
	From Nota
	Where UsedBy = 'xPREVENTIVO'
GO

/* Gestione dei Permessi */
/* 18/01/2012 */
-- Procedure
Grant Execute On xasp_DORig_CreaMatricola														To Public
Grant Execute On xasp_DORig_CreaMatricola_Ext												To Public
Grant Execute On xasp_gac_contratto																	To Public
Grant Execute On xasp_gac_getnextnum																To Public
Grant Execute On xasp_gac_getnextnum_preventivo											To Public
Grant Execute On xasp_gac_xmm1_fill																	To Public
Grant Execute On xasp_Ticket_GeneraDoc															To Public
Grant Execute On xasp_xRDTicketAttivitaMov_Operatore								To Public
Grant Execute On xasp_DOTes_UpdateMatricola													To Public
Grant Execute On xasp_DOTes_UpdateMatricola_Ext											To Public
Grant Execute On xasp_cca_rlelabora																	To Public
Grant Execute On xasp_cca_rlvalorizza																To Public
Grant Execute On xasp_xRDTicketAttivita_Operatore_Disp							To Public
Grant Execute On xasp_xRDTicketAttivita_UpdateMatricola							To Public
Grant Execute On xasp_xRDTicketAttivita_UpdateContratto							To Public
Grant Execute On xasp_xRDTicketAttivita_UpdateContratto_Dismissione To Public
Grant Execute On xasp_xRDTicketAttivita_UpdateMatricola_Ext					To Public
Grant Execute on xasp_xRDTicketAttivita_UpdateInterventoProg				To public
Grant Execute On xasp_cca_noleggiosviluppo													To Public
Grant Execute On xasp_cca_noleggiosviluppo_p2												To Public
Grant Execute On xasp_DORig_CheckSottoCommessa											To Public
Grant Execute On xasp_cca_RLSalva                                   To Public
Grant Execute On xasp_cca_2impelabora	                              To Public
Grant Execute On xasp_cca_2impvalorizza	                            To Public
-- Funzioni
-- A livello di tabella
Grant Select On dbo.xGAC_GetSconto															To Public
Grant Select On dbo.xGAC_RDTicket_Valorizzazione								To Public
Grant Select On dbo.xGAC_RDTicket_Valorizzazione_Attivita				To Public
Grant Select On dbo.xGAC_RDTicket_Valorizzazione_Attivita_DD		To Public
Grant Select On dbo.xGAC_RDTicket_Valorizzazione_Materiale			To Public
Grant Select On dbo.xGAC_RDTicket_Valorizzazione_Spesa					To Public
Grant Select On dbo.xGAC_GetPlafondResiduo											To Public
Grant Select On dbo.xGAC_PROrdImp																To Public
Grant Select On dbo.xGAC_MGDispEx																To Public
Grant Select On dbo.xGAC_MGDispEx_AR														To Public
Grant Select On dbo.xGAC_MGDispEx_Commessa_Full									To Public
Grant Select On dbo.xGAC_MGDispEx_Sottocommessa_Full						To Public
Grant Select On dbo.xGAC_RDTicketAttivita_Operatore_All					To Public
Grant Select On dbo.xGAC_RDTicketAttivita_Operatore_All_Risorsa	To Public
Grant Select On dbo.xGAC_RDTicketAttivita_Operatore_Imp					To Public
Grant Select On dbo.xGAC_RDTicketAttivita_Operatore_Imp_Risorsa	To Public
Grant Select On dbo.xGAC_RDTicketAttivita_RisorsaOperatore			To Public
-- Scalari
Grant Execute On dbo.xafn_GAC_GetPrimoOrdineBySottoCommessa				To Public
Grant Execute On dbo.xafn_GAC_GetSconto														To Public
Grant Execute On dbo.xafn_GAC_RDTicketAttivita_GetStmt4ClientData	To Public
Grant Execute On dbo.xafn_cca_noleggiofattura_get_ds_scadenza	    To Public
Grant Execute On dbo.xafn_cca_noleggiofattura_get_importo	        To Public
Grant Execute On dbo.xafn_GetDataChiusuraDaUltimoTicket						To Public
Grant Execute On dbo.xafn_cca_noleggiofattura_check_qfp						To Public
Grant Execute On dbo.xafn_cca_contatore_get_ul										To Public
Grant Execute On dbo.xafn_cca_noleggiofattura_get_evasione	      To Public
Grant Execute On dbo.xafn_ccan_GetImportoContratto	      To Public
-- View
Grant Select On dbo.xPreventivoFamigliaEx					To Public
Grant Select On dbo.xPreventivoEx									To Public
Grant Select On dbo.xPreventivoEuroEx							To Public
Grant Select On dbo.xDOCommessaEx									To Public
Grant Select On dbo.xDOSottoCommessaEx						To Public
Grant Select On dbo.xRDTicketEx										To Public
Grant Select On dbo.xLavorazioniEx								To Public
Grant Select On dbo.xMaterialiEx									To Public
Grant Select On dbo.xSpeseEx											To Public
Grant Select On dbo.xRDTicketAttivitaInterventiEx	To Public
Grant Select On dbo.xContatoreLetturaRPPMEx				To Public
Grant Select On dbo.xContatoreLetturaRPPIEx				To Public
Grant Select On dbo.xNoleggioMatricolaEx   				To Public
Grant Select On dbo.xNoleggioImpiantoEx   				To Public
Grant Select On dbo.xPreventivoNota   					To Public
GO

exec asp_du_RefreshViews
go

--------------------------------------------------------------------------------------------------------------------------
IF EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID('dbo.xGACVersion')) BEGIN
	-- Fine aggiornamento, rileggo la versione cui sono arrivato
	declare @currentVersion varchar(10)
	select top 1 @currentVersion = rtrim(ltrim(dbfullversion)) from xGACVersion order by dbversion desc, dbsubversion desc
	select 'Il database è aggiornato alla (v' + isnull(@currentVersion, '') + ').'
end else
	select N'Errore! La tabella xGACVersion non esiste!'
Go
--------------------------------------------------------------------------------------------------------------------------